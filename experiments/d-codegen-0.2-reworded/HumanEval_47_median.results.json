{
  "name": "HumanEval_47_median",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n",
  "tests": "unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    \n    int i = n/2;\n    if (n%2 == 0) {\n        return (l[i-1] + l[i])/2.0;\n    } else {\n        return l[i];\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpbcy5thpd.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbcy5thpd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    sort(l2);\n    \n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpgbfhnr00.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpgbfhnr00.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbfhnr00.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    \n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    \n    l2 = sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpp3a3df7e.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmpp3a3df7e.d(22): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp3a3df7e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n / 2)\n            l2[i - 1] = l[j];\n        else if (j < n / 2) {\n            l2[i] = l[j];\n            i++;\n        }\n    }\n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp0qm2baco.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp0qm2baco.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0qm2baco.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    \n    long[] l3 = new long[n / 2];\n    for (int i = n / 2; i < n; i++)\n        l3[i - n / 2] = l[i];\n    \n    return (median(l2) + median(l3)) / 2;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp7nsazkrq.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7nsazkrq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    System.arraycopy(l, 0, l2, 0, l.length);\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp5njjt1jl.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmp5njjt1jl.d(18): Error: undefined identifier `System`\n/tmp/tmp5njjt1jl.d(19): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5njjt1jl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    \n    return (median(l2) + median(l3)) / 2;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpzymsb91s.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpzymsb91s.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzymsb91s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp17liix6y.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmp17liix6y.d(16): Error: no property `clone` for type `long[]`\n/tmp/tmp17liix6y.d(17): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp17liix6y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp8z35q_7m.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp8z35q_7m.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmp8z35q_7m.d(21): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8z35q_7m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    \n    int i = (n - 1) / 2;\n    int j = n - i - 1;\n    long a = l[i];\n    long b = l[j];\n    if (a > b)\n        return b;\n    else\n        return a;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmps3h57olq.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmps3h57olq.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps3h57olq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2;\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    long[] l4 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l4[i] = l[n / 2 - i];\n    long[] l5 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l5[i] = l[n / 2 + i];\n    long[] l6 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l6[i] = l[n / 2 - i];\n    long[] l7 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l7[i] = l[n / 2 + i];\n    long[] l8 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l8[i] = l[n / 2 - i];\n    long[] l9 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l9[i] = l[n / 2 + i];\n    long[] l10 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l10[i] = l[n / 2 - i];\n    long[] l11 = new long[n / 2];\n    for (int i = 0;\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp4m674x8l.d(49): Error: expression expected, not `unittest`\n/tmp/tmp4m674x8l.d(50): Error: found `{` when expecting `;` following `for` condition\n/tmp/tmp4m674x8l.d(51): Error: expression expected, not `alias`\n/tmp/tmp4m674x8l.d(51): Error: found `candidate` when expecting `)`\n/tmp/tmp4m674x8l.d(51): Error: found `=` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4m674x8l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpn89zuahf.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpn89zuahf.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmpn89zuahf.d(21): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn89zuahf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    \n    long[] l3 = new long[n];\n    for (int i = 0; i < n; i++) l3[i] = l2[i];\n    \n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l2[i] < l2[j]) {\n            long t = l2[i];\n            l2[i] = l2[j];\n            l2[j] = t;\n        }\n        i++;\n        j--;\n    }\n    \n    if (n % 2 == 1) return l2[n / 2];\n    \n    long m = l2[n / 2 - 1] + l2[n / 2];\n    return (m - l2[n / 2]) / 2;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpcxt2ikfc.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcxt2ikfc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    int j = n / 2;\n    while (i < n) {\n        l2[j] = l[i];\n        i++;\n        j++;\n    }\n    return (float)median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpz36pvqyx.d(28): Error: C style cast illegal, use `cast(float)median(l2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz36pvqyx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpnujpao30.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpnujpao30.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmpnujpao30.d(21): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnujpao30.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    \n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l2[i] < l2[j]) {\n            long t = l2[i];\n            l2[i] = l2[j];\n            l2[j] = t;\n        }\n        i++;\n        j--;\n    }\n    \n    if (n % 2 == 0) {\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n    }\n    else {\n        return l2[n / 2];\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp4_9aulq6.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_9aulq6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty list\");\n    \n    long[] l2 = l.clone();\n    Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmphwgv6_g3.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmphwgv6_g3.d(16): Error: no property `clone` for type `long[]`\n/tmp/tmphwgv6_g3.d(17): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphwgv6_g3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new IllegalArgumentException(\"median of empty list\");\n    if (l.length == 1)\n        return l[0];\n    \n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    \n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpb9x5jcvh.d(14): Error: undefined identifier `IllegalArgumentException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb9x5jcvh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    if (n % 2 == 0)\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    else\n        return l[n / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp3orbn9mg.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp3orbn9mg.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3orbn9mg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp34ealmcl.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp34ealmcl.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmp34ealmcl.d(21): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp34ealmcl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        return 0;\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    l2 = l2.sort();\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpw6gsh_rs.d(20): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw6gsh_rs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpxv13rx6y.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmpxv13rx6y.d(17): Error: no property `clone` for type `long[]`\n/tmp/tmpxv13rx6y.d(18): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxv13rx6y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    Arrays.sort(l2);\n    if (n % 2 == 0)\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n    else\n        return l2[n / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpu31biv9d.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpu31biv9d.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmpu31biv9d.d(21): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu31biv9d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 0)\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n    else\n        return l2[n / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmplkrohdrp.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmplkrohdrp.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmplkrohdrp.d(21): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplkrohdrp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    if (l.length == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 0)\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n    return l2[l2.length / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmprvt31xph.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmprvt31xph.d(22): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprvt31xph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp34ealmcl.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp34ealmcl.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmp34ealmcl.d(21): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp34ealmcl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    long[] l2 = l.clone();\n    Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    \n    return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpmifoiqyd.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmpmifoiqyd.d(16): Error: no property `clone` for type `long[]`\n/tmp/tmpmifoiqyd.d(17): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmifoiqyd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n - 1 - i];\n    long m1 = median(l2);\n    long m2 = median(l3);\n    return (float) ((m1 + m2) / 2.0);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp8_tx_mz9.d(26): Error: C style cast illegal, use `cast(float)((m1 + m2) / 2.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_tx_mz9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpzo74zkiv.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpzo74zkiv.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmpzo74zkiv.d(21): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzo74zkiv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1) return l2[n/2];\n    return (l2[n/2] + l2[n/2-1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmphttcutkc.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmphttcutkc.d(18): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphttcutkc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty list\");\n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 0)\n        return (float) (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2;\n    else\n        return l2[l2.length / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp618pbywn.d(18): Error: C style cast illegal, use `cast(float)(l2[l2.length / 2] + l2[l2.length / 2 - 1])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp618pbywn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpdk6qucll.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmpdk6qucll.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpdk6qucll.d(16): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdk6qucll.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    if (l.length == 1)\n        return l[0];\n    \n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    \n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpvzsfuc85.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvzsfuc85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp34ealmcl.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp34ealmcl.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmp34ealmcl.d(21): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp34ealmcl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    long[] l2 = l.clone();\n    Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpg85a586z.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmpg85a586z.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpg85a586z.d(16): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg85a586z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    sort(l2);\n    \n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmplysg4jc2.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmplysg4jc2.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmplysg4jc2.d(23): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplysg4jc2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n/2)\n            l2[i++] = l[j];\n        else if (l[j] < l2[i])\n            l2[i++] = l[j];\n    }\n    long m = l2[i/2];\n    if (i % 2 == 0)\n        return (float)m;\n    else\n        return (float)(m + l2[i/2 - 1])/2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmppnq0y6ik.d(28): Error: C style cast illegal, use `cast(float)m`\n/tmp/tmppnq0y6ik.d(30): Error: C style cast illegal, use `cast(float)(m + l2[i / 2 - 1])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppnq0y6ik.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = n / 2; i < n; i++)\n        l3[i - n / 2] = l[i];\n    \n    return (median(l2) + median(l3)) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpywgpun6w.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpywgpun6w.d(15): Error: undefined identifier `IllegalArgumentException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpywgpun6w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    l2 = l2.sort();\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpgxskoa5x.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmpgxskoa5x.d(20): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgxskoa5x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpwzkon7t8.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpwzkon7t8.d(19): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwzkon7t8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n/2];\n    for (int i = n/2; i < n; i++)\n        l3[i-n/2] = l[i];\n    return (float)median(l2) + (float)median(l3);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpqj49s3p2.d(24): Error: C style cast illegal, use `cast(float)median(l2)`\n/tmp/tmpqj49s3p2.d(24): Error: C style cast illegal, use `cast(float)median(l3)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqj49s3p2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    long[] l2 = l.clone();\n    Arrays.sort(l2);\n    \n    if (l2.length % 2 == 0)\n        return (float) ((l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2);\n    else\n        return (float) l2[l2.length / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpu28tburu.d(20): Error: C style cast illegal, use `cast(float)((l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2)`\n/tmp/tmpu28tburu.d(22): Error: C style cast illegal, use `cast(float)l2[l2.length / 2]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu28tburu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n - n / 2];\n    for (int i = 0; i < n - n / 2; i++)\n        l3[i] = l[i + n / 2];\n    \n    return (median(l2) + median(l3)) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmplb19urqf.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmplb19urqf.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplb19urqf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l3[i] = l[i+n/2];\n    return (float)median(l2) + (float)median(l3);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpf0z9xmj2.d(24): Error: C style cast illegal, use `cast(float)median(l2)`\n/tmp/tmpf0z9xmj2.d(24): Error: C style cast illegal, use `cast(float)median(l3)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf0z9xmj2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    long[] l1 = new long[n/2];\n    long[] l2 = new long[n - n/2];\n    for (int i = 0; i < n; i++) {\n        if (i < n/2) l1[i] = l[i];\n        else l2[i - n/2] = l[i];\n    }\n    \n    long m1 = median(l1);\n    long m2 = median(l2);\n    return (m1 + m2) / 2;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpdfmc3aah.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpdfmc3aah.d(25): Error: cannot implicitly convert expression `median(l1)` of type `float` to `long`\n/tmp/tmpdfmc3aah.d(26): Error: cannot implicitly convert expression `median(l2)` of type `float` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdfmc3aah.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    l2 = l2.sort();\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpgxskoa5x.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmpgxskoa5x.d(20): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgxskoa5x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new IllegalArgumentException(\"median of empty list\");\n    \n    if (l.length == 1)\n        return l[0];\n    \n    long[] l2 = new long[l.length];\n    System.arraycopy(l, 0, l2, 0, l.length);\n    \n    Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpcjmmqct2.d(14): Error: undefined identifier `IllegalArgumentException`\n/tmp/tmpcjmmqct2.d(20): Error: undefined identifier `System`\n/tmp/tmpcjmmqct2.d(22): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcjmmqct2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp3ltuyntw.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp3ltuyntw.d(15): Error: undefined identifier `IllegalArgumentException`\n/tmp/tmp3ltuyntw.d(21): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ltuyntw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2;\n    \n    long[] l1 = new long[n / 2];\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n; i++) {\n        if (i < n / 2)\n            l1[i] = l[i];\n        else\n            l2[i - n / 2] = l[i];\n    }\n    return (median(l1) + median(l2)) / 2;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp_3lohr93.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp_3lohr93.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_3lohr93.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpj24zpi0q.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpj24zpi0q.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj24zpi0q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    System.arraycopy(l, 0, l2, 0, n);\n    Arrays.sort(l2);\n    return l2[n/2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpwpojnr3b.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpwpojnr3b.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmpwpojnr3b.d(20): Error: undefined identifier `System`\n/tmp/tmpwpojnr3b.d(21): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwpojnr3b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp9so3785o.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp9so3785o.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmp9so3785o.d(21): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9so3785o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new Error(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp8tphrt7g.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp8tphrt7g.d(21): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8tphrt7g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpgzowb5xr.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpgzowb5xr.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgzowb5xr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l3[i] = l[i+n/2];\n    return (float) (median(l2) + median(l3)) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpbx4_3p2w.d(24): Error: C style cast illegal, use `cast(float)(median(l2) + median(l3))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbx4_3p2w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    int i = n / 2;\n    int j = n - i;\n    long a = l[i];\n    long b = l[j];\n    \n    if (a > b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    if (n % 2 == 0) return (a + b) / 2;\n    else return a;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp167vjcvk.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp167vjcvk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n/2];\n    else\n        return (l2[n/2-1] + l2[n/2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp4a50byqk.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp4a50byqk.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmp4a50byqk.d(21): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4a50byqk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty list\");\n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    return (float)l2[l2.length/2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpb4w32bai.d(17): Error: C style cast illegal, use `cast(float)l2[l2.length / 2]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb4w32bai.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    System.arraycopy(l, 0, l2, 0, n);\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpmyv2qzk4.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpmyv2qzk4.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmpmyv2qzk4.d(19): Error: undefined identifier `System`\n/tmp/tmpmyv2qzk4.d(20): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmyv2qzk4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new Error(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp_8ngymey.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_8ngymey.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpbbib7vb_.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpbbib7vb_.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbbib7vb_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n - n / 2];\n    for (int i = 0; i < n - n / 2; i++)\n        l3[i] = l[i + n / 2];\n    long[] l4 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l4[i] = l[i];\n    long[] l5 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l5[i] = l[i + n / 2];\n    long[] l6 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l6[i] = l[i];\n    long[] l7 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l7[i] = l[i + n / 2];\n    long[] l8 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l8[i] = l[i];\n    long[] l9 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l9[i] = l[i + n / 2];\n    long[] l10 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l10[i] = l[i];\n    long[] l11 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpqxoui1z_.d(50): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqxoui1z_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    long[] l2 = l.clone();\n    Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpg85a586z.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmpg85a586z.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpg85a586z.d(16): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg85a586z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    long[] l2 = l.clone();\n    Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmptc8vss7f.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmptc8vss7f.d(16): Error: no property `clone` for type `long[]`\n/tmp/tmptc8vss7f.d(17): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptc8vss7f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmph5itln4g.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmph5itln4g.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph5itln4g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l3[i] = l[i+n/2];\n    return (float) (median(l2) + median(l3)) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpd7lj_t6z.d(24): Error: C style cast illegal, use `cast(float)(median(l2) + median(l3))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7lj_t6z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l3[i] = l[n/2 + i];\n    return (float) (median(l2) + median(l3)) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpf2rm742u.d(24): Error: C style cast illegal, use `cast(float)(median(l2) + median(l3))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf2rm742u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n - n / 2];\n    for (int i = 0; i < n - n / 2; i++)\n        l3[i] = l[i + n / 2];\n    return (median(l2) + median(l3)) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpd3irsrks.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpd3irsrks.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd3irsrks.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    int i = 0;\n    for (int j = 0; j < n; j++)\n        if (i < n/2)\n            l2[i++] = l[j];\n    Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n/2];\n    else\n        return (l2[n/2-1] + l2[n/2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmplm8z9trn.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmplm8z9trn.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmplm8z9trn.d(23): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplm8z9trn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    int i = n / 2;\n    if (n % 2 == 0)\n        return (l[i - 1] + l[i]) / 2.0;\n    return l[i];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp8gsb4ust.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp8gsb4ust.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gsb4ust.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new Error(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpbi40522y.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpbi40522y.d(21): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbi40522y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    l = l2;\n    Arrays.sort(l);\n    if (n % 2 == 1)\n        return l[n / 2];\n    else\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpzukrna8a.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpzukrna8a.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmpzukrna8a.d(22): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzukrna8a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    long[] l3 = l2.clone();\n    \n    Arrays.sort(l3);\n    \n    if (n % 2 == 1)\n        return l3[n / 2];\n    else\n        return (l3[n / 2 - 1] + l3[n / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpeao4tur6.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpeao4tur6.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmpeao4tur6.d(23): Error: no property `clone` for type `long[]`\n/tmp/tmpeao4tur6.d(25): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeao4tur6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    return (median(l2) + median(l3)) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpcu2jt7o7.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpcu2jt7o7.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcu2jt7o7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0.0f;\n    if (n == 1) return l[0];\n    \n    int i = n / 2;\n    if (n % 2 == 0)\n        return (l[i - 1] + l[i]) / 2.0f;\n    else\n        return l[i];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp4pzhttyc.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4pzhttyc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++)\n        if (i < n / 2)\n            l2[i++] = l[j];\n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpo7xesh4z.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpo7xesh4z.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo7xesh4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty list\");\n    long[] l2 = l.clone();\n    Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpqwdgu9lt.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmpqwdgu9lt.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpqwdgu9lt.d(16): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqwdgu9lt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    Arrays.sort(l2);\n    \n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp0plvmoa3.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp0plvmoa3.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmp0plvmoa3.d(25): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0plvmoa3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n / 2)\n            l2[i++] = l[j];\n        else if (l[j] < l2[i])\n            l2[i++] = l[j];\n    }\n    if (i == n / 2)\n        return l2[i / 2];\n    else\n        return (l2[i - 1] + l2[i]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp8tmgl0jo.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp8tmgl0jo.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8tmgl0jo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    int i = n / 2;\n    if (n % 2 == 0) return (l[i] + l[i - 1]) / 2;\n    else return l[i];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpaxd8j78k.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaxd8j78k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    int j = n / 2;\n    for (; i < n; i++) {\n        if (i < j) l2[i] = l[i];\n        else l2[j--] = l[i];\n    }\n    return median(l2) + median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpsgeazgdd.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsgeazgdd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpjpbaxomv.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjpbaxomv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    long[] l2 = l.clone();\n    Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmptc8vss7f.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmptc8vss7f.d(16): Error: no property `clone` for type `long[]`\n/tmp/tmptc8vss7f.d(17): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptc8vss7f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2;\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++)\n        if (i < n / 2)\n            l2[i++] = l[j];\n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpbtzy18m0.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpbtzy18m0.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbtzy18m0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    long[] l3 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l3[i] = l2[i];\n    \n    long[] l4 = new long[n/2];\n    for (int i = n/2; i < n; i++)\n        l4[i-n/2] = l2[i];\n    \n    float m1 = median(l3);\n    float m2 = median(l4);\n    \n    if (m1 > m2)\n        return m1;\n    else\n        return m2;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpvbew7_us.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpvbew7_us.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvbew7_us.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++)\n        if (i < n / 2)\n            l2[i++] = l[j];\n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpmhwxqslw.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpmhwxqslw.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhwxqslw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty list\");\n    if (n == 1)\n        return l[0];\n    if (n % 2 == 1)\n        return l[n / 2];\n    else\n    {\n        long a = l[n / 2 - 1];\n        long b = l[n / 2];\n        return (a + b) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpopjlcsgq.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpopjlcsgq.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpopjlcsgq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    long[] l3 = new long[n];\n    for (int i = 0; i < n; i++)\n        l3[i] = l2[i];\n    \n    int i = 0;\n    int j = n - 1;\n    while (i < j)\n    {\n        if (l3[i] < l3[j])\n        {\n            long t = l3[i];\n            l3[i] = l3[j];\n            l3[j] = t;\n        }\n        i++;\n        j--;\n    }\n    \n    if (n % 2 == 1)\n        return l3[n / 2];\n    else\n    {\n        long m = l3[n / 2 - 1] + l3[n / 2];\n        return (m / 2);\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpd7qq60ni.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7qq60ni.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    int i = n / 2;\n    int j = n - i;\n    long a = l[i];\n    long b = l[j];\n    \n    if (a > b)\n    {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    if (n % 2 == 0)\n        return (a + b) / 2.0;\n    else\n        return a;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmph8mxnb67.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmph8mxnb67.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph8mxnb67.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    return (median(l2) + median(l3)) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpcu2jt7o7.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpcu2jt7o7.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcu2jt7o7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0.0f;\n    if (n == 1) return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    Arrays.sort(l2);\n    \n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0f;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpgrq9ahv_.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpgrq9ahv_.d(21): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgrq9ahv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpn89zuahf.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpn89zuahf.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmpn89zuahf.d(21): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn89zuahf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp7s774rnu.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7s774rnu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    int i = n / 2;\n    int j = n - i;\n    long a = l[i];\n    long b = l[j];\n    \n    if (a > b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    if (n % 2 == 0) {\n        return (a + b) / 2;\n    }\n    else {\n        return a;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpyr2hg4qp.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyr2hg4qp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    Arrays.sort(l2);\n    \n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpvcgk4z_a.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpvcgk4z_a.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmpvcgk4z_a.d(23): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvcgk4z_a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp5qh6xzjj.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp5qh6xzjj.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmp5qh6xzjj.d(21): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5qh6xzjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    long[] l3 = l2.clone();\n    \n    Arrays.sort(l3);\n    \n    if (n % 2 == 1)\n        return l3[n / 2];\n    else\n        return (l3[n / 2 - 1] + l3[n / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp3ds247rn.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp3ds247rn.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmp3ds247rn.d(23): Error: no property `clone` for type `long[]`\n/tmp/tmp3ds247rn.d(25): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ds247rn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpcyp4px8p.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpcyp4px8p.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcyp4px8p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1) return l2[n / 2];\n    else return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpehrjb8jc.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpehrjb8jc.d(18): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpehrjb8jc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    return (median(l2) + median(l3)) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp4f8ref5z.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp4f8ref5z.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4f8ref5z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp9xe3843i.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp9xe3843i.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9xe3843i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    int i = 0;\n    for (int j = 0; j < n; j++)\n        if (i < n/2)\n            l2[i++] = l[j];\n    return (float)median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpwa0yu2x0.d(23): Error: C style cast illegal, use `cast(float)median(l2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwa0yu2x0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    return (median(l2) + median(l3)) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp_6r6f1eb.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp_6r6f1eb.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_6r6f1eb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    if (l.length == 1)\n        return l[0];\n    \n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    \n    sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    \n    return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmptb6lfc68.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmptb6lfc68.d(23): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptb6lfc68.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp34ealmcl.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp34ealmcl.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmp34ealmcl.d(21): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp34ealmcl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n / 2) break;\n        if (j < n / 2) {\n            l2[i] = l[j];\n            i++;\n        }\n    }\n    \n    long[] l3 = new long[n - i];\n    for (int j = 0; j < n - i; j++) {\n        l3[j] = l[j + i];\n    }\n    \n    return (median(l2) + median(l3)) / 2;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp1fk9a15b.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fk9a15b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new Error(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n; i++)\n        if (i < n / 2)\n            l2[i] = l[i];\n        else\n            l2[n / 2 - 1] = l[i];\n    return (float)median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp0avauopc.d(24): Error: C style cast illegal, use `cast(float)median(l2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0avauopc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    if (n % 2 == 0)\n    {\n        long a = l[n / 2 - 1];\n        long b = l[n / 2];\n        return (a + b) / 2.0;\n    }\n    else\n    {\n        long a = l[n / 2];\n        long b = l[n / 2 + 1];\n        return (a + b) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp81hmjqgt.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp81hmjqgt.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp81hmjqgt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    \n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l2[i] < l2[j]) {\n            long t = l2[i];\n            l2[i] = l2[j];\n            l2[j] = t;\n        }\n        i++;\n        j--;\n    }\n    \n    if (n % 2 == 1) return l2[(n - 1) / 2];\n    else return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp4ypvd7kf.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ypvd7kf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    if (n % 2 == 0)\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    else\n        return l[n / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp3orbn9mg.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp3orbn9mg.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3orbn9mg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    Arrays.sort(l2);\n    \n    if (n % 2 == 0)\n        return (float) ((l2[n / 2] + l2[n / 2 - 1]) / 2);\n    else\n        return l2[n / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp5eu6gnja.d(26): Error: C style cast illegal, use `cast(float)((l2[n / 2] + l2[n / 2 - 1]) / 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5eu6gnja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    Arrays.sort(l2);\n    \n    if (n % 2 == 0)\n        return (float) ((l2[n / 2] + l2[n / 2 - 1]) / 2.0);\n    else\n        return l2[n / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpt9n3auq4.d(26): Error: C style cast illegal, use `cast(float)((l2[n / 2] + l2[n / 2 - 1]) / 2.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt9n3auq4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    \n    long[] l3 = new long[n / 2];\n    for (int i = n / 2; i < n; i++)\n        l3[i - n / 2] = l[i];\n    \n    return (median(l2) + median(l3)) / 2;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp2v2sp2gk.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp2v2sp2gk.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2v2sp2gk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0.0f;\n    if (n == 1) return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    java.util.Arrays.sort(l2);\n    \n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0f;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmppo3io8ol.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmppo3io8ol.d(21): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppo3io8ol.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    int i = n / 2;\n    if (n % 2 == 0) return (l[i] + l[i - 1]) / 2;\n    return l[i];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp9xsa3pov.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9xsa3pov.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    int i = n / 2;\n    int j = n - i;\n    if (n % 2 == 0) {\n        return (l[i] + l[j]) / 2;\n    }\n    return l[i];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpct_h1il2.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpct_h1il2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1) return l2[n / 2];\n    else return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpst8w3von.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpst8w3von.d(18): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpst8w3von.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    int i = n / 2;\n    int j = n - i;\n    long a = l[i];\n    long b = l[j];\n    \n    if (a > b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    if (n % 2 == 0) return (a + b) / 2;\n    else return a;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp167vjcvk.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp167vjcvk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    int i = n / 2;\n    if (n % 2 == 0)\n        return (l[i - 1] + l[i]) / 2.0;\n    else\n        return l[i];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpnxyg74y5.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpnxyg74y5.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnxyg74y5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    long[] l1 = new long[n / 2];\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n; i++) {\n        if (i < n / 2) {\n            l1[i] = l[i];\n        } else {\n            l2[i - n / 2] = l[i];\n        }\n    }\n    return (median(l1) + median(l2)) / 2;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpg49zp_4c.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg49zp_4c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    \n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l2[i] < l2[j]) {\n            long t = l2[i];\n            l2[i] = l2[j];\n            l2[j] = t;\n        }\n        i++;\n        j--;\n    }\n    \n    if (n % 2 == 0) {\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2;\n    }\n    else {\n        return l2[n / 2];\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp984jlhg6.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp984jlhg6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n / 2) {\n            l2[i] = l[j];\n            i++;\n        } else if (j < n / 2) {\n            l2[i] = l[j];\n            i++;\n        }\n    }\n    \n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpxkue_h7b.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxkue_h7b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    \n    long[] l3 = new long[n / 2];\n    for (int i = n / 2; i < n; i++)\n        l3[i - n / 2] = l[i];\n    \n    return (median(l2) + median(l3)) / 2;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp7nsazkrq.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7nsazkrq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = n / 2; i < n; i++)\n        l3[i - n / 2] = l[i];\n    return (float) (median(l2) + median(l3)) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp8lxxdxnv.d(24): Error: C style cast illegal, use `cast(float)(median(l2) + median(l3))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8lxxdxnv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    if (n % 2 == 0)\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    else\n        return l[n / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpneuwa6il.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpneuwa6il.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpneuwa6il.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n; i++)\n        if (i < n/2)\n            l2[i] = l[i];\n        else\n            l2[n/2 - i] = l[i];\n    return (float)median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp6t9z97sz.d(24): Error: C style cast illegal, use `cast(float)median(l2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6t9z97sz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    int i = n / 2;\n    int j = n - i;\n    if (i % 2 == 0)\n        return (l[i] + l[j]) / 2.0;\n    else\n        return l[i];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp5arnan9r.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp5arnan9r.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5arnan9r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n/2];\n    for (int i = n/2; i < n; i++)\n        l3[i-n/2] = l[i];\n    return (float)median(l2) + (float)median(l3);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpianwj1dw.d(24): Error: C style cast illegal, use `cast(float)median(l2)`\n/tmp/tmpianwj1dw.d(24): Error: C style cast illegal, use `cast(float)median(l3)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpianwj1dw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n / 2) {\n            l2[i] = l[j];\n            i++;\n        } else if (l[j] < l2[i]) {\n            l2[i] = l[j];\n            i++;\n        }\n    }\n    return (float)median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpwvzkr4u3.d(28): Error: C style cast illegal, use `cast(float)median(l2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvzkr4u3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    int j = n / 2;\n    for (; i < n; i++)\n        if (i < j)\n            l2[i] = l[i];\n        else\n            l2[j--] = l[i];\n    return (float)median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpg87m12c4.d(28): Error: C style cast illegal, use `cast(float)median(l2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg87m12c4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new IllegalArgumentException(\"median of empty array\");\n    \n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    \n    java.util.Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpvs_9gjoj.d(14): Error: undefined identifier `IllegalArgumentException`\n/tmp/tmpvs_9gjoj.d(20): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvs_9gjoj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    if (n % 2 == 0)\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpm72r3y3x.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpm72r3y3x.d(15): Error: undefined identifier `IllegalArgumentException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm72r3y3x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    return (float) (median(l2) + median(l3)) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpei68i9jd.d(24): Error: C style cast illegal, use `cast(float)(median(l2) + median(l3))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpei68i9jd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n / 2)\n            l2[i - 1] = l[j];\n        else if (j < n / 2) {\n            if (l[j] < l2[i])\n                l2[i] = l[j];\n            else if (l[j] > l2[i]) {\n                i++;\n                l2[i - 1] = l[j];\n            }\n        }\n    }\n    if (i == n / 2)\n        return l2[i - 1];\n    else\n        return (l2[i - 1] + l2[i]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpavgg4xdm.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpavgg4xdm.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpavgg4xdm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    int i = n / 2;\n    int j = n - i;\n    long a = l[i];\n    long b = l[j];\n    \n    if (a > b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    return (a + b) / 2;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp5ung6xhu.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ung6xhu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpg4e_bf_a.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpg4e_bf_a.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmpg4e_bf_a.d(21): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg4e_bf_a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new IllegalArgumentException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpjkxyr8yk.d(14): Error: undefined identifier `IllegalArgumentException`\n/tmp/tmpjkxyr8yk.d(20): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjkxyr8yk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    l = l2;\n    Arrays.sort(l);\n    if (n % 2 == 1)\n        return l[n / 2];\n    else\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp81s_so9n.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp81s_so9n.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmp81s_so9n.d(22): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp81s_so9n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp2cznr6op.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmp2cznr6op.d(17): Error: no property `clone` for type `long[]`\n/tmp/tmp2cznr6op.d(18): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2cznr6op.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    int i = n / 2;\n    int j = n - i;\n    long a = l[i];\n    long b = l[j];\n    \n    if (a < b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    if (n % 2 == 0) return (a + b) / 2;\n    else return a;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp1u203a1b.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1u203a1b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    l = l2;\n    Arrays.sort(l);\n    if (n % 2 == 1) return l[n / 2];\n    return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp7d_gsk8z.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp7d_gsk8z.d(19): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7d_gsk8z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp9vp4w_fh.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp9vp4w_fh.d(15): Error: undefined identifier `IllegalArgumentException`\n/tmp/tmp9vp4w_fh.d(21): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9vp4w_fh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[i + n / 2];\n    long m1 = median(l2);\n    long m2 = median(l3);\n    return (m1 + m2) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpuvuat9h2.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpuvuat9h2.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmpuvuat9h2.d(26): Error: cannot implicitly convert expression `median(l2)` of type `float` to `long`\n/tmp/tmpuvuat9h2.d(27): Error: cannot implicitly convert expression `median(l3)` of type `float` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuvuat9h2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp9so3785o.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp9so3785o.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmp9so3785o.d(21): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9so3785o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2.0;\n    \n    long[] l1 = new long[n / 2];\n    long[] l2 = new long[n - n / 2];\n    \n    for (int i = 0; i < n; i++) {\n        if (i < n / 2) {\n            l1[i] = l[i];\n        } else {\n            l2[i - n / 2] = l[i];\n        }\n    }\n    \n    return (median(l1) + median(l2)) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp7t58o1m2.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7t58o1m2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    \n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l2[i] < l2[j]) {\n            long t = l2[i];\n            l2[i] = l2[j];\n            l2[j] = t;\n        }\n        i++;\n        j--;\n    }\n    \n    if (n % 2 == 0) return (l2[n / 2] + l2[n / 2 - 1]) / 2;\n    else return l2[n / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmplej15ps4.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplej15ps4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    if (n % 2 == 0)\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    else\n        return l[n / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp1fouy5zk.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp1fouy5zk.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fouy5zk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    Arrays.sort(l2);\n    \n    if (n % 2 == 0)\n        return (float) ((l2[n / 2] + l2[n / 2 - 1]) / 2);\n    else\n        return l2[n / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpn_b74zg5.d(26): Error: C style cast illegal, use `cast(float)((l2[n / 2] + l2[n / 2 - 1]) / 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn_b74zg5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n; i++)\n        if (i < n / 2)\n            l2[i] = l[i];\n        else\n            l2[n / 2 - 1] = l[i];\n    return (float)median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpllemdblb.d(24): Error: C style cast illegal, use `cast(float)median(l2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpllemdblb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    int i = n / 2;\n    int j = n - i;\n    if (i % 2 == 1)\n        return l[i];\n    else\n        return (l[i-1] + l[i]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp9bsg9ose.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp9bsg9ose.d(15): Error: undefined identifier `IllegalArgumentException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9bsg9ose.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpwunrm8fn.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmpwunrm8fn.d(20): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwunrm8fn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp17liix6y.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmp17liix6y.d(16): Error: no property `clone` for type `long[]`\n/tmp/tmp17liix6y.d(17): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp17liix6y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpdk6qucll.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmpdk6qucll.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpdk6qucll.d(16): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdk6qucll.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    int i = 0;\n    for (int j = 0; j < n; j++)\n        if (i < n/2)\n            l2[i++] = l[j];\n    Arrays.sort(l2);\n    if (n % 2 == 0)\n        return (float) ((l2[n/2-1] + l2[n/2]) / 2);\n    else\n        return (float) l2[n/2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpyfwcbg26.d(25): Error: C style cast illegal, use `cast(float)((l2[n / 2 - 1] + l2[n / 2]) / 2)`\n/tmp/tmpyfwcbg26.d(27): Error: C style cast illegal, use `cast(float)l2[n / 2]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfwcbg26.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1) return l2[n / 2];\n    else return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpst8w3von.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpst8w3von.d(18): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpst8w3von.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n / 2)\n            l2[i++] = l[j];\n        else if (l[j] < l2[i])\n            l2[i++] = l[j];\n    }\n    if (i == n / 2)\n        return l2[i / 2];\n    else\n        return (l2[i - 1] + l2[i]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpr_skqsdy.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpr_skqsdy.d(15): Error: undefined identifier `IllegalArgumentException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr_skqsdy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    int i = n / 2;\n    if (n % 2 == 0)\n        return (l[i - 1] + l[i]) / 2.0;\n    else\n        return l[i];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpnxyg74y5.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpnxyg74y5.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnxyg74y5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp17liix6y.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmp17liix6y.d(16): Error: no property `clone` for type `long[]`\n/tmp/tmp17liix6y.d(17): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp17liix6y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new Error(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp_8ngymey.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_8ngymey.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    int low = 0;\n    int high = n - 1;\n    while (low < high) {\n        int mid = (low + high) / 2;\n        if (l[mid] < l[high])\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return (low == high) ? l[low] : (l[low] + l[high]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp_tc4e45e.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp_tc4e45e.d(15): Error: undefined identifier `IllegalArgumentException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_tc4e45e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpwunrm8fn.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmpwunrm8fn.d(20): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwunrm8fn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    Arrays.sort(l2);\n    \n    if (n % 2 == 0)\n        return (float) ((l2[n / 2] + l2[n / 2 - 1]) / 2);\n    else\n        return l2[n / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpn_b74zg5.d(26): Error: C style cast illegal, use `cast(float)((l2[n / 2] + l2[n / 2 - 1]) / 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn_b74zg5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    int i = n / 2;\n    if (n % 2 == 1) return l[i];\n    return (l[i - 1] + l[i]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp1nw7_4i3.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1nw7_4i3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    return (median(l2) + median(l3)) / 2;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmphek2r0hr.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphek2r0hr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l2[i] < l2[j]) {\n            long t = l2[i];\n            l2[i] = l2[j];\n            l2[j] = t;\n        }\n        i++;\n        j--;\n    }\n    \n    if (l2[i] < l2[j])\n        l2[i] = l2[j];\n    \n    long m = l2[i];\n    \n    if (n % 2 == 1)\n        return m;\n    \n    i = n / 2 - 1;\n    j = n / 2;\n    while (i < j) {\n        if (l2[i] < l2[j]) {\n            long t = l2[i];\n            l2[i] = l2[j];\n            l2[j] = t;\n        }\n        i++;\n        j--;\n    }\n    \n    if (l2[i] < l2[j])\n        l2[i] = l2[j];\n    \n    return (float) (l2[i] + l2[j]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp7yy9nzfl.d(58): Error: C style cast illegal, use `cast(float)(l2[i] + l2[j])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7yy9nzfl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    int l1 = 0, l2 = n - 1;\n    while (l1 < l2) {\n        int i = (l1 + l2) / 2;\n        if (l[i] > l[l2])\n            l1 = i + 1;\n        else\n            l2 = i;\n    }\n    return (l[l1] + l[l2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpnr_ch4jo.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpnr_ch4jo.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnr_ch4jo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    int i = n / 2;\n    int j = n - i;\n    if (n % 2 == 0)\n    {\n        return (l[i] + l[j]) / 2.0;\n    }\n    else\n    {\n        return l[i];\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpa1cu8m9h.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpa1cu8m9h.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1cu8m9h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0) return 0;\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++) l2[i] = l[i];\n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293388,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    int i = n / 2;\n    if (n % 2 == 0)\n        return (l[i - 1] + l[i]) / 2.0;\n    else\n        return l[i];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp13nrgw75.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp13nrgw75.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp13nrgw75.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    int i = n / 2;\n    int j = n - i;\n    long a = l[i];\n    long b = l[j];\n    \n    if (a > b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    if (n % 2 == 0) return (a + b) / 2;\n    else return a;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp167vjcvk.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp167vjcvk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpcyp4px8p.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpcyp4px8p.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcyp4px8p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n - n / 2];\n    for (int i = 0; i < n - n / 2; i++)\n        l3[i] = l[i + n / 2];\n    \n    return (median(l2) + median(l3)) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpqrrufmcx.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpqrrufmcx.d(15): Error: undefined identifier `IllegalArgumentException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqrrufmcx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2.0;\n    \n    int i = n / 2;\n    int j = n - i;\n    long a = l[i];\n    long b = l[j];\n    \n    if (a > b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    if (n % 2 == 0) {\n        return (a + b) / 2.0;\n    } else {\n        return a;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp0hda7gpx.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0hda7gpx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    int low = 0;\n    int high = l.length - 1;\n    while (low < high) {\n        int mid = (low + high) / 2;\n        if (l[mid] < l[high]) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return l[low];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpv2lf5gjh.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmpv2lf5gjh.d(16): Error: cannot implicitly convert expression `l.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv2lf5gjh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    \n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    \n    return (median(l2) + median(l3)) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp9h9bsfnh.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp9h9bsfnh.d(15): Error: undefined identifier `IllegalArgumentException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9h9bsfnh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    l2 = sort(l2);\n    \n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpq0le45lf.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpq0le45lf.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq0le45lf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    sort(l2);\n    \n    if (n % 2 == 0)\n        return (float) ((l2[n / 2] + l2[n / 2 - 1]) / 2);\n    else\n        return l2[n / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpevdyku4v.d(26): Error: C style cast illegal, use `cast(float)((l2[n / 2] + l2[n / 2 - 1]) / 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpevdyku4v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpbbib7vb_.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpbbib7vb_.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbbib7vb_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    int i = n / 2;\n    if (n % 2 == 0)\n        return (l[i-1] + l[i]) / 2.0;\n    else\n        return l[i];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmptbqa6z_8.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmptbqa6z_8.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbqa6z_8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n / 2)\n            l2[i++] = l[j];\n        else if (l[j] < l2[i])\n            l2[i++] = l[j];\n    }\n    if (i == n / 2)\n        return l2[i / 2];\n    else\n        return (l2[i - 1] + l2[i]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpjss86kcc.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpjss86kcc.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjss86kcc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0.0f;\n    if (n == 1) return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    \n    sort(l2);\n    \n    if (n % 2 == 1) return l2[n / 2];\n    else return (l2[n / 2] + l2[n / 2 - 1]) / 2.0f;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp7gk3qnze.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp7gk3qnze.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7gk3qnze.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 0)\n        return (float) ((l2[n / 2] + l2[n / 2 - 1]) / 2.0);\n    else\n        return l2[n / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp93w17h81.d(23): Error: C style cast illegal, use `cast(float)((l2[n / 2] + l2[n / 2 - 1]) / 2.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp93w17h81.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpzo74zkiv.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpzo74zkiv.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmpzo74zkiv.d(21): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzo74zkiv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpcyp4px8p.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpcyp4px8p.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcyp4px8p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    int i = 0;\n    for (int j = 0; j < n; j++)\n        if (i < n/2)\n            l2[i++] = l[j];\n    Arrays.sort(l2);\n    if (n % 2 == 0)\n        return (float)((l2[n/2-1] + l2[n/2]) / 2.0);\n    else\n        return l2[n/2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpgrwu_t8_.d(25): Error: C style cast illegal, use `cast(float)((l2[n / 2 - 1] + l2[n / 2]) / 2.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgrwu_t8_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 0) return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n    else return l2[n / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpwtepu2zs.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpwtepu2zs.d(18): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwtepu2zs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    \n    long[] l3 = new long[n / 2];\n    for (int i = n / 2; i < n; i++)\n        l3[i - n / 2] = l[i];\n    \n    return (median(l2) + median(l3)) / 2;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp7nsazkrq.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7nsazkrq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n; i++)\n        if (i < n/2)\n            l2[i] = l[i];\n        else\n            l2[n/2 - i] = l[i];\n    return (float)median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp6t9z97sz.d(24): Error: C style cast illegal, use `cast(float)median(l2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6t9z97sz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    long[] l2 = new long[n/2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n/2) {\n            l2[i] = l[j];\n            i++;\n        } else if (l[j] < l2[i]) {\n            l2[i] = l[j];\n            i++;\n        }\n    }\n    return (float)median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmp8camzfwd.d(27): Error: C style cast illegal, use `cast(float)median(l2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8camzfwd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    l2 = l2.sort();\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpgxskoa5x.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmpgxskoa5x.d(20): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgxskoa5x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    long[] l2 = l.clone();\n    Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmptc8vss7f.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmptc8vss7f.d(16): Error: no property `clone` for type `long[]`\n/tmp/tmptc8vss7f.d(17): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptc8vss7f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    return (median(l2) + median(l3)) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpcu2jt7o7.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpcu2jt7o7.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcu2jt7o7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    return median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpilo58xbe.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpilo58xbe.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilo58xbe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n; i++)\n        if (i < n/2)\n            l2[i] = l[i];\n        else\n            l2[n/2 - i] = l[i];\n    return (float)median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpy3oig5dt.d(24): Error: C style cast illegal, use `cast(float)median(l2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy3oig5dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    \n    long[] a = new long[n];\n    for (int i = 0; i < n; i++)\n        a[i] = l[i];\n    \n    Arrays.sort(a);\n    \n    if (n % 2 == 1)\n        return a[n / 2];\n    else\n        return (a[n / 2] + a[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpp0n3s5va.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpp0n3s5va.d(15): Error: undefined identifier `RuntimeException`\n/tmp/tmpp0n3s5va.d(23): Error: undefined identifier `Arrays`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0n3s5va.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n; i++)\n        if (i < n/2)\n            l2[i] = l[i];\n        else\n            l2[n/2 - i] = l[i];\n    return (float)median(l2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmp6t9z97sz.d(24): Error: C style cast illegal, use `cast(float)median(l2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6t9z97sz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0) return 0.0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2.0;\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    \n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l2[i] < l2[j]) {\n            long t = l2[i];\n            l2[i] = l2[j];\n            l2[j] = t;\n        }\n        i++;\n        j--;\n    }\n    \n    if (n % 2 == 1) return l2[(n - 1) / 2];\n    else return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpy31hwey3.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy31hwey3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n - n / 2];\n    for (int i = 0; i < n - n / 2; i++)\n        l3[i] = l[i + n / 2];\n    \n    return (median(l2) + median(l3)) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmppqs9a70i.d(13): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmppqs9a70i.d(15): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppqs9a70i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0) return 0;\n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 1) return l2[l2.length / 2];\n    return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "/tmp/tmpd9aps3p6.d(14): Error: no property `clone` for type `long[]`\n/tmp/tmpd9aps3p6.d(15): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd9aps3p6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "/tmp/tmpdk6qucll.d(14): Error: undefined identifier `RuntimeException`\n/tmp/tmpdk6qucll.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpdk6qucll.d(16): Error: undefined identifier `java`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdk6qucll.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}