{
  "name": "HumanEval_5_intersperse",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n",
  "tests": "unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * delimeter + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpxrnqfe4b.intersperse(long[], long) [0x427e53]\n??:? void tmpxrnqfe4b.__unittest_L22_C1() [0x427f4c]\n??:? void tmpxrnqfe4b.__modtest() [0x42819c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    int i = 0;\n    int j = 0;\n    while (i < numbers.length) {\n        result[j] = numbers[i];\n        j++;\n        i++;\n        if (i < numbers.length) {\n            result[j] = delimeter;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpslvseo54.intersperse(long[], long) [0x427e4e]\n??:? void tmpslvseo54.__unittest_L27_C1() [0x427f3c]\n??:? void tmpslvseo54.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmphyh14b3a.intersperse(long[], long) [0x427e53]\n??:? void tmphyh14b3a.__unittest_L23_C1() [0x427f48]\n??:? void tmphyh14b3a.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 + 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i % 2 == 0) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp11fns5h2.d(15): Error: semicolon expected, not `:`\n/tmp/tmp11fns5h2.d(15): Error: expression expected, not `:`\n/tmp/tmp11fns5h2.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp11fns5h2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    for (int j = 0; j < numbers.length; j++) {\n        result[i] = numbers[j];\n        i++;\n        if (j < numbers.length - 1) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmp9a8zablk.intersperse(long[], long) [0x427e53]\n??:? void tmp9a8zablk.__unittest_L25_C1() [0x427f48]\n??:? void tmp9a8zablk.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmphyh14b3a.intersperse(long[], long) [0x427e53]\n??:? void tmphyh14b3a.__unittest_L23_C1() [0x427f48]\n??:? void tmphyh14b3a.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i * delimeter] = numbers[i];\n    }\n    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i * delimeter + 1] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da5b]\n??:? _d_newarrayT [0x4297e0]\n??:? long[] tmpcx2r_knr.intersperse(long[], long) [0x427e53]\n??:? void tmpcx2r_knr.__unittest_L24_C1() [0x427f70]\n??:? void tmpcx2r_knr.__modtest() [0x4281c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c51b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430639]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ae8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b385]\n??:? runModuleUnitTests [0x42c2f1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42d9eb]\n??:? _d_newarrayT [0x429770]\n??:? long[] tmpu7suuawc.intersperse(long[], long) [0x427e53]\n??:? void tmpu7suuawc.__unittest_L19_C1() [0x427f00]\n??:? void tmpu7suuawc.__modtest() [0x428150]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430555]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]\n??:? runModuleUnitTests [0x42c281]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpoz33q48j.intersperse(long[], long) [0x427e4e]\n??:? void tmpoz33q48j.__unittest_L22_C1() [0x427f44]\n??:? void tmpoz33q48j.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * delimeter + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpxrnqfe4b.intersperse(long[], long) [0x427e53]\n??:? void tmpxrnqfe4b.__unittest_L22_C1() [0x427f4c]\n??:? void tmpxrnqfe4b.__modtest() [0x42819c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * delimeter + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpxrnqfe4b.intersperse(long[], long) [0x427e53]\n??:? void tmpxrnqfe4b.__unittest_L22_C1() [0x427f4c]\n??:? void tmpxrnqfe4b.__modtest() [0x42819c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpoz33q48j.intersperse(long[], long) [0x427e4e]\n??:? void tmpoz33q48j.__unittest_L22_C1() [0x427f44]\n??:? void tmpoz33q48j.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpm5svb8jt.d(15): Error: semicolon expected, not `:`\n/tmp/tmpm5svb8jt.d(15): Error: expression expected, not `:`\n/tmp/tmpm5svb8jt.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm5svb8jt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i * delimeter] = numbers[i];\n    }\n    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i * delimeter + 1 + i] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da43]\n??:? _d_newarrayT [0x4297c8]\n??:? long[] tmpy2y2tqpv.intersperse(long[], long) [0x427e53]\n??:? void tmpy2y2tqpv.__unittest_L24_C1() [0x427f54]\n??:? void tmpy2y2tqpv.__modtest() [0x4281a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c503]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b396]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430621]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b36d]\n??:? runModuleUnitTests [0x42c2d9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 + 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * 2 + 1] = numbers[i];\n        result[i * 2 + 2] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpac_6akk6.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4283fd]\n??:? void tmpac_6akk6.__unittest_L20_C1() [0x427f76]\n??:? void tmpac_6akk6.__modtest() [0x428180]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b36e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430aa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430585]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b345]\n??:? runModuleUnitTests [0x42c2b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpq6pwqtja.intersperse(long[], long) [0x427e4b]\n??:? void tmpq6pwqtja.__unittest_L23_C1() [0x427f40]\n??:? void tmpq6pwqtja.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 + 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        result[i] = delimeter;\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpyobdq98d.d(15): Error: semicolon expected, not `:`\n/tmp/tmpyobdq98d.d(15): Error: expression expected, not `:`\n/tmp/tmpyobdq98d.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyobdq98d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42d9eb]\n??:? _d_newarrayT [0x429770]\n??:? long[] tmpu7suuawc.intersperse(long[], long) [0x427e53]\n??:? void tmpu7suuawc.__unittest_L19_C1() [0x427f00]\n??:? void tmpu7suuawc.__modtest() [0x428150]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430555]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]\n??:? runModuleUnitTests [0x42c281]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    for(int i = 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i];\n        if(i < numbers.length - 1)\n            result[i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmp_ntwrd_n.intersperse(long[], long) [0x427e4e]\n??:? void tmp_ntwrd_n.__unittest_L22_C1() [0x427f44]\n??:? void tmp_ntwrd_n.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j] = numbers[i];\n        j++;\n        if (i < numbers.length - 1) {\n            result[j] = delimeter;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpoa1eos2b.intersperse(long[], long) [0x427e53]\n??:? void tmpoa1eos2b.__unittest_L26_C1() [0x427f48]\n??:? void tmpoa1eos2b.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * delimeter + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpxrnqfe4b.intersperse(long[], long) [0x427e53]\n??:? void tmpxrnqfe4b.__unittest_L22_C1() [0x427f4c]\n??:? void tmpxrnqfe4b.__modtest() [0x42819c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index] = numbers[i];\n        index += delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42d9fb]\n??:? _d_newarrayT [0x429780]\n??:? long[] tmpko28gkvv.intersperse(long[], long) [0x427e53]\n??:? void tmpko28gkvv.__unittest_L21_C1() [0x427f0c]\n??:? void tmpko28gkvv.__modtest() [0x42815c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b34e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430565]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b325]\n??:? runModuleUnitTests [0x42c291]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpvvft8u2u.intersperse(long[], long) [0x427e4b]\n??:? void tmpvvft8u2u.__unittest_L22_C1() [0x427f44]\n??:? void tmpvvft8u2u.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpq6pwqtja.intersperse(long[], long) [0x427e4b]\n??:? void tmpq6pwqtja.__unittest_L23_C1() [0x427f40]\n??:? void tmpq6pwqtja.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long n : numbers) {\n        result[i] = n;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpg5n4p_8j.d(15): Error: semicolon expected, not `:`\n/tmp/tmpg5n4p_8j.d(15): Error: expression expected, not `:`\n/tmp/tmpg5n4p_8j.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg5n4p_8j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpwr22k6tg.intersperse(long[], long) [0x427e4e]\n??:? void tmpwr22k6tg.__unittest_L24_C1() [0x427f44]\n??:? void tmpwr22k6tg.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpoz33q48j.intersperse(long[], long) [0x427e4e]\n??:? void tmpoz33q48j.__unittest_L22_C1() [0x427f44]\n??:? void tmpoz33q48j.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmp8kzz4n2i.intersperse(long[], long) [0x427e53]\n??:? void tmp8kzz4n2i.__unittest_L24_C1() [0x427f48]\n??:? void tmp8kzz4n2i.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmp8kzz4n2i.intersperse(long[], long) [0x427e53]\n??:? void tmp8kzz4n2i.__unittest_L24_C1() [0x427f48]\n??:? void tmp8kzz4n2i.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * delimeter + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpxrnqfe4b.intersperse(long[], long) [0x427e53]\n??:? void tmpxrnqfe4b.__unittest_L22_C1() [0x427f4c]\n??:? void tmpxrnqfe4b.__modtest() [0x42819c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpq6pwqtja.intersperse(long[], long) [0x427e4b]\n??:? void tmpq6pwqtja.__unittest_L23_C1() [0x427f40]\n??:? void tmpq6pwqtja.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmphyh14b3a.intersperse(long[], long) [0x427e53]\n??:? void tmphyh14b3a.__unittest_L23_C1() [0x427f48]\n??:? void tmphyh14b3a.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42d9eb]\n??:? _d_newarrayT [0x429770]\n??:? long[] tmpu7suuawc.intersperse(long[], long) [0x427e53]\n??:? void tmpu7suuawc.__unittest_L19_C1() [0x427f00]\n??:? void tmpu7suuawc.__modtest() [0x428150]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430555]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]\n??:? runModuleUnitTests [0x42c281]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpm5svb8jt.d(15): Error: semicolon expected, not `:`\n/tmp/tmpm5svb8jt.d(15): Error: expression expected, not `:`\n/tmp/tmpm5svb8jt.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm5svb8jt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i % delimeter == 0) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpnn127oeg.d(15): Error: semicolon expected, not `:`\n/tmp/tmpnn127oeg.d(15): Error: expression expected, not `:`\n/tmp/tmpnn127oeg.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnn127oeg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * delimeter + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpxrnqfe4b.intersperse(long[], long) [0x427e53]\n??:? void tmpxrnqfe4b.__unittest_L22_C1() [0x427f4c]\n??:? void tmpxrnqfe4b.__modtest() [0x42819c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * delimeter + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpxrnqfe4b.intersperse(long[], long) [0x427e53]\n??:? void tmpxrnqfe4b.__unittest_L22_C1() [0x427f4c]\n??:? void tmpxrnqfe4b.__modtest() [0x42819c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        result[i++] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpwx0_ubfb.d(15): Error: semicolon expected, not `:`\n/tmp/tmpwx0_ubfb.d(15): Error: expression expected, not `:`\n/tmp/tmpwx0_ubfb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwx0_ubfb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmphyh14b3a.intersperse(long[], long) [0x427e53]\n??:? void tmphyh14b3a.__unittest_L23_C1() [0x427f48]\n??:? void tmphyh14b3a.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpvvft8u2u.intersperse(long[], long) [0x427e4b]\n??:? void tmpvvft8u2u.__unittest_L22_C1() [0x427f44]\n??:? void tmpvvft8u2u.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpvvft8u2u.intersperse(long[], long) [0x427e4b]\n??:? void tmpvvft8u2u.__unittest_L22_C1() [0x427f44]\n??:? void tmpvvft8u2u.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 + 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        result[i++] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpwaqllbkv.d(15): Error: semicolon expected, not `:`\n/tmp/tmpwaqllbkv.d(15): Error: expression expected, not `:`\n/tmp/tmpwaqllbkv.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwaqllbkv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 + 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp92619jxz.d(15): Error: semicolon expected, not `:`\n/tmp/tmp92619jxz.d(15): Error: expression expected, not `:`\n/tmp/tmp92619jxz.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92619jxz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmphyh14b3a.intersperse(long[], long) [0x427e53]\n??:? void tmphyh14b3a.__unittest_L23_C1() [0x427f48]\n??:? void tmphyh14b3a.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * 2] = numbers[i];\n        result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da23]\n??:? _d_newarrayT [0x4297a8]\n??:? long[] tmpuxcroonu.intersperse(long[], long) [0x427e4b]\n??:? void tmpuxcroonu.__unittest_L20_C1() [0x427f34]\n??:? void tmpuxcroonu.__modtest() [0x428184]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b376]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430601]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43058d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b34d]\n??:? runModuleUnitTests [0x42c2b9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpoz33q48j.intersperse(long[], long) [0x427e4e]\n??:? void tmpoz33q48j.__unittest_L22_C1() [0x427f44]\n??:? void tmpoz33q48j.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpm5svb8jt.d(15): Error: semicolon expected, not `:`\n/tmp/tmpm5svb8jt.d(15): Error: expression expected, not `:`\n/tmp/tmpm5svb8jt.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm5svb8jt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long n : numbers) {\n        result[i++] = n;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmptgye2gp4.d(15): Error: semicolon expected, not `:`\n/tmp/tmptgye2gp4.d(15): Error: expression expected, not `:`\n/tmp/tmptgye2gp4.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptgye2gp4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 + 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        result[i++] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpwaqllbkv.d(15): Error: semicolon expected, not `:`\n/tmp/tmpwaqllbkv.d(15): Error: expression expected, not `:`\n/tmp/tmpwaqllbkv.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwaqllbkv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index] = numbers[i];\n        index++;\n        if (i < numbers.length - 1) {\n            result[index] = delimeter;\n            index++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpvw07qkl8.intersperse(long[], long) [0x427e53]\n??:? void tmpvw07qkl8.__unittest_L25_C1() [0x427f48]\n??:? void tmpvw07qkl8.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmphyh14b3a.intersperse(long[], long) [0x427e53]\n??:? void tmphyh14b3a.__unittest_L23_C1() [0x427f48]\n??:? void tmphyh14b3a.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpoz33q48j.intersperse(long[], long) [0x427e4e]\n??:? void tmpoz33q48j.__unittest_L22_C1() [0x427f44]\n??:? void tmpoz33q48j.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i % 2 == 0) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp_2wpyfz3.d(15): Error: semicolon expected, not `:`\n/tmp/tmp_2wpyfz3.d(15): Error: expression expected, not `:`\n/tmp/tmp_2wpyfz3.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2wpyfz3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i % delimeter == 0) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpnn127oeg.d(15): Error: semicolon expected, not `:`\n/tmp/tmpnn127oeg.d(15): Error: expression expected, not `:`\n/tmp/tmpnn127oeg.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnn127oeg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpoz33q48j.intersperse(long[], long) [0x427e4e]\n??:? void tmpoz33q48j.__unittest_L22_C1() [0x427f44]\n??:? void tmpoz33q48j.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmphyh14b3a.intersperse(long[], long) [0x427e53]\n??:? void tmphyh14b3a.__unittest_L23_C1() [0x427f48]\n??:? void tmphyh14b3a.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmp8kzz4n2i.intersperse(long[], long) [0x427e53]\n??:? void tmp8kzz4n2i.__unittest_L24_C1() [0x427f48]\n??:? void tmp8kzz4n2i.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i % 2 == 0) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp_2wpyfz3.d(15): Error: semicolon expected, not `:`\n/tmp/tmp_2wpyfz3.d(15): Error: expression expected, not `:`\n/tmp/tmp_2wpyfz3.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2wpyfz3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length - 1; i += 2) {\n        result[j++] = numbers[i];\n        result[j++] = delimeter;\n    }\n    result[j] = numbers[i];\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da7b]\n??:? _d_newarrayT [0x429800]\n??:? long[] tmpnqpnrjx9.intersperse(long[], long) [0x427e4b]\n??:? void tmpnqpnrjx9.__unittest_L23_C1() [0x427f90]\n??:? void tmpnqpnrjx9.__modtest() [0x4281e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430659]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b08]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a5]\n??:? runModuleUnitTests [0x42c311]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpq6pwqtja.intersperse(long[], long) [0x427e4b]\n??:? void tmpq6pwqtja.__unittest_L23_C1() [0x427f40]\n??:? void tmpq6pwqtja.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmphyh14b3a.intersperse(long[], long) [0x427e53]\n??:? void tmphyh14b3a.__unittest_L23_C1() [0x427f48]\n??:? void tmphyh14b3a.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 + 1];\n    int i = 0;\n    for (long n : numbers) {\n        result[i++] = n;\n        if (i < numbers.length * 2) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpfcsa45jg.d(15): Error: semicolon expected, not `:`\n/tmp/tmpfcsa45jg.d(15): Error: expression expected, not `:`\n/tmp/tmpfcsa45jg.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfcsa45jg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpwr22k6tg.intersperse(long[], long) [0x427e4e]\n??:? void tmpwr22k6tg.__unittest_L24_C1() [0x427f44]\n??:? void tmpwr22k6tg.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * delimeter + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpxrnqfe4b.intersperse(long[], long) [0x427e53]\n??:? void tmpxrnqfe4b.__unittest_L22_C1() [0x427f4c]\n??:? void tmpxrnqfe4b.__modtest() [0x42819c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n    }\n    for (int i = 0; i < numbers.length - 1; i++) {\n        result[i * delimeter + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpnkfr_30t.intersperse(long[], long) [0x427e53]\n??:? void tmpnkfr_30t.__unittest_L22_C1() [0x427f50]\n??:? void tmpnkfr_30t.__modtest() [0x4281a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 + 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        result[i++] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpwaqllbkv.d(15): Error: semicolon expected, not `:`\n/tmp/tmpwaqllbkv.d(15): Error: expression expected, not `:`\n/tmp/tmpwaqllbkv.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwaqllbkv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long n : numbers) {\n        result[i] = n;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpg5n4p_8j.d(15): Error: semicolon expected, not `:`\n/tmp/tmpg5n4p_8j.d(15): Error: expression expected, not `:`\n/tmp/tmpg5n4p_8j.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg5n4p_8j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * delimeter + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpxrnqfe4b.intersperse(long[], long) [0x427e53]\n??:? void tmpxrnqfe4b.__unittest_L22_C1() [0x427f4c]\n??:? void tmpxrnqfe4b.__modtest() [0x42819c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpwr22k6tg.intersperse(long[], long) [0x427e4e]\n??:? void tmpwr22k6tg.__unittest_L24_C1() [0x427f44]\n??:? void tmpwr22k6tg.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i % delimeter == 0) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpnn127oeg.d(15): Error: semicolon expected, not `:`\n/tmp/tmpnn127oeg.d(15): Error: expression expected, not `:`\n/tmp/tmpnn127oeg.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnn127oeg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index] = numbers[i];\n        index++;\n        if (i < numbers.length - 1) {\n            result[index] = delimeter;\n            index++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpex3g1o85.intersperse(long[], long) [0x427e4b]\n??:? void tmpex3g1o85.__unittest_L25_C1() [0x427f40]\n??:? void tmpex3g1o85.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i % 2 == 0) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp_2wpyfz3.d(15): Error: semicolon expected, not `:`\n/tmp/tmp_2wpyfz3.d(15): Error: expression expected, not `:`\n/tmp/tmp_2wpyfz3.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2wpyfz3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        result[i++] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpwx0_ubfb.d(15): Error: semicolon expected, not `:`\n/tmp/tmpwx0_ubfb.d(15): Error: expression expected, not `:`\n/tmp/tmpwx0_ubfb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwx0_ubfb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42d9eb]\n??:? _d_newarrayT [0x429770]\n??:? long[] tmpu7suuawc.intersperse(long[], long) [0x427e53]\n??:? void tmpu7suuawc.__unittest_L19_C1() [0x427f00]\n??:? void tmpu7suuawc.__modtest() [0x428150]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430555]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]\n??:? runModuleUnitTests [0x42c281]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpoz33q48j.intersperse(long[], long) [0x427e4e]\n??:? void tmpoz33q48j.__unittest_L22_C1() [0x427f44]\n??:? void tmpoz33q48j.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpwr22k6tg.intersperse(long[], long) [0x427e4e]\n??:? void tmpwr22k6tg.__unittest_L24_C1() [0x427f44]\n??:? void tmpwr22k6tg.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpoz33q48j.intersperse(long[], long) [0x427e4e]\n??:? void tmpoz33q48j.__unittest_L22_C1() [0x427f44]\n??:? void tmpoz33q48j.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmphyh14b3a.intersperse(long[], long) [0x427e53]\n??:? void tmphyh14b3a.__unittest_L23_C1() [0x427f48]\n??:? void tmphyh14b3a.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i % delimeter == 0) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpnn127oeg.d(15): Error: semicolon expected, not `:`\n/tmp/tmpnn127oeg.d(15): Error: expression expected, not `:`\n/tmp/tmpnn127oeg.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnn127oeg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * delimeter + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpxrnqfe4b.intersperse(long[], long) [0x427e53]\n??:? void tmpxrnqfe4b.__unittest_L22_C1() [0x427f4c]\n??:? void tmpxrnqfe4b.__modtest() [0x42819c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpoz33q48j.intersperse(long[], long) [0x427e4e]\n??:? void tmpoz33q48j.__unittest_L22_C1() [0x427f44]\n??:? void tmpoz33q48j.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpwnfxk2it.d(15): Error: semicolon expected, not `:`\n/tmp/tmpwnfxk2it.d(15): Error: expression expected, not `:`\n/tmp/tmpwnfxk2it.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwnfxk2it.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * delimeter + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpxrnqfe4b.intersperse(long[], long) [0x427e53]\n??:? void tmpxrnqfe4b.__unittest_L22_C1() [0x427f4c]\n??:? void tmpxrnqfe4b.__modtest() [0x42819c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpwr22k6tg.intersperse(long[], long) [0x427e4e]\n??:? void tmpwr22k6tg.__unittest_L24_C1() [0x427f44]\n??:? void tmpwr22k6tg.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    int i = 0;\n    for (int j = 0; j < numbers.length; j++) {\n        result[i] = numbers[j];\n        i++;\n        if (j < numbers.length - 1) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpni87cpdu.intersperse(long[], long) [0x427e4e]\n??:? void tmpni87cpdu.__unittest_L25_C1() [0x427f40]\n??:? void tmpni87cpdu.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmphyh14b3a.intersperse(long[], long) [0x427e53]\n??:? void tmphyh14b3a.__unittest_L23_C1() [0x427f48]\n??:? void tmphyh14b3a.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 + 1];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpexuakx2n.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42840d]\n??:? void tmpexuakx2n.__unittest_L24_C1() [0x427f86]\n??:? void tmpexuakx2n.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i % delimeter == 0) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpnn127oeg.d(15): Error: semicolon expected, not `:`\n/tmp/tmpnn127oeg.d(15): Error: expression expected, not `:`\n/tmp/tmpnn127oeg.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnn127oeg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmphyh14b3a.intersperse(long[], long) [0x427e53]\n??:? void tmphyh14b3a.__unittest_L23_C1() [0x427f48]\n??:? void tmphyh14b3a.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmp8kzz4n2i.intersperse(long[], long) [0x427e53]\n??:? void tmp8kzz4n2i.__unittest_L24_C1() [0x427f48]\n??:? void tmp8kzz4n2i.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n    }\n    for (int i = 0; i < numbers.length - 1; i++) {\n        result[i * delimeter + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpnkfr_30t.intersperse(long[], long) [0x427e53]\n??:? void tmpnkfr_30t.__unittest_L22_C1() [0x427f50]\n??:? void tmpnkfr_30t.__modtest() [0x4281a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * delimeter + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpxrnqfe4b.intersperse(long[], long) [0x427e53]\n??:? void tmpxrnqfe4b.__unittest_L22_C1() [0x427f4c]\n??:? void tmpxrnqfe4b.__modtest() [0x42819c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpq6pwqtja.intersperse(long[], long) [0x427e4b]\n??:? void tmpq6pwqtja.__unittest_L23_C1() [0x427f40]\n??:? void tmpq6pwqtja.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 + 1];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpexuakx2n.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42840d]\n??:? void tmpexuakx2n.__unittest_L24_C1() [0x427f86]\n??:? void tmpexuakx2n.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 + 1];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7ze2_eh8.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42840d]\n??:? void tmp7ze2_eh8.__unittest_L23_C1() [0x427f86]\n??:? void tmp7ze2_eh8.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * delimeter + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpxrnqfe4b.intersperse(long[], long) [0x427e53]\n??:? void tmpxrnqfe4b.__unittest_L22_C1() [0x427f4c]\n??:? void tmpxrnqfe4b.__modtest() [0x42819c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n    }\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter + 1 + delimeter] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da63]\n??:? _d_newarrayT [0x4297e8]\n??:? long[] tmpu2twmklt.intersperse(long[], long) [0x427e53]\n??:? void tmpu2twmklt.__unittest_L22_C1() [0x427f74]\n??:? void tmpu2twmklt.__modtest() [0x4281c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c523]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430641]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b38d]\n??:? runModuleUnitTests [0x42c2f9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42d9eb]\n??:? _d_newarrayT [0x429770]\n??:? long[] tmpu7suuawc.intersperse(long[], long) [0x427e53]\n??:? void tmpu7suuawc.__unittest_L19_C1() [0x427f00]\n??:? void tmpu7suuawc.__modtest() [0x428150]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430555]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]\n??:? runModuleUnitTests [0x42c281]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i % 2 == 0) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp_2wpyfz3.d(15): Error: semicolon expected, not `:`\n/tmp/tmp_2wpyfz3.d(15): Error: expression expected, not `:`\n/tmp/tmp_2wpyfz3.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2wpyfz3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpq6pwqtja.intersperse(long[], long) [0x427e4b]\n??:? void tmpq6pwqtja.__unittest_L23_C1() [0x427f40]\n??:? void tmpq6pwqtja.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42d9eb]\n??:? _d_newarrayT [0x429770]\n??:? long[] tmpu7suuawc.intersperse(long[], long) [0x427e53]\n??:? void tmpu7suuawc.__unittest_L19_C1() [0x427f00]\n??:? void tmpu7suuawc.__modtest() [0x428150]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430555]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]\n??:? runModuleUnitTests [0x42c281]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * delimeter + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpxrnqfe4b.intersperse(long[], long) [0x427e53]\n??:? void tmpxrnqfe4b.__unittest_L22_C1() [0x427f4c]\n??:? void tmpxrnqfe4b.__modtest() [0x42819c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpoz33q48j.intersperse(long[], long) [0x427e4e]\n??:? void tmpoz33q48j.__unittest_L22_C1() [0x427f44]\n??:? void tmpoz33q48j.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i % 2 == 0) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp_2wpyfz3.d(15): Error: semicolon expected, not `:`\n/tmp/tmp_2wpyfz3.d(15): Error: expression expected, not `:`\n/tmp/tmp_2wpyfz3.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2wpyfz3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long n : numbers) {\n        result[i] = n;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpg5n4p_8j.d(15): Error: semicolon expected, not `:`\n/tmp/tmpg5n4p_8j.d(15): Error: expression expected, not `:`\n/tmp/tmpg5n4p_8j.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg5n4p_8j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpq6pwqtja.intersperse(long[], long) [0x427e4b]\n??:? void tmpq6pwqtja.__unittest_L23_C1() [0x427f40]\n??:? void tmpq6pwqtja.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length - 1; i += 2) {\n        result[j++] = numbers[i];\n        result[j++] = delimeter;\n    }\n    if (i == numbers.length - 1) {\n        result[j++] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da9b]\n??:? _d_newarrayT [0x429820]\n??:? long[] tmpuauvm96a.intersperse(long[], long) [0x427e4b]\n??:? void tmpuauvm96a.__unittest_L25_C1() [0x427fac]\n??:? void tmpuauvm96a.__modtest() [0x4281fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c55b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430679]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430605]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3c5]\n??:? runModuleUnitTests [0x42c331]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmphyh14b3a.intersperse(long[], long) [0x427e53]\n??:? void tmphyh14b3a.__unittest_L23_C1() [0x427f48]\n??:? void tmphyh14b3a.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpq6pwqtja.intersperse(long[], long) [0x427e4b]\n??:? void tmpq6pwqtja.__unittest_L23_C1() [0x427f40]\n??:? void tmpq6pwqtja.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpq6pwqtja.intersperse(long[], long) [0x427e4b]\n??:? void tmpq6pwqtja.__unittest_L23_C1() [0x427f40]\n??:? void tmpq6pwqtja.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    for (int j = 0; j < numbers.length; j++) \n    {\n        result[i] = numbers[j];\n        i++;\n        if (j < numbers.length - 1) \n        {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpxuqqwtpz.intersperse(long[], long) [0x427e53]\n??:? void tmpxuqqwtpz.__unittest_L27_C1() [0x427f48]\n??:? void tmpxuqqwtpz.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * delimeter + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpxrnqfe4b.intersperse(long[], long) [0x427e53]\n??:? void tmpxrnqfe4b.__unittest_L22_C1() [0x427f4c]\n??:? void tmpxrnqfe4b.__modtest() [0x42819c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmp8kzz4n2i.intersperse(long[], long) [0x427e53]\n??:? void tmp8kzz4n2i.__unittest_L24_C1() [0x427f48]\n??:? void tmp8kzz4n2i.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpvvft8u2u.intersperse(long[], long) [0x427e4b]\n??:? void tmpvvft8u2u.__unittest_L22_C1() [0x427f44]\n??:? void tmpvvft8u2u.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42d9eb]\n??:? _d_newarrayT [0x429770]\n??:? long[] tmpu7suuawc.intersperse(long[], long) [0x427e53]\n??:? void tmpu7suuawc.__unittest_L19_C1() [0x427f00]\n??:? void tmpu7suuawc.__modtest() [0x428150]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430555]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]\n??:? runModuleUnitTests [0x42c281]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    int j = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length * 2 - 1) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "/tmp/tmp1sdkngfi.d(16): Error: semicolon expected, not `:`\n/tmp/tmp1sdkngfi.d(16): Error: expression expected, not `:`\n/tmp/tmp1sdkngfi.d(16): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1sdkngfi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index] = numbers[i];\n        index += delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42d9fb]\n??:? _d_newarrayT [0x429780]\n??:? long[] tmpko28gkvv.intersperse(long[], long) [0x427e53]\n??:? void tmpko28gkvv.__unittest_L21_C1() [0x427f0c]\n??:? void tmpko28gkvv.__modtest() [0x42815c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b34e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430565]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b325]\n??:? runModuleUnitTests [0x42c291]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:? long[] tmpq6pwqtja.intersperse(long[], long) [0x427e4b]\n??:? void tmpq6pwqtja.__unittest_L23_C1() [0x427f40]\n??:? void tmpq6pwqtja.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmp8kzz4n2i.intersperse(long[], long) [0x427e53]\n??:? void tmp8kzz4n2i.__unittest_L24_C1() [0x427f48]\n??:? void tmp8kzz4n2i.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 + 1];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpexuakx2n.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42840d]\n??:? void tmpexuakx2n.__unittest_L24_C1() [0x427f86]\n??:? void tmpexuakx2n.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 + 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp92619jxz.d(15): Error: semicolon expected, not `:`\n/tmp/tmp92619jxz.d(15): Error: expression expected, not `:`\n/tmp/tmp92619jxz.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92619jxz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i % delimeter == 0) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpnn127oeg.d(15): Error: semicolon expected, not `:`\n/tmp/tmpnn127oeg.d(15): Error: expression expected, not `:`\n/tmp/tmpnn127oeg.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnn127oeg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmp8kzz4n2i.intersperse(long[], long) [0x427e53]\n??:? void tmp8kzz4n2i.__unittest_L24_C1() [0x427f48]\n??:? void tmp8kzz4n2i.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42d9eb]\n??:? _d_newarrayT [0x429770]\n??:? long[] tmpu7suuawc.intersperse(long[], long) [0x427e53]\n??:? void tmpu7suuawc.__unittest_L19_C1() [0x427f00]\n??:? void tmpu7suuawc.__modtest() [0x428150]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430555]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]\n??:? runModuleUnitTests [0x42c281]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i % delimeter == 0) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpnn127oeg.d(15): Error: semicolon expected, not `:`\n/tmp/tmpnn127oeg.d(15): Error: expression expected, not `:`\n/tmp/tmpnn127oeg.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnn127oeg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42d9eb]\n??:? _d_newarrayT [0x429770]\n??:? long[] tmpu7suuawc.intersperse(long[], long) [0x427e53]\n??:? void tmpu7suuawc.__unittest_L19_C1() [0x427f00]\n??:? void tmpu7suuawc.__modtest() [0x428150]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430555]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]\n??:? runModuleUnitTests [0x42c281]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmp8kzz4n2i.intersperse(long[], long) [0x427e53]\n??:? void tmp8kzz4n2i.__unittest_L24_C1() [0x427f48]\n??:? void tmp8kzz4n2i.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42d9eb]\n??:? _d_newarrayT [0x429770]\n??:? long[] tmpu7suuawc.intersperse(long[], long) [0x427e53]\n??:? void tmpu7suuawc.__unittest_L19_C1() [0x427f00]\n??:? void tmpu7suuawc.__modtest() [0x428150]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430555]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]\n??:? runModuleUnitTests [0x42c281]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * delimeter + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpxrnqfe4b.intersperse(long[], long) [0x427e53]\n??:? void tmpxrnqfe4b.__unittest_L22_C1() [0x427f4c]\n??:? void tmpxrnqfe4b.__modtest() [0x42819c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42d9eb]\n??:? _d_newarrayT [0x429770]\n??:? long[] tmpu7suuawc.intersperse(long[], long) [0x427e53]\n??:? void tmpu7suuawc.__unittest_L19_C1() [0x427f00]\n??:? void tmpu7suuawc.__modtest() [0x428150]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430555]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]\n??:? runModuleUnitTests [0x42c281]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmphyh14b3a.intersperse(long[], long) [0x427e53]\n??:? void tmphyh14b3a.__unittest_L23_C1() [0x427f48]\n??:? void tmphyh14b3a.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * delimeter + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpxrnqfe4b.intersperse(long[], long) [0x427e53]\n??:? void tmpxrnqfe4b.__unittest_L22_C1() [0x427f4c]\n??:? void tmpxrnqfe4b.__modtest() [0x42819c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42d9eb]\n??:? _d_newarrayT [0x429770]\n??:? long[] tmpu7suuawc.intersperse(long[], long) [0x427e53]\n??:? void tmpu7suuawc.__unittest_L19_C1() [0x427f00]\n??:? void tmpu7suuawc.__modtest() [0x428150]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430555]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]\n??:? runModuleUnitTests [0x42c281]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 + 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        result[i] = delimeter;\n        i++;\n    }\n    result[result.length - 1] = delimeter;\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "/tmp/tmpnaklcrv6.d(15): Error: semicolon expected, not `:`\n/tmp/tmpnaklcrv6.d(15): Error: expression expected, not `:`\n/tmp/tmpnaklcrv6.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnaklcrv6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long n : numbers) {\n        result[i] = n;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpg5n4p_8j.d(15): Error: semicolon expected, not `:`\n/tmp/tmpg5n4p_8j.d(15): Error: expression expected, not `:`\n/tmp/tmpg5n4p_8j.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg5n4p_8j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i % delimeter == 0) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "/tmp/tmpvbu19ic5.d(15): Error: semicolon expected, not `:`\n/tmp/tmpvbu19ic5.d(15): Error: expression expected, not `:`\n/tmp/tmpvbu19ic5.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvbu19ic5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 + 1];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7ze2_eh8.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42840d]\n??:? void tmp7ze2_eh8.__unittest_L23_C1() [0x427f86]\n??:? void tmp7ze2_eh8.__modtest() [0x428190]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpoz33q48j.intersperse(long[], long) [0x427e4e]\n??:? void tmpoz33q48j.__unittest_L22_C1() [0x427f44]\n??:? void tmpoz33q48j.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i * delimeter + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da3b]\n??:? _d_newarrayT [0x4297c0]\n??:? long[] tmpxrnqfe4b.intersperse(long[], long) [0x427e53]\n??:? void tmpxrnqfe4b.__unittest_L22_C1() [0x427f4c]\n??:? void tmpxrnqfe4b.__modtest() [0x42819c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430619]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]\n??:? runModuleUnitTests [0x42c2d1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    for (int j = 0; j < numbers.length; j++) {\n        result[i++] = numbers[j];\n        if (j < numbers.length - 1) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpmvig7pp_.intersperse(long[], long) [0x427e53]\n??:? void tmpmvig7pp_.__unittest_L23_C1() [0x427f48]\n??:? void tmpmvig7pp_.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i * delimeter] = numbers[i];\n    }\n    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i * delimeter + 1] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da5b]\n??:? _d_newarrayT [0x4297e0]\n??:? long[] tmpcx2r_knr.intersperse(long[], long) [0x427e53]\n??:? void tmpcx2r_knr.__unittest_L24_C1() [0x427f70]\n??:? void tmpcx2r_knr.__modtest() [0x4281c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c51b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430639]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ae8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b385]\n??:? runModuleUnitTests [0x42c2f1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 + 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        result[i++] = delimeter;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmpwaqllbkv.d(15): Error: semicolon expected, not `:`\n/tmp/tmpwaqllbkv.d(15): Error: expression expected, not `:`\n/tmp/tmpwaqllbkv.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwaqllbkv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmphyh14b3a.intersperse(long[], long) [0x427e53]\n??:? void tmphyh14b3a.__unittest_L23_C1() [0x427f48]\n??:? void tmphyh14b3a.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 + 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i % 2 == 0) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp11fns5h2.d(15): Error: semicolon expected, not `:`\n/tmp/tmp11fns5h2.d(15): Error: expression expected, not `:`\n/tmp/tmp11fns5h2.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp11fns5h2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmphyh14b3a.intersperse(long[], long) [0x427e53]\n??:? void tmphyh14b3a.__unittest_L23_C1() [0x427f48]\n??:? void tmphyh14b3a.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmp8kzz4n2i.intersperse(long[], long) [0x427e53]\n??:? void tmp8kzz4n2i.__unittest_L24_C1() [0x427f48]\n??:? void tmp8kzz4n2i.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmp8kzz4n2i.intersperse(long[], long) [0x427e53]\n??:? void tmp8kzz4n2i.__unittest_L24_C1() [0x427f48]\n??:? void tmp8kzz4n2i.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpwr22k6tg.intersperse(long[], long) [0x427e4e]\n??:? void tmpwr22k6tg.__unittest_L24_C1() [0x427f44]\n??:? void tmpwr22k6tg.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 + 1];\n    int i = 0;\n    for (long n : numbers) {\n        result[i] = n;\n        i++;\n        if (i % 2 == 0) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "/tmp/tmp1bjx95d8.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1bjx95d8.d(15): Error: expression expected, not `:`\n/tmp/tmp1bjx95d8.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bjx95d8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    for (int j = 0; j < numbers.length; j++) {\n        result[i++] = numbers[j];\n        if (j < numbers.length - 1) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpmvig7pp_.intersperse(long[], long) [0x427e53]\n??:? void tmpmvig7pp_.__unittest_L23_C1() [0x427f48]\n??:? void tmpmvig7pp_.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i++] = number;\n        if (i < numbers.length) {\n            result[i++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp1cbo9br1.d(15): Error: semicolon expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: expression expected, not `:`\n/tmp/tmp1cbo9br1.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cbo9br1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        result[index++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[index++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmphyh14b3a.intersperse(long[], long) [0x427e53]\n??:? void tmphyh14b3a.__unittest_L23_C1() [0x427f48]\n??:? void tmphyh14b3a.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    int i = 0;\n    int j = 0;\n    for (; i < numbers.length; i++) {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[j++] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmp8kzz4n2i.intersperse(long[], long) [0x427e53]\n??:? void tmp8kzz4n2i.__unittest_L24_C1() [0x427f48]\n??:? void tmp8kzz4n2i.__modtest() [0x428198]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + numbers.length - 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n        if (i < numbers.length - 1) {\n            result[i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da33]\n??:? _d_newarrayT [0x4297b8]\n??:? long[] tmpoz33q48j.intersperse(long[], long) [0x427e4e]\n??:? void tmpoz33q48j.__unittest_L22_C1() [0x427f44]\n??:? void tmpoz33q48j.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b386]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430611]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43059d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b35d]\n??:? runModuleUnitTests [0x42c2c9]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i * delimeter] = numbers[i];\n    }\n    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i * delimeter + 1] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42da5b]\n??:? _d_newarrayT [0x4297e0]\n??:? long[] tmpcx2r_knr.intersperse(long[], long) [0x427e53]\n??:? void tmpcx2r_knr.__unittest_L24_C1() [0x427f70]\n??:? void tmpcx2r_knr.__modtest() [0x4281c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c51b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430639]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ae8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b385]\n??:? runModuleUnitTests [0x42c2f1]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length + (numbers.length - 1) * delimeter];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * delimeter] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293547,
      "stdout": "",
      "stderr": "core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation failed\n----------------\n??:? _d_newarrayU [0x42d9eb]\n??:? _d_newarrayT [0x429770]\n??:? long[] tmpu7suuawc.intersperse(long[], long) [0x427e53]\n??:? void tmpu7suuawc.__unittest_L19_C1() [0x427f00]\n??:? void tmpu7suuawc.__modtest() [0x428150]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430555]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]\n??:? runModuleUnitTests [0x42c281]\n??:? void rt.dmain2",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    for (long number : numbers) {\n        result[i] = number;\n        i++;\n        if (i < numbers.length) {\n            result[i] = delimeter;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1664293546,
      "stdout": "",
      "stderr": "/tmp/tmp7ou1ffwb.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: expression expected, not `:`\n/tmp/tmp7ou1ffwb.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ou1ffwb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}