{
  "name": "HumanEval_12_longest",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n",
  "tests": "unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp748cmzik.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp748cmzik.d(21): Error: expression expected, not `:`\n/tmp/tmp748cmzik.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp748cmzik.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    else\n    {\n        int max = 0;\n        string maxString = null;\n        for (string s : strings)\n        {\n            if (s.length() > max)\n            {\n                max = s.length();\n                maxString = s;\n            }\n        }\n        return maxString;\n    }\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmppnb6jlj5.d(22): Error: found `s` when expecting `;` following statement\n/tmp/tmppnb6jlj5.d(22): Error: expression expected, not `:`\n/tmp/tmppnb6jlj5.d(22): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppnb6jlj5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string max_string = null;\n    for (string s : strings)\n    {\n        if (s.length > max)\n        {\n            max = s.length;\n            max_string = s;\n        }\n    }\n    return max_string;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpl_c2iao2.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpl_c2iao2.d(21): Error: expression expected, not `:`\n/tmp/tmpl_c2iao2.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl_c2iao2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = strings[0].length();\n    int maxIndex = 0;\n    for (int i = 1; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLength)\n        {\n            maxLength = strings[i].length();\n            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpdqvl_nt3.d(19): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(23): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(25): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpdqvl_nt3.d(29): Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdqvl_nt3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxStr = s;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp58rc386a.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp58rc386a.d(21): Error: expression expected, not `:`\n/tmp/tmp58rc386a.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58rc386a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n        if (s.length() > max)\n        {\n            max = s.length();\n            maxString = s;\n        }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp7gjqb1jd.d(20): Error: found `s` when expecting `;` following statement\n/tmp/tmp7gjqb1jd.d(20): Error: expression expected, not `:`\n/tmp/tmp7gjqb1jd.d(20): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7gjqb1jd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest = null;\n    int maxLength = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLength)\n        {\n            maxLength = strings[i].length();\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpa3s6fr8n.d(23): Error: no property `length` for type `string`\n/tmp/tmpa3s6fr8n.d(25): Error: no property `length` for type `string`\n/tmp/tmpa3s6fr8n.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa3s6fr8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string max_string = null;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > max)\n        {\n            max = strings[i].length();\n            max_string = strings[i];\n        }\n    }\n    return max_string;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpzibbj4p9.d(23): Error: no property `length` for type `string`\n/tmp/tmpzibbj4p9.d(25): Error: no property `length` for type `string`\n/tmp/tmpzibbj4p9.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpzibbj4p9.d(29): Error: cannot implicitly convert expression `max_string` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzibbj4p9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string str : strings)\n    {\n        if (str.length() > maxLen)\n        {\n            maxLen = str.length();\n            maxStr = str;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpj5pigz2z.d(21): Error: found `str` when expecting `;` following statement\n/tmp/tmpj5pigz2z.d(21): Error: expression expected, not `:`\n/tmp/tmpj5pigz2z.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5pigz2z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string max_string = \"\";\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > max)\n        {\n            max = strings[i].length();\n            max_string = strings[i];\n        }\n    }\n    return max_string;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpd4rwbpsy.d(23): Error: no property `length` for type `string`\n/tmp/tmpd4rwbpsy.d(25): Error: no property `length` for type `string`\n/tmp/tmpd4rwbpsy.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpd4rwbpsy.d(29): Error: cannot implicitly convert expression `max_string` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd4rwbpsy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = strings[0].length();\n    for (int i = 1; i < strings.length; i++)\n        if (strings[i].length() > maxLength)\n            maxLength = strings[i].length();\n    \n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].length() == maxLength)\n            return strings[i];\n    \n    return null;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpg2gwppvq.d(19): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(21): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(22): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(25): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpg2gwppvq.d(26): Error: cannot implicitly convert expression `strings[cast(ulong)i]` of type `string` to `Nullable!string`\n/tmp/tmpg2gwppvq.d(28): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg2gwppvq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > max)\n        {\n            max = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpwiygray1.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpwiygray1.d(21): Error: expression expected, not `:`\n/tmp/tmpwiygray1.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiygray1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxStr = \"\";\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > max)\n        {\n            max = strings[i].length();\n            maxStr = strings[i];\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpwp8u2hak.d(23): Error: no property `length` for type `string`\n/tmp/tmpwp8u2hak.d(25): Error: no property `length` for type `string`\n/tmp/tmpwp8u2hak.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpwp8u2hak.d(29): Error: cannot implicitly convert expression `maxStr` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwp8u2hak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length > max)\n        {\n            max = s.length;\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpqqhcnl2f.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpqqhcnl2f.d(21): Error: expression expected, not `:`\n/tmp/tmpqqhcnl2f.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqqhcnl2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLength)\n        {\n            maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpz1l16uv7.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpz1l16uv7.d(21): Error: expression expected, not `:`\n/tmp/tmpz1l16uv7.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1l16uv7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest_string = null;\n    int longest_length = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longest_length)\n        {\n            longest_length = strings[i].length();\n            longest_string = strings[i];\n        }\n    }\n    return longest_string;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpmyem79k8.d(23): Error: no property `length` for type `string`\n/tmp/tmpmyem79k8.d(25): Error: no property `length` for type `string`\n/tmp/tmpmyem79k8.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmyem79k8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string str : strings)\n    {\n        if (str.length() > maxLen)\n        {\n            maxLen = str.length();\n            maxStr = str;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpj5pigz2z.d(21): Error: found `str` when expecting `;` following statement\n/tmp/tmpj5pigz2z.d(21): Error: expression expected, not `:`\n/tmp/tmpj5pigz2z.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5pigz2z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp748cmzik.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp748cmzik.d(21): Error: expression expected, not `:`\n/tmp/tmp748cmzik.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp748cmzik.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length > maxLen)\n        {\n            maxLen = s.length;\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp2nynhjg7.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp2nynhjg7.d(21): Error: expression expected, not `:`\n/tmp/tmp2nynhjg7.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2nynhjg7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length > maxLength)\n        {\n            maxLength = s.length;\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpt368rp2w.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpt368rp2w.d(21): Error: expression expected, not `:`\n/tmp/tmpt368rp2w.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt368rp2w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLength)\n        {\n            maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpz1l16uv7.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpz1l16uv7.d(21): Error: expression expected, not `:`\n/tmp/tmpz1l16uv7.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1l16uv7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string str : strings)\n    {\n        if (str.length() > maxLen)\n        {\n            maxLen = str.length();\n            maxStr = str;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpj5pigz2z.d(21): Error: found `str` when expecting `;` following statement\n/tmp/tmpj5pigz2z.d(21): Error: expression expected, not `:`\n/tmp/tmpj5pigz2z.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5pigz2z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longestSoFar = null;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longestSoFar.length())\n            longestSoFar = strings[i];\n    }\n    return longestSoFar;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpryrs2y1c.d(22): Error: no property `length` for type `string`\n/tmp/tmpryrs2y1c.d(22): Error: function expected before `()`, not `longestSoFar.get().length` of type `ulong`\n/tmp/tmpryrs2y1c.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpryrs2y1c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) max = null;\n    int maxLen = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLen)\n        {\n            max = strings[i];\n            maxLen = strings[i].length();\n        }\n    }\n    return max;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmp3b680y0m.d(23): Error: no property `length` for type `string`\n/tmp/tmp3b680y0m.d(26): Error: no property `length` for type `string`\n/tmp/tmp3b680y0m.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3b680y0m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n        if (s.length > maxLen)\n        {\n            maxLen = s.length;\n            maxString = s;\n        }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpr8q1e__e.d(20): Error: found `s` when expecting `;` following statement\n/tmp/tmpr8q1e__e.d(20): Error: expression expected, not `:`\n/tmp/tmpr8q1e__e.d(20): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8q1e__e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = strings[0].length();\n    int maxIndex = 0;\n    for (int i = 1; i < strings.length; i++)\n        if (strings[i].length() > maxLength)\n        {\n            maxLength = strings[i].length();\n            maxIndex = i;\n        }\n    return strings[maxIndex];\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmph4k4t6em.d(19): Error: no property `length` for type `string`\n/tmp/tmph4k4t6em.d(22): Error: no property `length` for type `string`\n/tmp/tmph4k4t6em.d(24): Error: no property `length` for type `string`\n/tmp/tmph4k4t6em.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmph4k4t6em.d(27): Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph4k4t6em.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) max = null;\n    int maxLength = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLength)\n        {\n            max = strings[i];\n            maxLength = strings[i].length();\n        }\n    }\n    return max;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmprn5lex4t.d(23): Error: no property `length` for type `string`\n/tmp/tmprn5lex4t.d(26): Error: no property `length` for type `string`\n/tmp/tmprn5lex4t.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprn5lex4t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string str : strings)\n    {\n        if (str.length() > maxLen)\n        {\n            maxLen = str.length();\n            maxStr = str;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpj5pigz2z.d(21): Error: found `str` when expecting `;` following statement\n/tmp/tmpj5pigz2z.d(21): Error: expression expected, not `:`\n/tmp/tmpj5pigz2z.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5pigz2z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLength)\n        {\n            maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpz1l16uv7.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpz1l16uv7.d(21): Error: expression expected, not `:`\n/tmp/tmpz1l16uv7.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1l16uv7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLen)\n        {\n            maxLen = strings[i].length();\n            maxString = strings[i];\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpztrezkw2.d(23): Error: no property `length` for type `string`\n/tmp/tmpztrezkw2.d(25): Error: no property `length` for type `string`\n/tmp/tmpztrezkw2.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpztrezkw2.d(29): Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpztrezkw2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    int maxLength = strings[0].length();\n    for (int i = 1; i < strings.length; i++)\n        if (strings[i].length() > maxLength)\n            maxLength = strings[i].length();\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].length() == maxLength)\n            return strings[i];\n    return null;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpqiy9ogby.d(18): Error: no property `length` for type `string`\n/tmp/tmpqiy9ogby.d(20): Error: no property `length` for type `string`\n/tmp/tmpqiy9ogby.d(21): Error: no property `length` for type `string`\n/tmp/tmpqiy9ogby.d(23): Error: no property `length` for type `string`\n/tmp/tmpqiy9ogby.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpqiy9ogby.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i]` of type `string` to `Nullable!string`\n/tmp/tmpqiy9ogby.d(25): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqiy9ogby.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = strings[0].length();\n    int maxIndex = 0;\n    for (int i = 1; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLength)\n        {\n            maxLength = strings[i].length();\n            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpdqvl_nt3.d(19): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(23): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(25): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpdqvl_nt3.d(29): Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdqvl_nt3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string max_str = null;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > max)\n        {\n            max = strings[i].length();\n            max_str = strings[i];\n        }\n    }\n    return max_str;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmp2ho1tn4q.d(23): Error: no property `length` for type `string`\n/tmp/tmp2ho1tn4q.d(25): Error: no property `length` for type `string`\n/tmp/tmp2ho1tn4q.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp2ho1tn4q.d(29): Error: cannot implicitly convert expression `max_str` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ho1tn4q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > max)\n        {\n            max = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpcp80zut8.d(20): Error: found `s` when expecting `;` following statement\n/tmp/tmpcp80zut8.d(20): Error: expression expected, not `:`\n/tmp/tmpcp80zut8.d(20): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcp80zut8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxStr = null;\n    for (string str : strings)\n    {\n        if (str.length() > max)\n        {\n            max = str.length();\n            maxStr = str;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpbrh5vzap.d(21): Error: found `str` when expecting `;` following statement\n/tmp/tmpbrh5vzap.d(21): Error: expression expected, not `:`\n/tmp/tmpbrh5vzap.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbrh5vzap.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = strings[0].length();\n    for (int i = 1; i < strings.length; i++)\n        if (strings[i].length() > maxLength)\n            maxLength = strings[i].length();\n    \n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].length() == maxLength)\n            return strings[i];\n    \n    return null;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpg2gwppvq.d(19): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(21): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(22): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(25): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpg2gwppvq.d(26): Error: cannot implicitly convert expression `strings[cast(ulong)i]` of type `string` to `Nullable!string`\n/tmp/tmpg2gwppvq.d(28): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg2gwppvq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string str : strings)\n    {\n        if (str.length() > maxLen)\n        {\n            maxLen = str.length();\n            maxStr = str;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpj5pigz2z.d(21): Error: found `str` when expecting `;` following statement\n/tmp/tmpj5pigz2z.d(21): Error: expression expected, not `:`\n/tmp/tmpj5pigz2z.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5pigz2z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxString = null;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > max)\n        {\n            max = strings[i].length();\n            maxString = strings[i];\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmp7tnky0vn.d(23): Error: no property `length` for type `string`\n/tmp/tmp7tnky0vn.d(25): Error: no property `length` for type `string`\n/tmp/tmp7tnky0vn.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp7tnky0vn.d(29): Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7tnky0vn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLen)\n        {\n            maxLen = strings[i].length();\n            maxString = strings[i];\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpztrezkw2.d(23): Error: no property `length` for type `string`\n/tmp/tmpztrezkw2.d(25): Error: no property `length` for type `string`\n/tmp/tmpztrezkw2.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpztrezkw2.d(29): Error: cannot implicitly convert expression `maxString` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpztrezkw2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLength)\n        {\n            maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpz1l16uv7.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpz1l16uv7.d(21): Error: expression expected, not `:`\n/tmp/tmpz1l16uv7.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1l16uv7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > max)\n        {\n            max = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpwiygray1.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpwiygray1.d(21): Error: expression expected, not `:`\n/tmp/tmpwiygray1.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiygray1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longestSoFar = null;\n    int longestSoFarLength = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longestSoFarLength)\n        {\n            longestSoFar = strings[i];\n            longestSoFarLength = strings[i].length();\n        }\n    }\n    return longestSoFar;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmp02z2c73m.d(23): Error: no property `length` for type `string`\n/tmp/tmp02z2c73m.d(26): Error: no property `length` for type `string`\n/tmp/tmp02z2c73m.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02z2c73m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) longest = null;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longest.length())\n            longest = strings[i];\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmp2s4py98b.d(21): Error: no property `length` for type `string`\n/tmp/tmp2s4py98b.d(21): Error: function expected before `()`, not `longest.get().length` of type `ulong`\n/tmp/tmp2s4py98b.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s4py98b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest = null;\n    int maxLength = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLength)\n        {\n            maxLength = strings[i].length();\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpa3s6fr8n.d(23): Error: no property `length` for type `string`\n/tmp/tmpa3s6fr8n.d(25): Error: no property `length` for type `string`\n/tmp/tmpa3s6fr8n.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa3s6fr8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) max = null;\n    for (int i = 0; i < strings.length; i++)\n        if (max == null || strings[i].length() > max.unbox())\n            max = strings[i];\n    return max;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmp10t48bkd.d(20): Error: no property `length` for type `string`\n/tmp/tmp10t48bkd.d(20): Error: no property `unbox` for type `Nullable!string`\n/tmp/tmp10t48bkd.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp10t48bkd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest = null;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longest.getOrElse(strings[i]))\n            longest = strings[i];\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpe3mi7fwz.d(22): Error: no property `length` for type `string`\n/tmp/tmpe3mi7fwz.d(22): Error: no property `getOrElse` for type `Nullable!string`\n/tmp/tmpe3mi7fwz.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe3mi7fwz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLength)\n        {\n            maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpz1l16uv7.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpz1l16uv7.d(21): Error: expression expected, not `:`\n/tmp/tmpz1l16uv7.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1l16uv7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxStr = s;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp58rc386a.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp58rc386a.d(21): Error: expression expected, not `:`\n/tmp/tmp58rc386a.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58rc386a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLength)\n        {\n            maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpz1l16uv7.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpz1l16uv7.d(21): Error: expression expected, not `:`\n/tmp/tmpz1l16uv7.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1l16uv7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest_string = null;\n    int longest_length = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longest_length)\n        {\n            longest_length = strings[i].length();\n            longest_string = strings[i];\n        }\n    }\n    return longest_string;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpmyem79k8.d(23): Error: no property `length` for type `string`\n/tmp/tmpmyem79k8.d(25): Error: no property `length` for type `string`\n/tmp/tmpmyem79k8.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmyem79k8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length > maxLen)\n        {\n            maxLen = s.length;\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp2nynhjg7.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp2nynhjg7.d(21): Error: expression expected, not `:`\n/tmp/tmp2nynhjg7.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2nynhjg7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest = null;\n    int maxLength = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLength)\n        {\n            maxLength = strings[i].length();\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpa3s6fr8n.d(23): Error: no property `length` for type `string`\n/tmp/tmpa3s6fr8n.d(25): Error: no property `length` for type `string`\n/tmp/tmpa3s6fr8n.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa3s6fr8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest_string = null;\n    int longest_length = 0;\n    \n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longest_length)\n        {\n            longest_length = strings[i].length();\n            longest_string = strings[i];\n        }\n    }\n    \n    return longest_string;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmp4in51ddt.d(24): Error: no property `length` for type `string`\n/tmp/tmp4in51ddt.d(26): Error: no property `length` for type `string`\n/tmp/tmp4in51ddt.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4in51ddt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    else if (strings.length == 1)\n        return strings[0];\n    else\n    {\n        int max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < strings.length; i++)\n        {\n            if (strings[i].length() > max)\n            {\n                max = strings[i].length();\n                maxIndex = i;\n            }\n        }\n        return strings[maxIndex];\n    }\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmp3dsvjszp.d(26): Error: no property `length` for type `string`\n/tmp/tmp3dsvjszp.d(28): Error: no property `length` for type `string`\n/tmp/tmp3dsvjszp.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmp3dsvjszp.d(19): Error: cannot implicitly convert expression `strings[0]` of type `string` to `Nullable!string`\n/tmp/tmp3dsvjszp.d(32): Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3dsvjszp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLength)\n        {\n            maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpz1l16uv7.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpz1l16uv7.d(21): Error: expression expected, not `:`\n/tmp/tmpz1l16uv7.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1l16uv7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string str : strings)\n    {\n        if (str.length() > maxLen)\n        {\n            maxLen = str.length();\n            maxStr = str;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpj5pigz2z.d(21): Error: found `str` when expecting `;` following statement\n/tmp/tmpj5pigz2z.d(21): Error: expression expected, not `:`\n/tmp/tmpj5pigz2z.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5pigz2z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxStr = \"\";\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > max)\n        {\n            max = strings[i].length();\n            maxStr = strings[i];\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpwp8u2hak.d(23): Error: no property `length` for type `string`\n/tmp/tmpwp8u2hak.d(25): Error: no property `length` for type `string`\n/tmp/tmpwp8u2hak.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpwp8u2hak.d(29): Error: cannot implicitly convert expression `maxStr` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwp8u2hak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    \n    for (string str : strings)\n    {\n        if (str.length() > maxLen)\n        {\n            maxLen = str.length();\n            maxStr = str;\n        }\n    }\n    \n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpqwf_9ryr.d(22): Error: found `str` when expecting `;` following statement\n/tmp/tmpqwf_9ryr.d(22): Error: expression expected, not `:`\n/tmp/tmpqwf_9ryr.d(22): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqwf_9ryr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string str : strings)\n    {\n        if (str.length() > maxLen)\n        {\n            maxLen = str.length();\n            maxStr = str;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpj5pigz2z.d(21): Error: found `str` when expecting `;` following statement\n/tmp/tmpj5pigz2z.d(21): Error: expression expected, not `:`\n/tmp/tmpj5pigz2z.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5pigz2z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > max)\n        {\n            max = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpwiygray1.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpwiygray1.d(21): Error: expression expected, not `:`\n/tmp/tmpwiygray1.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiygray1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest = null;\n    int longestLength = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longestLength)\n        {\n            longest = strings[i];\n            longestLength = strings[i].length();\n        }\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmp8zpkgl5c.d(23): Error: no property `length` for type `string`\n/tmp/tmp8zpkgl5c.d(26): Error: no property `length` for type `string`\n/tmp/tmp8zpkgl5c.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8zpkgl5c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) longest = null;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longest.value.length())\n            longest = strings[i];\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmp2f6ec_n6.d(21): Error: no property `length` for type `string`\n/tmp/tmp2f6ec_n6.d(21): Error: no property `value` for type `Nullable!string`, did you mean `std.typecons.Nullable!string.Nullable._value`?\n/tmp/tmp2f6ec_n6.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2f6ec_n6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpj0g96t4n.d(20): Error: found `s` when expecting `;` following statement\n/tmp/tmpj0g96t4n.d(20): Error: expression expected, not `:`\n/tmp/tmpj0g96t4n.d(20): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj0g96t4n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = strings[0].length();\n    int maxIndex = 0;\n    for (int i = 1; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLength)\n        {\n            maxLength = strings[i].length();\n            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpdqvl_nt3.d(19): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(23): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(25): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpdqvl_nt3.d(29): Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdqvl_nt3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest = null;\n    int longest_len = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longest_len)\n        {\n            longest = strings[i];\n            longest_len = strings[i].length();\n        }\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmp7gk6evxd.d(23): Error: no property `length` for type `string`\n/tmp/tmp7gk6evxd.d(26): Error: no property `length` for type `string`\n/tmp/tmp7gk6evxd.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7gk6evxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLength)\n        {\n            maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpz1l16uv7.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpz1l16uv7.d(21): Error: expression expected, not `:`\n/tmp/tmpz1l16uv7.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1l16uv7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLength)\n        {\n            maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpz1l16uv7.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpz1l16uv7.d(21): Error: expression expected, not `:`\n/tmp/tmpz1l16uv7.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1l16uv7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > max)\n        {\n            max = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpwiygray1.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpwiygray1.d(21): Error: expression expected, not `:`\n/tmp/tmpwiygray1.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiygray1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length > maxLength)\n        {\n            maxLength = s.length;\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpt368rp2w.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpt368rp2w.d(21): Error: expression expected, not `:`\n/tmp/tmpt368rp2w.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt368rp2w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) max = strings[0];\n    for (int i = 1; i < strings.length; i++)\n        if (strings[i].length > max.length)\n            max = strings[i];\n    return max;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmpuj2lpks3.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuj2lpks3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > max)\n        {\n            max = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpwiygray1.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpwiygray1.d(21): Error: expression expected, not `:`\n/tmp/tmpwiygray1.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiygray1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    int maxLength = strings[0].length();\n    for (int i = 1; i < strings.length; i++)\n        if (strings[i].length() > maxLength)\n            maxLength = strings[i].length();\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].length() == maxLength)\n            return strings[i];\n    return null;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpqiy9ogby.d(18): Error: no property `length` for type `string`\n/tmp/tmpqiy9ogby.d(20): Error: no property `length` for type `string`\n/tmp/tmpqiy9ogby.d(21): Error: no property `length` for type `string`\n/tmp/tmpqiy9ogby.d(23): Error: no property `length` for type `string`\n/tmp/tmpqiy9ogby.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpqiy9ogby.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i]` of type `string` to `Nullable!string`\n/tmp/tmpqiy9ogby.d(25): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqiy9ogby.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > max)\n        {\n            max = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpwiygray1.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpwiygray1.d(21): Error: expression expected, not `:`\n/tmp/tmpwiygray1.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiygray1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = strings[0].length();\n    Nullable!(string) maxString = strings[0];\n    for (int i = 1; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLength)\n        {\n            maxLength = strings[i].length();\n            maxString = strings[i];\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmpki74tijy.d(19): Error: no property `length` for type `string`\n/tmp/tmpki74tijy.d(23): Error: no property `length` for type `string`\n/tmp/tmpki74tijy.d(25): Error: no property `length` for type `string`\n/tmp/tmpki74tijy.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpki74tijy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) max = null;\n    int maxLen = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLen)\n        {\n            max = strings[i];\n            maxLen = strings[i].length();\n        }\n    }\n    return max;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmp_zkkpck0.d(22): Error: no property `length` for type `string`\n/tmp/tmp_zkkpck0.d(25): Error: no property `length` for type `string`\n/tmp/tmp_zkkpck0.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_zkkpck0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest = null;\n    int longestLength = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longestLength)\n        {\n            longest = strings[i];\n            longestLength = strings[i].length();\n        }\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmp8zpkgl5c.d(23): Error: no property `length` for type `string`\n/tmp/tmp8zpkgl5c.d(26): Error: no property `length` for type `string`\n/tmp/tmp8zpkgl5c.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8zpkgl5c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) longest = null;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length > longest.length)\n            longest = strings[i];\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmpypjxy_ei.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypjxy_ei.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string str : strings)\n    {\n        if (str.length() > maxLen)\n        {\n            maxLen = str.length();\n            maxStr = str;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpj5pigz2z.d(21): Error: found `str` when expecting `;` following statement\n/tmp/tmpj5pigz2z.d(21): Error: expression expected, not `:`\n/tmp/tmpj5pigz2z.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5pigz2z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string s : strings)\n    {\n        if (s.length() > maxLength)\n        {\n            maxLength = s.length();\n            maxString = s;\n        }\n    }\n    \n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpp0cpfcot.d(22): Error: found `s` when expecting `;` following statement\n/tmp/tmpp0cpfcot.d(22): Error: expression expected, not `:`\n/tmp/tmpp0cpfcot.d(22): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0cpfcot.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxStr = \"\";\n    for (string s : strings)\n        if (s.length() > max)\n        {\n            max = s.length();\n            maxStr = s;\n        }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmp0wvf8n4o.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp0wvf8n4o.d(21): Error: expression expected, not `:`\n/tmp/tmp0wvf8n4o.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0wvf8n4o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest = null;\n    int longest_len = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longest_len)\n        {\n            longest = strings[i];\n            longest_len = strings[i].length();\n        }\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmp7gk6evxd.d(23): Error: no property `length` for type `string`\n/tmp/tmp7gk6evxd.d(26): Error: no property `length` for type `string`\n/tmp/tmp7gk6evxd.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7gk6evxd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = strings[0].length();\n    for (int i = 1; i < strings.length; i++)\n        if (strings[i].length() > maxLength)\n            maxLength = strings[i].length();\n    \n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].length() == maxLength)\n            return strings[i];\n    \n    return null;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpg2gwppvq.d(19): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(21): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(22): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(25): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpg2gwppvq.d(26): Error: cannot implicitly convert expression `strings[cast(ulong)i]` of type `string` to `Nullable!string`\n/tmp/tmpg2gwppvq.d(28): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg2gwppvq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    int maxLength = 0;\n    string maxString = null;\n    for (string s : strings)\n        if (s.length() > maxLength)\n        {\n            maxLength = s.length();\n            maxString = s;\n        }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmp_fguuc6w.d(20): Error: found `s` when expecting `;` following statement\n/tmp/tmp_fguuc6w.d(20): Error: expression expected, not `:`\n/tmp/tmp_fguuc6w.d(20): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_fguuc6w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n    for (string s : strings)\n        if (s.length() > maxLength)\n        {\n            maxLength = s.length();\n            maxString = s;\n        }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpmimus5tr.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpmimus5tr.d(21): Error: expression expected, not `:`\n/tmp/tmpmimus5tr.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmimus5tr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) max = null;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (max == null || strings[i].length() > max.unbox())\n            max = strings[i];\n    }\n    return max;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmpjwk42hp8.d(21): Error: no property `length` for type `string`\n/tmp/tmpjwk42hp8.d(21): Error: no property `unbox` for type `Nullable!string`\n/tmp/tmpjwk42hp8.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjwk42hp8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) max = null;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (max == null || strings[i].length() > max.unwrap().length())\n            max = strings[i];\n    }\n    return max;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmptttudggm.d(21): Error: no property `length` for type `string`\n/tmp/tmptttudggm.d(21): Error: template `std.typecons.unwrap` cannot deduce function from argument types `!()(Nullable!string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(5368):        `std.typecons.unwrap(Target) if (isMutable!Target)`\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(5401):        `std.typecons.unwrap(Target) if (!isMutable!Target)`\n/tmp/tmptttudggm.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptttudggm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = strings[0].length();\n    for (int i = 1; i < strings.length; i++)\n        if (strings[i].length() > maxLength)\n            maxLength = strings[i].length();\n    \n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].length() == maxLength)\n            return strings[i];\n    \n    return null;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpg2gwppvq.d(19): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(21): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(22): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(25): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpg2gwppvq.d(26): Error: cannot implicitly convert expression `strings[cast(ulong)i]` of type `string` to `Nullable!string`\n/tmp/tmpg2gwppvq.d(28): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg2gwppvq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > max)\n        {\n            max = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpwiygray1.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpwiygray1.d(21): Error: expression expected, not `:`\n/tmp/tmpwiygray1.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiygray1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest = null;\n    int longestLength = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longestLength)\n        {\n            longest = strings[i];\n            longestLength = strings[i].length();\n        }\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmp8zpkgl5c.d(23): Error: no property `length` for type `string`\n/tmp/tmp8zpkgl5c.d(26): Error: no property `length` for type `string`\n/tmp/tmp8zpkgl5c.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8zpkgl5c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) longest = null;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length > longest.length)\n            longest = strings[i];\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmpypjxy_ei.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypjxy_ei.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxStr = s;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp58rc386a.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp58rc386a.d(21): Error: expression expected, not `:`\n/tmp/tmp58rc386a.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58rc386a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length > maxLen)\n        {\n            maxLen = s.length;\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp2nynhjg7.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp2nynhjg7.d(21): Error: expression expected, not `:`\n/tmp/tmp2nynhjg7.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2nynhjg7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = \"\";\n    for (string str : strings)\n    {\n        if (str.length() > maxLen)\n        {\n            maxLen = str.length();\n            maxStr = str;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpv4x1ilhq.d(21): Error: found `str` when expecting `;` following statement\n/tmp/tmpv4x1ilhq.d(21): Error: expression expected, not `:`\n/tmp/tmpv4x1ilhq.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv4x1ilhq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp748cmzik.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp748cmzik.d(21): Error: expression expected, not `:`\n/tmp/tmp748cmzik.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp748cmzik.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) max = null;\n    int maxLen = 0;\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].length() > maxLen)\n        {\n            max = strings[i];\n            maxLen = strings[i].length();\n        }\n    return max;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmpapukna4e.d(21): Error: no property `length` for type `string`\n/tmp/tmpapukna4e.d(24): Error: no property `length` for type `string`\n/tmp/tmpapukna4e.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapukna4e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longestSoFar = null;\n    int longestSoFarLength = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longestSoFarLength)\n        {\n            longestSoFar = strings[i];\n            longestSoFarLength = strings[i].length();\n        }\n    }\n    return longestSoFar;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmp02z2c73m.d(23): Error: no property `length` for type `string`\n/tmp/tmp02z2c73m.d(26): Error: no property `length` for type `string`\n/tmp/tmp02z2c73m.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02z2c73m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    else if (strings.length == 1)\n        return strings[0];\n    else\n    {\n        int max = 0;\n        string maxStr = null;\n        for (int i = 0; i < strings.length; i++)\n        {\n            if (strings[i].length() > max)\n            {\n                max = strings[i].length();\n                maxStr = strings[i];\n            }\n        }\n        return maxStr;\n    }\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmpt4110gse.d(26): Error: no property `length` for type `string`\n/tmp/tmpt4110gse.d(28): Error: no property `length` for type `string`\n/tmp/tmpt4110gse.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpt4110gse.d(19): Error: cannot implicitly convert expression `strings[0]` of type `string` to `Nullable!string`\n/tmp/tmpt4110gse.d(32): Error: cannot implicitly convert expression `maxStr` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt4110gse.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest = null;\n    int longestLength = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longestLength)\n        {\n            longest = strings[i];\n            longestLength = strings[i].length();\n        }\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmp8zpkgl5c.d(23): Error: no property `length` for type `string`\n/tmp/tmp8zpkgl5c.d(26): Error: no property `length` for type `string`\n/tmp/tmp8zpkgl5c.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8zpkgl5c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLength)\n        {\n            maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpz1l16uv7.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpz1l16uv7.d(21): Error: expression expected, not `:`\n/tmp/tmpz1l16uv7.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1l16uv7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length > maxLen)\n        {\n            maxLen = s.length;\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp2nynhjg7.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp2nynhjg7.d(21): Error: expression expected, not `:`\n/tmp/tmp2nynhjg7.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2nynhjg7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpj0g96t4n.d(20): Error: found `s` when expecting `;` following statement\n/tmp/tmpj0g96t4n.d(20): Error: expression expected, not `:`\n/tmp/tmpj0g96t4n.d(20): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj0g96t4n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest = null;\n    int longestLength = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longestLength)\n        {\n            longest = strings[i];\n            longestLength = strings[i].length();\n        }\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmp8zpkgl5c.d(23): Error: no property `length` for type `string`\n/tmp/tmp8zpkgl5c.d(26): Error: no property `length` for type `string`\n/tmp/tmp8zpkgl5c.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8zpkgl5c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) max = null;\n    int maxLen = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLen)\n        {\n            max = strings[i];\n            maxLen = strings[i].length();\n        }\n    }\n    return max;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmp_zkkpck0.d(22): Error: no property `length` for type `string`\n/tmp/tmp_zkkpck0.d(25): Error: no property `length` for type `string`\n/tmp/tmp_zkkpck0.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_zkkpck0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) longest = null;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longest.get().length())\n            longest = strings[i];\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmp_01abp0z.d(21): Error: no property `length` for type `string`\n/tmp/tmp_01abp0z.d(21): Error: no property `length` for type `string`\n/tmp/tmp_01abp0z.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_01abp0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) longest_string = strings[0];\n    for (int i = 1; i < strings.length; i++)\n        if (strings[i].length() > longest_string.length())\n            longest_string = strings[i];\n    return longest_string;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmpto04i57u.d(20): Error: no property `length` for type `string`\n/tmp/tmpto04i57u.d(20): Error: function expected before `()`, not `longest_string.get().length` of type `ulong`\n/tmp/tmpto04i57u.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpto04i57u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxStr = s;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp58rc386a.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp58rc386a.d(21): Error: expression expected, not `:`\n/tmp/tmp58rc386a.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58rc386a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string max_string = null;\n    for (string s : strings)\n    {\n        if (s.length() > max)\n        {\n            max = s.length();\n            max_string = s;\n        }\n    }\n    return max_string;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmpbrenupd4.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpbrenupd4.d(21): Error: expression expected, not `:`\n/tmp/tmpbrenupd4.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbrenupd4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) longest = null;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longest.value.length())\n            longest = strings[i];\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmp2f6ec_n6.d(21): Error: no property `length` for type `string`\n/tmp/tmp2f6ec_n6.d(21): Error: no property `value` for type `Nullable!string`, did you mean `std.typecons.Nullable!string.Nullable._value`?\n/tmp/tmp2f6ec_n6.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2f6ec_n6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > max)\n        {\n            max = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpwiygray1.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpwiygray1.d(21): Error: expression expected, not `:`\n/tmp/tmpwiygray1.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiygray1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest_string = null;\n    int longest_len = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longest_len)\n        {\n            longest_len = strings[i].length();\n            longest_string = strings[i];\n        }\n    }\n    return longest_string;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmpjfb9b45h.d(23): Error: no property `length` for type `string`\n/tmp/tmpjfb9b45h.d(25): Error: no property `length` for type `string`\n/tmp/tmpjfb9b45h.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjfb9b45h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxStr = s;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp58rc386a.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp58rc386a.d(21): Error: expression expected, not `:`\n/tmp/tmp58rc386a.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58rc386a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp748cmzik.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp748cmzik.d(21): Error: expression expected, not `:`\n/tmp/tmp748cmzik.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp748cmzik.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = strings[0].length();\n    for (int i = 1; i < strings.length; i++)\n        if (strings[i].length() > maxLength)\n            maxLength = strings[i].length();\n    \n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].length() == maxLength)\n            return strings[i];\n    \n    return null;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpg2gwppvq.d(19): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(21): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(22): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(25): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpg2gwppvq.d(26): Error: cannot implicitly convert expression `strings[cast(ulong)i]` of type `string` to `Nullable!string`\n/tmp/tmpg2gwppvq.d(28): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg2gwppvq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxStr = s;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp58rc386a.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp58rc386a.d(21): Error: expression expected, not `:`\n/tmp/tmp58rc386a.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58rc386a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > max)\n        {\n            max = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpwiygray1.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpwiygray1.d(21): Error: expression expected, not `:`\n/tmp/tmpwiygray1.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiygray1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpj0g96t4n.d(20): Error: found `s` when expecting `;` following statement\n/tmp/tmpj0g96t4n.d(20): Error: expression expected, not `:`\n/tmp/tmpj0g96t4n.d(20): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj0g96t4n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest_string = null;\n    int longest_length = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longest_length)\n        {\n            longest_length = strings[i].length();\n            longest_string = strings[i];\n        }\n    }\n    return longest_string;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpmyem79k8.d(23): Error: no property `length` for type `string`\n/tmp/tmpmyem79k8.d(25): Error: no property `length` for type `string`\n/tmp/tmpmyem79k8.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmyem79k8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = strings[0].length();\n    for (int i = 1; i < strings.length; i++)\n        if (strings[i].length() > maxLength)\n            maxLength = strings[i].length();\n    \n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].length() == maxLength)\n            return strings[i];\n    \n    return null;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpg2gwppvq.d(19): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(21): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(22): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(25): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpg2gwppvq.d(26): Error: cannot implicitly convert expression `strings[cast(ulong)i]` of type `string` to `Nullable!string`\n/tmp/tmpg2gwppvq.d(28): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg2gwppvq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length > maxLength)\n        {\n            maxLength = s.length;\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpt368rp2w.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpt368rp2w.d(21): Error: expression expected, not `:`\n/tmp/tmpt368rp2w.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt368rp2w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxStr = \"\";\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > max)\n        {\n            max = strings[i].length();\n            maxStr = strings[i];\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpwp8u2hak.d(23): Error: no property `length` for type `string`\n/tmp/tmpwp8u2hak.d(25): Error: no property `length` for type `string`\n/tmp/tmpwp8u2hak.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpwp8u2hak.d(29): Error: cannot implicitly convert expression `maxStr` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwp8u2hak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length > maxLen)\n        {\n            maxLen = s.length;\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp2nynhjg7.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp2nynhjg7.d(21): Error: expression expected, not `:`\n/tmp/tmp2nynhjg7.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2nynhjg7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = strings[0].length();\n    int index = 0;\n    for (int i = 1; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLength)\n        {\n            maxLength = strings[i].length();\n            index = i;\n        }\n    }\n    return strings[index];\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmpejlwz9hz.d(19): Error: no property `length` for type `string`\n/tmp/tmpejlwz9hz.d(23): Error: no property `length` for type `string`\n/tmp/tmpejlwz9hz.d(25): Error: no property `length` for type `string`\n/tmp/tmpejlwz9hz.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpejlwz9hz.d(29): Error: cannot implicitly convert expression `strings[cast(ulong)index]` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpejlwz9hz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longestString = null;\n    int longestLength = 0;\n    \n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longestLength)\n        {\n            longestLength = strings[i].length();\n            longestString = strings[i];\n        }\n    }\n    \n    return longestString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmp47y4_7qx.d(24): Error: no property `length` for type `string`\n/tmp/tmp47y4_7qx.d(26): Error: no property `length` for type `string`\n/tmp/tmp47y4_7qx.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47y4_7qx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest = null;\n    int maxLength = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLength)\n        {\n            maxLength = strings[i].length();\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpa3s6fr8n.d(23): Error: no property `length` for type `string`\n/tmp/tmpa3s6fr8n.d(25): Error: no property `length` for type `string`\n/tmp/tmpa3s6fr8n.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa3s6fr8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length > max)\n        {\n            max = s.length;\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpqqhcnl2f.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpqqhcnl2f.d(21): Error: expression expected, not `:`\n/tmp/tmpqqhcnl2f.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqqhcnl2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length > maxLen)\n        {\n            maxLen = s.length;\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmp2_11rg8w.d(20): Error: found `s` when expecting `;` following statement\n/tmp/tmp2_11rg8w.d(20): Error: expression expected, not `:`\n/tmp/tmp2_11rg8w.d(20): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2_11rg8w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string str : strings)\n        if (str.length() > maxLen)\n        {\n            maxLen = str.length();\n            maxStr = str;\n        }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmp1_b119cf.d(21): Error: found `str` when expecting `;` following statement\n/tmp/tmp1_b119cf.d(21): Error: expression expected, not `:`\n/tmp/tmp1_b119cf.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_b119cf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = strings[0].length();\n    int maxIndex = 0;\n    for (int i = 1; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLength)\n        {\n            maxLength = strings[i].length();\n            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpdqvl_nt3.d(19): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(23): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(25): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpdqvl_nt3.d(29): Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdqvl_nt3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = strings[0].length();\n    for (int i = 1; i < strings.length; i++)\n        if (strings[i].length() > maxLength)\n            maxLength = strings[i].length();\n    \n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].length() == maxLength)\n            return strings[i];\n    \n    return null;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpg2gwppvq.d(19): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(21): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(22): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(25): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpg2gwppvq.d(26): Error: cannot implicitly convert expression `strings[cast(ulong)i]` of type `string` to `Nullable!string`\n/tmp/tmpg2gwppvq.d(28): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg2gwppvq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = strings[0].length();\n    for (int i = 1; i < strings.length; i++)\n        if (strings[i].length() > maxLength)\n            maxLength = strings[i].length();\n    \n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].length() == maxLength)\n            return strings[i];\n    \n    return null;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpg2gwppvq.d(19): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(21): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(22): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(25): Error: no property `length` for type `string`\n/tmp/tmpg2gwppvq.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpg2gwppvq.d(26): Error: cannot implicitly convert expression `strings[cast(ulong)i]` of type `string` to `Nullable!string`\n/tmp/tmpg2gwppvq.d(28): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg2gwppvq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) longest_string = null;\n    int longest_length = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longest_length)\n        {\n            longest_string = strings[i];\n            longest_length = strings[i].length();\n        }\n    }\n    return longest_string;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmpokx538c3.d(22): Error: no property `length` for type `string`\n/tmp/tmpokx538c3.d(25): Error: no property `length` for type `string`\n/tmp/tmpokx538c3.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokx538c3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longestSoFar = null;\n    int longestSoFarLength = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longestSoFarLength)\n        {\n            longestSoFar = strings[i];\n            longestSoFarLength = strings[i].length();\n        }\n    }\n    return longestSoFar;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmp02z2c73m.d(23): Error: no property `length` for type `string`\n/tmp/tmp02z2c73m.d(26): Error: no property `length` for type `string`\n/tmp/tmp02z2c73m.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02z2c73m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) max = null;\n    int maxLen = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLen)\n        {\n            max = strings[i];\n            maxLen = strings[i].length();\n        }\n    }\n    return max;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmp_zkkpck0.d(22): Error: no property `length` for type `string`\n/tmp/tmp_zkkpck0.d(25): Error: no property `length` for type `string`\n/tmp/tmp_zkkpck0.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_zkkpck0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > max)\n        {\n            max = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpwiygray1.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpwiygray1.d(21): Error: expression expected, not `:`\n/tmp/tmpwiygray1.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiygray1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    else if (strings.length == 1)\n        return strings[0];\n    else\n    {\n        string longest = strings[0];\n        for (int i = 1; i < strings.length; i++)\n        {\n            if (strings[i].length() > longest.length())\n                longest = strings[i];\n        }\n        return longest;\n    }\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmpk0bp45qc.d(25): Error: no property `length` for type `string`\n/tmp/tmpk0bp45qc.d(25): Error: no property `length` for type `string`\n/tmp/tmpk0bp45qc.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpk0bp45qc.d(19): Error: cannot implicitly convert expression `strings[0]` of type `string` to `Nullable!string`\n/tmp/tmpk0bp45qc.d(28): Error: cannot implicitly convert expression `longest` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk0bp45qc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > max)\n        {\n            max = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpwiygray1.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpwiygray1.d(21): Error: expression expected, not `:`\n/tmp/tmpwiygray1.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiygray1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest = null;\n    int maxLen = 0;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            longest = s;\n        }\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmp3bnai4w2.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp3bnai4w2.d(21): Error: expression expected, not `:`\n/tmp/tmp3bnai4w2.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3bnai4w2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > max)\n        {\n            max = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpwiygray1.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpwiygray1.d(21): Error: expression expected, not `:`\n/tmp/tmpwiygray1.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiygray1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length > max)\n        {\n            max = s.length;\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpqqhcnl2f.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpqqhcnl2f.d(21): Error: expression expected, not `:`\n/tmp/tmpqqhcnl2f.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqqhcnl2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest = null;\n    int maxLength = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLength)\n        {\n            maxLength = strings[i].length();\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpa3s6fr8n.d(23): Error: no property `length` for type `string`\n/tmp/tmpa3s6fr8n.d(25): Error: no property `length` for type `string`\n/tmp/tmpa3s6fr8n.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa3s6fr8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string str : strings)\n    {\n        if (str.length() > maxLen)\n        {\n            maxLen = str.length();\n            maxStr = str;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpj5pigz2z.d(21): Error: found `str` when expecting `;` following statement\n/tmp/tmpj5pigz2z.d(21): Error: expression expected, not `:`\n/tmp/tmpj5pigz2z.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5pigz2z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) longest_string = null;\n    int longest_len = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longest_len)\n        {\n            longest_len = strings[i].length();\n            longest_string = strings[i];\n        }\n    }\n    return longest_string;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmp9400_y3e.d(22): Error: no property `length` for type `string`\n/tmp/tmp9400_y3e.d(24): Error: no property `length` for type `string`\n/tmp/tmp9400_y3e.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9400_y3e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxStr = s;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp58rc386a.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp58rc386a.d(21): Error: expression expected, not `:`\n/tmp/tmp58rc386a.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58rc386a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > max)\n        {\n            max = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpwiygray1.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpwiygray1.d(21): Error: expression expected, not `:`\n/tmp/tmpwiygray1.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiygray1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    int maxLen = 0;\n    string maxStr = null;\n    for (string str : strings)\n        if (str.length() > maxLen)\n        {\n            maxLen = str.length();\n            maxStr = str;\n        }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmpx78sjj6j.d(20): Error: found `str` when expecting `;` following statement\n/tmp/tmpx78sjj6j.d(20): Error: expression expected, not `:`\n/tmp/tmpx78sjj6j.d(20): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx78sjj6j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length > maxLen)\n        {\n            maxLen = s.length;\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp2nynhjg7.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp2nynhjg7.d(21): Error: expression expected, not `:`\n/tmp/tmp2nynhjg7.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2nynhjg7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = strings[0].length();\n    int maxIndex = 0;\n    for (int i = 1; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLength)\n        {\n            maxLength = strings[i].length();\n            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpdqvl_nt3.d(19): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(23): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(25): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpdqvl_nt3.d(29): Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdqvl_nt3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpsqf0mb87.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpsqf0mb87.d(21): Error: expression expected, not `:`\n/tmp/tmpsqf0mb87.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqf0mb87.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > max)\n        {\n            max = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpwiygray1.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpwiygray1.d(21): Error: expression expected, not `:`\n/tmp/tmpwiygray1.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiygray1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) max = null;\n    int maxLen = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLen)\n        {\n            max = strings[i];\n            maxLen = strings[i].length();\n        }\n    }\n    return max;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmp_zkkpck0.d(22): Error: no property `length` for type `string`\n/tmp/tmp_zkkpck0.d(25): Error: no property `length` for type `string`\n/tmp/tmp_zkkpck0.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_zkkpck0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) max = null;\n    int max_len = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > max_len)\n        {\n            max = strings[i];\n            max_len = strings[i].length();\n        }\n    }\n    return max;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmpidnx0ao6.d(23): Error: no property `length` for type `string`\n/tmp/tmpidnx0ao6.d(26): Error: no property `length` for type `string`\n/tmp/tmpidnx0ao6.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpidnx0ao6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest_string = null;\n    int longest_length = 0;\n    \n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longest_length)\n        {\n            longest_length = strings[i].length();\n            longest_string = strings[i];\n        }\n    }\n    \n    return longest_string;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmp4in51ddt.d(24): Error: no property `length` for type `string`\n/tmp/tmp4in51ddt.d(26): Error: no property `length` for type `string`\n/tmp/tmp4in51ddt.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4in51ddt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = strings[0].length();\n    int maxIndex = 0;\n    for (int i = 1; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLength)\n        {\n            maxLength = strings[i].length();\n            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpdqvl_nt3.d(19): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(23): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(25): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpdqvl_nt3.d(29): Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdqvl_nt3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string str : strings)\n    {\n        if (str.length() > maxLen)\n        {\n            maxLen = str.length();\n            maxStr = str;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpj5pigz2z.d(21): Error: found `str` when expecting `;` following statement\n/tmp/tmpj5pigz2z.d(21): Error: expression expected, not `:`\n/tmp/tmpj5pigz2z.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5pigz2z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxStr = s;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp58rc386a.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp58rc386a.d(21): Error: expression expected, not `:`\n/tmp/tmp58rc386a.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58rc386a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = strings[0].length();\n    int maxIndex = 0;\n    for (int i = 1; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLength)\n        {\n            maxLength = strings[i].length();\n            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpdqvl_nt3.d(19): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(23): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(25): Error: no property `length` for type `string`\n/tmp/tmpdqvl_nt3.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpdqvl_nt3.d(29): Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdqvl_nt3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string str : strings)\n    {\n        if (str.length() > maxLen)\n        {\n            maxLen = str.length();\n            maxStr = str;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpj5pigz2z.d(21): Error: found `str` when expecting `;` following statement\n/tmp/tmpj5pigz2z.d(21): Error: expression expected, not `:`\n/tmp/tmpj5pigz2z.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5pigz2z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length > maxLength)\n        {\n            maxLength = s.length;\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpt368rp2w.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpt368rp2w.d(21): Error: expression expected, not `:`\n/tmp/tmpt368rp2w.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt368rp2w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longestString = null;\n    int longestLength = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longestLength)\n        {\n            longestLength = strings[i].length();\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmpayicyrjs.d(23): Error: no property `length` for type `string`\n/tmp/tmpayicyrjs.d(25): Error: no property `length` for type `string`\n/tmp/tmpayicyrjs.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpayicyrjs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int max = 0;\n    string maxStr = \"\";\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > max)\n        {\n            max = strings[i].length();\n            maxStr = strings[i];\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpwp8u2hak.d(23): Error: no property `length` for type `string`\n/tmp/tmpwp8u2hak.d(25): Error: no property `length` for type `string`\n/tmp/tmpwp8u2hak.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpwp8u2hak.d(29): Error: cannot implicitly convert expression `maxStr` of type `string` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwp8u2hak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    Nullable!(string) max = null;\n    int maxLen = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > maxLen)\n        {\n            max = strings[i];\n            maxLen = strings[i].length();\n        }\n    }\n    return max;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmp_zkkpck0.d(22): Error: no property `length` for type `string`\n/tmp/tmp_zkkpck0.d(25): Error: no property `length` for type `string`\n/tmp/tmp_zkkpck0.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_zkkpck0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLength)\n        {\n            maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmpz1l16uv7.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmpz1l16uv7.d(21): Error: expression expected, not `:`\n/tmp/tmpz1l16uv7.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1l16uv7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    else if (strings.length == 1)\n        return strings[0];\n    else\n    {\n        int maxLength = strings[0].length();\n        for (int i = 1; i < strings.length; i++)\n        {\n            if (strings[i].length() > maxLength)\n                maxLength = strings[i].length();\n        }\n        for (int i = 0; i < strings.length; i++)\n        {\n            if (strings[i].length() == maxLength)\n                return strings[i];\n        }\n    }\n    return null;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "/tmp/tmpxfjdpygs.d(22): Error: no property `length` for type `string`\n/tmp/tmpxfjdpygs.d(25): Error: no property `length` for type `string`\n/tmp/tmpxfjdpygs.d(26): Error: no property `length` for type `string`\n/tmp/tmpxfjdpygs.d(30): Error: no property `length` for type `string`\n/tmp/tmpxfjdpygs.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\n/tmp/tmpxfjdpygs.d(19): Error: cannot implicitly convert expression `strings[0]` of type `string` to `Nullable!string`\n/tmp/tmpxfjdpygs.d(31): Error: cannot implicitly convert expression `strings[cast(ulong)i]` of type `string` to `Nullable!string`\n/tmp/tmpxfjdpygs.d(34): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxfjdpygs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString = null;\n    for (string s : strings)\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxString = s;\n        }\n    return maxString;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp748cmzik.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp748cmzik.d(21): Error: expression expected, not `:`\n/tmp/tmp748cmzik.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp748cmzik.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    else if (strings.length == 1)\n        return strings[0];\n    else\n    {\n        int max = 0;\n        string maxStr = null;\n        for (string str : strings)\n        {\n            if (str.length() > max)\n            {\n                max = str.length();\n                maxStr = str;\n            }\n        }\n        return maxStr;\n    }\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "/tmp/tmpgjcbevgf.d(24): Error: found `str` when expecting `;` following statement\n/tmp/tmpgjcbevgf.d(24): Error: expression expected, not `:`\n/tmp/tmpgjcbevgf.d(24): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgjcbevgf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    Nullable!(string) longest_string = null;\n    int longest_length = 0;\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].length() > longest_length)\n        {\n            longest_length = strings[i].length();\n            longest_string = strings[i];\n        }\n    }\n    return longest_string;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293158,
      "stdout": "",
      "stderr": "/tmp/tmpmyem79k8.d(23): Error: no property `length` for type `string`\n/tmp/tmpmyem79k8.d(25): Error: no property `length` for type `string`\n/tmp/tmpmyem79k8.d(17): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmyem79k8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return null in case the input array is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxStr = null;\n    for (string s : strings)\n    {\n        if (s.length() > maxLen)\n        {\n            maxLen = s.length();\n            maxStr = s;\n        }\n    }\n    return maxStr;\n}\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}",
      "timestamp": 1664293157,
      "stdout": "",
      "stderr": "/tmp/tmp58rc386a.d(21): Error: found `s` when expecting `;` following statement\n/tmp/tmp58rc386a.d(21): Error: expression expected, not `:`\n/tmp/tmp58rc386a.d(21): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58rc386a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}