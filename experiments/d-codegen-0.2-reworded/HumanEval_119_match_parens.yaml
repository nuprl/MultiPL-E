name: HumanEval_119_match_parens
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
  \ of two strings, both strings consist of open\n    parentheses '(' or close parentheses\
  \ ')' only.\n    Your job is to check if it is possible to concatenate the two strings\
  \ in\n    some order, that the resulting string will be good.\n    A string S is\
  \ considered to be good if and only if all parentheses in S\n    are balanced. For\
  \ example: the string '(())()' is good, while the string\n    '())' is not.\n  \
  \  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
  \n    Examples:\n    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
  )\", \")\"])\n    \"No\"\n    \n*/\nstring match_parens(string[] lst) \n"
tests: "unittest\n{\n    alias candidate = match_parens;\n\n    assert(candidate([\"\
  ()(\", \")\"]) == \"Yes\");\n    assert(candidate([\")\", \")\"]) == \"No\");\n\
  \    assert(candidate([\"(()(())\", \"())())\"]) == \"No\");\n    assert(candidate([\"\
  )())\", \"(()()(\"]) == \"Yes\");\n    assert(candidate([\"(())))\", \"(()())((\"\
  ]) == \"Yes\");\n    assert(candidate([\"()\", \"())\"]) == \"No\");\n    assert(candidate([\"\
  (()(\", \"()))()\"]) == \"Yes\");\n    assert(candidate([\"((((\", \"((())\"]) ==\
  \ \"No\");\n    assert(candidate([\")(()\", \"(()(\"]) == \"No\");\n    assert(candidate([\"\
  )(\", \")(\"]) == \"No\");\n    assert(candidate([\"(\", \")\"]) == \"Yes\");\n\
  \    assert(candidate([\")\", \"(\"]) == \"Yes\");\n}\nvoid main(){}"
completions: []
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
