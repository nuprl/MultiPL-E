name: HumanEval_48_is_palindrome
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
  \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
  aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
  zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n"
tests: "unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
  \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
  aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
  xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
  xywzx\") == false);\n}\nvoid main(){}"
completions: ["{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n\
    \    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n\
    \    return true;\n}", "{\n    int len = text.length();\n    int i = 0;\n    int\
    \ j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j])\n       \
    \     return false;\n        i++;\n        j--;\n    }\n    return true;\n}",
  "{\n    int len = text.length();\n    int mid = len / 2;\n    for(int i = 0; i <\
    \ mid; i++)\n    {\n        if(text[i] != text[len - i - 1])\n            return\
    \ false;\n    }\n    return true;\n}", "{\n    if (text.length() == 0)\n     \
    \   return true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n\
    \    while (left < right)\n    {\n        if (text[left] != text[right])\n   \
    \         return false;\n        left++;\n        right--;\n    }\n    return\
    \ true;\n}", "{\n    if(text.length() == 0)\n        return true;\n    int l =\
    \ 0, r = text.length() - 1;\n    while(l < r)\n    {\n        if(text[l] != text[r])\n\
    \            return false;\n        l++;\n        r--;\n    }\n    return true;\n\
    }", "{\n    int l = text.length();\n    int i = 0;\n    int j = l - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;\n}", "{\n    int\
    \ len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i]\
    \ != text[len-i-1])\n            return false;\n    }\n    return true;\n}", "{\n\
    \    int len = text.length();\n    int mid = len/2;\n    for(int i = 0; i < mid;\
    \ i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    int len = text.length();\n    int i = 0;\n\
    \    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;\n}", "{\n    int len = text.length();\n    for(int i = 0; i < len/2;\
    \ i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    if (text.length() < 2)\n        return true;\n\
    \    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while\
    \ (left < right)\n    {\n        if (text[left] != text[right])\n            return\
    \ false;\n        \n        left++;\n        right--;\n    }\n    \n    return\
    \ true;\n}", "{\n    int len = text.length();\n    int mid = len / 2;\n    for\
    \ (int i = 0; i < mid; i++) {\n        if (text[i] != text[len - 1 - i]) {\n \
    \           return false;\n        }\n    }\n    return true;\n}", "{\n    int\
    \ len = text.length();\n    for (int i = 0; i < len/2; i++)\n    {\n        if\
    \ (text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n\
    }", "{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n \
    \   while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;\n}", "{\n    if(text.length()\
    \ == 0)\n        return true;\n    int left = 0;\n    int right = text.length()\
    \ - 1;\n    while(left < right)\n    {\n        if(text[left] != text[right])\n\
    \            return false;\n        left++;\n        right--;\n    }\n    return\
    \ true;\n}", "{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n\
    \    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n\
    \    return true;\n}", "{\n    int len = text.length();\n    for(int i = 0; i\
    \ < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return\
    \ false;\n    }\n    return true;\n}", "{\n    int l = text.length();\n    if\
    \ (l == 0) return true;\n    int i = 0;\n    int j = l - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j]) return false;\n        i++;\n        j--;\n\
    \    }\n    return true;\n}", "{\n    if(text.length() < 2)\n        return true;\n\
    \    int left = 0, right = text.length() - 1;\n    while(left < right)\n    {\n\
    \        if(text[left] != text[right])\n            return false;\n        left++;\n\
    \        right--;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j])\n            return false;\n        i++;\n        j--;\n    }\n\
    \    return true;\n}", "{\n    int len = text.length();\n    for(int i = 0; i\
    \ < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return\
    \ false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n    if(len\
    \ < 2)\n        return true;\n    \n    for(int i = 0; i < len/2; i++)\n    {\n\
    \        if(text[i] != text[len-1-i])\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    int len = text.length();\n    if (len < 2)\n        return\
    \ true;\n    int mid = len / 2;\n    for (int i = 0; i < mid; i++)\n    {\n  \
    \      if (text[i] != text[len - i - 1])\n            return false;\n    }\n \
    \   return true;\n}", "{\n    if(text.length() == 0)\n        return true;\n \
    \   int left = 0, right = text.length() - 1;\n    while(left < right)\n    {\n\
    \        if(text[left] != text[right])\n            return false;\n        left++;\n\
    \        right--;\n    }\n    return true;\n}", "{\n    if(text.length() == 0)\n\
    \        return true;\n    \n    int start = 0;\n    int end = text.length() -\
    \ 1;\n    while(start < end)\n    {\n        if(text[start] != text[end])\n  \
    \          return false;\n        start++;\n        end--;\n    }\n    return\
    \ true;\n}", "{\n    int len = text.length();\n    int i = 0;\n    int j = len\
    \ - 1;\n    while (i < j)\n    {\n        if (text[i] != text[j])\n        {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;\n}", "{\n    int len = text.length();\n    for (int i = 0; i <\
    \ len/2; i++) {\n        if (text[i] != text[len-i-1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    int len = text.length();\n    for (int i\
    \ = 0; i < len/2; i++) {\n        if (text[i] != text[len-i-1]) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i]\
    \ != text[len-i-1])\n            return false;\n    }\n    return true;\n}", "{\n\
    \    int len = text.length();\n    if (len < 2)\n        return true;\n    int\
    \ mid = len / 2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i] !=\
    \ text[len - i - 1])\n            return false;\n    }\n    return true;\n}",
  "{\n    int len = text.length();\n    int mid = len/2;\n    for(int i = 0; i < mid;\
    \ i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    int l = text.length();\n    int i = 0;\n\
    \    int j = l - 1;\n    while (i < j)\n    {\n        if (text[i] != text[j])\n\
    \            return false;\n        i++;\n        j--;\n    }\n    return true;\n\
    }", "{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n   \
    \ {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n\
    \    return true;\n}", "{\n    int l = text.length();\n    int i = 0;\n    int\
    \ j = l - 1;\n    while (i < j)\n    {\n        if (text[i] != text[j])\n    \
    \    {\n            return false;\n        }\n        i++;\n        j--;\n   \
    \ }\n    return true;\n}", "{\n    if (text.length() == 0)\n        return true;\n\
    \    int len = text.length();\n    int mid = len / 2;\n    for (int i = 0; i <\
    \ mid; i++)\n    {\n        if (text[i] != text[len - 1 - i])\n            return\
    \ false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n    for(int\
    \ i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-1-i])\n      \
    \      return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}", "{\n    int len = text.length();\n    if (len <\
    \ 2)\n        return true;\n    \n    int i = 0;\n    int j = len - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j])\n            return false;\n    \
    \    i++;\n        j--;\n    }\n    return true;\n}", "{\n    if (text.length()\
    \ < 2)\n        return true;\n    \n    int left = 0;\n    int right = text.length()\
    \ - 1;\n    \n    while (left < right)\n    {\n        if (text[left] != text[right])\n\
    \            return false;\n        \n        left++;\n        right--;\n    }\n\
    \    \n    return true;\n}", "{\n    int len = text.length();\n    int i = 0;\n\
    \    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;\n}", "{\n    if (text.length() == 0)\n        return true;\n  \
    \  \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left\
    \ < right)\n    {\n        if (text[left] != text[right])\n            return\
    \ false;\n        \n        left++;\n        right--;\n    }\n    \n    return\
    \ true;\n}", "{\n    int len = text.length();\n    int mid = len / 2;\n    for\
    \ (int i = 0; i < mid; i++) {\n        if (text[i] != text[len - i - 1]) {\n \
    \           return false;\n        }\n    }\n    return true;\n}", "{\n    int\
    \ len = text.length();\n    for (int i = 0; i < len/2; i++)\n    {\n        if\
    \ (text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n\
    }", "{\n    if (text.length() == 0)\n        return true;\n    \n    int left\
    \ = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n\
    \        if (text[left] != text[right])\n            return false;\n        \n\
    \        left++;\n        right--;\n    }\n    \n    return true;\n}", "{\n  \
    \  int len = text.length();\n    for (int i = 0; i < len/2; i++)\n    {\n    \
    \    if (text[i] != text[len-i-1])\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    if (text.length() == 0)\n        return true;\n    int left\
    \ = 0, right = text.length() - 1;\n    while (left < right)\n    {\n        if\
    \ (text[left] != text[right])\n            return false;\n        left++;\n  \
    \      right--;\n    }\n    return true;\n}", "{\n    int l = text.length();\n\
    \    for(int i = 0; i < l/2; i++)\n    {\n        if(text[i] != text[l-1-i])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    if (len < 2)\n        return true;\n    int mid = len / 2;\n    for (int\
    \ i = 0; i < mid; i++)\n    {\n        if (text[i] != text[len - 1 - i])\n   \
    \         return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    if (len == 0) return true;\n    int mid = len/2;\n    for (int i = 0; i <\
    \ mid; i++) {\n        if (text[i] != text[len-i-1]) return false;\n    }\n  \
    \  return true;\n}", "{\n    int len = text.length();\n    int mid = len/2;\n\
    \    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for (int i = 0; i < len/2; i++) {\n        if (text[i] != text[len-i-1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}", "{\n \
    \   int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;\n}", "{\n    int\
    \ l = 0, r = text.length() - 1;\n    while (l < r) {\n        if (text[l] != text[r])\n\
    \            return false;\n        l++;\n        r--;\n    }\n    return true;\n\
    }", "{\n    if(text.length() <= 1)\n        return true;\n    \n    int left =\
    \ 0;\n    int right = text.length() - 1;\n    \n    while(left < right)\n    {\n\
    \        if(text[left] != text[right])\n            return false;\n        \n\
    \        left++;\n        right--;\n    }\n    \n    return true;\n}", "{\n  \
    \  int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n     \
    \   if(text[i] != text[len-i-1])\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n\
    \    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n\
    \    return true;\n}", "{\n    int len = text.length();\n    for(int i = 0; i\
    \ < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return\
    \ false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n    int\
    \ mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] !=\
    \ text[len-i-1])\n            return false;\n    }\n    return true;\n}", "{\n\
    \    int len = text.length();\n    for (int i = 0; i < len/2; i++) {\n       \
    \ if (text[i] != text[len-i-1])\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n\
    \    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n\
    \    return true;\n}", "{\n    int len = text.length();\n    for(int i = 0; i\
    \ < len/2; i++)\n    {\n        if(text[i] != text[len-1-i])\n            return\
    \ false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n    int\
    \ i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j])\
    \ {\n            return false;\n        }\n        i++;\n        j--;\n    }\n\
    \    return true;\n}", "{\n    if(text.length() == 0)\n        return true;\n\
    \    \n    int left = 0, right = text.length() - 1;\n    while(left < right)\n\
    \    {\n        if(text[left] != text[right])\n            return false;\n   \
    \     left++;\n        right--;\n    }\n    return true;\n}", "{\n    if (text.length()\
    \ <= 1)\n        return true;\n    int left = 0;\n    int right = text.length()\
    \ - 1;\n    while (left < right)\n    {\n        if (text[left] != text[right])\n\
    \            return false;\n        left++;\n        right--;\n    }\n    return\
    \ true;\n}", "{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n\
    \    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n\
    \    return true;\n}", "{\n    int len = text.length();\n    int mid = len/2;\n\
    \    for (int i = 0; i < mid; i++) {\n        if (text[i] != text[len-i-1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}", "{\n    int\
    \ len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;\n}", "{\n    if(text.length()\
    \ == 0)\n        return true;\n    int left = 0;\n    int right = text.length()\
    \ - 1;\n    while(left < right)\n    {\n        if(text[left] != text[right])\n\
    \            return false;\n        left++;\n        right--;\n    }\n    return\
    \ true;\n}", "{\n    int len = text.length();\n    int i = 0;\n    int j = len\
    \ - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return\
    \ false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}",
  "{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;\n}", "{\n    if(text.length()\
    \ == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length()\
    \ - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n\
    \            return false;\n        \n        left++;\n        right--;\n    }\n\
    \    \n    return true;\n}", "{\n    int len = text.length();\n    int i = 0;\n\
    \    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;\n}", "{\n    if(text.length() == 0)\n        return true;\n   \
    \ int l = 0, r = text.length() - 1;\n    while(l < r)\n    {\n        if(text[l]\
    \ != text[r])\n            return false;\n        l++;\n        r--;\n    }\n\
    \    return true;\n}", "{\n    int len = text.length();\n    int mid = len/2;\n\
    \    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j])\n            return false;\n        i++;\n        j--;\n    }\n\
    \    return true;\n}", "{\n    if(text.length() < 2)\n        return true;\n \
    \   \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left\
    \ < right)\n    {\n        if(text[left] != text[right])\n            return false;\n\
    \        \n        left++;\n        right--;\n    }\n    \n    return true;\n}",
  "{\n    int len = text.length();\n    int half = len/2;\n    for(int i = 0; i <\
    \ half; i++)\n    {\n        if(text[i] != text[len-i-1])\n            return\
    \ false;\n    }\n    return true;\n}", "{\n    if(text.length() < 2)\n       \
    \ return true;\n    int left = 0;\n    int right = text.length() - 1;\n    while(left\
    \ < right)\n    {\n        if(text[left] != text[right])\n            return false;\n\
    \        left++;\n        right--;\n    }\n    return true;\n}", "{\n    if(text.length()\
    \ == 0)\n        return true;\n    int left = 0, right = text.length() - 1;\n\
    \    while(left < right)\n    {\n        if(text[left] != text[right])\n     \
    \       return false;\n        left++;\n        right--;\n    }\n    return true;\n\
    }", "{\n    if(text.length() == 0)\n        return true;\n    \n    int left =\
    \ 0;\n    int right = text.length() - 1;\n    \n    while(left < right)\n    {\n\
    \        if(text[left] != text[right])\n            return false;\n        \n\
    \        left++;\n        right--;\n    }\n    \n    return true;\n}", "{\n  \
    \  if(text.length() == 0)\n        return true;\n    int i = 0, j = text.length()\
    \ - 1;\n    while(i < j)\n    {\n        if(text[i] != text[j])\n            return\
    \ false;\n        i++;\n        j--;\n    }\n    return true;\n}", "{\n    int\
    \ len = text.length();\n    if(len == 0)\n        return true;\n    int mid =\
    \ len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int l = text.length();\n\
    \    int i = 0;\n    int j = l - 1;\n    while (i < j)\n    {\n        if (text[i]\
    \ != text[j])\n        {\n            return false;\n        }\n        i++;\n\
    \        j--;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    if(text.length()\
    \ < 2)\n        return true;\n    \n    int left = 0;\n    int right = text.length()\
    \ - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n\
    \            return false;\n        \n        left++;\n        right--;\n    }\n\
    \    \n    return true;\n}", "{\n    int len = text.length();\n    int i = 0;\n\
    \    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;\n}", "{\n    int len = text.length();\n    for(int i = 0; i < len/2;\
    \ i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    int len = text.length();\n    for(int i\
    \ = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-1-i])\n        \
    \    return false;\n    }\n    return true;\n}", "{\n    if(text.length() <= 1)\n\
    \        return true;\n    \n    int left = 0;\n    int right = text.length()\
    \ - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n\
    \            return false;\n        \n        left++;\n        right--;\n    }\n\
    \    \n    return true;\n}", "{\n    int len = text.length();\n    if(len < 2)\n\
    \        return true;\n    \n    int i = 0;\n    int j = len - 1;\n    while(i\
    \ < j)\n    {\n        if(text[i] != text[j])\n            return false;\n   \
    \     i++;\n        j--;\n    }\n    return true;\n}", "{\n    if(text.length()\
    \ < 2)\n        return true;\n    \n    int left = 0;\n    int right = text.length()\
    \ - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n\
    \            return false;\n        \n        left++;\n        right--;\n    }\n\
    \    \n    return true;\n}", "{\n    int len = text.length();\n    for(int i =\
    \ 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n          \
    \  return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}", "{\n    if(text.length() == 0)\n        return true;\n\
    \    int left = 0;\n    int right = text.length() - 1;\n    while(left < right)\n\
    \    {\n        if(text[left] != text[right])\n            return false;\n   \
    \     left++;\n        right--;\n    }\n    return true;\n}", "{\n    if (text.length()\
    \ == 0)\n        return true;\n    int left = 0, right = text.length() - 1;\n\
    \    while (left < right)\n    {\n        if (text[left] != text[right])\n   \
    \         return false;\n        left++;\n        right--;\n    }\n    return\
    \ true;\n}", "{\n    int len = text.length();\n    for (int i = 0; i < len/2;\
    \ i++)\n    {\n        if (text[i] != text[len-i-1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    int len = text.length();\n    for(int i\
    \ = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n        \
    \    return false;\n    }\n    return true;\n}", "{\n    if (text.length() ==\
    \ 0)\n        return true;\n    int left = 0;\n    int right = text.length() -\
    \ 1;\n    while (left < right)\n    {\n        if (text[left] != text[right])\n\
    \            return false;\n        left++;\n        right--;\n    }\n    return\
    \ true;\n}", "{\n    int len = text.length();\n    int mid = len/2;\n    for(int\
    \ i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n        \
    \    return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-1-i])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    if (len < 2)\n        return true;\n    \n    int mid = len / 2;\n    for\
    \ (int i = 0; i < mid; i++)\n    {\n        if (text[i] != text[len - i - 1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while(i < j)\n    {\n        if(text[i]\
    \ != text[j])\n            return false;\n        i++;\n        j--;\n    }\n\
    \    return true;\n}", "{\n    int len = text.length();\n    int i = 0;\n    int\
    \ j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n     \
    \       return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;\n}", "{\n    int len = text.length();\n    if(len < 2)\n        return\
    \ true;\n    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n     \
    \   if(text[i] != text[len-i-1])\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    int len = text.length();\n    int mid = len/2;\n    for(int\
    \ i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n        \
    \    return false;\n    }\n    return true;\n}", "{\n    if(text.length() == 0)\n\
    \        return true;\n    \n    int left = 0;\n    int right = text.length()\
    \ - 1;\n    while(left < right)\n    {\n        if(text[left] != text[right])\n\
    \            return false;\n        left++;\n        right--;\n    }\n    return\
    \ true;\n}", "{\n    int len = text.length();\n    int i = 0;\n    int j = len\
    \ - 1;\n    while (i < j) {\n        if (text[i] != text[j])\n            return\
    \ false;\n        i++;\n        j--;\n    }\n    return true;\n}", "{\n    int\
    \ len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i]\
    \ != text[len-i-1])\n            return false;\n    }\n    return true;\n}", "{\n\
    \    if (text.length() <= 1)\n        return true;\n    \n    int left = 0;\n\
    \    int right = text.length() - 1;\n    \n    while (left < right)\n    {\n \
    \       if (text[left] != text[right])\n            return false;\n        \n\
    \        left++;\n        right--;\n    }\n    \n    return true;\n}", "{\n  \
    \  if(text.length() == 0)\n        return true;\n    \n    int left = 0;\n   \
    \ int right = text.length() - 1;\n    \n    while(left < right)\n    {\n     \
    \   if(text[left] != text[right])\n            return false;\n        \n     \
    \   left++;\n        right--;\n    }\n    \n    return true;\n}", "{\n    int\
    \ len = text.length();\n    int mid = len / 2;\n    for(int i = 0; i < mid; i++)\n\
    \    {\n        if(text[i] != text[len - i - 1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    if(text.length() == 0)\n        return true;\n\
    \    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left\
    \ < right)\n    {\n        if(text[left] != text[right])\n            return false;\n\
    \        \n        left++;\n        right--;\n    }\n    \n    return true;\n}",
  "{\n    int len = text.length();\n    if (len < 2)\n        return true;\n    \n\
    \    int left = 0;\n    int right = len - 1;\n    while (left < right)\n    {\n\
    \        if (text[left] != text[right])\n            return false;\n        left++;\n\
    \        right--;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    if (len < 2) return true;\n    int mid = len / 2;\n    for (int i = 0; i\
    \ < mid; i++) {\n        if (text[i] != text[len - 1 - i]) return false;\n   \
    \ }\n    return true;\n}", "{\n    int len = text.length();\n    if (len < 2)\n\
    \        return true;\n    \n    int mid = len/2;\n    for (int i = 0; i < mid;\
    \ i++)\n    {\n        if (text[i] != text[len-i-1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    int len = text.length();\n    for(int i\
    \ = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n        \
    \    return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for (int i = 0; i < len/2; i++)\n    {\n        if (text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    if(len < 2)\n        return true;\n    int i = 0, j = len - 1;\n    while(i\
    \ < j)\n    {\n        if(text[i] != text[j])\n            return false;\n   \
    \     i++;\n        j--;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    if (len < 2)\n        return true;\n    \n    int left = 0;\n    int right\
    \ = len - 1;\n    while (left < right) {\n        if (text[left] != text[right])\n\
    \            return false;\n        left++;\n        right--;\n    }\n    return\
    \ true;\n}", "{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n\
    \    {\n        if(text[i] != text[len-i-1])\n            return false;\n    }\n\
    \    return true;\n}", "{\n    if (text.size() <= 1)\n        return true;\n \
    \   \n    int left = 0;\n    int right = text.size() - 1;\n    \n    while (left\
    \ < right) {\n        if (text[left] != text[right])\n            return false;\n\
    \        \n        left++;\n        right--;\n    }\n    \n    return true;\n}",
  "{\n    int len = text.length();\n    int mid = len / 2;\n    for (int i = 0; i\
    \ < mid; i++)\n    {\n        if (text[i] != text[len - i - 1])\n        {\n \
    \           return false;\n        }\n    }\n    return true;\n}", "{\n    if(text.length()\
    \ < 2)\n        return true;\n    \n    int start = 0;\n    int end = text.length()\
    \ - 1;\n    \n    while(start < end)\n    {\n        if(text[start] != text[end])\n\
    \            return false;\n        \n        start++;\n        end--;\n    }\n\
    \    \n    return true;\n}", "{\n    int len = text.length();\n    for (int i\
    \ = 0; i < len/2; i++) {\n        if (text[i] != text[len-1-i]) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for (int i = 0; i < len/2; i++)\n    {\n        if (text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    if(text.length()\
    \ == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length()\
    \ - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n\
    \            return false;\n        \n        left++;\n        right--;\n    }\n\
    \    \n    return true;\n}", "{\n    int len = text.length();\n    int mid = len/2;\n\
    \    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}", "{\n    int len = text.length();\n    for(int i\
    \ = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n        \
    \    return false;\n    }\n    return true;\n}", "{\n    if(text.length() == 0)\n\
    \        return true;\n    \n    int left = 0;\n    int right = text.length()\
    \ - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n\
    \            return false;\n        \n        left++;\n        right--;\n    }\n\
    \    \n    return true;\n}", "{\n    int len = text.length();\n    int i = 0;\n\
    \    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;\n}", "{\n    int len = text.length();\n    for (int i = 0; i <\
    \ len/2; i++) {\n        if (text[i] != text[len-i-1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    if (text.length() == 0)\n        return\
    \ true;\n    int i = 0, j = text.length() - 1;\n    while (i < j) {\n        if\
    \ (text[i] != text[j])\n            return false;\n        i++;\n        j--;\n\
    \    }\n    return true;\n}", "{\n    int len = text.length();\n    if (len ==\
    \ 0) return true;\n    int mid = len/2;\n    for (int i = 0; i < mid; i++) {\n\
    \        if (text[i] != text[len-i-1]) return false;\n    }\n    return true;\n\
    }", "{\n    if(text.length() == 0)\n        return true;\n    int left = 0, right\
    \ = text.length() - 1;\n    while(left < right)\n    {\n        if(text[left]\
    \ != text[right])\n            return false;\n        left++;\n        right--;\n\
    \    }\n    return true;\n}", "{\n    int len = text.length();\n    int i = 0;\n\
    \    int j = len - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;\n}", "{\n    int len = text.length();\n    int mid = len/2;\n \
    \   for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    if (len < 2)\n        return true;\n    int mid = len / 2;\n    for (int\
    \ i = 0; i < mid; i++) {\n        if (text[i] != text[len - i - 1])\n        \
    \    return false;\n    }\n    return true;\n}", "{\n    if(text.length() < 2)\n\
    \        return true;\n    int i = 0, j = text.length() - 1;\n    while(i < j)\n\
    \    {\n        if(text[i] != text[j])\n            return false;\n        i++;\n\
    \        j--;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    if (text.length()\
    \ == 0)\n        return true;\n    int i = 0, j = text.length() - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j])\n            return false;\n    \
    \    i++;\n        j--;\n    }\n    return true;\n}", "{\n    int l = text.length();\n\
    \    int i = 0;\n    int j = l - 1;\n    while (i < j)\n    {\n        if (text[i]\
    \ != text[j])\n        {\n            return false;\n        }\n        i++;\n\
    \        j--;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    int mid = len/2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i]\
    \ != text[len-i-1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    int len = text.length();\n    for (int i = 0; i < len/2;\
    \ i++)\n    {\n        if (text[i] != text[len-i-1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    if (text.length() <= 1)\n        return\
    \ true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n \
    \   while (left < right)\n    {\n        if (text[left] != text[right])\n    \
    \        return false;\n        \n        left++;\n        right--;\n    }\n \
    \   \n    return true;\n}", "{\n    if (text.length() == 0)\n        return true;\n\
    \    int left = 0, right = text.length() - 1;\n    while (left < right)\n    {\n\
    \        if (text[left] != text[right])\n            return false;\n        left++;\n\
    \        right--;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    if (len < 2)\n        return true;\n    \n    for (int i = 0; i < len/2;\
    \ i++)\n    {\n        if (text[i] != text[len-i-1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    int len = text.length();\n    for(int i\
    \ = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n        \
    \    return false;\n    }\n    return true;\n}", "{\n    if(text.length() < 2)\n\
    \        return true;\n    \n    int i = 0, j = text.length() - 1;\n    while(i\
    \ < j)\n    {\n        if(text[i] != text[j])\n            return false;\n   \
    \     i++;\n        j--;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    if (len < 2)\n        return true;\n    \n    for (int i = 0; i < len/2;\
    \ i++)\n    {\n        if (text[i] != text[len-i-1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    int len = text.length();\n    for(int i\
    \ = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n        \
    \    return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for (int i = 0; i < len/2; i++)\n    {\n        if (text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int l = text.length();\n\
    \    for(int i = 0; i < l/2; i++)\n    {\n        if(text[i] != text[l-1-i])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    if(text.length()\
    \ <= 1)\n        return true;\n    \n    int start = 0, end = text.length() -\
    \ 1;\n    while(start < end)\n    {\n        if(text[start] != text[end])\n  \
    \          return false;\n        start++;\n        end--;\n    }\n    return\
    \ true;\n}", "{\n    int len = text.length();\n    int mid = len/2;\n    for(int\
    \ i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n        \
    \    return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j)\n    {\n        if (text[i]\
    \ != text[j])\n        {\n            return false;\n        }\n        i++;\n\
    \        j--;\n    }\n    return true;\n}", "{\n    if(text.length() == 0)\n \
    \       return true;\n    \n    int l = 0, r = text.length() - 1;\n    while(l\
    \ < r)\n    {\n        if(text[l] != text[r])\n            return false;\n   \
    \     l++;\n        r--;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for (int i = 0; i < len/2; i++) {\n        if (text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    if(text.length()\
    \ == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length()\
    \ - 1;\n    \n    while(left < right)\n    {\n        if(text[left] != text[right])\n\
    \            return false;\n        \n        left++;\n        right--;\n    }\n\
    \    \n    return true;\n}", "{\n    int l = 0, r = text.length() - 1;\n    while\
    \ (l < r) {\n        if (text[l] != text[r])\n            return false;\n    \
    \    l++;\n        r--;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    if (len < 2) return true;\n    \n    int i = 0;\n    int j = len - 1;\n \
    \   while (i < j) {\n        if (text[i] != text[j]) return false;\n        i++;\n\
    \        j--;\n    }\n    return true;\n}", "{\n    if(text.length() == 0)\n \
    \       return true;\n    int left = 0, right = text.length() - 1;\n    while(left\
    \ < right)\n    {\n        if(text[left] != text[right])\n            return false;\n\
    \        left++;\n        right--;\n    }\n    return true;\n}", "{\n    int len\
    \ = text.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n\
    \        if (text[i] != text[j])\n            return false;\n        i++;\n  \
    \      j--;\n    }\n    return true;\n}", "{\n    if (text.length() == 0)\n  \
    \      return true;\n    \n    int left = 0;\n    int right = text.length() -\
    \ 1;\n    \n    while (left < right)\n    {\n        if (text[left] != text[right])\n\
    \            return false;\n        \n        left++;\n        right--;\n    }\n\
    \    \n    return true;\n}", "{\n    int len = text.length();\n    int mid = len/2;\n\
    \    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    if(len < 2)\n        return true;\n    \n    int mid = len / 2;\n    for(int\
    \ i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len - i - 1])\n    \
    \        return false;\n    }\n    return true;\n}", "{\n    if (text.length()\
    \ == 0)\n        return true;\n    int left = 0, right = text.length() - 1;\n\
    \    while (left < right) {\n        if (text[left] != text[right])\n        \
    \    return false;\n        left++;\n        right--;\n    }\n    return true;\n\
    }", "{\n    if(text.length() == 0)\n        return true;\n    int left = 0, right\
    \ = text.length() - 1;\n    while(left < right)\n    {\n        if(text[left]\
    \ != text[right])\n            return false;\n        left++;\n        right--;\n\
    \    }\n    return true;\n}", "{\n    int len = text.length();\n    int mid =\
    \ len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    int mid = len/2;\n    for(int i = 0; i < mid; i++)\n    {\n        if(text[i]\
    \ != text[len-i-1])\n            return false;\n    }\n    return true;\n}", "{\n\
    \    int l = text.length();\n    int i = 0;\n    int j = l - 1;\n    while (i\
    \ < j)\n    {\n        if (text[i] != text[j])\n        {\n            return\
    \ false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}",
  "{\n    int len = text.length();\n    int i = 0;\n    int j = len - 1;\n    while\
    \ (i < j)\n    {\n        if (text[i] != text[j])\n            return false;\n\
    \        i++;\n        j--;\n    }\n    return true;\n}", "{\n    if(text.length()\
    \ == 0)\n        return true;\n    int left = 0;\n    int right = text.length()\
    \ - 1;\n    while(left < right)\n    {\n        if(text[left] != text[right])\n\
    \            return false;\n        left++;\n        right--;\n    }\n    return\
    \ true;\n}", "{\n    if(text.length() < 2)\n        return true;\n    \n    int\
    \ left = 0;\n    int right = text.length() - 1;\n    \n    while(left < right)\n\
    \    {\n        if(text[left] != text[right])\n            return false;\n   \
    \     \n        left++;\n        right--;\n    }\n    \n    return true;\n}",
  "{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n  \
    \      if(text[i] != text[len-i-1])\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    int len = text.length();\n    int mid = len/2;\n    for(int\
    \ i = 0; i < mid; i++)\n    {\n        if(text[i] != text[len-i-1])\n        \
    \    return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;\n}", "{\n    if (text.length() <= 1)\n        return\
    \ true;\n    \n    int left = 0;\n    int right = text.length() - 1;\n    \n \
    \   while (left < right)\n    {\n        if (text[left] != text[right])\n    \
    \        return false;\n        \n        left++;\n        right--;\n    }\n \
    \   \n    return true;\n}", "{\n    int len = text.length();\n    if(len < 2)\n\
    \        return true;\n    \n    int mid = len/2;\n    for(int i = 0; i < mid;\
    \ i++)\n    {\n        if(text[i] != text[len-i-1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    if(text.length() == 0)\n        return true;\n\
    \    \n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left\
    \ < right)\n    {\n        if(text[left] != text[right])\n            return false;\n\
    \        \n        left++;\n        right--;\n    }\n    \n    return true;\n}",
  "{\n    int len = text.length();\n    for(int i = 0; i < len/2; i++)\n    {\n  \
    \      if(text[i] != text[len-i-1])\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    int len = text.length();\n    int i = 0;\n    int j = len\
    \ - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return\
    \ false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}",
  "{\n    if(text.length() == 0)\n        return true;\n    \n    int left = 0;\n\
    \    int right = text.length() - 1;\n    \n    while(left < right)\n    {\n  \
    \      if(text[left] != text[right])\n            return false;\n        \n  \
    \      left++;\n        right--;\n    }\n    \n    return true;\n}", "{\n    int\
    \ l = text.length();\n    int i = 0;\n    int j = l - 1;\n    while (i < j) {\n\
    \        if (text[i] != text[j]) {\n            return false;\n        }\n   \
    \     i++;\n        j--;\n    }\n    return true;\n}", "{\n    int len = text.length();\n\
    \    for(int i = 0; i < len/2; i++)\n    {\n        if(text[i] != text[len-i-1])\n\
    \            return false;\n    }\n    return true;\n}", "{\n    if (text.length()\
    \ == 0)\n        return true;\n    \n    int left = 0;\n    int right = text.length()\
    \ - 1;\n    \n    while (left < right)\n    {\n        if (text[left] != text[right])\n\
    \            return false;\n        \n        left++;\n        right--;\n    }\n\
    \    \n    return true;\n}", "{\n    int len = text.length();\n    int i = 0;\n\
    \    int j = len - 1;\n    while (i < j) {\n        while (i < j && !isalnum(text[i]))\
    \ {\n            i++;\n        }\n        while (i < j && !isalnum(text[j])) {\n\
    \            j--;\n        }\n        if (toupper(text[i]) != toupper(text[j]))\
    \ {\n            return false;\n        }\n        i++;\n        j--;\n    }\n\
    \    return true;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
