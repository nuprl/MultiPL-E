{
  "name": "HumanEval_16_count_distinct_characters",
  "language": "d",
  "prompt": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n",
  "tests": "unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i=0;i<string.length();i++)\n    {\n        count += (string[i]==' ')?0:1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmp81s2z54y.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp81s2z54y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i=0; i<string.length(); i++)\n    {\n        count += (string[i]==' ')?0:1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpsqu7dtwx.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqu7dtwx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmp7sy19icd.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7sy19icd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i=0;i<string.length();i++)\n    {\n        count += (string[i]==' ')?0:1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmp81s2z54y.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp81s2z54y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i=0; i<string.length(); i++) {\n        count += (string[i]==' ')?0:1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpk5f64nbj.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk5f64nbj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += std.math.pow(26, string.length() - i - 1);\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmprv4hwwsi.d(13): Error: no property `length` for type `string`\n/tmp/tmprv4hwwsi.d(14): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprv4hwwsi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] - 'a' + 1);\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmp6y1e12z2.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6y1e12z2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i=0; i<string.length(); i++) {\n        count += (string[i]==' ')?0:1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpk5f64nbj.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk5f64nbj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += std.math.count_if(string.substr(i, 1).c_str(), [](char c) { return std.math.isalpha(c); });\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpdhiqhbh8.d(14): Error: found `c` when expecting `.` following char\n/tmp/tmpdhiqhbh8.d(14): Error: found `)` when expecting identifier following `char`.\n/tmp/tmpdhiqhbh8.d(14): Error: found `{` when expecting `,`\n/tmp/tmpdhiqhbh8.d(14): Error: expression expected, not `return`\n/tmp/tmpdhiqhbh8.d(14): Error: found `std` when expecting `,`\n/tmp/tmpdhiqhbh8.d(14): Error: found `;` when expecting `,`\n/tmp/tmpdhiqhbh8.d(14): Error: expression expected, not `}`\n/tmp/tmpdhiqhbh8.d(14): Error: found `;` when expecting `,`\n/tmp/tmpdhiqhbh8.d(15): Error: expression expected, not `}`\n/tmp/tmpdhiqhbh8.d(16): Error: found `return` when expecting `,`\n/tmp/tmpdhiqhbh8.d(16): Error: found `;` when expecting `,`\n/tmp/tmpdhiqhbh8.d(17): Error: expression expected, not `}`\n/tmp/tmpdhiqhbh8.d(19): Error: found `unittest` when expecting `,`\n/tmp/tmpdhiqhbh8.d(29): Error: found `void` when expecting `,`\n/tmp/tmpdhiqhbh8.d(29): Error: found `{` when expecting `,`\n/tmp/tmpdhiqhbh8.d(29): Error: expression expected, not `}`\n/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += std.math.count_if(string.substr(i, 1).begin(), string.substr(i, 1).end(), [](char c) { return std.math.isalpha(c); });\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpex9qb1kt.d(14): Error: found `c` when expecting `.` following char\n/tmp/tmpex9qb1kt.d(14): Error: found `)` when expecting identifier following `char`.\n/tmp/tmpex9qb1kt.d(14): Error: found `{` when expecting `,`\n/tmp/tmpex9qb1kt.d(14): Error: expression expected, not `return`\n/tmp/tmpex9qb1kt.d(14): Error: found `std` when expecting `,`\n/tmp/tmpex9qb1kt.d(14): Error: found `;` when expecting `,`\n/tmp/tmpex9qb1kt.d(14): Error: expression expected, not `}`\n/tmp/tmpex9qb1kt.d(14): Error: found `;` when expecting `,`\n/tmp/tmpex9qb1kt.d(15): Error: expression expected, not `}`\n/tmp/tmpex9qb1kt.d(16): Error: found `return` when expecting `,`\n/tmp/tmpex9qb1kt.d(16): Error: found `;` when expecting `,`\n/tmp/tmpex9qb1kt.d(17): Error: expression expected, not `}`\n/tmp/tmpex9qb1kt.d(19): Error: found `unittest` when expecting `,`\n/tmp/tmpex9qb1kt.d(29): Error: found `void` when expecting `,`\n/tmp/tmpex9qb1kt.d(29): Error: found `{` when expecting `,`\n/tmp/tmpex9qb1kt.d(29): Error: expression expected, not `}`\n/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i=0;i<string.length();i++)\n    {\n        count += (string[i]==' ')?0:1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmp81s2z54y.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp81s2z54y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmp7sy19icd.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7sy19icd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] - 'a' + 1);\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpvtmwnion.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvtmwnion.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += std.math.pow(26, string.length() - i - 1);\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmp0khldoea.d(13): Error: no property `length` for type `string`\n/tmp/tmp0khldoea.d(14): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0khldoea.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += std.math.pow(26, string.length() - i - 1);\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmprv4hwwsi.d(13): Error: no property `length` for type `string`\n/tmp/tmprv4hwwsi.d(14): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprv4hwwsi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += std.math.count_if(string.substr(i,1).toCharArray(),[](char c){return std.math.count_if(c,[](char c){return std.math.count_if(c,[](char c){return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y';});});});\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpqprzjtid.d(15): Error: found `c` when expecting `.` following char\n/tmp/tmpqprzjtid.d(15): Error: found `)` when expecting identifier following `char`.\n/tmp/tmpqprzjtid.d(15): Error: found `{` when expecting `,`\n/tmp/tmpqprzjtid.d(15): Error: expression expected, not `return`\n/tmp/tmpqprzjtid.d(15): Error: found `std` when expecting `,`\n/tmp/tmpqprzjtid.d(15): Error: found `c` when expecting `.` following char\n/tmp/tmpqprzjtid.d(15): Error: found `)` when expecting identifier following `char`.\n/tmp/tmpqprzjtid.d(15): Error: found `{` when expecting `,`\n/tmp/tmpqprzjtid.d(15): Error: expression expected, not `return`\n/tmp/tmpqprzjtid.d(15): Error: found `std` when expecting `,`\n/tmp/tmpqprzjtid.d(15): Error: found `c` when expecting `.` following char\n/tmp/tmpqprzjtid.d(15): Error: found `)` when expecting identifier following `char`.\n/tmp/tmpqprzjtid.d(15): Error: found `{` when expecting `,`\n/tmp/tmpqprzjtid.d(15): Error: expression expected, not `return`\n/tmp/tmpqprzjtid.d(15): Error: found `c` when",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i=0; i<string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpvajvutsh.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvajvutsh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpa82hnldm.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa82hnldm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmp7sy19icd.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7sy19icd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += std.math.count(string.substr(i, 1));\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpd48zas2d.d(13): Error: no property `length` for type `string`\n/tmp/tmpd48zas2d.d(14): Error: undefined identifier `count` in module `std.math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd48zas2d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpl23rvl5m.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl23rvl5m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmprtga5tpp.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprtga5tpp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i=0; i<string.length(); i++)\n    {\n        count += (string[i]==' ')?0:1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpsqu7dtwx.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqu7dtwx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmprtga5tpp.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprtga5tpp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i=0; i<string.length(); i++)\n    {\n        count += (string[i]==' ')?0:1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpsqu7dtwx.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqu7dtwx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpsjpkudu9.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsjpkudu9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i=0; i<string.length(); i++)\n    {\n        count += (string[i]==' ')?0:1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpsqu7dtwx.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqu7dtwx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmp6_l7z5nt.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6_l7z5nt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmp7sy19icd.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7sy19icd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += std.math.count_if(string.substr(i,1).begin(), string.substr(i,1).end(), [](char c){return std.math.isalpha(c);});\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmplu18dqpi.d(15): Error: found `c` when expecting `.` following char\n/tmp/tmplu18dqpi.d(15): Error: found `)` when expecting identifier following `char`.\n/tmp/tmplu18dqpi.d(15): Error: found `{` when expecting `,`\n/tmp/tmplu18dqpi.d(15): Error: expression expected, not `return`\n/tmp/tmplu18dqpi.d(15): Error: found `std` when expecting `,`\n/tmp/tmplu18dqpi.d(15): Error: found `;` when expecting `,`\n/tmp/tmplu18dqpi.d(15): Error: expression expected, not `}`\n/tmp/tmplu18dqpi.d(15): Error: found `;` when expecting `,`\n/tmp/tmplu18dqpi.d(16): Error: expression expected, not `}`\n/tmp/tmplu18dqpi.d(17): Error: found `return` when expecting `,`\n/tmp/tmplu18dqpi.d(17): Error: found `;` when expecting `,`\n/tmp/tmplu18dqpi.d(18): Error: expression expected, not `}`\n/tmp/tmplu18dqpi.d(20): Error: found `unittest` when expecting `,`\n/tmp/tmplu18dqpi.d(30): Error: found `void` when expecting `,`\n/tmp/tmplu18dqpi.d(30): Error: found `{` when expecting `,`\n/tmp/tmplu18dqpi.d(30): Error: expression expected, not `}`\n/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmp6_l7z5nt.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6_l7z5nt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i=0; i<string.length(); i++) {\n        count += (string[i]==' ')?0:1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpk5f64nbj.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk5f64nbj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += std.math.count_if(string.substr(i, 1).toCharArray(), [](char c) { return std.math.isalpha(c); });\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmp13kch5g7.d(14): Error: found `c` when expecting `.` following char\n/tmp/tmp13kch5g7.d(14): Error: found `)` when expecting identifier following `char`.\n/tmp/tmp13kch5g7.d(14): Error: found `{` when expecting `,`\n/tmp/tmp13kch5g7.d(14): Error: expression expected, not `return`\n/tmp/tmp13kch5g7.d(14): Error: found `std` when expecting `,`\n/tmp/tmp13kch5g7.d(14): Error: found `;` when expecting `,`\n/tmp/tmp13kch5g7.d(14): Error: expression expected, not `}`\n/tmp/tmp13kch5g7.d(14): Error: found `;` when expecting `,`\n/tmp/tmp13kch5g7.d(15): Error: expression expected, not `}`\n/tmp/tmp13kch5g7.d(16): Error: found `return` when expecting `,`\n/tmp/tmp13kch5g7.d(16): Error: found `;` when expecting `,`\n/tmp/tmp13kch5g7.d(17): Error: expression expected, not `}`\n/tmp/tmp13kch5g7.d(19): Error: found `unittest` when expecting `,`\n/tmp/tmp13kch5g7.d(29): Error: found `void` when expecting `,`\n/tmp/tmp13kch5g7.d(29): Error: found `{` when expecting `,`\n/tmp/tmp13kch5g7.d(29): Error: expression expected, not `}`\n/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmp6_l7z5nt.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6_l7z5nt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i=0;i<string.length();i++)\n    {\n        count += (string[i]==' ')?0:1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpqjnjn3op.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjnjn3op.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpokif9vn4.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokif9vn4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpc43u4cph.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc43u4cph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1664292707,
      "stdout": "",
      "stderr": "/tmp/tmpo4ebk221.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4ebk221.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}