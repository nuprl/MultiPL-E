{
  "name": "HumanEval_30_get_positive",
  "language": "d",
  "prompt": "import std.math;\n/*\nReturn only positive numbers in the array.\n    >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L, 1L]\n    \n*/\nlong[] get_positive(long[] l) \n",
  "tests": "unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}",
  "completions": [
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            r[i] = 0;\n        } else {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        ret[i] = l[i];\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            r[i] = 0;\n        } else {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            r[i] = 0;\n        } else {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        r[i] = l[i];\n    }\n    return r;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        result[i] = l[i];\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (x > 0) {\n            r[i] = x;\n            i++;\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n        if (l[i] > 0) r[i] = l[i];\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] l2 = new long[l.length];\n    int i = 0;\n    for (long x : l)\n        if (x > 0)\n            l2[i++] = x;\n    return l2;\n}",
    "{\n    int i;\n    long[] r = new long[l.length];\n    for (i=0; i<l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    int i;\n    long[] r = new long[l.length];\n    for (i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        r[i] = l[i];\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for(int i = 0; i < l.length; i++) {\n        if(l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            l[i] = 0;\n        }\n        result[i] = l[i];\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            l[i] = 0;\n        }\n        result[i] = l[i];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            result[i] = 0;\n        } else {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    for(int i=0; i<l.length; i++) \n        if(l[i]>0) r[i]=l[i];\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        ret[i] = l[i];\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for(int i = 0; i < l.length; i++) {\n        if(l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n        r[i] = l[i] > 0 ? l[i] : 0;\n    return r;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            result[i] = 0L;\n        } else {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        r[i] = l[i];\n    }\n    return r;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (l1 > 0) {\n            r[i] = l1;\n            i++;\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            r[i] = 0;\n        } else {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for(int i=0; i<l.length; i++)\n        if(l[i] > 0)\n            ret[i] = l[i];\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] < 0)\n            ret[i] = 0;\n        else\n            ret[i] = l[i];\n    }\n    return ret;\n}",
    "{\n    int i;\n    long[] l_out = new long[l.length];\n    for (i=0; i<l.length; i++) {\n        if (l[i]>0) {\n            l_out[i] = l[i];\n        }\n    }\n    return l_out;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] l_out = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            l_out[i] = l[i];\n        }\n    }\n    return l_out;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            l[i] = -l[i];\n        }\n        result[i] = l[i];\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        result[i] = l[i];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0) \n        {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    for(int i=0; i<l.length; i++)\n        if(l[i]>0)\n            r[i]=l[i];\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] < 0) \n        {\n            r[i] = 0;\n        } \n        else \n        {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        result[i] = l[i];\n    }\n    return result;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            r[i] = 0;\n        } else {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            result[i] = 0;\n        } else {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        r[i] = l[i];\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for(int i = 0; i < l.length; i++) {\n        if(l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] l_out = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            l_out[i] = l[i];\n        }\n    }\n    return l_out;\n}",
    "{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (x > 0) {\n            r[i] = x;\n            i++;\n        }\n    }\n    return r;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        r[i] = l[i];\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] r = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n        if(l[i] > 0)\n            r[i] = l[i];\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        r[i] = l[i];\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        ret[i] = l[i];\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (e > 0) {\n            r[i++] = e;\n        }\n    }\n    return r;\n}",
    "{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n        if(l[i] > 0)\n            result[i] = l[i];\n    return result;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for(int i=0; i<l.length; i++)\n        if(l[i]>0)\n            ret[i] = l[i];\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n        if (l[i] > 0)\n            result[i] = l[i];\n    return result;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        r[i] = l[i];\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n        if(l[i] > 0)\n            ret[i] = l[i];\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        r[i] = l[i];\n    }\n    return r;\n}",
    "{\n    long[] l_out = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            l_out[i] = l[i];\n        }\n    }\n    return l_out;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    int i;\n    long[] l_out = new long[l.length];\n    for (i=0; i<l.length; i++) {\n        if (l[i] > 0) {\n            l_out[i] = l[i];\n        }\n    }\n    return l_out;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        result[i] = l[i];\n    }\n    return result;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (x > 0) {\n            r[i++] = x;\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        result[i] = l[i];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length; i++) {\n        if(l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for(int i=0; i<l.length; i++) {\n        if(l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (x > 0) {\n            r[i++] = x;\n        }\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for(int i = 0; i < l.length; i++) {\n        if(l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (int j = 0; j < l.length; j++) \n    {\n        if (l[j] > 0) \n        {\n            r[i] = l[j];\n            i++;\n        }\n    }\n    return r;\n}\n",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            result[i] = 0;\n        } else {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            r[i] = 0;\n        } else {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for(int i=0; i<l.length; i++)\n        r[i] = l[i]<0 ? -l[i] : l[i];\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    int i = 0;\n    for(i = 0; i < l.length; i++) {\n        if(l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    int i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            r[i] = l[i];\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n            ret[i] = l[i];\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        result[i] = l[i];\n    }\n    return result;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        r[i] = l[i];\n    }\n    return r;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (long x : l) \n    {\n        if (x > 0)\n            r[i++] = x;\n    }\n    return r;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        result[i] = l[i];\n    }\n    return result;\n}",
    "{\n    int i;\n    long[] r = new long[l.length];\n    for (i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            r[i] = 0;\n        } else {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (x > 0) {\n            r[i] = x;\n            i++;\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            r[i] = 0;\n        } else {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        result[i] = l[i];\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (long x : l)\n        if (x > 0)\n            r[i++] = x;\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for(int i=0; i<l.length; i++)\n        r[i] = l[i]>0?l[i]:0L;\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0) \n        {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0) \n        {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] < 0) \n        {\n            result[i] = 0;\n        } \n        else \n        {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[l.length];\n    for(int i = 0; i < l.length; i++) {\n        if(l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for(int i=0; i<l.length; i++)\n        if(l[i]>0)\n            ret[i]=l[i];\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            r[i] = 0;\n        } else {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (e > 0) {\n            r[i++] = e;\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (long e : l) {\n        if (e > 0) {\n            r[i++] = e;\n        }\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for(int i=0; i<l.length; i++) {\n        if(l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            l[i] = -l[i];\n        }\n        result[i] = l[i];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    int i;\n    long[] r = new long[l.length];\n    for (i = 0; i < l.length; i++)\n        if (l[i] > 0)\n            r[i] = l[i];\n    return r;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n        if(l[i] > 0)\n            ret[i] = l[i];\n    return ret;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for(int i=0; i<l.length; i++)\n        if(l[i]>0)\n            ret[i]=l[i];\n    return ret;\n}",
    "{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            result[i] = 0;\n        } else {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        r[i] = l[i];\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        r[i] = l[i];\n    }\n    return r;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (l1 > 0) {\n            r[i] = l1;\n            i++;\n        }\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    int i;\n    long[] r = new long[l.length];\n    for (i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            ret[i] = 0;\n        } else {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            continue;\n        }\n        ret[i] = l[i];\n    }\n    return ret;\n}",
    "{\n    long[] ret = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret[i] = l[i];\n        }\n    }\n    return ret;\n}"
  ],
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ]
}