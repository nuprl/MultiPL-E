{
  "name": "HumanEval_65_circular_shift",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n",
  "tests": "unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp4xbuzajx.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4xbuzajx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp3y7i7b0l.d(18): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmp3y7i7b0l.d(21): Error: no property `length` for type `string`\n/tmp/tmp3y7i7b0l.d(22): Error: no property `substr` for type `string`\n/tmp/tmp3y7i7b0l.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3y7i7b0l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n != 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        return result.substr(result.length() - shift, shift);\n    }\n    else {\n        return result.substr(shift, result.length() - shift);\n    }\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpq1szu2af.d(18): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmpq1szu2af.d(21): Error: no property `length` for type `string`\n/tmp/tmpq1szu2af.d(22): Error: no property `substr` for type `string`\n/tmp/tmpq1szu2af.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq1szu2af.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x) return reverse_string(x);\n    if (shift == 0) return to_string(x);\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp4fz0f5lf.d(15): Error: undefined identifier `reverse_string`\n/tmp/tmp4fz0f5lf.d(16): Error: undefined identifier `to_string`\n/tmp/tmp4fz0f5lf.d(19): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4fz0f5lf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp5qebnx8i.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5qebnx8i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x) return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpl3o2ck1v.d(15): Error: undefined identifier `to_string`\n/tmp/tmpl3o2ck1v.d(18): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl3o2ck1v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(x);\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = char(n % 10 + '0') + result;\n        n /= 10;\n    }\n    while (shift > 0) {\n        result = char(shift % 10 + '0') + result;\n        shift /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp68cmw72q.d(16): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\n/tmp/tmp68cmw72q.d(20): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmp68cmw72q.d(24): Error: incompatible types for `(cast(char)(shift % 10L + 48L)) + (result)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp68cmw72q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    long m = shift;\n    while (m > 0) {\n        m--;\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    while (n > 0) {\n        n--;\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpkq2w4yi1.d(20): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\n/tmp/tmpkq2w4yi1.d(25): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkq2w4yi1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    long m = shift;\n    while (m > 0)\n    {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n        m--;\n    }\n    while (m < 0)\n    {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n        m++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpzigkddgv.d(20): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmpzigkddgv.d(26): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzigkddgv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        return result.substr(result.length() - shift, shift);\n    }\n    else {\n        return result.substr(0, shift);\n    }\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpu26r2wep.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu26r2wep.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string s = to_string(x);\n    if (shift > s.length())\n        return s.substr(s.length()-shift, s.length());\n    else\n        return s.substr(0, shift) + s.substr(s.length()-shift, s.length());\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpahl14czn.d(15): Error: undefined identifier `to_string`\n/tmp/tmpahl14czn.d(16): Error: no property `length` for type `string`\n/tmp/tmpahl14czn.d(17): Error: no property `substr` for type `string`\n/tmp/tmpahl14czn.d(19): Error: no property `substr` for type `string`\n/tmp/tmpahl14czn.d(19): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpahl14czn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp4xbuzajx.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4xbuzajx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0)\n    {\n        result = (char)(x % 10 + 48) + result;\n        x /= 10;\n        shift--;\n    }\n    while (shift < 0)\n    {\n        result = (char)(x % 10 + 48) + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpnpazrhsl.d(18): Error: C style cast illegal, use `cast(char)(x % 10 + 48)`\n/tmp/tmpnpazrhsl.d(24): Error: C style cast illegal, use `cast(char)(x % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnpazrhsl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp5qebnx8i.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5qebnx8i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp5qebnx8i.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5qebnx8i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse_string(x);\n    string result = \"\";\n    while (shift > 0) {\n        result = result + (char)(x % 10 + '0');\n        x = x / 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpslbfouna.d(19): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpslbfouna.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) \n    {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) \n    {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else \n    {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp41ccm2dw.d(19): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp41ccm2dw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpbj8vdnut.d(16): Error: undefined identifier `to_string`\n/tmp/tmpbj8vdnut.d(19): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbj8vdnut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    else\n        return to_string(x);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpie4is8ng.d(16): Error: undefined identifier `to_string`\n/tmp/tmpie4is8ng.d(18): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpie4is8ng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    long m = shift;\n    while (m > 0)\n    {\n        result = char(n % 10 + '0') + result;\n        n /= 10;\n        m--;\n    }\n    while (m < 0)\n    {\n        result = char(n % 10 + '0') + result;\n        n /= 10;\n        m++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp0malmsjs.d(20): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmp0malmsjs.d(26): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0malmsjs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long n = x;\n    string s = \"\";\n    while (n > 0) {\n        s = s + (char)(n % 10 + '0');\n        n = n / 10;\n    }\n    if (shift > s.length()) {\n        s = s.substr(0, s.length() - shift) + s.substr(s.length() - shift);\n    }\n    else {\n        s = s.substr(shift) + s.substr(0, shift);\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp9k30qz0t.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9k30qz0t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    long m = shift;\n    while (m > 0) {\n        m--;\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    while (n > 0) {\n        n--;\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpv5x_17xs.d(20): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmpv5x_17xs.d(25): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5x_17xs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    if (shift == 0)\n        return to_string(x);\n    if (shift < 0)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0)\n    {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift -= 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpzc_g6hrn.d(16): Error: undefined identifier `to_string`\n/tmp/tmpzc_g6hrn.d(18): Error: undefined identifier `to_string`\n/tmp/tmpzc_g6hrn.d(20): Error: undefined identifier `to_string`\n/tmp/tmpzc_g6hrn.d(24): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzc_g6hrn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(x);\n    string result = \"\";\n    while (shift > 0) {\n        result = result + char(x % 10 + '0');\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpzvxson38.d(16): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\n/tmp/tmpzvxson38.d(19): Error: incompatible types for `(result) + (cast(char)(x % 10L + 48L))`: `string` and `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzvxson38.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmptp42ew7d.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptp42ew7d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string s = to_string(x);\n    if (shift > s.length()) {\n        return s.substr(s.length() - shift, s.length());\n    }\n    return s.substr(shift, s.length() - shift) + s.substr(0, shift);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp0150ybnz.d(15): Error: undefined identifier `to_string`\n/tmp/tmp0150ybnz.d(16): Error: no property `length` for type `string`\n/tmp/tmp0150ybnz.d(17): Error: no property `substr` for type `string`\n/tmp/tmp0150ybnz.d(19): Error: no property `substr` for type `string`\n/tmp/tmp0150ybnz.d(19): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0150ybnz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string s = to_string(x);\n    if (shift > s.length())\n        return s.substr(s.length() - shift, s.length());\n    else\n        return s.substr(shift, s.length() - shift);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp0gkpp2mf.d(15): Error: undefined identifier `to_string`\n/tmp/tmp0gkpp2mf.d(16): Error: no property `length` for type `string`\n/tmp/tmp0gkpp2mf.d(17): Error: no property `substr` for type `string`\n/tmp/tmp0gkpp2mf.d(19): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0gkpp2mf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0)\n    {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpznhdtci4.d(16): Error: undefined identifier `to_string`\n/tmp/tmpznhdtci4.d(20): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpznhdtci4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(x);\n    string result = \"\";\n    while (shift > 0)\n    {\n        result = char(x % 10 + 48) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpi46klcnr.d(16): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\n/tmp/tmpi46klcnr.d(20): Error: incompatible types for `(cast(char)(x % 10L + 48L)) + (result)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi46klcnr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x) {\n        return reverse(to_string(x));\n    }\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpfkadki3j.d(16): Error: undefined identifier `to_string`\n/tmp/tmpfkadki3j.d(20): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfkadki3j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    long m = shift;\n    while (m > 0) {\n        result = char(n % 10) + result;\n        n = n / 10;\n        m--;\n    }\n    while (m < 0) {\n        result = char(n % 10) + result;\n        n = n / 10;\n        m++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp7e8u6aqx.d(19): Error: cannot implicitly convert expression `n % 10L` of type `long` to `char`\n/tmp/tmp7e8u6aqx.d(24): Error: cannot implicitly convert expression `n % 10L` of type `long` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e8u6aqx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x) {\n        return reverse(to_string(x));\n    }\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpfkadki3j.d(16): Error: undefined identifier `to_string`\n/tmp/tmpfkadki3j.d(20): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfkadki3j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while(shift > 0)\n    {\n        result = result + to_string(x % 10);\n        x = x / 10;\n        shift--;\n    }\n    while(shift < 0)\n    {\n        result = to_string(x % 10) + result;\n        x = x / 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpuwfrn5r5.d(18): Error: undefined identifier `to_string`\n/tmp/tmpuwfrn5r5.d(24): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuwfrn5r5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpbj8vdnut.d(16): Error: undefined identifier `to_string`\n/tmp/tmpbj8vdnut.d(19): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbj8vdnut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpbj8vdnut.d(16): Error: undefined identifier `to_string`\n/tmp/tmpbj8vdnut.d(19): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbj8vdnut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string s = to_string(x);\n    if (shift > s.length())\n        return s.substr(s.length() - shift, s.length());\n    else\n        return s.substr(0, shift) + s.substr(s.length() - shift, s.length());\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpmfr2afjm.d(15): Error: undefined identifier `to_string`\n/tmp/tmpmfr2afjm.d(16): Error: no property `length` for type `string`\n/tmp/tmpmfr2afjm.d(17): Error: no property `substr` for type `string`\n/tmp/tmpmfr2afjm.d(19): Error: no property `substr` for type `string`\n/tmp/tmpmfr2afjm.d(19): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfr2afjm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpfx0iqmhi.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfx0iqmhi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = char(n % 10) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpkpiv0wos.d(18): Error: cannot implicitly convert expression `n % 10L` of type `long` to `char`\n/tmp/tmpkpiv0wos.d(21): Error: no property `length` for type `string`\n/tmp/tmpkpiv0wos.d(22): Error: no property `substr` for type `string`\n/tmp/tmpkpiv0wos.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkpiv0wos.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = result + (x % 10) + \"\";\n        x /= 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = (x % 10) + result + \"\";\n        x /= 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp5k6_g9q4.d(17): Error: incompatible types for `(result) + (x % cast(long)10)`: `string` and `long`\n/tmp/tmp5k6_g9q4.d(22): Error: incompatible types for `(x % cast(long)10) + (result)`: `long` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5k6_g9q4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n = n / 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmplb63_l15.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplb63_l15.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = result + (char)(x % 10 + '0');\n        x /= 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x % 10 + '0') + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp09jrli9x.d(17): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\n/tmp/tmp09jrli9x.d(22): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09jrli9x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    \n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpuuhmjeye.d(16): Error: undefined identifier `to_string`\n/tmp/tmpuuhmjeye.d(20): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuuhmjeye.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmptp42ew7d.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptp42ew7d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = char(x % 10 + 48) + result;\n        x /= 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = char(x % 10 + 48) + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp0ri85a3m.d(17): Error: incompatible types for `(cast(char)(x % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmp0ri85a3m.d(22): Error: incompatible types for `(cast(char)(x % 10L + 48L)) + (result)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ri85a3m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = (char)(x % 10 + 48) + result;\n        x /= 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x % 10 + 48) + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpaapt6tb1.d(17): Error: C style cast illegal, use `cast(char)(x % 10 + 48)`\n/tmp/tmpaapt6tb1.d(22): Error: C style cast illegal, use `cast(char)(x % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaapt6tb1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpaf8u3q57.d(18): Error: cannot implicitly convert expression `n % 10L` of type `long` to `char`\n/tmp/tmpaf8u3q57.d(21): Error: no property `length` for type `string`\n/tmp/tmpaf8u3q57.d(22): Error: no property `substr` for type `string`\n/tmp/tmpaf8u3q57.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaf8u3q57.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp8z36q3_g.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8z36q3_g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = result + (char)(x % 10 + '0');\n        x = x / 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x % 10 + '0') + result;\n        x = x / 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmppjq6_zo3.d(17): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\n/tmp/tmppjq6_zo3.d(22): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppjq6_zo3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpbj8vdnut.d(16): Error: undefined identifier `to_string`\n/tmp/tmpbj8vdnut.d(19): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbj8vdnut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpr4rg9m0x.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr4rg9m0x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    else\n        return to_string(x);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpie4is8ng.d(16): Error: undefined identifier `to_string`\n/tmp/tmpie4is8ng.d(18): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpie4is8ng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpc4c4zq2u.d(18): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmpc4c4zq2u.d(21): Error: no property `length` for type `string`\n/tmp/tmpc4c4zq2u.d(22): Error: no property `substr` for type `string`\n/tmp/tmpc4c4zq2u.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc4c4zq2u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long digit;\n    while (shift > 0) {\n        digit = x % 10;\n        x = x / 10;\n        result = digit + result;\n        shift--;\n    }\n    while (shift < 0) {\n        digit = x % 10;\n        x = x / 10;\n        result = digit + result;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpo65yzuld.d(20): Error: incompatible types for `(digit) + (result)`: `long` and `string`\n/tmp/tmpo65yzuld.d(26): Error: incompatible types for `(digit) + (result)`: `long` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo65yzuld.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpbj8vdnut.d(16): Error: undefined identifier `to_string`\n/tmp/tmpbj8vdnut.d(19): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbj8vdnut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        return result.substr(result.length() - shift, shift);\n    }\n    else {\n        return result.substr(shift, result.length() - shift);\n    }\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmptci7lv7f.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptci7lv7f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(x);\n    string result = \"\";\n    while (shift > 0) {\n        result = result + char(x % 10 + '0');\n        x = x / 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpqgb1o4p4.d(16): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\n/tmp/tmpqgb1o4p4.d(19): Error: incompatible types for `(result) + (cast(char)(x % 10L + 48L))`: `string` and `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqgb1o4p4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    else\n        return to_string(x);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpie4is8ng.d(16): Error: undefined identifier `to_string`\n/tmp/tmpie4is8ng.d(18): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpie4is8ng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp4xbuzajx.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4xbuzajx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp5qebnx8i.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5qebnx8i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpfx0iqmhi.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfx0iqmhi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(x);\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    while (shift > 0) {\n        result = char(shift % 10 + 48) + result;\n        shift /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpx6s_x182.d(16): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\n/tmp/tmpx6s_x182.d(20): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmpx6s_x182.d(24): Error: incompatible types for `(cast(char)(shift % 10L + 48L)) + (result)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx6s_x182.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpbj8vdnut.d(16): Error: undefined identifier `to_string`\n/tmp/tmpbj8vdnut.d(19): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbj8vdnut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = (char)(x % 10 + '0') + result;\n        x /= 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x % 10 + '0') + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpvryzxoma.d(17): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\n/tmp/tmpvryzxoma.d(22): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvryzxoma.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(x);\n    string result = \"\";\n    while (shift > 0)\n    {\n        result = char(x % 10 + 48) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpi46klcnr.d(16): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\n/tmp/tmpi46klcnr.d(20): Error: incompatible types for `(cast(char)(x % 10L + 48L)) + (result)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi46klcnr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    else\n        return to_string(x);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpie4is8ng.d(16): Error: undefined identifier `to_string`\n/tmp/tmpie4is8ng.d(18): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpie4is8ng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        return result.substr(result.length() - shift, shift);\n    }\n    else {\n        return result.substr(shift, result.length() - shift);\n    }\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp2rovmwm3.d(18): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmp2rovmwm3.d(21): Error: no property `length` for type `string`\n/tmp/tmp2rovmwm3.d(22): Error: no property `substr` for type `string`\n/tmp/tmp2rovmwm3.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2rovmwm3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp4xbuzajx.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4xbuzajx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result;\n    long n = x;\n    while (shift > 0) {\n        result += to_string(n % 10);\n        n /= 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = to_string(n % 10) + result;\n        n /= 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpa6fihmd2.d(18): Error: undefined identifier `to_string`\n/tmp/tmpa6fihmd2.d(23): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa6fihmd2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse_string(x);\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = char(n % 10) + result;\n        n /= 10;\n    }\n    while (shift > 0) {\n        result = char(n % 10) + result;\n        n /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpxihewc7m.d(16): Error: undefined identifier `reverse_string`\n/tmp/tmpxihewc7m.d(20): Error: cannot implicitly convert expression `n % 10L` of type `long` to `char`\n/tmp/tmpxihewc7m.d(24): Error: cannot implicitly convert expression `n % 10L` of type `long` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxihewc7m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long n = x;\n    long m = shift;\n    string result = \"\";\n    while (m > 0) {\n        m--;\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    while (n > 0) {\n        n--;\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpapbpsuu2.d(20): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\n/tmp/tmpapbpsuu2.d(25): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapbpsuu2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = (char)(x % 10 + 48) + result;\n        x /= 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x % 10 + 48) + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpaapt6tb1.d(17): Error: C style cast illegal, use `cast(char)(x % 10 + 48)`\n/tmp/tmpaapt6tb1.d(22): Error: C style cast illegal, use `cast(char)(x % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaapt6tb1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long i = 0;\n    while (i < shift)\n    {\n        result += (char)(x % 10 + '0');\n        x /= 10;\n        i++;\n    }\n    while (i < x)\n    {\n        result += (char)(x % 10 + '0');\n        x /= 10;\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpuis8xu29.d(19): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\n/tmp/tmpuis8xu29.d(25): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuis8xu29.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    else\n        return to_string(x);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpie4is8ng.d(16): Error: undefined identifier `to_string`\n/tmp/tmpie4is8ng.d(18): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpie4is8ng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x) {\n        return reverse(to_string(x));\n    }\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpfkadki3j.d(16): Error: undefined identifier `to_string`\n/tmp/tmpfkadki3j.d(20): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfkadki3j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    long m = shift;\n    while (m > 0) {\n        result = (n % 10) + result;\n        n = n / 10;\n        m--;\n    }\n    while (m < 0) {\n        result = (n % 10) + result;\n        n = n / 10;\n        m++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpu2h8piqh.d(19): Error: incompatible types for `(n % cast(long)10) + (result)`: `long` and `string`\n/tmp/tmpu2h8piqh.d(24): Error: incompatible types for `(n % cast(long)10) + (result)`: `long` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu2h8piqh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse_string(x);\n    string result = \"\";\n    while (shift > 0) {\n        result = char(x % 10 + '0') + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp8ltehd1l.d(16): Error: undefined identifier `reverse_string`\n/tmp/tmp8ltehd1l.d(19): Error: incompatible types for `(cast(char)(x % 10L + 48L)) + (result)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ltehd1l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpbj8vdnut.d(16): Error: undefined identifier `to_string`\n/tmp/tmpbj8vdnut.d(19): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbj8vdnut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while(n > 0)\n    {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if(shift > result.length())\n    {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else\n    {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpk7du0gxk.d(19): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7du0gxk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift);\n        reverse(result.begin(), result.end());\n    }\n    else {\n        result = result.substr(shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp9x4afrqb.d(18): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmp9x4afrqb.d(21): Error: no property `length` for type `string`\n/tmp/tmp9x4afrqb.d(22): Error: no property `substr` for type `string`\n/tmp/tmp9x4afrqb.d(23): Error: no property `begin` for type `string`\n/tmp/tmp9x4afrqb.d(23): Error: no property `end` for type `string`\n/tmp/tmp9x4afrqb.d(26): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x4afrqb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string s = to_string(x);\n    if (shift > s.length())\n        return s.substr(s.length() - shift, s.length());\n    else\n        return s.substr(0, s.length() - shift) + s.substr(s.length() - shift, shift);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmprnqownnx.d(15): Error: undefined identifier `to_string`\n/tmp/tmprnqownnx.d(16): Error: no property `length` for type `string`\n/tmp/tmprnqownnx.d(17): Error: no property `substr` for type `string`\n/tmp/tmprnqownnx.d(19): Error: no property `substr` for type `string`\n/tmp/tmprnqownnx.d(19): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprnqownnx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0)\n    {\n        result = result + to_string(x % 10);\n        x /= 10;\n        shift--;\n    }\n    while (shift < 0)\n    {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp_1l3jycd.d(18): Error: undefined identifier `to_string`\n/tmp/tmp_1l3jycd.d(24): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_1l3jycd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    else\n        return to_string(x);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpie4is8ng.d(16): Error: undefined identifier `to_string`\n/tmp/tmpie4is8ng.d(18): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpie4is8ng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string s = to_string(x);\n    if (shift > s.length())\n        return s.substr(s.length() - shift, s.length());\n    else\n        return s.substr(0, shift) + s.substr(s.length() - shift, s.length());\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpmfr2afjm.d(15): Error: undefined identifier `to_string`\n/tmp/tmpmfr2afjm.d(16): Error: no property `length` for type `string`\n/tmp/tmpmfr2afjm.d(17): Error: no property `substr` for type `string`\n/tmp/tmpmfr2afjm.d(19): Error: no property `substr` for type `string`\n/tmp/tmpmfr2afjm.d(19): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfr2afjm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long i = 0;\n    while (i < shift)\n    {\n        result += (char)(x % 10 + '0');\n        x /= 10;\n        i++;\n    }\n    while (i < x)\n    {\n        result += (char)(x % 10 + '0');\n        x /= 10;\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpuis8xu29.d(19): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\n/tmp/tmpuis8xu29.d(25): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuis8xu29.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = (char)(x % 10 + '0') + result;\n        x /= 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x % 10 + '0') + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpvryzxoma.d(17): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\n/tmp/tmpvryzxoma.d(22): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvryzxoma.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n != 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        return result.substr(result.length() - shift, shift);\n    }\n    else {\n        return result.substr(shift, result.length() - shift);\n    }\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp0ktiay4u.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ktiay4u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = result + (char)(x % 10 + '0');\n        x = x / 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x % 10 + '0') + result;\n        x = x / 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmppjq6_zo3.d(17): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\n/tmp/tmppjq6_zo3.d(22): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppjq6_zo3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long digit;\n    for (long i = 0; i < shift; i++) {\n        digit = x % 10;\n        result = digit + result;\n        x = x / 10;\n    }\n    for (long i = 0; i < shift; i++) {\n        digit = x % 10;\n        result = digit + result;\n        x = x / 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpbfru1rrc.d(19): Error: incompatible types for `(digit) + (result)`: `long` and `string`\n/tmp/tmpbfru1rrc.d(24): Error: incompatible types for `(digit) + (result)`: `long` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbfru1rrc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    \n    string result = \"\";\n    while (shift > 0)\n    {\n        result += to_string(x % 10);\n        x /= 10;\n        shift--;\n    }\n    return result + to_string(x);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpezxku56q.d(16): Error: undefined identifier `to_string`\n/tmp/tmpezxku56q.d(21): Error: undefined identifier `to_string`\n/tmp/tmpezxku56q.d(25): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpezxku56q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmptp42ew7d.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptp42ew7d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp3_mf0sz8.d(18): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmp3_mf0sz8.d(21): Error: no property `length` for type `string`\n/tmp/tmp3_mf0sz8.d(22): Error: no property `substr` for type `string`\n/tmp/tmp3_mf0sz8.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_mf0sz8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while(n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if(shift > result.length())\n        return result.substr(result.length() - shift, shift);\n    else\n        return result.substr(shift, result.length() - shift);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpfh1utxgj.d(18): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmpfh1utxgj.d(21): Error: no property `length` for type `string`\n/tmp/tmpfh1utxgj.d(22): Error: no property `substr` for type `string`\n/tmp/tmpfh1utxgj.d(24): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfh1utxgj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp4xbuzajx.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4xbuzajx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    else\n        return to_string(x);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpie4is8ng.d(16): Error: undefined identifier `to_string`\n/tmp/tmpie4is8ng.d(18): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpie4is8ng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    long m = shift;\n    while (m > 0)\n    {\n        result = (n % 10) + result;\n        n /= 10;\n        m--;\n    }\n    while (m < 0)\n    {\n        result = (n % 10) + result;\n        n /= 10;\n        m++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpi4qkwb_x.d(20): Error: incompatible types for `(n % cast(long)10) + (result)`: `long` and `string`\n/tmp/tmpi4qkwb_x.d(26): Error: incompatible types for `(n % cast(long)10) + (result)`: `long` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4qkwb_x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long n = x;\n    string s = \"\";\n    while (n > 0) {\n        s = s + to_string(n % 10);\n        n /= 10;\n    }\n    if (shift > s.length()) {\n        s = s.substr(0, s.length() - shift) + s.substr(s.length() - shift);\n    }\n    else {\n        s = s.substr(shift) + s.substr(0, shift);\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpom2bws47.d(18): Error: undefined identifier `to_string`\n/tmp/tmpom2bws47.d(21): Error: no property `length` for type `string`\n/tmp/tmpom2bws47.d(22): Error: no property `substr` for type `string`\n/tmp/tmpom2bws47.d(22): Error: no property `substr` for type `string`\n/tmp/tmpom2bws47.d(25): Error: no property `substr` for type `string`\n/tmp/tmpom2bws47.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpom2bws47.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x) return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpl3o2ck1v.d(15): Error: undefined identifier `to_string`\n/tmp/tmpl3o2ck1v.d(18): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl3o2ck1v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = (char)(x % 10 + '0') + result;\n        x /= 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x % 10 + '0') + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpvryzxoma.d(17): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\n/tmp/tmpvryzxoma.d(22): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvryzxoma.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpbj8vdnut.d(16): Error: undefined identifier `to_string`\n/tmp/tmpbj8vdnut.d(19): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbj8vdnut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpbj8vdnut.d(16): Error: undefined identifier `to_string`\n/tmp/tmpbj8vdnut.d(19): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbj8vdnut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp3y7i7b0l.d(18): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmp3y7i7b0l.d(21): Error: no property `length` for type `string`\n/tmp/tmp3y7i7b0l.d(22): Error: no property `substr` for type `string`\n/tmp/tmp3y7i7b0l.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3y7i7b0l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = to_string(n % 10) + result;\n        n /= 10;\n    }\n    if (shift > 0)\n        result = result.substr(0, shift) + result.substr(shift);\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpjro7re24.d(16): Error: undefined identifier `to_string`\n/tmp/tmpjro7re24.d(20): Error: undefined identifier `to_string`\n/tmp/tmpjro7re24.d(24): Error: no property `substr` for type `string`\n/tmp/tmpjro7re24.d(24): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjro7re24.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x) return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpl3o2ck1v.d(15): Error: undefined identifier `to_string`\n/tmp/tmpl3o2ck1v.d(18): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl3o2ck1v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string s = to_string(x);\n    if (shift > s.length())\n        return s.substr(s.length() - shift, s.length());\n    else\n        return s.substr(shift, s.length() - shift) + s.substr(0, shift);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmplpl7phv_.d(15): Error: undefined identifier `to_string`\n/tmp/tmplpl7phv_.d(16): Error: no property `length` for type `string`\n/tmp/tmplpl7phv_.d(17): Error: no property `substr` for type `string`\n/tmp/tmplpl7phv_.d(19): Error: no property `substr` for type `string`\n/tmp/tmplpl7phv_.d(19): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplpl7phv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    long m = shift;\n    while(m > 0)\n    {\n        result = result + to_string(n % 10);\n        n = n / 10;\n        m--;\n    }\n    while(m < 0)\n    {\n        result = to_string(n % 10) + result;\n        n = n / 10;\n        m++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpt4bdq355.d(20): Error: undefined identifier `to_string`\n/tmp/tmpt4bdq355.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt4bdq355.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x) {\n        return reverse(to_string(x));\n    }\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpfkadki3j.d(16): Error: undefined identifier `to_string`\n/tmp/tmpfkadki3j.d(20): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfkadki3j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpv8qjmd5r.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv8qjmd5r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp5qebnx8i.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5qebnx8i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = result + (char)(x % 10 + '0');\n        x = x / 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x % 10 + '0') + result;\n        x = x / 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmppjq6_zo3.d(17): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\n/tmp/tmppjq6_zo3.d(22): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppjq6_zo3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x) {\n        return reverse_string(x);\n    }\n    string result = \"\";\n    while (shift > 0) {\n        result += x % 10;\n        x /= 10;\n        shift--;\n    }\n    while (result.length() < x) {\n        result += 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpwtcezoec.d(16): Error: undefined identifier `reverse_string`\n/tmp/tmpwtcezoec.d(20): Error: incompatible types for `(result) += (x % 10L)`: `string` and `long`\n/tmp/tmpwtcezoec.d(24): Error: no property `length` for type `string`\n/tmp/tmpwtcezoec.d(25): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwtcezoec.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long n = x;\n    string s = \"\";\n    while (n > 0) {\n        s = s + (char)(n % 10 + '0');\n        n = n / 10;\n    }\n    if (shift > s.length()) {\n        s = s.substr(0, s.length() - shift) + s.substr(s.length() - shift);\n    }\n    else {\n        s = s.substr(shift) + s.substr(0, shift);\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp9k30qz0t.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9k30qz0t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = char(x % 10 + '0') + result;\n        x = x / 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = char(x % 10 + '0') + result;\n        x = x / 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpsedmgkgp.d(17): Error: incompatible types for `(cast(char)(x % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmpsedmgkgp.d(22): Error: incompatible types for `(cast(char)(x % 10L + 48L)) + (result)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsedmgkgp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while(n > 0)\n    {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if(shift > result.length())\n        return result.substr(result.length() - shift, shift);\n    else\n        return result.substr(shift, result.length() - shift);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpy01m2oi3.d(19): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmpy01m2oi3.d(22): Error: no property `length` for type `string`\n/tmp/tmpy01m2oi3.d(23): Error: no property `substr` for type `string`\n/tmp/tmpy01m2oi3.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy01m2oi3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = result + (x % 10 + 10) % 10;\n        x = x / 10;\n        shift = shift - 1;\n    }\n    while (shift < 0) {\n        result = result + (x % 10) % 10;\n        x = x / 10;\n        shift = shift + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpja1n6h26.d(17): Error: incompatible types for `(result) + ((x % cast(long)10 + cast(long)10) % cast(long)10)`: `string` and `long`\n/tmp/tmpja1n6h26.d(22): Error: incompatible types for `(result) + (x % cast(long)10 % cast(long)10)`: `string` and `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpja1n6h26.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n != 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpt_96ezbv.d(18): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmpt_96ezbv.d(21): Error: no property `length` for type `string`\n/tmp/tmpt_96ezbv.d(22): Error: no property `substr` for type `string`\n/tmp/tmpt_96ezbv.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt_96ezbv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n = n / 10;\n    }\n    if (shift > result.length()) {\n        return result.substr(result.length() - shift, shift);\n    }\n    else {\n        return result.substr(shift, result.length() - shift);\n    }\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp3o0011e6.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3o0011e6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = result + (char)(x % 10 + '0');\n        x = x / 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x % 10 + '0') + result;\n        x = x / 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmppjq6_zo3.d(17): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\n/tmp/tmppjq6_zo3.d(22): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppjq6_zo3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long digit = x % 10;\n    if (shift > 0) {\n        result = circular_shift(digit, shift - 1) + result;\n    }\n    else {\n        result = digit + result;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp98mqt9g2.d(18): Error: invalid array operation `circular_shift(digit, shift - 1L) + result` (possible missing [])\n/tmp/tmp98mqt9g2.d(21): Error: incompatible types for `(digit) + (result)`: `long` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp98mqt9g2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10) + result;\n        n = n / 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift);\n        reverse(result.begin(), result.end());\n    }\n    else {\n        result = result.substr(shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpa05hiz7i.d(18): Error: cannot implicitly convert expression `n % 10L` of type `long` to `char`\n/tmp/tmpa05hiz7i.d(21): Error: no property `length` for type `string`\n/tmp/tmpa05hiz7i.d(22): Error: no property `substr` for type `string`\n/tmp/tmpa05hiz7i.d(23): Error: no property `begin` for type `string`\n/tmp/tmpa05hiz7i.d(23): Error: no property `end` for type `string`\n/tmp/tmpa05hiz7i.d(26): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa05hiz7i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpv8qjmd5r.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv8qjmd5r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string s = to_string(x);\n    if (shift > s.length())\n        return s.substr(s.length() - shift, s.length());\n    else\n        return s.substr(0, shift) + s.substr(s.length() - shift, s.length());\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpmfr2afjm.d(15): Error: undefined identifier `to_string`\n/tmp/tmpmfr2afjm.d(16): Error: no property `length` for type `string`\n/tmp/tmpmfr2afjm.d(17): Error: no property `substr` for type `string`\n/tmp/tmpmfr2afjm.d(19): Error: no property `substr` for type `string`\n/tmp/tmpmfr2afjm.d(19): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfr2afjm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpbj8vdnut.d(16): Error: undefined identifier `to_string`\n/tmp/tmpbj8vdnut.d(19): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbj8vdnut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = result + (char)(x % 10 + '0');\n        x = x / 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x % 10 + '0') + result;\n        x = x / 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmppjq6_zo3.d(17): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\n/tmp/tmppjq6_zo3.d(22): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppjq6_zo3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(x);\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    while (shift > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpy18lgt3n.d(20): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\n/tmp/tmpy18lgt3n.d(24): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy18lgt3n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0)\n    {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpznhdtci4.d(16): Error: undefined identifier `to_string`\n/tmp/tmpznhdtci4.d(20): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpznhdtci4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    \n    string result = \"\";\n    while (shift > 0)\n    {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpa9ams6ek.d(16): Error: undefined identifier `to_string`\n/tmp/tmpa9ams6ek.d(21): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9ams6ek.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp5qebnx8i.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5qebnx8i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    long m = shift;\n    while (m > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n        m--;\n    }\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp1bkbwxxc.d(19): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmp1bkbwxxc.d(24): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bkbwxxc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while(shift > 0)\n    {\n        result = result + to_string(x % 10);\n        x = x / 10;\n        shift--;\n    }\n    while(shift < 0)\n    {\n        result = to_string(x % 10) + result;\n        x = x / 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpuwfrn5r5.d(18): Error: undefined identifier `to_string`\n/tmp/tmpuwfrn5r5.d(24): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuwfrn5r5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    long n = x;\n    string result = \"\";\n    while (n > 0)\n    {\n        result = to_string(n % 10) + result;\n        n /= 10;\n    }\n    while (result.length() < shift)\n        result = \"0\" + result;\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpy8yrd847.d(16): Error: undefined identifier `to_string`\n/tmp/tmpy8yrd847.d(21): Error: undefined identifier `to_string`\n/tmp/tmpy8yrd847.d(24): Error: no property `length` for type `string`\n/tmp/tmpy8yrd847.d(25): Error: invalid array operation `\"0\" + result` (possible missing [])\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8yrd847.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x) return reverse(to_string(x));\n    if (shift == 0) return to_string(x);\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpila3s9ho.d(15): Error: undefined identifier `to_string`\n/tmp/tmpila3s9ho.d(16): Error: undefined identifier `to_string`\n/tmp/tmpila3s9ho.d(19): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpila3s9ho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while(shift > 0)\n    {\n        result = (char)(x % 10 + 48) + result;\n        x /= 10;\n        shift--;\n    }\n    while(shift < 0)\n    {\n        result = (char)(x % 10 + 48) + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp0nud0v_u.d(18): Error: C style cast illegal, use `cast(char)(x % 10 + 48)`\n/tmp/tmp0nud0v_u.d(24): Error: C style cast illegal, use `cast(char)(x % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0nud0v_u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpr4rg9m0x.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr4rg9m0x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(x);\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    while (shift > 0) {\n        result = char(shift % 10 + 48) + result;\n        shift /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpx6s_x182.d(16): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\n/tmp/tmpx6s_x182.d(20): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmpx6s_x182.d(24): Error: incompatible types for `(cast(char)(shift % 10L + 48L)) + (result)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx6s_x182.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    long m = shift;\n    while (m > 0)\n    {\n        m--;\n        n = n / 10;\n    }\n    while (n > 0)\n    {\n        result = (char)(n % 10 + '0') + result;\n        n = n / 10;\n    }\n    if (result.length() > 0)\n    {\n        result = result.substr(0, result.length() - 1);\n    }\n    if (result.length() < shift)\n    {\n        result = result + \"0\" * (shift - result.length());\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpkyv7wwhq.d(25): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyv7wwhq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n != 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpcuywrrum.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcuywrrum.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long n = x;\n    string s = \"\";\n    while (n != 0) {\n        s = s + (char)(n % 10 + '0');\n        n /= 10;\n    }\n    if (shift > s.length()) {\n        return s.substr(s.length() - shift, shift);\n    }\n    else {\n        return s.substr(shift, s.length() - shift);\n    }\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpa868mn8s.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa868mn8s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpa9g8xihl.d(18): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmpa9g8xihl.d(21): Error: no property `length` for type `string`\n/tmp/tmpa9g8xihl.d(22): Error: no property `substr` for type `string`\n/tmp/tmpa9g8xihl.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9g8xihl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    else\n        return to_string(x);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpie4is8ng.d(16): Error: undefined identifier `to_string`\n/tmp/tmpie4is8ng.d(18): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpie4is8ng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x) {\n        return reverse(to_string(x));\n    }\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpfkadki3j.d(16): Error: undefined identifier `to_string`\n/tmp/tmpfkadki3j.d(20): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfkadki3j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = result + to_string(x % 10);\n        x = x / 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = to_string(x % 10) + result;\n        x = x / 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp2s0z9dj_.d(17): Error: undefined identifier `to_string`\n/tmp/tmp2s0z9dj_.d(22): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s0z9dj_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0)\n    {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpznhdtci4.d(16): Error: undefined identifier `to_string`\n/tmp/tmpznhdtci4.d(20): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpznhdtci4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp5qebnx8i.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5qebnx8i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpr4rg9m0x.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr4rg9m0x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmphxg30iz8.d(18): Error: cannot implicitly convert expression `n % 10L` of type `long` to `char`\n/tmp/tmphxg30iz8.d(21): Error: no property `length` for type `string`\n/tmp/tmphxg30iz8.d(22): Error: no property `substr` for type `string`\n/tmp/tmphxg30iz8.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphxg30iz8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = char(x % 10 + '0') + result;\n        x /= 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = char(x % 10 + '0') + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp97s88swp.d(17): Error: incompatible types for `(cast(char)(x % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmp97s88swp.d(22): Error: incompatible types for `(cast(char)(x % 10L + 48L)) + (result)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp97s88swp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = result + to_string(x % 10);\n        x /= 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp81kzw_98.d(17): Error: undefined identifier `to_string`\n/tmp/tmp81kzw_98.d(22): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp81kzw_98.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp_qwrt1y4.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qwrt1y4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    } else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp0kqe4rh_.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0kqe4rh_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp3_mf0sz8.d(18): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmp3_mf0sz8.d(21): Error: no property `length` for type `string`\n/tmp/tmp3_mf0sz8.d(22): Error: no property `substr` for type `string`\n/tmp/tmp3_mf0sz8.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_mf0sz8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = result + to_string(x % 10);\n        x = x / 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = to_string(x % 10) + result;\n        x = x / 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp2s0z9dj_.d(17): Error: undefined identifier `to_string`\n/tmp/tmp2s0z9dj_.d(22): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s0z9dj_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long n = x;\n    string s = \"\";\n    while (n != 0) {\n        s = s + (char)(n % 10 + '0');\n        n = n / 10;\n    }\n    if (shift > s.length()) {\n        return s.substr(s.length() - shift, shift);\n    }\n    else {\n        return s.substr(shift, s.length() - shift);\n    }\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp081tqhr1.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp081tqhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long n = x;\n    long m = shift;\n    string s = \"\";\n    while (n > 0) {\n        s = s + to_string(n % 10);\n        n = n / 10;\n    }\n    if (m > s.length()) {\n        return reverse(s);\n    }\n    else {\n        return s.substr(m, s.length() - m) + s.substr(0, m);\n    }\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpcgeeh6n8.d(19): Error: undefined identifier `to_string`\n/tmp/tmpcgeeh6n8.d(22): Error: no property `length` for type `string`\n/tmp/tmpcgeeh6n8.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\n/tmp/tmpcgeeh6n8.d(26): Error: no property `substr` for type `string`\n/tmp/tmpcgeeh6n8.d(26): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcgeeh6n8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        return result.substr(result.length() - shift, shift);\n    }\n    else {\n        return result.substr(shift, result.length() - shift);\n    }\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp60x_vjk9.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60x_vjk9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp3y7i7b0l.d(18): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmp3y7i7b0l.d(21): Error: no property `length` for type `string`\n/tmp/tmp3y7i7b0l.d(22): Error: no property `substr` for type `string`\n/tmp/tmp3y7i7b0l.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3y7i7b0l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    if (shift > n)\n    {\n        result = reverse(result);\n        shift = n - shift;\n    }\n    while (shift > 0)\n    {\n        result = char(n % 10 + '0') + result;\n        n /= 10;\n        shift--;\n    }\n    while (n > 0)\n    {\n        result = char(n % 10 + '0') + result;\n        n /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpfixggo30.d(19): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\n/tmp/tmpfixggo30.d(24): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmpfixggo30.d(30): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfixggo30.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result;\n    long n = x;\n    while (shift > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpyv11iftj.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\n/tmp/tmpyv11iftj.d(23): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyv11iftj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while(shift > 0)\n    {\n        result = result + (char)(x % 10 + '0');\n        x = x / 10;\n        shift--;\n    }\n    while(shift < 0)\n    {\n        result = (char)(x % 10 + '0') + result;\n        x = x / 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp543bwkn8.d(18): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\n/tmp/tmp543bwkn8.d(24): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp543bwkn8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string s = to_string(x);\n    if (shift > s.length())\n        return s.substr(s.length() - shift, s.length());\n    else\n        return s.substr(shift, s.length() - shift) + s.substr(0, shift);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmplpl7phv_.d(15): Error: undefined identifier `to_string`\n/tmp/tmplpl7phv_.d(16): Error: no property `length` for type `string`\n/tmp/tmplpl7phv_.d(17): Error: no property `substr` for type `string`\n/tmp/tmplpl7phv_.d(19): Error: no property `substr` for type `string`\n/tmp/tmplpl7phv_.d(19): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplpl7phv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    long m = shift;\n    while (m > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n        m--;\n    }\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpyazm81qo.d(19): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\n/tmp/tmpyazm81qo.d(24): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyazm81qo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0)\n    {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpznhdtci4.d(16): Error: undefined identifier `to_string`\n/tmp/tmpznhdtci4.d(20): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpznhdtci4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp3y7i7b0l.d(18): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmp3y7i7b0l.d(21): Error: no property `length` for type `string`\n/tmp/tmp3y7i7b0l.d(22): Error: no property `substr` for type `string`\n/tmp/tmp3y7i7b0l.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3y7i7b0l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmptp42ew7d.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptp42ew7d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = result + (char)(x % 10 + '0');\n        x = x / 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x % 10 + '0') + result;\n        x = x / 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmppjq6_zo3.d(17): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\n/tmp/tmppjq6_zo3.d(22): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppjq6_zo3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    long m = shift;\n    while (m > 0) {\n        m--;\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    while (n > 0) {\n        n--;\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpv5x_17xs.d(20): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmpv5x_17xs.d(25): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5x_17xs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    \n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpuuhmjeye.d(16): Error: undefined identifier `to_string`\n/tmp/tmpuuhmjeye.d(20): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuuhmjeye.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = to_string(n % 10) + result;\n        n /= 10;\n    }\n    while (shift > 0) {\n        result = to_string(n % 10) + result;\n        n /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp_icqk7ry.d(16): Error: undefined identifier `to_string`\n/tmp/tmp_icqk7ry.d(20): Error: undefined identifier `to_string`\n/tmp/tmp_icqk7ry.d(24): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_icqk7ry.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(x);\n    string result = \"\";\n    while (shift > 0)\n    {\n        result = (char)(x % 10 + '0') + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpn5zjoadl.d(20): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn5zjoadl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string s = to_string(x);\n    if (shift > s.length())\n        return s.substr(s.length() - shift, s.length());\n    else\n        return s.substr(0, shift) + s.substr(s.length() - shift, s.length());\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpmfr2afjm.d(15): Error: undefined identifier `to_string`\n/tmp/tmpmfr2afjm.d(16): Error: no property `length` for type `string`\n/tmp/tmpmfr2afjm.d(17): Error: no property `substr` for type `string`\n/tmp/tmpmfr2afjm.d(19): Error: no property `substr` for type `string`\n/tmp/tmpmfr2afjm.d(19): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfr2afjm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpv8qjmd5r.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv8qjmd5r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp5qebnx8i.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5qebnx8i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpbj8vdnut.d(16): Error: undefined identifier `to_string`\n/tmp/tmpbj8vdnut.d(19): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbj8vdnut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = char(x % 10 + 48) + result;\n        x /= 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = char(x % 10 + 48) + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp0ri85a3m.d(17): Error: incompatible types for `(cast(char)(x % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmp0ri85a3m.d(22): Error: incompatible types for `(cast(char)(x % 10L + 48L)) + (result)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ri85a3m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0)\n    {\n        result = (char)(x % 10 + '0') + result;\n        x /= 10;\n        shift--;\n    }\n    while (shift < 0)\n    {\n        result = (char)(x % 10 + '0') + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpkit0cone.d(18): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\n/tmp/tmpkit0cone.d(24): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkit0cone.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    else\n        return to_string(x);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpie4is8ng.d(16): Error: undefined identifier `to_string`\n/tmp/tmpie4is8ng.d(18): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpie4is8ng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp3y7i7b0l.d(18): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmp3y7i7b0l.d(21): Error: no property `length` for type `string`\n/tmp/tmp3y7i7b0l.d(22): Error: no property `substr` for type `string`\n/tmp/tmp3y7i7b0l.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3y7i7b0l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpaf8u3q57.d(18): Error: cannot implicitly convert expression `n % 10L` of type `long` to `char`\n/tmp/tmpaf8u3q57.d(21): Error: no property `length` for type `string`\n/tmp/tmpaf8u3q57.d(22): Error: no property `substr` for type `string`\n/tmp/tmpaf8u3q57.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaf8u3q57.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpbj8vdnut.d(16): Error: undefined identifier `to_string`\n/tmp/tmpbj8vdnut.d(19): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbj8vdnut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    long m = shift;\n    while (m > 0) {\n        m--;\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    while (n > 0) {\n        n--;\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpkq2w4yi1.d(20): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\n/tmp/tmpkq2w4yi1.d(25): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkq2w4yi1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp3y7i7b0l.d(18): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmp3y7i7b0l.d(21): Error: no property `length` for type `string`\n/tmp/tmp3y7i7b0l.d(22): Error: no property `substr` for type `string`\n/tmp/tmp3y7i7b0l.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3y7i7b0l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string s = to_string(x);\n    if (shift > s.length())\n        return reverse(s);\n    return s.substr(shift) + s.substr(0, shift);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpn7k1fh9x.d(15): Error: undefined identifier `to_string`\n/tmp/tmpn7k1fh9x.d(16): Error: no property `length` for type `string`\n/tmp/tmpn7k1fh9x.d(17): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\n/tmp/tmpn7k1fh9x.d(18): Error: no property `substr` for type `string`\n/tmp/tmpn7k1fh9x.d(18): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7k1fh9x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(x);\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    while (shift > 0) {\n        result = char(shift % 10 + 48) + result;\n        shift /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpx6s_x182.d(16): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\n/tmp/tmpx6s_x182.d(20): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmpx6s_x182.d(24): Error: incompatible types for `(cast(char)(shift % 10L + 48L)) + (result)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx6s_x182.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse_string(x);\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = char(n % 10) + result;\n        n /= 10;\n    }\n    while (shift > 0) {\n        result = char(shift % 10) + result;\n        shift /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpzq7wrdv6.d(16): Error: undefined identifier `reverse_string`\n/tmp/tmpzq7wrdv6.d(20): Error: cannot implicitly convert expression `n % 10L` of type `long` to `char`\n/tmp/tmpzq7wrdv6.d(24): Error: cannot implicitly convert expression `shift % 10L` of type `long` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzq7wrdv6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(x);\n    long n = x;\n    long m = shift;\n    long s = 0;\n    string result = \"\";\n    while (n != 0) {\n        s = n % 10;\n        n = n / 10;\n        m = m % 10;\n        result = (char)(s + m) + result;\n    }\n    if (result.length() < shift)\n        result = \"0\" + result;\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpci7bbvig.d(25): Error: C style cast illegal, use `cast(char)(s + m)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpci7bbvig.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result = to_string(n % 10) + result;\n        n /= 10;\n    }\n    while (shift > 0) {\n        result = to_string(n % 10) + result;\n        n /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp_icqk7ry.d(16): Error: undefined identifier `to_string`\n/tmp/tmp_icqk7ry.d(20): Error: undefined identifier `to_string`\n/tmp/tmp_icqk7ry.d(24): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_icqk7ry.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    long m = shift;\n    while(m > 0)\n    {\n        result = result + to_string(n % 10);\n        n = n / 10;\n        m--;\n    }\n    while(m < 0)\n    {\n        result = to_string(n % 10) + result;\n        n = n / 10;\n        m++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpt4bdq355.d(20): Error: undefined identifier `to_string`\n/tmp/tmpt4bdq355.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt4bdq355.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    else\n        return to_string(x);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpie4is8ng.d(16): Error: undefined identifier `to_string`\n/tmp/tmpie4is8ng.d(18): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpie4is8ng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x) return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpl3o2ck1v.d(15): Error: undefined identifier `to_string`\n/tmp/tmpl3o2ck1v.d(18): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl3o2ck1v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse_string(x);\n    long n = x;\n    string result = \"\";\n    while (n != 0) {\n        result = char(n % 10) + result;\n        n /= 10;\n    }\n    if (shift > 0) {\n        for (int i = 0; i < shift; i++) {\n            result = char(n % 10) + result;\n            n /= 10;\n        }\n    }\n    else {\n        for (int i = 0; i < -shift; i++) {\n            result = char(n % 10) + result;\n            n /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp_974rv95.d(16): Error: undefined identifier `reverse_string`\n/tmp/tmp_974rv95.d(20): Error: cannot implicitly convert expression `n % 10L` of type `long` to `char`\n/tmp/tmp_974rv95.d(25): Error: cannot implicitly convert expression `n % 10L` of type `long` to `char`\n/tmp/tmp_974rv95.d(31): Error: cannot implicitly convert expression `n % 10L` of type `long` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_974rv95.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmptp42ew7d.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptp42ew7d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0)\n    {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpznhdtci4.d(16): Error: undefined identifier `to_string`\n/tmp/tmpznhdtci4.d(20): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpznhdtci4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(x);\n    string result = \"\";\n    while (shift > 0) {\n        result = char(x % 10 + '0') + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpx_gn6dcy.d(16): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(long)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\n/tmp/tmpx_gn6dcy.d(19): Error: incompatible types for `(cast(char)(x % 10L + 48L)) + (result)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_gn6dcy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    else\n        return to_string(x);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpie4is8ng.d(16): Error: undefined identifier `to_string`\n/tmp/tmpie4is8ng.d(18): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpie4is8ng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpbj8vdnut.d(16): Error: undefined identifier `to_string`\n/tmp/tmpbj8vdnut.d(19): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbj8vdnut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpr4rg9m0x.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr4rg9m0x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    while (shift > 0) {\n        result = (char)(x % 10 + '0') + result;\n        x /= 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x % 10 + '0') + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpvryzxoma.d(17): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\n/tmp/tmpvryzxoma.d(22): Error: C style cast illegal, use `cast(char)(x % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvryzxoma.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmptp42ew7d.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptp42ew7d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift > x) {\n        return reverse(to_string(x));\n    }\n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpfkadki3j.d(16): Error: undefined identifier `to_string`\n/tmp/tmpfkadki3j.d(20): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfkadki3j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift);\n    }\n    else {\n        result = result.substr(shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpzlw6unw5.d(18): Error: incompatible types for `(cast(char)(n % 10L + 48L)) + (result)`: `char` and `string`\n/tmp/tmpzlw6unw5.d(21): Error: no property `length` for type `string`\n/tmp/tmpzlw6unw5.d(22): Error: no property `substr` for type `string`\n/tmp/tmpzlw6unw5.d(25): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzlw6unw5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string result = \"\";\n    long n = x;\n    while (n != 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length() - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length() - shift);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpcuywrrum.d(18): Error: C style cast illegal, use `cast(char)(n % 10 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcuywrrum.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}