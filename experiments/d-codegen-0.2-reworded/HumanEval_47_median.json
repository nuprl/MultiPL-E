{
  "name": "HumanEval_47_median",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n",
  "tests": "unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}",
  "completions": [
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    \n    int i = n/2;\n    if (n%2 == 0) {\n        return (l[i-1] + l[i])/2.0;\n    } else {\n        return l[i];\n    }\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    sort(l2);\n    \n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    \n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    \n    l2 = sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n / 2)\n            l2[i - 1] = l[j];\n        else if (j < n / 2) {\n            l2[i] = l[j];\n            i++;\n        }\n    }\n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    \n    long[] l3 = new long[n / 2];\n    for (int i = n / 2; i < n; i++)\n        l3[i - n / 2] = l[i];\n    \n    return (median(l2) + median(l3)) / 2;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    System.arraycopy(l, 0, l2, 0, l.length);\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    \n    return (median(l2) + median(l3)) / 2;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    \n    int i = (n - 1) / 2;\n    int j = n - i - 1;\n    long a = l[i];\n    long b = l[j];\n    if (a > b)\n        return b;\n    else\n        return a;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2;\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    long[] l4 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l4[i] = l[n / 2 - i];\n    long[] l5 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l5[i] = l[n / 2 + i];\n    long[] l6 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l6[i] = l[n / 2 - i];\n    long[] l7 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l7[i] = l[n / 2 + i];\n    long[] l8 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l8[i] = l[n / 2 - i];\n    long[] l9 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l9[i] = l[n / 2 + i];\n    long[] l10 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l10[i] = l[n / 2 - i];\n    long[] l11 = new long[n / 2];\n    for (int i = 0;",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    \n    long[] l3 = new long[n];\n    for (int i = 0; i < n; i++) l3[i] = l2[i];\n    \n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l2[i] < l2[j]) {\n            long t = l2[i];\n            l2[i] = l2[j];\n            l2[j] = t;\n        }\n        i++;\n        j--;\n    }\n    \n    if (n % 2 == 1) return l2[n / 2];\n    \n    long m = l2[n / 2 - 1] + l2[n / 2];\n    return (m - l2[n / 2]) / 2;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    int j = n / 2;\n    while (i < n) {\n        l2[j] = l[i];\n        i++;\n        j++;\n    }\n    return (float)median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    \n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l2[i] < l2[j]) {\n            long t = l2[i];\n            l2[i] = l2[j];\n            l2[j] = t;\n        }\n        i++;\n        j--;\n    }\n    \n    if (n % 2 == 0) {\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n    }\n    else {\n        return l2[n / 2];\n    }\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty list\");\n    \n    long[] l2 = l.clone();\n    Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new IllegalArgumentException(\"median of empty list\");\n    if (l.length == 1)\n        return l[0];\n    \n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    \n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    if (n % 2 == 0)\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    else\n        return l[n / 2];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        return 0;\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    l2 = l2.sort();\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    Arrays.sort(l2);\n    if (n % 2 == 0)\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n    else\n        return l2[n / 2];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 0)\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n    else\n        return l2[n / 2];\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    if (l.length == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 0)\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n    return l2[l2.length / 2];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    long[] l2 = l.clone();\n    Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    \n    return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n - 1 - i];\n    long m1 = median(l2);\n    long m2 = median(l3);\n    return (float) ((m1 + m2) / 2.0);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1) return l2[n/2];\n    return (l2[n/2] + l2[n/2-1]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty list\");\n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 0)\n        return (float) (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2;\n    else\n        return l2[l2.length / 2];\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    if (l.length == 1)\n        return l[0];\n    \n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    \n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    long[] l2 = l.clone();\n    Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    sort(l2);\n    \n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n/2)\n            l2[i++] = l[j];\n        else if (l[j] < l2[i])\n            l2[i++] = l[j];\n    }\n    long m = l2[i/2];\n    if (i % 2 == 0)\n        return (float)m;\n    else\n        return (float)(m + l2[i/2 - 1])/2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = n / 2; i < n; i++)\n        l3[i - n / 2] = l[i];\n    \n    return (median(l2) + median(l3)) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    l2 = l2.sort();\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n/2];\n    for (int i = n/2; i < n; i++)\n        l3[i-n/2] = l[i];\n    return (float)median(l2) + (float)median(l3);\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    long[] l2 = l.clone();\n    Arrays.sort(l2);\n    \n    if (l2.length % 2 == 0)\n        return (float) ((l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2);\n    else\n        return (float) l2[l2.length / 2];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n - n / 2];\n    for (int i = 0; i < n - n / 2; i++)\n        l3[i] = l[i + n / 2];\n    \n    return (median(l2) + median(l3)) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l3[i] = l[i+n/2];\n    return (float)median(l2) + (float)median(l3);\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    long[] l1 = new long[n/2];\n    long[] l2 = new long[n - n/2];\n    for (int i = 0; i < n; i++) {\n        if (i < n/2) l1[i] = l[i];\n        else l2[i - n/2] = l[i];\n    }\n    \n    long m1 = median(l1);\n    long m2 = median(l2);\n    return (m1 + m2) / 2;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    l2 = l2.sort();\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new IllegalArgumentException(\"median of empty list\");\n    \n    if (l.length == 1)\n        return l[0];\n    \n    long[] l2 = new long[l.length];\n    System.arraycopy(l, 0, l2, 0, l.length);\n    \n    Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2;\n    \n    long[] l1 = new long[n / 2];\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n; i++) {\n        if (i < n / 2)\n            l1[i] = l[i];\n        else\n            l2[i - n / 2] = l[i];\n    }\n    return (median(l1) + median(l2)) / 2;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    System.arraycopy(l, 0, l2, 0, n);\n    Arrays.sort(l2);\n    return l2[n/2];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new Error(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l3[i] = l[i+n/2];\n    return (float) (median(l2) + median(l3)) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    int i = n / 2;\n    int j = n - i;\n    long a = l[i];\n    long b = l[j];\n    \n    if (a > b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    if (n % 2 == 0) return (a + b) / 2;\n    else return a;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n/2];\n    else\n        return (l2[n/2-1] + l2[n/2]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty list\");\n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    return (float)l2[l2.length/2];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    System.arraycopy(l, 0, l2, 0, n);\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new Error(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n - n / 2];\n    for (int i = 0; i < n - n / 2; i++)\n        l3[i] = l[i + n / 2];\n    long[] l4 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l4[i] = l[i];\n    long[] l5 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l5[i] = l[i + n / 2];\n    long[] l6 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l6[i] = l[i];\n    long[] l7 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l7[i] = l[i + n / 2];\n    long[] l8 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l8[i] = l[i];\n    long[] l9 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l9[i] = l[i + n / 2];\n    long[] l10 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l10[i] = l[i];\n    long[] l11 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        ",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    long[] l2 = l.clone();\n    Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    long[] l2 = l.clone();\n    Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l3[i] = l[i+n/2];\n    return (float) (median(l2) + median(l3)) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l3[i] = l[n/2 + i];\n    return (float) (median(l2) + median(l3)) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n - n / 2];\n    for (int i = 0; i < n - n / 2; i++)\n        l3[i] = l[i + n / 2];\n    return (median(l2) + median(l3)) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    int i = 0;\n    for (int j = 0; j < n; j++)\n        if (i < n/2)\n            l2[i++] = l[j];\n    Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n/2];\n    else\n        return (l2[n/2-1] + l2[n/2]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    int i = n / 2;\n    if (n % 2 == 0)\n        return (l[i - 1] + l[i]) / 2.0;\n    return l[i];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new Error(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    l = l2;\n    Arrays.sort(l);\n    if (n % 2 == 1)\n        return l[n / 2];\n    else\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    long[] l3 = l2.clone();\n    \n    Arrays.sort(l3);\n    \n    if (n % 2 == 1)\n        return l3[n / 2];\n    else\n        return (l3[n / 2 - 1] + l3[n / 2]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    return (median(l2) + median(l3)) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0.0f;\n    if (n == 1) return l[0];\n    \n    int i = n / 2;\n    if (n % 2 == 0)\n        return (l[i - 1] + l[i]) / 2.0f;\n    else\n        return l[i];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++)\n        if (i < n / 2)\n            l2[i++] = l[j];\n    return median(l2);\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty list\");\n    long[] l2 = l.clone();\n    Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    Arrays.sort(l2);\n    \n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n / 2)\n            l2[i++] = l[j];\n        else if (l[j] < l2[i])\n            l2[i++] = l[j];\n    }\n    if (i == n / 2)\n        return l2[i / 2];\n    else\n        return (l2[i - 1] + l2[i]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    int i = n / 2;\n    if (n % 2 == 0) return (l[i] + l[i - 1]) / 2;\n    else return l[i];\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    int j = n / 2;\n    for (; i < n; i++) {\n        if (i < j) l2[i] = l[i];\n        else l2[j--] = l[i];\n    }\n    return median(l2) + median(l2);\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    return median(l2);\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    long[] l2 = l.clone();\n    Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2;\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++)\n        if (i < n / 2)\n            l2[i++] = l[j];\n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    long[] l3 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l3[i] = l2[i];\n    \n    long[] l4 = new long[n/2];\n    for (int i = n/2; i < n; i++)\n        l4[i-n/2] = l2[i];\n    \n    float m1 = median(l3);\n    float m2 = median(l4);\n    \n    if (m1 > m2)\n        return m1;\n    else\n        return m2;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++)\n        if (i < n / 2)\n            l2[i++] = l[j];\n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty list\");\n    if (n == 1)\n        return l[0];\n    if (n % 2 == 1)\n        return l[n / 2];\n    else\n    {\n        long a = l[n / 2 - 1];\n        long b = l[n / 2];\n        return (a + b) / 2.0;\n    }\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    long[] l3 = new long[n];\n    for (int i = 0; i < n; i++)\n        l3[i] = l2[i];\n    \n    int i = 0;\n    int j = n - 1;\n    while (i < j)\n    {\n        if (l3[i] < l3[j])\n        {\n            long t = l3[i];\n            l3[i] = l3[j];\n            l3[j] = t;\n        }\n        i++;\n        j--;\n    }\n    \n    if (n % 2 == 1)\n        return l3[n / 2];\n    else\n    {\n        long m = l3[n / 2 - 1] + l3[n / 2];\n        return (m / 2);\n    }\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    int i = n / 2;\n    int j = n - i;\n    long a = l[i];\n    long b = l[j];\n    \n    if (a > b)\n    {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    if (n % 2 == 0)\n        return (a + b) / 2.0;\n    else\n        return a;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    return (median(l2) + median(l3)) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0.0f;\n    if (n == 1) return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    Arrays.sort(l2);\n    \n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0f;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    int i = n / 2;\n    int j = n - i;\n    long a = l[i];\n    long b = l[j];\n    \n    if (a > b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    if (n % 2 == 0) {\n        return (a + b) / 2;\n    }\n    else {\n        return a;\n    }\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    Arrays.sort(l2);\n    \n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    long[] l3 = l2.clone();\n    \n    Arrays.sort(l3);\n    \n    if (n % 2 == 1)\n        return l3[n / 2];\n    else\n        return (l3[n / 2 - 1] + l3[n / 2]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1) return l2[n / 2];\n    else return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    return (median(l2) + median(l3)) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    int i = 0;\n    for (int j = 0; j < n; j++)\n        if (i < n/2)\n            l2[i++] = l[j];\n    return (float)median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    return (median(l2) + median(l3)) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    if (l.length == 1)\n        return l[0];\n    \n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    \n    sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    \n    return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n / 2) break;\n        if (j < n / 2) {\n            l2[i] = l[j];\n            i++;\n        }\n    }\n    \n    long[] l3 = new long[n - i];\n    for (int j = 0; j < n - i; j++) {\n        l3[j] = l[j + i];\n    }\n    \n    return (median(l2) + median(l3)) / 2;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new Error(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n; i++)\n        if (i < n / 2)\n            l2[i] = l[i];\n        else\n            l2[n / 2 - 1] = l[i];\n    return (float)median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    if (n % 2 == 0)\n    {\n        long a = l[n / 2 - 1];\n        long b = l[n / 2];\n        return (a + b) / 2.0;\n    }\n    else\n    {\n        long a = l[n / 2];\n        long b = l[n / 2 + 1];\n        return (a + b) / 2.0;\n    }\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    \n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l2[i] < l2[j]) {\n            long t = l2[i];\n            l2[i] = l2[j];\n            l2[j] = t;\n        }\n        i++;\n        j--;\n    }\n    \n    if (n % 2 == 1) return l2[(n - 1) / 2];\n    else return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    if (n % 2 == 0)\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    else\n        return l[n / 2];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    Arrays.sort(l2);\n    \n    if (n % 2 == 0)\n        return (float) ((l2[n / 2] + l2[n / 2 - 1]) / 2);\n    else\n        return l2[n / 2];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    Arrays.sort(l2);\n    \n    if (n % 2 == 0)\n        return (float) ((l2[n / 2] + l2[n / 2 - 1]) / 2.0);\n    else\n        return l2[n / 2];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    \n    long[] l3 = new long[n / 2];\n    for (int i = n / 2; i < n; i++)\n        l3[i - n / 2] = l[i];\n    \n    return (median(l2) + median(l3)) / 2;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0.0f;\n    if (n == 1) return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    java.util.Arrays.sort(l2);\n    \n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0f;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    int i = n / 2;\n    if (n % 2 == 0) return (l[i] + l[i - 1]) / 2;\n    return l[i];\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    int i = n / 2;\n    int j = n - i;\n    if (n % 2 == 0) {\n        return (l[i] + l[j]) / 2;\n    }\n    return l[i];\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1) return l2[n / 2];\n    else return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    int i = n / 2;\n    int j = n - i;\n    long a = l[i];\n    long b = l[j];\n    \n    if (a > b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    if (n % 2 == 0) return (a + b) / 2;\n    else return a;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    int i = n / 2;\n    if (n % 2 == 0)\n        return (l[i - 1] + l[i]) / 2.0;\n    else\n        return l[i];\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    long[] l1 = new long[n / 2];\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n; i++) {\n        if (i < n / 2) {\n            l1[i] = l[i];\n        } else {\n            l2[i - n / 2] = l[i];\n        }\n    }\n    return (median(l1) + median(l2)) / 2;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    \n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l2[i] < l2[j]) {\n            long t = l2[i];\n            l2[i] = l2[j];\n            l2[j] = t;\n        }\n        i++;\n        j--;\n    }\n    \n    if (n % 2 == 0) {\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2;\n    }\n    else {\n        return l2[n / 2];\n    }\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n / 2) {\n            l2[i] = l[j];\n            i++;\n        } else if (j < n / 2) {\n            l2[i] = l[j];\n            i++;\n        }\n    }\n    \n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    \n    long[] l3 = new long[n / 2];\n    for (int i = n / 2; i < n; i++)\n        l3[i - n / 2] = l[i];\n    \n    return (median(l2) + median(l3)) / 2;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = n / 2; i < n; i++)\n        l3[i - n / 2] = l[i];\n    return (float) (median(l2) + median(l3)) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    if (n % 2 == 0)\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    else\n        return l[n / 2];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n; i++)\n        if (i < n/2)\n            l2[i] = l[i];\n        else\n            l2[n/2 - i] = l[i];\n    return (float)median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    int i = n / 2;\n    int j = n - i;\n    if (i % 2 == 0)\n        return (l[i] + l[j]) / 2.0;\n    else\n        return l[i];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n/2];\n    for (int i = n/2; i < n; i++)\n        l3[i-n/2] = l[i];\n    return (float)median(l2) + (float)median(l3);\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n / 2) {\n            l2[i] = l[j];\n            i++;\n        } else if (l[j] < l2[i]) {\n            l2[i] = l[j];\n            i++;\n        }\n    }\n    return (float)median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    int j = n / 2;\n    for (; i < n; i++)\n        if (i < j)\n            l2[i] = l[i];\n        else\n            l2[j--] = l[i];\n    return (float)median(l2);\n}",
    "{\n    if (l.length == 0)\n        throw new IllegalArgumentException(\"median of empty array\");\n    \n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    \n    java.util.Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    if (n % 2 == 0)\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    return (float) (median(l2) + median(l3)) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n / 2)\n            l2[i - 1] = l[j];\n        else if (j < n / 2) {\n            if (l[j] < l2[i])\n                l2[i] = l[j];\n            else if (l[j] > l2[i]) {\n                i++;\n                l2[i - 1] = l[j];\n            }\n        }\n    }\n    if (i == n / 2)\n        return l2[i - 1];\n    else\n        return (l2[i - 1] + l2[i]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    int i = n / 2;\n    int j = n - i;\n    long a = l[i];\n    long b = l[j];\n    \n    if (a > b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    return (a + b) / 2;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new IllegalArgumentException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    l = l2;\n    Arrays.sort(l);\n    if (n % 2 == 1)\n        return l[n / 2];\n    else\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    int i = n / 2;\n    int j = n - i;\n    long a = l[i];\n    long b = l[j];\n    \n    if (a < b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    if (n % 2 == 0) return (a + b) / 2;\n    else return a;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    l = l2;\n    Arrays.sort(l);\n    if (n % 2 == 1) return l[n / 2];\n    return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[i + n / 2];\n    long m1 = median(l2);\n    long m2 = median(l3);\n    return (m1 + m2) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2.0;\n    \n    long[] l1 = new long[n / 2];\n    long[] l2 = new long[n - n / 2];\n    \n    for (int i = 0; i < n; i++) {\n        if (i < n / 2) {\n            l1[i] = l[i];\n        } else {\n            l2[i - n / 2] = l[i];\n        }\n    }\n    \n    return (median(l1) + median(l2)) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    \n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l2[i] < l2[j]) {\n            long t = l2[i];\n            l2[i] = l2[j];\n            l2[j] = t;\n        }\n        i++;\n        j--;\n    }\n    \n    if (n % 2 == 0) return (l2[n / 2] + l2[n / 2 - 1]) / 2;\n    else return l2[n / 2];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    if (n % 2 == 0)\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    else\n        return l[n / 2];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    Arrays.sort(l2);\n    \n    if (n % 2 == 0)\n        return (float) ((l2[n / 2] + l2[n / 2 - 1]) / 2);\n    else\n        return l2[n / 2];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n; i++)\n        if (i < n / 2)\n            l2[i] = l[i];\n        else\n            l2[n / 2 - 1] = l[i];\n    return (float)median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    int i = n / 2;\n    int j = n - i;\n    if (i % 2 == 1)\n        return l[i];\n    else\n        return (l[i-1] + l[i]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    int i = 0;\n    for (int j = 0; j < n; j++)\n        if (i < n/2)\n            l2[i++] = l[j];\n    Arrays.sort(l2);\n    if (n % 2 == 0)\n        return (float) ((l2[n/2-1] + l2[n/2]) / 2);\n    else\n        return (float) l2[n/2];\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1) return l2[n / 2];\n    else return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n / 2)\n            l2[i++] = l[j];\n        else if (l[j] < l2[i])\n            l2[i++] = l[j];\n    }\n    if (i == n / 2)\n        return l2[i / 2];\n    else\n        return (l2[i - 1] + l2[i]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    int i = n / 2;\n    if (n % 2 == 0)\n        return (l[i - 1] + l[i]) / 2.0;\n    else\n        return l[i];\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new Error(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    int low = 0;\n    int high = n - 1;\n    while (low < high) {\n        int mid = (low + high) / 2;\n        if (l[mid] < l[high])\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return (low == high) ? l[low] : (l[low] + l[high]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    Arrays.sort(l2);\n    \n    if (n % 2 == 0)\n        return (float) ((l2[n / 2] + l2[n / 2 - 1]) / 2);\n    else\n        return l2[n / 2];\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    int i = n / 2;\n    if (n % 2 == 1) return l[i];\n    return (l[i - 1] + l[i]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    return (median(l2) + median(l3)) / 2;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l2[i] < l2[j]) {\n            long t = l2[i];\n            l2[i] = l2[j];\n            l2[j] = t;\n        }\n        i++;\n        j--;\n    }\n    \n    if (l2[i] < l2[j])\n        l2[i] = l2[j];\n    \n    long m = l2[i];\n    \n    if (n % 2 == 1)\n        return m;\n    \n    i = n / 2 - 1;\n    j = n / 2;\n    while (i < j) {\n        if (l2[i] < l2[j]) {\n            long t = l2[i];\n            l2[i] = l2[j];\n            l2[j] = t;\n        }\n        i++;\n        j--;\n    }\n    \n    if (l2[i] < l2[j])\n        l2[i] = l2[j];\n    \n    return (float) (l2[i] + l2[j]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    int l1 = 0, l2 = n - 1;\n    while (l1 < l2) {\n        int i = (l1 + l2) / 2;\n        if (l[i] > l[l2])\n            l1 = i + 1;\n        else\n            l2 = i;\n    }\n    return (l[l1] + l[l2]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    int i = n / 2;\n    int j = n - i;\n    if (n % 2 == 0)\n    {\n        return (l[i] + l[j]) / 2.0;\n    }\n    else\n    {\n        return l[i];\n    }\n}",
    "{\n    if (l.length == 0) return 0;\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++) l2[i] = l[i];\n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    int i = n / 2;\n    if (n % 2 == 0)\n        return (l[i - 1] + l[i]) / 2.0;\n    else\n        return l[i];\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    int i = n / 2;\n    int j = n - i;\n    long a = l[i];\n    long b = l[j];\n    \n    if (a > b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    if (n % 2 == 0) return (a + b) / 2;\n    else return a;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n - n / 2];\n    for (int i = 0; i < n - n / 2; i++)\n        l3[i] = l[i + n / 2];\n    \n    return (median(l2) + median(l3)) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2.0;\n    \n    int i = n / 2;\n    int j = n - i;\n    long a = l[i];\n    long b = l[j];\n    \n    if (a > b) {\n        long t = a;\n        a = b;\n        b = t;\n    }\n    \n    if (n % 2 == 0) {\n        return (a + b) / 2.0;\n    } else {\n        return a;\n    }\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    int low = 0;\n    int high = l.length - 1;\n    while (low < high) {\n        int mid = (low + high) / 2;\n        if (l[mid] < l[high]) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return l[low];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new IllegalArgumentException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    \n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    \n    return (median(l2) + median(l3)) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    l2 = sort(l2);\n    \n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    \n    sort(l2);\n    \n    if (n % 2 == 0)\n        return (float) ((l2[n / 2] + l2[n / 2 - 1]) / 2);\n    else\n        return l2[n / 2];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    \n    int i = n / 2;\n    if (n % 2 == 0)\n        return (l[i-1] + l[i]) / 2.0;\n    else\n        return l[i];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n / 2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n / 2)\n            l2[i++] = l[j];\n        else if (l[j] < l2[i])\n            l2[i++] = l[j];\n    }\n    if (i == n / 2)\n        return l2[i / 2];\n    else\n        return (l2[i - 1] + l2[i]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0.0f;\n    if (n == 1) return l[0];\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    \n    sort(l2);\n    \n    if (n % 2 == 1) return l2[n / 2];\n    else return (l2[n / 2] + l2[n / 2 - 1]) / 2.0f;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 0)\n        return (float) ((l2[n / 2] + l2[n / 2 - 1]) / 2.0);\n    else\n        return l2[n / 2];\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++)\n        l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n    else\n        return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    int i = 0;\n    for (int j = 0; j < n; j++)\n        if (i < n/2)\n            l2[i++] = l[j];\n    Arrays.sort(l2);\n    if (n % 2 == 0)\n        return (float)((l2[n/2-1] + l2[n/2]) / 2.0);\n    else\n        return l2[n/2];\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    java.util.Arrays.sort(l2);\n    if (n % 2 == 0) return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n    else return l2[n / 2];\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    \n    long[] l3 = new long[n / 2];\n    for (int i = n / 2; i < n; i++)\n        l3[i - n / 2] = l[i];\n    \n    return (median(l2) + median(l3)) / 2;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n; i++)\n        if (i < n/2)\n            l2[i] = l[i];\n        else\n            l2[n/2 - i] = l[i];\n    return (float)median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    long[] l2 = new long[n/2];\n    int i = 0;\n    for (int j = 0; j < n; j++) {\n        if (i == n/2) {\n            l2[i] = l[j];\n            i++;\n        } else if (l[j] < l2[i]) {\n            l2[i] = l[j];\n            i++;\n        }\n    }\n    return (float)median(l2);\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (l.length == 1)\n        return l[0];\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l2[i] = l[i];\n    l2 = l2.sort();\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    \n    long[] l2 = l.clone();\n    Arrays.sort(l2);\n    \n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l3[i] = l[n / 2 + i];\n    return (median(l2) + median(l3)) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n/2; i++)\n        l2[i] = l[i];\n    return median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of 0 elements\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n; i++)\n        if (i < n/2)\n            l2[i] = l[i];\n        else\n            l2[n/2 - i] = l[i];\n    return (float)median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty list\");\n    if (n == 1)\n        return l[0];\n    \n    long[] a = new long[n];\n    for (int i = 0; i < n; i++)\n        a[i] = l[i];\n    \n    Arrays.sort(a);\n    \n    if (n % 2 == 1)\n        return a[n / 2];\n    else\n        return (a[n / 2] + a[n / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of empty array\");\n    if (n == 1)\n        return l[0];\n    long[] l2 = new long[n/2];\n    for (int i = 0; i < n; i++)\n        if (i < n/2)\n            l2[i] = l[i];\n        else\n            l2[n/2 - i] = l[i];\n    return (float)median(l2);\n}",
    "{\n    int n = l.length;\n    if (n == 0) return 0.0;\n    if (n == 1) return l[0];\n    if (n == 2) return (l[0] + l[1]) / 2.0;\n    \n    long[] l2 = new long[n];\n    for (int i = 0; i < n; i++) l2[i] = l[i];\n    \n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l2[i] < l2[j]) {\n            long t = l2[i];\n            l2[i] = l2[j];\n            l2[j] = t;\n        }\n        i++;\n        j--;\n    }\n    \n    if (n % 2 == 1) return l2[(n - 1) / 2];\n    else return (l2[n / 2] + l2[n / 2 - 1]) / 2.0;\n}",
    "{\n    int n = l.length;\n    if (n == 0)\n        throw new RuntimeException(\"median of an empty array\");\n    if (n == 1)\n        return l[0];\n    if (n == 2)\n        return (l[0] + l[1]) / 2.0;\n    \n    long[] l2 = new long[n / 2];\n    for (int i = 0; i < n / 2; i++)\n        l2[i] = l[i];\n    long[] l3 = new long[n - n / 2];\n    for (int i = 0; i < n - n / 2; i++)\n        l3[i] = l[i + n / 2];\n    \n    return (median(l2) + median(l3)) / 2.0;\n}",
    "{\n    if (l.length == 0) return 0;\n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 1) return l2[l2.length / 2];\n    return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}",
    "{\n    if (l.length == 0)\n        throw new RuntimeException(\"median of empty array\");\n    long[] l2 = l.clone();\n    java.util.Arrays.sort(l2);\n    if (l2.length % 2 == 1)\n        return l2[l2.length / 2];\n    else\n        return (l2[l2.length / 2] + l2[l2.length / 2 - 1]) / 2.0;\n}"
  ],
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ]
}