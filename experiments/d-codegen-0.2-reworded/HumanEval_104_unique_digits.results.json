{
  "name": "HumanEval_104_unique_digits",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n",
  "tests": "unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 || x[j] % 2 == 0)\n            {\n                result[i] = x[i];\n                result[j] = x[j];\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpymtf52_u.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x428595]\n??:? void tmpymtf52_u.__unittest_L38_C1() [0x4280b2]\n??:? void tmpymtf52_u.__modtest() [0x428318]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c64f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43076d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4b9]\n??:? runModuleUnitTests [0x42c425]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a58]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        res[i++] = l;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpe3mg_1fe.d(20): Error: semicolon expected, not `:`\n/tmp/tmpe3mg_1fe.d(20): Error: expression expected, not `:`\n/tmp/tmpe3mg_1fe.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe3mg_1fe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    long[] temp = new long[x.length];\n    int i = 0;\n    int j = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            temp[j] = x[i];\n            i++;\n            j++;\n        }\n    }\n    for(i = 0; i < temp.length; i++)\n    {\n        result[i] = temp[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7pp84yon.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x4284fd]\n??:? void tmp7pp84yon.__unittest_L42_C1() [0x428016]\n??:? void tmp7pp84yon.__modtest() [0x42827c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b44a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430661]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b421]\n??:? runModuleUnitTests [0x42c38d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for (long l : x)\n    {\n        if (l % 2 == 0)\n            continue;\n        result[i++] = l;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp64q0805f.d(20): Error: semicolon expected, not `:`\n/tmp/tmp64q0805f.d(20): Error: expression expected, not `:`\n/tmp/tmp64q0805f.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp64q0805f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n        y[i] = x[i];\n    \n    int j = 0;\n    for(int i = 0; i < y.length; i++)\n    {\n        while(j < y.length && y[j] % 2 == 0)\n            j++;\n        if(j < y.length)\n            y[i] = y[j];\n        j++;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmptpr_w5.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4284ed]\n??:? void tmpmptpr_w5.__unittest_L33_C1() [0x428006]\n??:? void tmpmptpr_w5.__modtest() [0x42826c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b43a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b74]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430651]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b411]\n??:? runModuleUnitTests [0x42c37d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] ans = new long[x.length];\n    int i = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            ans[i] = x[i];\n            i++;\n        }\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu0bmpqqu.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpu0bmpqqu.__unittest_L35_C1() [0x427f92]\n??:? void tmpu0bmpqqu.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        y[i] = x[i];\n    }\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        for(int j = i + 1; j < y.length; j++)\n        {\n            if(y[i] % 2 == 0 && y[j] % 2 == 0)\n            {\n                y[j] = y[y.length - 1];\n                y.length--;\n                j--;\n            }\n        }\n    }\n    \n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppkqd6egv.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmppkqd6egv.__unittest_L39_C1() [0x42807e]\n??:? void tmppkqd6egv.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d6ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c582]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431ab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431f68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431a45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c559]\n??:? runModuleUnitTests [0x42d4c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[i] = result[j] = 0;\n            }\n        }\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        if(result[i] != 0)\n        {\n            result[i] = result[i] * 10 + x[i] % 10;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphb7d4jaw.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x42862d]\n??:? void tmphb7d4jaw.__unittest_L45_C1() [0x428146]\n??:? void tmphb7d4jaw.__modtest() [0x4283ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b57a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430805]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cb4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430791]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b551]\n??:? runModuleUnitTests [0x42c4bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428af0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] ans = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        ans[i++] = l;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpj9q6yrh6.d(20): Error: semicolon expected, not `:`\n/tmp/tmpj9q6yrh6.d(20): Error: expression expected, not `:`\n/tmp/tmpj9q6yrh6.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj9q6yrh6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    for (int i = 0; i < x.length; i++) {\n        res[i] = x[i];\n    }\n    \n    for (int i = 0; i < x.length; i++) {\n        if (x[i] % 2 == 0) {\n            res[i] = -1;\n        }\n    }\n    \n    for (int i = 0; i < x.length; i++) {\n        if (res[i] == -1) {\n            continue;\n        }\n        \n        for (int j = i + 1; j < x.length; j++) {\n            if (x[j] == res[i]) {\n                res[j] = -1;\n            }\n        }\n    }\n    \n    for (int i = 0; i < x.length; i++) {\n        if (res[i] == -1) {\n            continue;\n        }\n        \n        for (int j = i + 1; j < x.length; j++) {\n            if (x[j] == res[i]) {\n                res[j] = -1;\n            }\n        }\n    }\n    \n    for (int i = 0; i < x.length; i++) {\n        if (res[i] == -1) {\n            continue;\n        }\n        \n        for (int j = i + 1; j < x.length; j++) {\n            if (x[j] == res[i]) {\n                res[j] = -1;\n            }\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp471uw5ll.d(71): unittest failure\n----------------\n??:? _d_unittestp [0x428795]\n??:? void tmp471uw5ll.__unittest_L67_C1() [0x4282ae]\n??:? void tmp471uw5ll.__modtest() [0x428514]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c84f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43096d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6b9]\n??:? runModuleUnitTests [0x42c625]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c58]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for (long l : x)\n    {\n        if (l % 2 == 0)\n            continue;\n        result[i++] = l;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp64q0805f.d(20): Error: semicolon expected, not `:`\n/tmp/tmp64q0805f.d(20): Error: expression expected, not `:`\n/tmp/tmp64q0805f.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp64q0805f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[i] = result[i] * 10 + result[j];\n                result[j] = 0;\n            }\n        }\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        if(result[i] != 0)\n        {\n            result[i] = result[i] * 10 + result[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkzptokcv.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpkzptokcv.__unittest_L46_C1() [0x428176]\n??:? void tmpkzptokcv.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    long[] z = new long[x.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < x.length)\n    {\n        if (x[i] % 2 == 0)\n        {\n            i++;\n            continue;\n        }\n        while (j < x.length && x[j] < x[i])\n        {\n            j++;\n        }\n        if (j < x.length && x[j] == x[i])\n        {\n            j++;\n            i++;\n            continue;\n        }\n        while (k < x.length && x[k] > x[i])\n        {\n            k++;\n        }\n        if (k < x.length && x[k] == x[i])\n        {\n            k++;\n            i++;\n            continue;\n        }\n        y[k] = x[i];\n        z[k] = x[i];\n        k++;\n        i++;\n    }\n    return z;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptu5hxvh2.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmptu5hxvh2.__unittest_L58_C1() [0x42816a]\n??:? void tmptu5hxvh2.__modtest() [0x4283d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c707]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b59a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430825]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b571]\n??:? runModuleUnitTests [0x42c4dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        res[i++] = l;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp55mpc19c.d(20): Error: semicolon expected, not `:`\n/tmp/tmp55mpc19c.d(20): Error: expression expected, not `:`\n/tmp/tmp55mpc19c.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp55mpc19c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        result[i++] = l;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp6465x80a.d(20): Error: semicolon expected, not `:`\n/tmp/tmp6465x80a.d(20): Error: expression expected, not `:`\n/tmp/tmp6465x80a.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6465x80a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        res[i++] = l;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpe3mg_1fe.d(20): Error: semicolon expected, not `:`\n/tmp/tmpe3mg_1fe.d(20): Error: expression expected, not `:`\n/tmp/tmpe3mg_1fe.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe3mg_1fe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = x[i];\n            i++;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpre9iypjz.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpre9iypjz.__unittest_L35_C1() [0x427f92]\n??:? void tmpre9iypjz.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmppm38qufo.d(20): Error: semicolon expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: expression expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppm38qufo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[i] = result[i] * 10 + result[j];\n                result[j] = 0;\n            }\n        }\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        if(result[i] != 0)\n        {\n            result[i] = result[i] * 10 + result[i];\n        }\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        if(result[i] != 0)\n        {\n            result[i] = result[i] / 10;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa0ryw4vw.d(58): unittest failure\n----------------\n??:? _d_unittestp [0x428705]\n??:? void tmpa0ryw4vw.__unittest_L54_C1() [0x42821e]\n??:? void tmpa0ryw4vw.__modtest() [0x428484]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b652]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430869]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b629]\n??:? runModuleUnitTests [0x42c595]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bc8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    long[] z = new long[x.length];\n    long[] t = new long[x.length];\n    long[] u = new long[x.length];\n    long[] v = new long[x.length];\n    long[] w = new long[x.length];\n    long[] x1 = new long[x.length];\n    long[] x2 = new long[x.length];\n    long[] x3 = new long[x.length];\n    long[] x4 = new long[x.length];\n    long[] x5 = new long[x.length];\n    long[] x6 = new long[x.length];\n    long[] x7 = new long[x.length];\n    long[] x8 = new long[x.length];\n    long[] x9 = new long[x.length];\n    long[] x10 = new long[x.length];\n    long[] x11 = new long[x.length];\n    long[] x12 = new long[x.length];\n    long[] x13 = new long[x.length];\n    long[] x14 = new long[x.length];\n    long[] x15 = new long[x.length];\n    long[] x16 = new long[x.length];\n    long[] x17 = new long[x.length];\n    long[] x18 = new long[x.length];\n    long[] x19 = new long[x.length];\n    long[] x20 = new long[x.length];\n    long[] x21 = new long[x.length];\n    long[] x22 = new long[x.length];\n    long[] x23 = new long[x.length];\n    long[] x24 = new long[x.length];\n    long[] x25 = new long[x.length];\n    long[] x26 = new long[x.length];\n    long[] x27 = new long[x.length];\n    long[] x28 = new long[x.length];\n    long[] x29 = new long[x.length];\n    long[] x30 = new long[x.length];\n    long[] x31 = new long[x.length\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp_4p_3gmq.d(55): Error: found `unittest` when expecting `]`\n/tmp/tmp_4p_3gmq.d(56): Error: semicolon expected, not `{`\n/tmp/tmp_4p_3gmq.d(64): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_4p_3gmq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[j] = x[j] - x[i];\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppfi8d7a5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmppfi8d7a5.__unittest_L37_C1() [0x42807e]\n??:? void tmppfi8d7a5.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c61f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43073d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b489]\n??:? runModuleUnitTests [0x42c3f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for (long l : x) {\n        if (l % 2 == 0) continue;\n        result[i++] = l;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp44lu1qjx.d(20): Error: semicolon expected, not `:`\n/tmp/tmp44lu1qjx.d(20): Error: expression expected, not `:`\n/tmp/tmp44lu1qjx.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp44lu1qjx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] ans = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        ans[i++] = l;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp6wqlurnd.d(20): Error: semicolon expected, not `:`\n/tmp/tmp6wqlurnd.d(20): Error: expression expected, not `:`\n/tmp/tmp6wqlurnd.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6wqlurnd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmppm38qufo.d(20): Error: semicolon expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: expression expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppm38qufo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        result[i++] = l;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp6465x80a.d(20): Error: semicolon expected, not `:`\n/tmp/tmp6465x80a.d(20): Error: expression expected, not `:`\n/tmp/tmp6465x80a.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6465x80a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmppm38qufo.d(20): Error: semicolon expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: expression expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppm38qufo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    while(i < x.length)\n    {\n        while(i < x.length && x[i] % 2 == 0)\n        {\n            i++;\n        }\n        y[i] = x[i];\n        i++;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt7d8lsv7.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmpt7d8lsv7.__unittest_L31_C1() [0x427f96]\n??:? void tmpt7d8lsv7.__modtest() [0x4281fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c537]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430655]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a1]\n??:? runModuleUnitTests [0x42c30d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n        res[i] = x[i];\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 || x[j] % 2 == 0)\n                continue;\n            if(x[i] == x[j])\n            {\n                res[i] = -1;\n                res[j] = -1;\n                break;\n            }\n        }\n    }\n    \n    for(int i = 0; i < x.length; i++)\n        if(res[i] != -1)\n            res[i] = Math.abs(res[i]);\n    \n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp14_zcx05.d(39): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp14_zcx05.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    int j = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n            continue;\n        }\n        y[j] = x[i];\n        j++;\n        i++;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi3_ipvb9.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpi3_ipvb9.__unittest_L35_C1() [0x427f8e]\n??:? void tmpi3_ipvb9.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            res[i] = x[i];\n            i++;\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0kk0624h.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmp0kk0624h.__unittest_L35_C1() [0x427f92]\n??:? void tmp0kk0624h.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for (long l : x) {\n        if (l % 2 == 0) continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpcometbc4.d(20): Error: semicolon expected, not `:`\n/tmp/tmpcometbc4.d(20): Error: expression expected, not `:`\n/tmp/tmpcometbc4.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcometbc4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        y[i] = x[i];\n    }\n    \n    int j = 0;\n    for(int i = 0; i < y.length; i++)\n    {\n        if(y[i] % 2 == 0)\n        {\n            continue;\n        }\n        y[j] = y[i];\n        j++;\n    }\n    \n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwtthw224.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmpwtthw224.__unittest_L37_C1() [0x427fee]\n??:? void tmpwtthw224.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c58f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b422]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430639]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3f9]\n??:? runModuleUnitTests [0x42c365]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428998]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        res[i++] = l;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp55mpc19c.d(20): Error: semicolon expected, not `:`\n/tmp/tmp55mpc19c.d(20): Error: expression expected, not `:`\n/tmp/tmp55mpc19c.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp55mpc19c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmppm38qufo.d(20): Error: semicolon expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: expression expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppm38qufo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    while(i < x.length)\n    {\n        while(i < x.length && x[i] % 2 == 0)\n            i++;\n        if(i < x.length)\n            y[i] = x[i];\n        i++;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6gdg66d9.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp6gdg66d9.__unittest_L30_C1() [0x427fa2]\n??:? void tmp6gdg66d9.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[j] = result[i];\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptyzx34ba.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42852d]\n??:? void tmptyzx34ba.__unittest_L37_C1() [0x428046]\n??:? void tmptyzx34ba.__modtest() [0x4282ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430705]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430691]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    long[] z = new long[x.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            y[j] = x[i];\n            j++;\n            i++;\n        }\n    }\n    for(i = 0; i < y.length; i++)\n    {\n        for(j = 0; j < y.length; j++)\n        {\n            if(y[i] == y[j])\n            {\n                z[k] = y[i];\n                k++;\n            }\n        }\n    }\n    return z;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt0y3vvkf.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpt0y3vvkf.__unittest_L50_C1() [0x428082]\n??:? void tmpt0y3vvkf.__modtest() [0x4282e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c61f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43073d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b489]\n??:? runModuleUnitTests [0x42c3f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        result[i++] = l;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp6465x80a.d(20): Error: semicolon expected, not `:`\n/tmp/tmp6465x80a.d(20): Error: expression expected, not `:`\n/tmp/tmp6465x80a.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6465x80a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for (long l : x) {\n        if (l % 2 == 0) continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpcometbc4.d(20): Error: semicolon expected, not `:`\n/tmp/tmpcometbc4.d(20): Error: expression expected, not `:`\n/tmp/tmpcometbc4.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcometbc4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for (long l : x) {\n        if (l % 2 == 0) {\n            continue;\n        }\n        y[i++] = l;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpdypvykpi.d(20): Error: semicolon expected, not `:`\n/tmp/tmpdypvykpi.d(20): Error: expression expected, not `:`\n/tmp/tmpdypvykpi.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdypvykpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for (long n : x)\n    {\n        if (n % 2 == 0)\n            continue;\n        y[i++] = n;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpfsut1mcm.d(20): Error: semicolon expected, not `:`\n/tmp/tmpfsut1mcm.d(20): Error: expression expected, not `:`\n/tmp/tmpfsut1mcm.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfsut1mcm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        result[i++] = l;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp4vhueems.d(20): Error: semicolon expected, not `:`\n/tmp/tmp4vhueems.d(20): Error: expression expected, not `:`\n/tmp/tmp4vhueems.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4vhueems.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        y[i] = x[i];\n    }\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        for(int j = i + 1; j < y.length; j++)\n        {\n            if(y[i] % 2 == 0 && y[j] % 2 == 0)\n            {\n                y[j] = y[j] + y[i];\n                y[i] = 0;\n            }\n        }\n    }\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        if(y[i] != 0)\n        {\n            y[i] = y[i] - y[i] / 2;\n        }\n    }\n    \n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1pfyrt2d.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmp1pfyrt2d.__unittest_L46_C1() [0x428172]\n??:? void tmp1pfyrt2d.__modtest() [0x4283d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c70f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43082d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cdc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c4e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    while (i < x.length)\n    {\n        if (x[i] % 2 == 0)\n        {\n            i++;\n            continue;\n        }\n        res[i] = x[i];\n        i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9vdy139t.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmp9vdy139t.__unittest_L32_C1() [0x427f92]\n??:? void tmp9vdy139t.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for (int i = 0; i < x.length; i++)\n        y[i] = x[i];\n    \n    for (int i = 0; i < y.length; i++)\n    {\n        for (int j = i + 1; j < y.length; j++)\n        {\n            if (y[i] % 2 == 0 || y[j] % 2 == 0)\n                y[j] = Math.max(y[j], y[i]);\n        }\n    }\n    \n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpkkaa__7e.d(27): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkkaa__7e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 || x[j] % 2 == 0)\n            {\n                result[i] = x[i];\n                result[j] = x[j];\n            }\n        }\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiuwn2536.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x428595]\n??:? void tmpiuwn2536.__unittest_L39_C1() [0x4280b2]\n??:? void tmpiuwn2536.__modtest() [0x428318]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c64f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43076d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4b9]\n??:? runModuleUnitTests [0x42c425]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a58]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    for(long n : x)\n    {\n        if(n % 2 == 0)\n            continue;\n        res[i++] = n;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpa7tg7yew.d(20): Error: semicolon expected, not `:`\n/tmp/tmpa7tg7yew.d(20): Error: expression expected, not `:`\n/tmp/tmpa7tg7yew.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7tg7yew.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmppm38qufo.d(20): Error: semicolon expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: expression expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppm38qufo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    long[] temp = new long[x.length];\n    int i = 0;\n    int j = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n            continue;\n        }\n        temp[j] = x[i];\n        i++;\n        j++;\n    }\n    for(i = 0; i < temp.length; i++)\n    {\n        for(j = 0; j < res.length; j++)\n        {\n            if(temp[i] == res[j])\n            {\n                break;\n            }\n        }\n        if(j == res.length)\n        {\n            res[res.length] = temp[i];\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpy6or2znd.d(44): Range violation\n----------------\n??:? _d_arrayboundsp [0x42861e]\n??:? long[] tmpy6or2znd.unique_digits(long[]) [0x427f85]\n??:? void tmpy6or2znd.__unittest_L50_C1() [0x428023]\n??:? void tmpy6or2znd.__modtest() [0x4282ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c627]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430745]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bf4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b491]\n??:? runModuleUnitTests [0x42c3fd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        result[i++] = l;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp6465x80a.d(20): Error: semicolon expected, not `:`\n/tmp/tmp6465x80a.d(20): Error: expression expected, not `:`\n/tmp/tmp6465x80a.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6465x80a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    long[] temp = new long[x.length];\n    int i = 0;\n    int j = 0;\n    for(i = 0; i < x.length; i++)\n    {\n        if(x[i] % 2 == 0)\n        {\n            continue;\n        }\n        temp[j] = x[i];\n        j++;\n    }\n    for(i = 0; i < temp.length; i++)\n    {\n        res[i] = temp[i];\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvg_5ckxt.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x4284f5]\n??:? void tmpvg_5ckxt.__unittest_L38_C1() [0x428012]\n??:? void tmpvg_5ckxt.__modtest() [0x428278]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b442]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430659]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b419]\n??:? runModuleUnitTests [0x42c385]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    long[] temp = new long[x.length];\n    long[] temp2 = new long[x.length];\n    long[] temp3 = new long[x.length];\n    long[] temp4 = new long[x.length];\n    long[] temp5 = new long[x.length];\n    long[] temp6 = new long[x.length];\n    long[] temp7 = new long[x.length];\n    long[] temp8 = new long[x.length];\n    long[] temp9 = new long[x.length];\n    long[] temp10 = new long[x.length];\n    long[] temp11 = new long[x.length];\n    long[] temp12 = new long[x.length];\n    long[] temp13 = new long[x.length];\n    long[] temp14 = new long[x.length];\n    long[] temp15 = new long[x.length];\n    long[] temp16 = new long[x.length];\n    long[] temp17 = new long[x.length];\n    long[] temp18 = new long[x.length];\n    long[] temp19 = new long[x.length];\n    long[] temp20 = new long[x.length];\n    long[] temp21 = new long[x.length];\n    long[] temp22 = new long[x.length];\n    long[] temp23 = new long[x.length];\n    long[] temp24 = new long[x.length];\n    long[] temp25 = new long[x.length];\n    long[] temp26 = new long[x.length];\n    long[] temp27 = new long[x.length];\n    long[] temp28 = new long[x.length];\n    long[] temp29 = new long[x.length];\n    long[] temp30 = new long[x.length];\n    long[] temp31 = new long[x.length];\n    long[] temp32 = new long[x.length];\n    long[] temp33 = new long[x.length];\n    long[] temp34 = new long[x.length];\n    long[] temp35 = new long[x.length];\n    long[] temp36 = new long\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmprtpqsntv.d(55): Error: semicolon expected, not `unittest`\n/tmp/tmprtpqsntv.d(55): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprtpqsntv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] ans = new long[x.length];\n    int i = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n            continue;\n        }\n        ans[i] = x[i];\n        i++;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzzlu318_.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpzzlu318_.__unittest_L32_C1() [0x427f92]\n??:? void tmpzzlu318_.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x4288bf]\n??:? _d_run_main [0x42882a]\n??:? main [0x42820b]\n??:? __libc_start_main [0xb95d1554]\n1/1 unittests FAILED\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] ans = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        if(x[i] % 2 == 0)\n            continue;\n        ans[i] = x[i];\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2zrpo7hd.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmp2zrpo7hd.__unittest_L28_C1() [0x427f8e]\n??:? void tmp2zrpo7hd.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long n : x)\n    {\n        if(n % 2 == 0)\n            continue;\n        y[i++] = n;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpy0gz7bb7.d(20): Error: semicolon expected, not `:`\n/tmp/tmpy0gz7bb7.d(20): Error: expression expected, not `:`\n/tmp/tmpy0gz7bb7.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy0gz7bb7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        result[i++] = l;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp4vhueems.d(20): Error: semicolon expected, not `:`\n/tmp/tmp4vhueems.d(20): Error: expression expected, not `:`\n/tmp/tmp4vhueems.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4vhueems.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    while (i < x.length) {\n        if (x[i] % 2 == 0) {\n            i++;\n        } else {\n            y[i] = x[i];\n            i++;\n        }\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7452kl9y.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmp7452kl9y.__unittest_L30_C1() [0x427f92]\n??:? void tmp7452kl9y.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] ans = new long[x.length];\n    long[] temp = new long[x.length];\n    int i = 0;\n    for(i = 0; i < x.length; i++)\n    {\n        temp[i] = x[i];\n    }\n    for(i = 0; i < x.length; i++)\n    {\n        if(temp[i] % 2 == 0)\n        {\n            continue;\n        }\n        else\n        {\n            ans[i] = temp[i];\n        }\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp32e56gnk.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x4284fd]\n??:? void tmp32e56gnk.__unittest_L39_C1() [0x428016]\n??:? void tmp32e56gnk.__modtest() [0x42827c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b44a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430661]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b421]\n??:? runModuleUnitTests [0x42c38d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        y[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(y[i] % 2 == 0 && y[j] % 2 == 0)\n            {\n                y[j] = y[j] - y[i];\n            }\n        }\n    }\n    \n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmfhubl__.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmpmfhubl__.__unittest_L37_C1() [0x42807a]\n??:? void tmpmfhubl__.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c617]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430735]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430be4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b481]\n??:? runModuleUnitTests [0x42c3ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[i] = result[j] = 0;\n            }\n        }\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        if(result[i] != 0)\n        {\n            for(int j = i + 1; j < x.length; j++)\n            {\n                if(result[j] != 0)\n                {\n                    result[i] = result[j] = 0;\n                }\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsq8rjle_.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x428615]\n??:? void tmpsq8rjle_.__unittest_L51_C1() [0x42812e]\n??:? void tmpsq8rjle_.__modtest() [0x428394]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b562]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c9c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430779]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b539]\n??:? runModuleUnitTests [0x42c4a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] ans = new long[x.length];\n    int i = 0;\n    for (long l : x)\n    {\n        if (l % 2 == 0) continue;\n        ans[i++] = l;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpjtdnxzxx.d(20): Error: semicolon expected, not `:`\n/tmp/tmpjtdnxzxx.d(20): Error: expression expected, not `:`\n/tmp/tmpjtdnxzxx.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjtdnxzxx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        res[i++] = l;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpe3mg_1fe.d(20): Error: semicolon expected, not `:`\n/tmp/tmpe3mg_1fe.d(20): Error: expression expected, not `:`\n/tmp/tmpe3mg_1fe.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe3mg_1fe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        if(x[i] % 2 == 0)\n            continue;\n        res[i] = x[i];\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprbmvo7k1.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmprbmvo7k1.__unittest_L28_C1() [0x427f8e]\n??:? void tmprbmvo7k1.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[i] = result[i] * 10 + result[j];\n                result[j] = 0;\n            }\n        }\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        if(result[i] != 0)\n        {\n            result[i] = result[i] * 10 + result[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkzptokcv.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpkzptokcv.__unittest_L46_C1() [0x428176]\n??:? void tmpkzptokcv.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        y[i] = x[i];\n    }\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        for(int j = i + 1; j < y.length; j++)\n        {\n            if(y[i] % 2 == 0 && y[j] % 2 == 0)\n            {\n                y[j] = y[y.length - 1];\n                y[y.length - 1] = y[i];\n                i--;\n                break;\n            }\n        }\n    }\n    \n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu3us3gsk.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpu3us3gsk.__unittest_L40_C1() [0x428096]\n??:? void tmpu3us3gsk.__modtest() [0x4282fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c637]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430755]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4a1]\n??:? runModuleUnitTests [0x42c40d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    int j = 0;\n    while (i < x.length) {\n        if (x[i] % 2 == 0) {\n            i++;\n        } else {\n            y[j++] = x[i];\n            i++;\n        }\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkhlld4it.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpkhlld4it.__unittest_L32_C1() [0x427f8e]\n??:? void tmpkhlld4it.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        res[i++] = l;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpe3mg_1fe.d(20): Error: semicolon expected, not `:`\n/tmp/tmpe3mg_1fe.d(20): Error: expression expected, not `:`\n/tmp/tmpe3mg_1fe.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe3mg_1fe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n        y[i] = x[i];\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        for(int j = i + 1; j < y.length; j++)\n        {\n            if(y[i] % 2 == 0 && y[j] % 2 == 0)\n                y[j] = y[j] - y[i];\n        }\n    }\n    \n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpol8353ge.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmpol8353ge.__unittest_L33_C1() [0x42807a]\n??:? void tmpol8353ge.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c617]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430735]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430be4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b481]\n??:? runModuleUnitTests [0x42c3ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmppm38qufo.d(20): Error: semicolon expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: expression expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppm38qufo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    for (long l : x)\n    {\n        if (l % 2 == 0)\n            continue;\n        res[i++] = l;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpmga9igqm.d(20): Error: semicolon expected, not `:`\n/tmp/tmpmga9igqm.d(20): Error: expression expected, not `:`\n/tmp/tmpmga9igqm.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmga9igqm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    while (i < x.length) {\n        if (x[i] % 2 == 0) {\n            i++;\n            continue;\n        }\n        result[i] = x[i];\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpadjkm_oc.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpadjkm_oc.__unittest_L30_C1() [0x427f92]\n??:? void tmpadjkm_oc.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for (long l : x) {\n        if (l % 2 == 0) continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpcometbc4.d(20): Error: semicolon expected, not `:`\n/tmp/tmpcometbc4.d(20): Error: expression expected, not `:`\n/tmp/tmpcometbc4.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcometbc4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        y[i] = x[i];\n    }\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        for(int j = i + 1; j < y.length; j++)\n        {\n            if(y[i] % 2 == 0 && y[j] % 2 == 0)\n            {\n                y[j] = y[y.length - 1];\n                y[y.length - 1] = y[i];\n                i--;\n                break;\n            }\n        }\n    }\n    \n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu3us3gsk.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmpu3us3gsk.__unittest_L40_C1() [0x428096]\n??:? void tmpu3us3gsk.__modtest() [0x4282fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c637]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430755]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4a1]\n??:? runModuleUnitTests [0x42c40d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    int j = 0;\n    while (i < x.length)\n    {\n        while (i < x.length && x[i] % 2 == 0)\n        {\n            i++;\n        }\n        if (i < x.length)\n        {\n            result[j] = x[i];\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj22z5n6h.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpj22z5n6h.__unittest_L36_C1() [0x427f9e]\n??:? void tmpj22z5n6h.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n            continue;\n        }\n        y[i] = x[i];\n        i++;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgmpw7rgl.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpgmpw7rgl.__unittest_L33_C1() [0x427f92]\n??:? void tmpgmpw7rgl.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] ans = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        ans[i++] = l;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp6wqlurnd.d(20): Error: semicolon expected, not `:`\n/tmp/tmp6wqlurnd.d(20): Error: expression expected, not `:`\n/tmp/tmp6wqlurnd.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6wqlurnd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    while (i < x.length) {\n        if (x[i] % 2 == 0) {\n            i++;\n        } else {\n            y[i] = x[i];\n            i++;\n        }\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwd5u8ao7.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpwd5u8ao7.__unittest_L31_C1() [0x427f92]\n??:? void tmpwd5u8ao7.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            y[i] = x[i];\n            i++;\n        }\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi1m1absd.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpi1m1absd.__unittest_L35_C1() [0x427f92]\n??:? void tmpi1m1absd.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for (int i = 0; i < x.length; i++) {\n        y[i] = x[i];\n    }\n    \n    int j = 0;\n    for (int i = 0; i < y.length; i++) {\n        if (y[i] % 2 == 0) {\n            y[j] = y[i];\n            j++;\n        }\n    }\n    \n    for (int i = 0; i < y.length; i++) {\n        y[i] = y[i] - y[i] % 2;\n    }\n    \n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt3b9alpw.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42859d]\n??:? void tmpt3b9alpw.__unittest_L37_C1() [0x4280b6]\n??:? void tmpt3b9alpw.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c657]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430775]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430701]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4c1]\n??:? runModuleUnitTests [0x42c42d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a60]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    while(i < x.length)\n    {\n        while(i < x.length && x[i] % 2 == 0)\n        {\n            i++;\n        }\n        y[i] = x[i];\n        i++;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt7d8lsv7.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmpt7d8lsv7.__unittest_L31_C1() [0x427f96]\n??:? void tmpt7d8lsv7.__modtest() [0x4281fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c537]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430655]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a1]\n??:? runModuleUnitTests [0x42c30d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = x[i];\n            i++;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpre9iypjz.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpre9iypjz.__unittest_L35_C1() [0x427f92]\n??:? void tmpre9iypjz.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] ans = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        ans[i++] = l;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpj9q6yrh6.d(20): Error: semicolon expected, not `:`\n/tmp/tmpj9q6yrh6.d(20): Error: expression expected, not `:`\n/tmp/tmpj9q6yrh6.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj9q6yrh6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for (long l : x)\n    {\n        if (l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpd8xp40fv.d(20): Error: semicolon expected, not `:`\n/tmp/tmpd8xp40fv.d(20): Error: expression expected, not `:`\n/tmp/tmpd8xp40fv.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd8xp40fv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[j] = x[i];\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_lv9burb.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x428535]\n??:? void tmp_lv9burb.__unittest_L37_C1() [0x42804e]\n??:? void tmp_lv9burb.__modtest() [0x4282b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b482]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43070d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bbc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430699]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b459]\n??:? runModuleUnitTests [0x42c3c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        res[i++] = l;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpe3mg_1fe.d(20): Error: semicolon expected, not `:`\n/tmp/tmpe3mg_1fe.d(20): Error: expression expected, not `:`\n/tmp/tmpe3mg_1fe.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe3mg_1fe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 || x[j] % 2 == 0)\n            {\n                result[i] = result[j] = 0;\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgwtub9r9.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42852d]\n??:? void tmpgwtub9r9.__unittest_L37_C1() [0x42804a]\n??:? void tmpgwtub9r9.__modtest() [0x4282b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430705]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430691]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            y[i] = x[i];\n            i++;\n        }\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi1m1absd.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpi1m1absd.__unittest_L35_C1() [0x427f92]\n??:? void tmpi1m1absd.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[i] = result[j] = 0;\n            }\n        }\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        if(result[i] != 0)\n        {\n            for(int j = i + 1; j < x.length; j++)\n            {\n                if(result[j] == 0)\n                {\n                    result[j] = result[i];\n                }\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprz6n3kdb.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmprz6n3kdb.__unittest_L51_C1() [0x42812a]\n??:? void tmprz6n3kdb.__modtest() [0x428390]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c94]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430771]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b531]\n??:? runModuleUnitTests [0x42c49d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] ans = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        ans[i++] = l;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp6wqlurnd.d(20): Error: semicolon expected, not `:`\n/tmp/tmp6wqlurnd.d(20): Error: expression expected, not `:`\n/tmp/tmp6wqlurnd.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6wqlurnd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[i] = x[i];\n                result[j] = x[j];\n            }\n        }\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(result[i] == result[j])\n            {\n                result[i] = x[i];\n                result[j] = x[j];\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5kui4llc.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x4286ed]\n??:? void tmp5kui4llc.__unittest_L50_C1() [0x428206]\n??:? void tmp5kui4llc.__modtest() [0x42846c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b63a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d74]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430851]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b611]\n??:? runModuleUnitTests [0x42c57d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bb0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        res[i++] = l;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmpe3mg_1fe.d(20): Error: semicolon expected, not `:`\n/tmp/tmpe3mg_1fe.d(20): Error: expression expected, not `:`\n/tmp/tmpe3mg_1fe.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe3mg_1fe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    int j = 0;\n    while (i < x.length)\n    {\n        if (x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            result[j] = x[i];\n            j++;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz7xbekb9.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpz7xbekb9.__unittest_L36_C1() [0x427f8e]\n??:? void tmpz7xbekb9.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    long[] temp = new long[x.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            temp[j] = x[i];\n            j++;\n            i++;\n        }\n    }\n    for(i = 0; i < temp.length; i++)\n    {\n        for(j = 0; j < x.length; j++)\n        {\n            if(temp[i] == x[j])\n            {\n                k = j;\n                break;\n            }\n        }\n        res[k] = temp[i];\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp52ayo4a6.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x42856d]\n??:? void tmp52ayo4a6.__unittest_L51_C1() [0x428086]\n??:? void tmp52ayo4a6.__modtest() [0x4282ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c627]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430745]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bf4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b491]\n??:? runModuleUnitTests [0x42c3fd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a30]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    while (i < x.length) {\n        if (x[i] % 2 == 0) {\n            i++;\n        } else {\n            y[i] = x[i];\n            i++;\n        }\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwd5u8ao7.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpwd5u8ao7.__unittest_L31_C1() [0x427f92]\n??:? void tmpwd5u8ao7.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    while (i < x.length)\n    {\n        if (x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = x[i];\n            i++;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5rwbv23q.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmp5rwbv23q.__unittest_L35_C1() [0x427f92]\n??:? void tmp5rwbv23q.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = x[i];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjzubuan9.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpjzubuan9.__unittest_L34_C1() [0x427f92]\n??:? void tmpjzubuan9.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        result[i++] = l;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp6465x80a.d(20): Error: semicolon expected, not `:`\n/tmp/tmp6465x80a.d(20): Error: expression expected, not `:`\n/tmp/tmp6465x80a.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6465x80a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = x[i];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjzubuan9.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpjzubuan9.__unittest_L34_C1() [0x427f92]\n??:? void tmpjzubuan9.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    long[] temp = new long[x.length];\n    int i = 0;\n    for(i = 0; i < x.length; i++)\n    {\n        temp[i] = x[i];\n    }\n    for(i = 0; i < x.length; i++)\n    {\n        if(temp[i] % 2 == 0)\n        {\n            res[i] = temp[i];\n            for(int j = i + 1; j < x.length; j++)\n            {\n                if(temp[j] % 2 == 0)\n                {\n                    temp[j] = temp[j] / 2;\n                }\n            }\n        }\n    }\n    for(i = 0; i < x.length; i++)\n    {\n        if(temp[i] % 2 == 0)\n        {\n            res[i] = temp[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp31p2momc.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmp31p2momc.__unittest_L48_C1() [0x428176]\n??:? void tmp31p2momc.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for (int i = 0; i < x.length; i++) {\n        y[i] = x[i];\n    }\n    \n    int j = 0;\n    for (int i = 0; i < y.length; i++) {\n        while (j < y.length && y[j] % 2 == 0) {\n            j++;\n        }\n        if (j == y.length) {\n            y[i] = 0;\n        } else {\n            y[i] = y[j];\n            j++;\n        }\n    }\n    \n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_7cdauhc.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42851d]\n??:? void tmp_7cdauhc.__unittest_L38_C1() [0x428036]\n??:? void tmp_7cdauhc.__modtest() [0x42829c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b46a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b441]\n??:? runModuleUnitTests [0x42c3ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 || x[j] % 2 == 0)\n            {\n                result[i] = x[i];\n                result[j] = x[j];\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpymtf52_u.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x428595]\n??:? void tmpymtf52_u.__unittest_L38_C1() [0x4280b2]\n??:? void tmpymtf52_u.__modtest() [0x428318]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c64f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43076d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4b9]\n??:? runModuleUnitTests [0x42c425]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a58]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        res[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                res[j] = x[i];\n            }\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpba790tt2.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x428535]\n??:? void tmpba790tt2.__unittest_L37_C1() [0x42804e]\n??:? void tmpba790tt2.__modtest() [0x4282b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b482]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43070d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bbc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430699]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b459]\n??:? runModuleUnitTests [0x42c3c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmppm38qufo.d(20): Error: semicolon expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: expression expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppm38qufo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    while (i < x.length)\n    {\n        while (i < x.length && x[i] % 2 == 0)\n            i++;\n        if (i < x.length)\n            y[i] = x[i];\n        i++;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp433lhryj.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmp433lhryj.__unittest_L30_C1() [0x427fa2]\n??:? void tmp433lhryj.__modtest() [0x428208]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43065d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] ans = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        long temp = x[i];\n        while(temp > 0)\n        {\n            long rem = temp % 10;\n            if(rem % 2 == 0)\n                break;\n            temp /= 10;\n        }\n        ans[i] = temp;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1140ysym.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmp1140ysym.__unittest_L33_C1() [0x427f8e]\n??:? void tmp1140ysym.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        res[i++] = l;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp55mpc19c.d(20): Error: semicolon expected, not `:`\n/tmp/tmp55mpc19c.d(20): Error: expression expected, not `:`\n/tmp/tmp55mpc19c.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp55mpc19c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[j] = x[j] - x[i];\n            }\n        }\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(result[i] == result[j])\n            {\n                result[j] = 0;\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr9b_2njb.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x42861d]\n??:? void tmpr9b_2njb.__unittest_L48_C1() [0x428136]\n??:? void tmpr9b_2njb.__modtest() [0x42839c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430781]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b541]\n??:? runModuleUnitTests [0x42c4ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ae0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[j] = -1;\n            }\n        }\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        if(result[i] > 0)\n        {\n            result[i] = result[i] * 10;\n        }\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        if(result[i] > 0)\n        {\n            result[i] = result[i] / 10;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpowkwhjao.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42866d]\n??:? void tmpowkwhjao.__unittest_L53_C1() [0x42818a]\n??:? void tmpowkwhjao.__modtest() [0x4283f0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c727]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430845]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cf4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b591]\n??:? runModuleUnitTests [0x42c4fd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b30]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    while (i < x.length) {\n        while (i < x.length && x[i] % 2 == 0) {\n            i++;\n        }\n        res[i] = x[i];\n        i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsfqa9ezv.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmpsfqa9ezv.__unittest_L29_C1() [0x427f96]\n??:? void tmpsfqa9ezv.__modtest() [0x4281fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c537]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430655]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a1]\n??:? runModuleUnitTests [0x42c30d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    int j = 0;\n    while(i < x.length)\n    {\n        while(j < x.length && x[i] > x[j])\n        {\n            j++;\n        }\n        if(j < x.length && x[i] % 2 == 0)\n        {\n            j++;\n        }\n        else\n        {\n            result[i] = x[j];\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1zjlrrjk.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmp1zjlrrjk.__unittest_L40_C1() [0x427fee]\n??:? void tmp1zjlrrjk.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c58f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b422]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430639]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3f9]\n??:? runModuleUnitTests [0x42c365]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428998]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = x[i];\n            i++;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpre9iypjz.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpre9iypjz.__unittest_L35_C1() [0x427f92]\n??:? void tmpre9iypjz.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] ans = new long[x.length];\n    int i = 0;\n    for(long n : x)\n    {\n        if(n % 2 == 0)\n            continue;\n        ans[i++] = n;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpcymwvtfb.d(20): Error: semicolon expected, not `:`\n/tmp/tmpcymwvtfb.d(20): Error: expression expected, not `:`\n/tmp/tmpcymwvtfb.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcymwvtfb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[i] = result[j] = 0;\n            }\n        }\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        if(result[i] != 0)\n        {\n            for(int j = i + 1; j < x.length; j++)\n            {\n                if(result[j] != 0)\n                {\n                    result[i] = result[j] = 0;\n                }\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsq8rjle_.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x428615]\n??:? void tmpsq8rjle_.__unittest_L51_C1() [0x42812e]\n??:? void tmpsq8rjle_.__modtest() [0x428394]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b562]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c9c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430779]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b539]\n??:? runModuleUnitTests [0x42c4a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for(long n : x)\n    {\n        if(n % 2 == 0)\n            continue;\n        result[i++] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpnpy2w5il.d(20): Error: semicolon expected, not `:`\n/tmp/tmpnpy2w5il.d(20): Error: expression expected, not `:`\n/tmp/tmpnpy2w5il.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnpy2w5il.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] ans = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        ans[i++] = l;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp6wqlurnd.d(20): Error: semicolon expected, not `:`\n/tmp/tmp6wqlurnd.d(20): Error: expression expected, not `:`\n/tmp/tmp6wqlurnd.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6wqlurnd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        y[i] = x[i];\n    }\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        for(int j = i + 1; j < y.length; j++)\n        {\n            if(y[i] % 2 == 0 && y[j] % 2 == 0)\n            {\n                y[j] = y[y.length - 1];\n                y[y.length - 1] = y[i];\n                i--;\n                j--;\n            }\n        }\n    }\n    \n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplmsdk792.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x42857d]\n??:? void tmplmsdk792.__unittest_L40_C1() [0x42809a]\n??:? void tmplmsdk792.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c637]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430755]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4a1]\n??:? runModuleUnitTests [0x42c40d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmppm38qufo.d(20): Error: semicolon expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: expression expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppm38qufo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmppm38qufo.d(20): Error: semicolon expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: expression expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppm38qufo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n            continue;\n        }\n        result[i] = x[i];\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp53vdax42.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmp53vdax42.__unittest_L32_C1() [0x427f92]\n??:? void tmp53vdax42.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        result[i++] = l;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp6465x80a.d(20): Error: semicolon expected, not `:`\n/tmp/tmp6465x80a.d(20): Error: expression expected, not `:`\n/tmp/tmp6465x80a.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6465x80a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[i] = result[j];\n                result[j] = x[i];\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3z9s9eex.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x428585]\n??:? void tmp3z9s9eex.__unittest_L38_C1() [0x42809e]\n??:? void tmp3z9s9eex.__modtest() [0x428304]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c63f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43075d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4a9]\n??:? runModuleUnitTests [0x42c415]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a48]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    while (i < x.length) {\n        while (i < x.length && x[i] % 2 == 0) {\n            i++;\n        }\n        y[i] = x[i];\n        i++;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1sk5tcpl.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmp1sk5tcpl.__unittest_L30_C1() [0x427f96]\n??:? void tmp1sk5tcpl.__modtest() [0x4281fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c537]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430655]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a1]\n??:? runModuleUnitTests [0x42c30d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    for (long l : x) {\n        if (l % 2 == 0) continue;\n        res[i++] = l;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpi4jgq6fd.d(20): Error: semicolon expected, not `:`\n/tmp/tmpi4jgq6fd.d(20): Error: expression expected, not `:`\n/tmp/tmpi4jgq6fd.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4jgq6fd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    while (i < x.length) {\n        long cur = x[i];\n        while (i < x.length && x[i] == cur) {\n            i++;\n        }\n        if (i == x.length) {\n            res[res.length - 1] = cur;\n        } else {\n            res[res.length - 1] = cur;\n            for (int j = i; j < x.length; j++) {\n                if (x[j] % 2 == 0) {\n                    x[j] = x[j] / 2;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph6b4qxd5.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42855d]\n??:? void tmph6b4qxd5.__unittest_L38_C1() [0x428076]\n??:? void tmph6b4qxd5.__modtest() [0x4282dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c617]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430735]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430be4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b481]\n??:? runModuleUnitTests [0x42c3ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n        y[i] = x[i];\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        if(y[i] % 2 == 0)\n            y[i] = y[i] / 2;\n    }\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        for(int j = i + 1; j < y.length; j++)\n        {\n            if(y[i] == y[j])\n                y[j] = 0;\n        }\n    }\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        if(y[i] != 0)\n            y[i] = y[i] * 10 + 1;\n    }\n    \n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvtz064jl.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x428645]\n??:? void tmpvtz064jl.__unittest_L45_C1() [0x42815e]\n??:? void tmpvtz064jl.__modtest() [0x4283c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b592]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43081d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ccc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b569]\n??:? runModuleUnitTests [0x42c4d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b08]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n        y[i] = x[i];\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(y[i] % 2 == 0 || y[j] % 2 == 0)\n                y[i] = y[i] / 2;\n            else\n                y[i] = y[i] / 2 + y[j] / 2;\n        }\n    }\n    \n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptzqguufo.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x4285dd]\n??:? void tmptzqguufo.__unittest_L35_C1() [0x4280fa]\n??:? void tmptzqguufo.__modtest() [0x428360]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c697]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b52a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430741]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b501]\n??:? runModuleUnitTests [0x42c46d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428aa0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n        y[i] = x[i];\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        if(y[i] % 2 == 0)\n            y[i] = y[i] / 2;\n    }\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        for(int j = i + 1; j < y.length; j++)\n        {\n            if(y[i] == y[j])\n                y[j] = -1;\n        }\n    }\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        if(y[i] != -1)\n            y[i] = y[i] * 10;\n    }\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        if(y[i] != -1)\n            y[i] = y[i] + 1;\n    }\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        if(y[i] != -1)\n            y[i] = y[i] - 1;\n    }\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        if(y[i] != -1)\n            y[i] = y[i] / 10;\n    }\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        if(y[i] != -1)\n            y[i] = y[i] * 10;\n    }\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        if(y[i] != -1)\n            y[i] = y[i] + 1;\n    }\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        if(y[i] != -1)\n            y[i\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpn3r1ehrb.d(77): Error: found `unittest` when expecting `,`\n/tmp/tmpn3r1ehrb.d(86): Error: found `void` when expecting `,`\n/tmp/tmpn3r1ehrb.d(86): Error: found `{` when expecting `,`\n/tmp/tmpn3r1ehrb.d(86): Error: expression expected, not `}`\n/tmp/tmpn3r1ehrb.d(86): Error: found `End of File` when expecting `,`\n/tmp/tmpn3r1ehrb.d(86): Error: found `End of File` when expecting `]`\n/tmp/tmpn3r1ehrb.d(86): Error: found `End of File` when expecting `;` following statement\n/tmp/tmpn3r1ehrb.d(86): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpn3r1ehrb.d(86): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn3r1ehrb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        result[i++] = l;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp6465x80a.d(20): Error: semicolon expected, not `:`\n/tmp/tmp6465x80a.d(20): Error: expression expected, not `:`\n/tmp/tmp6465x80a.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6465x80a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        if(x[i] % 2 == 0)\n            continue;\n        result[i] = x[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4k0kk1sv.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmp4k0kk1sv.__unittest_L28_C1() [0x427f8e]\n??:? void tmp4k0kk1sv.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    int j = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            result[j++] = x[i];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpldsn9o4a.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpldsn9o4a.__unittest_L35_C1() [0x427f8e]\n??:? void tmpldsn9o4a.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    long[] z = new long[x.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < x.length) {\n        if (x[i] % 2 == 0) {\n            i++;\n        } else {\n            y[j] = x[i];\n            j++;\n            i++;\n        }\n    }\n    i = 0;\n    while (i < y.length) {\n        if (y[i] % 2 == 0) {\n            i++;\n        } else {\n            z[k] = y[i];\n            k++;\n            i++;\n        }\n    }\n    return z;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprnbfct52.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x42853d]\n??:? void tmprnbfct52.__unittest_L44_C1() [0x42805a]\n??:? void tmprnbfct52.__modtest() [0x4282c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b48a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430715]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bc4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b461]\n??:? runModuleUnitTests [0x42c3cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a00]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long n : x)\n    {\n        if(n % 2 == 0)\n            continue;\n        y[i++] = n;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmp3crtzrpb.d(20): Error: semicolon expected, not `:`\n/tmp/tmp3crtzrpb.d(20): Error: expression expected, not `:`\n/tmp/tmp3crtzrpb.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3crtzrpb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] ans = new long[x.length];\n    long[] temp = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n        {\n            temp[i] = l;\n            i++;\n        }\n    }\n    for(int j = 0; j < temp.length; j++)\n    {\n        ans[j] = temp[j];\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpm5ul2c07.d(21): Error: semicolon expected, not `:`\n/tmp/tmpm5ul2c07.d(21): Error: expression expected, not `:`\n/tmp/tmpm5ul2c07.d(21): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm5ul2c07.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        result[i++] = l;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp4vhueems.d(20): Error: semicolon expected, not `:`\n/tmp/tmp4vhueems.d(20): Error: expression expected, not `:`\n/tmp/tmp4vhueems.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4vhueems.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[i] = result[j] = 0;\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcfez_omw.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x428535]\n??:? void tmpcfez_omw.__unittest_L37_C1() [0x42804e]\n??:? void tmpcfez_omw.__modtest() [0x4282b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b482]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43070d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bbc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430699]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b459]\n??:? runModuleUnitTests [0x42c3c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        result[i++] = l;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp6465x80a.d(20): Error: semicolon expected, not `:`\n/tmp/tmp6465x80a.d(20): Error: expression expected, not `:`\n/tmp/tmp6465x80a.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6465x80a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] ans = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        ans[i++] = l;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp6wqlurnd.d(20): Error: semicolon expected, not `:`\n/tmp/tmp6wqlurnd.d(20): Error: expression expected, not `:`\n/tmp/tmp6wqlurnd.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6wqlurnd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmppm38qufo.d(20): Error: semicolon expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: expression expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppm38qufo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        y[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(y[i] % 2 == 0 || y[j] % 2 == 0)\n            {\n                y[j] = Math.max(y[j], y[i]);\n            }\n        }\n    }\n    \n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmp223tfwkr.d(30): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp223tfwkr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    int j = 0;\n    while (i < x.length) {\n        if (x[i] % 2 == 0) {\n            i++;\n        } else {\n            res[j++] = x[i];\n            i++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq0ja6dxu.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpq0ja6dxu.__unittest_L31_C1() [0x427f8e]\n??:? void tmpq0ja6dxu.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        y[i] = x[i];\n    }\n    \n    for(int i = 0; i < y.length; i++)\n    {\n        for(int j = i + 1; j < y.length; j++)\n        {\n            if(y[i] % 2 == 0 && y[j] % 2 == 0)\n            {\n                y[j] = y[y.length - 1];\n                y.length--;\n                j--;\n            }\n        }\n    }\n    \n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppkqd6egv.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmppkqd6egv.__unittest_L39_C1() [0x42807e]\n??:? void tmppkqd6egv.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d6ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c582]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431ab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431f68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431a45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c559]\n??:? runModuleUnitTests [0x42d4c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    while (i < x.length)\n    {\n        while (i < x.length && x[i] % 2 == 0)\n            i++;\n        result[i] = x[i];\n        i++;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbwd2d2ms.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmpbwd2d2ms.__unittest_L30_C1() [0x427f96]\n??:? void tmpbwd2d2ms.__modtest() [0x4281fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c537]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430655]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a1]\n??:? runModuleUnitTests [0x42c30d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for (long n : x) {\n        if (n % 2 == 0) continue;\n        y[i++] = n;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "/tmp/tmpvc8slhar.d(20): Error: semicolon expected, not `:`\n/tmp/tmpvc8slhar.d(20): Error: expression expected, not `:`\n/tmp/tmpvc8slhar.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvc8slhar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    while (i < x.length)\n    {\n        if (x[i] % 2 == 0)\n        {\n            y[i] = x[i];\n            i++;\n        }\n        else\n        {\n            y[i] = x[i];\n            i++;\n            while (i < x.length && x[i] == x[i - 1])\n            {\n                y[i] = x[i];\n                i++;\n            }\n        }\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1a3l6_2s.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428595]\n??:? void tmp1a3l6_2s.__unittest_L41_C1() [0x4280b2]\n??:? void tmp1a3l6_2s.__modtest() [0x428318]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c64f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43076d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4b9]\n??:? runModuleUnitTests [0x42c425]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a58]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    while (i < x.length) {\n        if (x[i] % 2 == 0) {\n            i++;\n        } else {\n            res[i] = x[i];\n            i++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk0c9f7ra.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpk0c9f7ra.__unittest_L30_C1() [0x427f92]\n??:? void tmpk0c9f7ra.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] ans = new long[x.length];\n    long[] temp = new long[x.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < x.length)\n    {\n        if (x[i] % 2 == 0)\n        {\n            i++;\n            continue;\n        }\n        temp[j] = x[i];\n        j++;\n        i++;\n    }\n    i = 0;\n    while (i < j)\n    {\n        if (temp[i] == temp[i + 1])\n        {\n            k++;\n            i++;\n        }\n        else\n        {\n            ans[k] = temp[i];\n            k++;\n            i++;\n        }\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5fmkkvbp.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428555]\n??:? void tmp5fmkkvbp.__unittest_L52_C1() [0x42806e]\n??:? void tmp5fmkkvbp.__modtest() [0x4282d4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c60f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43072d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bdc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b479]\n??:? runModuleUnitTests [0x42c3e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmppm38qufo.d(20): Error: semicolon expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: expression expected, not `:`\n/tmp/tmppm38qufo.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppm38qufo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    long[] z = new long[x.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < x.length) {\n        if (x[i] % 2 == 0) {\n            i++;\n            continue;\n        }\n        y[j] = x[i];\n        i++;\n        j++;\n    }\n    i = 0;\n    while (i < y.length) {\n        if (y[i] % 2 == 0) {\n            i++;\n            continue;\n        }\n        z[k] = y[i];\n        i++;\n        k++;\n    }\n    return z;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4oqq8z3u.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x42853d]\n??:? void tmp4oqq8z3u.__unittest_L45_C1() [0x42805a]\n??:? void tmp4oqq8z3u.__modtest() [0x4282c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b48a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430715]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bc4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b461]\n??:? runModuleUnitTests [0x42c3cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a00]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for (long l : x) {\n        if (l % 2 == 0) {\n            continue;\n        }\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpr8bx72hg.d(20): Error: semicolon expected, not `:`\n/tmp/tmpr8bx72hg.d(20): Error: expression expected, not `:`\n/tmp/tmpr8bx72hg.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8bx72hg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        y[i++] = l;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp83btz7oy.d(20): Error: semicolon expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: expression expected, not `:`\n/tmp/tmp83btz7oy.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83btz7oy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[j] = x[j] - x[i];\n            }\n        }\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3yhssabu.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp3yhssabu.__unittest_L38_C1() [0x42807e]\n??:? void tmp3yhssabu.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c61f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43073d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b489]\n??:? runModuleUnitTests [0x42c3f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        y[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(y[i] == y[j])\n            {\n                y[i] = 0;\n                y[j] = 0;\n            }\n        }\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        if(y[i] != 0)\n        {\n            y[i] = 0;\n        }\n    }\n    \n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpajy8yr5u.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428575]\n??:? void tmpajy8yr5u.__unittest_L46_C1() [0x42808e]\n??:? void tmpajy8yr5u.__modtest() [0x4282f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c62f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43074d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bfc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b499]\n??:? runModuleUnitTests [0x42c405]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a38]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        result[i++] = l;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp4vhueems.d(20): Error: semicolon expected, not `:`\n/tmp/tmp4vhueems.d(20): Error: expression expected, not `:`\n/tmp/tmp4vhueems.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4vhueems.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[i] = result[j];\n                result[j] = x[i];\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3z9s9eex.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x428585]\n??:? void tmp3z9s9eex.__unittest_L38_C1() [0x42809e]\n??:? void tmp3z9s9eex.__modtest() [0x428304]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c63f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43075d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4a9]\n??:? runModuleUnitTests [0x42c415]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a48]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    while (i < x.length)\n    {\n        if (x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            res[i] = x[i];\n            i++;\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmscmsqxi.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpmscmsqxi.__unittest_L35_C1() [0x427f92]\n??:? void tmpmscmsqxi.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[i] = result[i] * 10 + result[j];\n                result[j] = 0;\n            }\n        }\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        if(result[i] != 0)\n        {\n            result[i] = result[i] * 10 + result[i];\n        }\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphrd_4nql.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmphrd_4nql.__unittest_L47_C1() [0x428176]\n??:? void tmphrd_4nql.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    for(long n : x)\n    {\n        if(n % 2 == 0)\n            continue;\n        res[i++] = n;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmpa7tg7yew.d(20): Error: semicolon expected, not `:`\n/tmp/tmpa7tg7yew.d(20): Error: expression expected, not `:`\n/tmp/tmpa7tg7yew.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7tg7yew.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for (int i = 0; i < x.length; i++) {\n        y[i] = x[i];\n    }\n    \n    for (int i = 0; i < y.length; i++) {\n        if (y[i] % 2 == 0) {\n            y[i] = y[i] / 2;\n        }\n    }\n    \n    for (int i = 0; i < y.length; i++) {\n        y[i] = y[i] * 10;\n    }\n    \n    for (int i = 0; i < y.length; i++) {\n        y[i] = y[i] + y[i] / 10;\n    }\n    \n    for (int i = 0; i < y.length; i++) {\n        y[i] = y[i] - y[i] / 10;\n    }\n    \n    for (int i = 0; i < y.length; i++) {\n        y[i] = y[i] - y[i] / 10;\n    }\n    \n    for (int i = 0; i < y.length; i++) {\n        y[i] = y[i] - y[i] / 10;\n    }\n    \n    for (int i = 0; i < y.length; i++) {\n        y[i] = y[i] - y[i] / 10;\n    }\n    \n    for (int i = 0; i < y.length; i++) {\n        y[i] = y[i] - y[i] / 10;\n    }\n    \n    for (int i = 0; i < y.length; i++) {\n        y[i] = y[i] - y[i] / 10;\n    }\n    \n    for (int i = 0; i < y.length; i++) {\n        y[i] = y[i] - y[i] / 10;\n    }\n    \n    for (int i = 0; i < y.length; i++) {\n        y[i] = y[i] - y[i] / 10;\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmplo9qp0yn.d(67): Error: found `unittest` instead of statement\n/tmp/tmplo9qp0yn.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplo9qp0yn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    for (long l : x) {\n        if (l % 2 == 0) continue;\n        res[i++] = l;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpgia5s11b.d(20): Error: semicolon expected, not `:`\n/tmp/tmpgia5s11b.d(20): Error: expression expected, not `:`\n/tmp/tmpgia5s11b.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgia5s11b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    int j = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n            continue;\n        }\n        y[j] = x[i];\n        j++;\n        i++;\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi3_ipvb9.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpi3_ipvb9.__unittest_L35_C1() [0x427f8e]\n??:? void tmpi3_ipvb9.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for (long l : x)\n    {\n        if (l % 2 == 0)\n            continue;\n        result[i++] = l;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp64q0805f.d(20): Error: semicolon expected, not `:`\n/tmp/tmp64q0805f.d(20): Error: expression expected, not `:`\n/tmp/tmp64q0805f.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp64q0805f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for (int i = 0; i < x.length; i++) {\n        result[i] = x[i];\n    }\n    \n    for (int i = 0; i < x.length; i++) {\n        for (int j = i + 1; j < x.length; j++) {\n            if (x[i] % 2 == 0 || x[j] % 2 == 0) {\n                result[j] = x[j];\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy26jf8ax.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428535]\n??:? void tmpy26jf8ax.__unittest_L33_C1() [0x428052]\n??:? void tmpy26jf8ax.__modtest() [0x4282b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b482]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43070d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bbc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430699]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b459]\n??:? runModuleUnitTests [0x42c3c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    while (i < x.length) {\n        if (x[i] % 2 == 0) {\n            i++;\n        } else {\n            result[i] = x[i];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph3dnmrrg.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmph3dnmrrg.__unittest_L30_C1() [0x427f92]\n??:? void tmph3dnmrrg.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    int j = 0;\n    while (i < x.length) {\n        if (x[i] % 2 == 0) {\n            i++;\n        } else {\n            y[j++] = x[i];\n        }\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpo393xadl.d(25): Range violation\n----------------\n??:? _d_arrayboundsp [0x42851e]\n??:? long[] tmpo393xadl.unique_digits(long[]) [0x427e8e]\n??:? void tmpo393xadl.__unittest_L30_C1() [0x427f27]\n??:? void tmpo393xadl.__modtest() [0x4281f0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c527]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430645]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430af4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b391]\n??:? runModuleUnitTests [0x42c2fd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] ans = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        if(x[i] % 2 == 0)\n            continue;\n        ans[i] = x[i];\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2zrpo7hd.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmp2zrpo7hd.__unittest_L28_C1() [0x427f8e]\n??:? void tmp2zrpo7hd.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        result[i++] = l;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "/tmp/tmp6465x80a.d(20): Error: semicolon expected, not `:`\n/tmp/tmp6465x80a.d(20): Error: expression expected, not `:`\n/tmp/tmp6465x80a.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6465x80a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    long[] temp = new long[x.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n            continue;\n        }\n        temp[j] = x[i];\n        i++;\n        j++;\n    }\n    for(i = 0; i < temp.length; i++)\n    {\n        for(j = 0; j < x.length; j++)\n        {\n            if(temp[i] == x[j])\n            {\n                break;\n            }\n        }\n        if(j == x.length)\n        {\n            res[k] = temp[i];\n            k++;\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8b24ofkj.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428575]\n??:? void tmp8b24ofkj.__unittest_L52_C1() [0x42808e]\n??:? void tmp8b24ofkj.__modtest() [0x4282f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c62f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43074d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bfc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b499]\n??:? runModuleUnitTests [0x42c405]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a38]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    int j = 0;\n    while (i < x.length) {\n        if (x[i] % 2 == 0) {\n            i++;\n        } else {\n            result[j++] = x[i];\n            i++;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpakotocu2.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpakotocu2.__unittest_L32_C1() [0x427f8e]\n??:? void tmpakotocu2.__modtest() [0x4281f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            y[i] = x[i];\n            i++;\n        }\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph_jtj_bp.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmph_jtj_bp.__unittest_L34_C1() [0x427f92]\n??:? void tmph_jtj_bp.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    long[] temp = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        temp[i] = l;\n        i++;\n    }\n    for(i = 0; i < temp.length; i++)\n    {\n        res[i] = temp[i];\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpkeer5rcm.d(21): Error: semicolon expected, not `:`\n/tmp/tmpkeer5rcm.d(21): Error: expression expected, not `:`\n/tmp/tmpkeer5rcm.d(21): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkeer5rcm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 || x[j] % 2 == 0)\n            {\n                result[i] = result[j] = 0;\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgwtub9r9.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42852d]\n??:? void tmpgwtub9r9.__unittest_L37_C1() [0x42804a]\n??:? void tmpgwtub9r9.__modtest() [0x4282b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430705]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430691]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for(long num : x)\n    {\n        if(num % 2 == 0)\n            continue;\n        result[i++] = num;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpxrar83yw.d(20): Error: semicolon expected, not `:`\n/tmp/tmpxrar83yw.d(20): Error: expression expected, not `:`\n/tmp/tmpxrar83yw.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxrar83yw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    int i = 0;\n    while (i < x.length) {\n        if (x[i] % 2 == 0) {\n            i++;\n        } else {\n            y[i] = x[i];\n            i++;\n        }\n    }\n    return y;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwd5u8ao7.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpwd5u8ao7.__unittest_L31_C1() [0x427f92]\n??:? void tmpwd5u8ao7.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    int i = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            res[i] = x[i];\n            i++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsv6fxj1q.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpsv6fxj1q.__unittest_L34_C1() [0x427f92]\n??:? void tmpsv6fxj1q.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    while(i < x.length)\n    {\n        if(x[i] % 2 == 0)\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = x[i];\n            i++;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpre9iypjz.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428475]\n??:? void tmpre9iypjz.__unittest_L35_C1() [0x427f92]\n??:? void tmpre9iypjz.__modtest() [0x4281f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c52f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43064d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430afc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b399]\n??:? runModuleUnitTests [0x42c305]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428938]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        result[i++] = l;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp4vhueems.d(20): Error: semicolon expected, not `:`\n/tmp/tmp4vhueems.d(20): Error: expression expected, not `:`\n/tmp/tmp4vhueems.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4vhueems.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    int i = 0;\n    for(long l : x)\n    {\n        if(l % 2 == 0)\n            continue;\n        result[i++] = l;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "/tmp/tmp4vhueems.d(20): Error: semicolon expected, not `:`\n/tmp/tmp4vhueems.d(20): Error: expression expected, not `:`\n/tmp/tmp4vhueems.d(20): Error: found `x` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4vhueems.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n    long[] tmp = new long[x.length];\n    long[] tmp2 = new long[x.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    \nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "/tmp/tmpiehy2f9z.d(89): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiehy2f9z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] y = new long[x.length];\n    for(int i = 0; i < x.length; i++)\n    {\n        y[i] = x[i];\n    }\n    \n    for(int i = 0; i < x.length; i++)\n    {\n        for(int j = i + 1; j < x.length; j++)\n        {\n            if(x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                y[j] = y[i];\n            }\n        }\n    }\n    \n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpivxe0_3k.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42852d]\n??:? void tmpivxe0_3k.__unittest_L37_C1() [0x428046]\n??:? void tmpivxe0_3k.__modtest() [0x4282ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b47a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430705]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430691]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b451]\n??:? runModuleUnitTests [0x42c3bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \n    elements that hasn't any even digit.\n\n    Note: Returned array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n    for (int i = 0; i < x.length; i++)\n    {\n        result[i] = x[i];\n    }\n    \n    for (int i = 0; i < x.length; i++)\n    {\n        for (int j = i + 1; j < x.length; j++)\n        {\n            if (x[i] % 2 == 0 && x[j] % 2 == 0)\n            {\n                result[j] = x[j] - x[i];\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3er7_c69.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmp3er7_c69.__unittest_L37_C1() [0x42807e]\n??:? void tmp3er7_c69.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c61f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43073d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b489]\n??:? runModuleUnitTests [0x42c3f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}