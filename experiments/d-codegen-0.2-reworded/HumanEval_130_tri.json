{
  "name": "HumanEval_130_tri",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\nlong[] tri(long n) \n",
  "tests": "unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}",
  "completions": [
    "{\n    if (n < 1)\n        return new long[0];\n    if (n == 1)\n        return new long[]{1L};\n    if (n == 2)\n        return new long[]{1L, 3L};\n    long[] result = new long[n + 1];\n    result[0] = 1L;\n    result[1] = 3L;\n    for (int i = 2; i < n + 1; i++)\n        result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"n must be non-negative\");\n    if (n == 0)\n        return new long[0];\n    if (n == 1)\n        return new long[]{1, 3};\n    if (n == 2)\n        return new long[]{1, 1, 3};\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1] = 3;\n    for (int i = 2; i < n + 1; i++)\n        result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n < 2) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 2] + result[i - 1] + result[i];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n        for (int i = n - 2; i >= 0; i--) {\n            result[i] = result[i + 1] + result[i + 2] + result[i + 3];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n];\n        for (int i = n - 1; i >= 0; i--) {\n            result[i] = result[i + 1] + result[i + 2] + result[i + 3];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 3;\n    if (n < 2) return result;\n    if (n % 2 == 0)\n    {\n        for (int i = 3; i <= n; i += 2)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    else\n    {\n        for (int i = 3; i <= n; i += 2)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n < 2) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i < n; i += 2) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i < n; i += 2) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2];\n        for (int i = n - 1; i > 1; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n - 1];\n        for (int i = n - 1; i > 1; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i + 1];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n        for (int i = n - 1; i > 0; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    }\n    else {\n        result[n] = result[n - 1] + result[n - 2] + result[n];\n        for (int i = n - 1; i > 0; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (long i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n - 1; i > 1; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n - 1; i > 1; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n + 1; i < result.length; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n + 1; i < result.length; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 3;\n    if (n < 2) return result;\n    if (n % 2 == 0) {\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    } else {\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n + 1; i < result.length; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n + 1; i < result.length; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1] = 3;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[2] = 2;\n        for (int i = 3; i < n + 1; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n    } else {\n        result[2] = 1;\n        for (int i = 3; i < n + 1; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n    }\n    return result;\n}",
    "{\n    long[] res = new long[n + 1];\n    res[0] = 0;\n    res[1] = 1;\n    if (n == 0) return res;\n    if (n == 1) return res;\n    if (n % 2 == 0) {\n        res[2] = 2;\n        for (int i = 3; i <= n; i++) {\n            res[i] = res[i - 1] + res[i - 2] + res[i - 3];\n        }\n    } else {\n        res[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            res[i] = res[i - 1] + res[i - 2] + res[i - 3];\n        }\n    }\n    return res;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1] + result[i + 1];\n        }\n    }\n    else {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1] = 3;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[2] = 2;\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n    }\n    else\n    {\n        result[2] = 1;\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n    }\n    return result;\n}",
    "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"n must be non-negative\");\n    if (n == 0)\n        return new long[0];\n    if (n == 1)\n        return new long[]{1L, 3L};\n    if (n == 2)\n        return new long[]{1L, 2L, 3L};\n    long[] result = new long[n + 1];\n    result[0] = 1L;\n    result[1] = 3L;\n    for (int i = 2; i < n + 1; i++)\n        result[i] = 1L + (i / 2) + result[i - 1] + result[i - 2];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1] = 3;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[2] = 2;\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n    }\n    else\n    {\n        result[2] = 1;\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1] = 3;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[2] = 2;\n        for (int i = 3; i < n + 1; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n    } else {\n        result[2] = 1 + result[1];\n        for (int i = 3; i < n + 1; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i - 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    if (n == 0) return new long[0];\n    if (n == 1) return new long[]{1L, 3L};\n    if (n == 2) return new long[]{1L, 2L, 3L};\n    if (n == 3) return new long[]{1L, 1L, 2L, 3L};\n    long[] result = new long[n + 1];\n    result[0] = 1L;\n    result[1] = 3L;\n    if (n % 2 == 0)\n    {\n        for (int i = 2; i < n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    else\n    {\n        for (int i = 2; i < n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[3] = 2;\n        for (int i = 4; i <= n; i++)\n        {\n            result[i] = result[i - 2] + result[i - 1] + result[i - 3];\n        }\n    }\n    else\n    {\n        result[3] = 3;\n        for (int i = 4; i <= n; i++)\n        {\n            result[i] = result[i - 2] + result[i - 1] + result[i - 3];\n        }\n    }\n    return result;\n}",
    "{\n    if (n < 1)\n        return new long[0];\n    if (n == 1)\n        return new long[]{1L};\n    if (n == 2)\n        return new long[]{1L, 3L};\n    if (n % 2 == 0)\n        return new long[]{1L, 1L + n / 2L, 1L + n / 2L, 1L + n / 2L + n / 2L};\n    else\n        return new long[]{1L, 1L + n / 2L, 1L + n / 2L, 1L + n / 2L + n / 2L, 1L + n / 2L + n / 2L + n / 2L};\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1] + result[i + 1];\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1] + result[i + 1];\n    }\n    return result;\n}",
    "{\n    if (n < 1)\n        throw new Error(\"tri(n) expects n >= 1\");\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 3;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 2] + result[n - 1] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i < n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i < n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n - 1];\n        for (int i = n - 1; i >= 2; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n - 1];\n        for (int i = n - 1; i >= 2; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n < 2) return result;\n    if (n % 2 == 0) {\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    } else {\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"n should be non-negative\");\n    if (n == 0)\n        return new long[0];\n    if (n == 1)\n        return new long[] {1L, 3L};\n    if (n == 2)\n        return new long[] {1L, 2L, 8L};\n    long[] result = new long[n + 1];\n    result[0] = 1L;\n    result[1] = 3L;\n    if (n % 2 == 0)\n        for (int i = 2; i < n; i += 2)\n            result[i] = result[i - 2] + result[i - 1] + result[i + 1];\n    else\n        for (int i = 2; i < n; i += 2)\n            result[i] = result[i - 2] + result[i - 1] + result[i + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n + 1; i < result.length; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n + 1; i < result.length; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1] = 3;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[2] = 2;\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n    }\n    else\n    {\n        result[2] = 1 + result[1] + result[2];\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    } else {\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"n should be non-negative\");\n    if (n == 0)\n        return new long[0];\n    if (n == 1)\n        return new long[]{1L};\n    if (n == 2)\n        return new long[]{1L, 3L};\n    long[] result = new long[n + 1];\n    result[0] = 1L;\n    result[1] = 3L;\n    for (int i = 2; i < n + 1; i++)\n    {\n        result[i] = 1L + (i / 2) + result[i - 1] + result[i - 2];\n    }\n    return result;\n}",
    "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"n should be non-negative\");\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1] = 3;\n    if (n < 2)\n        return result;\n    if (n % 2 == 0)\n        result[2] = 2;\n    else\n        result[2] = 1 + (n / 2);\n    for (int i = 3; i <= n; i++)\n        result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n        for (int i = n - 1; i > 0; i--) {\n            result[i] = result[i - 2] + result[i - 1] + result[i];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n];\n        for (int i = n - 1; i > 0; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 3;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 2] + result[i - 1] + result[i];\n        }\n    } else {\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 2] + result[i - 1] + result[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 1) return result;\n    if (n == 2) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i < n; i++)\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i < n; i++)\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"n should be non-negative\");\n    if (n == 0)\n        return new long[0];\n    if (n == 1)\n        return new long[]{1L, 3L};\n    if (n == 2)\n        return new long[]{1L, 2L, 3L};\n    long[] result = new long[n + 1];\n    result[0] = 1L;\n    result[1] = 3L;\n    for (int i = 2; i < n + 1; i++)\n        result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 3;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n < 2) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 2] + result[i - 1] + result[i];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (long i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n + 1; i < result.length; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n + 1; i < result.length; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (long i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i + 1];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i < n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i < n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 3;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"n should be non-negative\");\n    if (n == 0)\n        return new long[0];\n    if (n == 1)\n        return new long[]{1, 3};\n    if (n == 2)\n        return new long[]{1, 2, 3};\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1] = 3;\n    for (int i = 2; i < n + 1; i++)\n    {\n        result[i] = 1 + (i / 2);\n        if (i % 2 == 0)\n            result[i] += result[i - 2];\n        else\n            result[i] += result[i - 1] + result[i - 2];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i + 1];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n        for (int i = n - 1; i > 0; i--) {\n            result[i] = result[i - 2] + result[i - 1] + result[i];\n        }\n    }\n    else {\n        result[n] = result[n - 1] + result[n - 2] + result[n];\n        for (int i = n - 1; i > 0; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    else\n        result[n] = result[n - 1] + result[n - 2] + result[n - 1] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n - 2; i >= 0; i--)\n        {\n            result[i] = result[i + 1] + result[i + 2] + result[i + 3];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n - 2; i >= 0; i--)\n        {\n            result[i] = result[i + 1] + result[i + 2] + result[i + 3];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 2] + result[i - 1] + result[i];\n        }\n    } else {\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 2] + result[i - 1] + result[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1] + result[i + 1];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i < n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i < n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1] + result[i + 1];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"n should be non-negative\");\n    if (n == 0)\n        return new long[0];\n    if (n == 1)\n        return new long[]{1L, 3L};\n    if (n == 2)\n        return new long[]{1L, 2L, 3L};\n    long[] result = new long[n + 1];\n    result[0] = 1L;\n    result[1] = 3L;\n    if (n % 2 == 0)\n        for (int i = 2; i < n; i++)\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    else\n        for (int i = 2; i < n; i++)\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n - 1; i > 0; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    else {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n - 1; i > 0; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n < 2) return result;\n    if (n % 2 == 0) {\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    } else {\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n        for (int i = n - 1; i >= 2; i--)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n];\n        for (int i = n - 1; i >= 2; i--)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n        for (int i = n - 1; i > 1; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n];\n        for (int i = n - 1; i > 1; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (long i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 3;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 3;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    else\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"n should be non-negative\");\n    if (n == 0)\n        return new long[0];\n    if (n == 1)\n        return new long[] {1, 3};\n    if (n == 2)\n        return new long[] {1, 3, 2, 8};\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1] = 3;\n    long n2 = n - 2;\n    long n1 = n - 1;\n    long n3 = n;\n    for (int i = 2; i < n + 1; i++) {\n        result[i] = 1 + n2 / 2;\n        if (i % 2 == 0)\n            n2 = n2 - result[i - 1];\n        else\n            n3 = n3 - result[i - 1] - result[i - 2];\n        result[i] = result[i - 1] + result[i - 2] + result[i];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i + 1];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n        return result;\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n];\n        return result;\n    }\n}",
    "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"n must be non-negative\");\n    if (n == 0)\n        return new long[] {0L};\n    if (n == 1)\n        return new long[] {1L, 3L};\n    if (n == 2)\n        return new long[] {1L, 2L, 3L};\n    long[] result = new long[n + 1];\n    result[0] = 0L;\n    result[1] = 1L;\n    result[2] = 2L;\n    long n_1 = n - 1;\n    long n_2 = n - 2;\n    long n_3 = n - 3;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = 1L + n_1 / 2L;\n        if (i % 2 == 0)\n            result[i] += result[i - 2];\n        else\n            result[i] += result[i - 1] + result[i - 2] + result[i - 3];\n        n_1 = n_2;\n        n_2 = n_3;\n        n_3 = i - 1;\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n < 2) return result;\n    if (n % 2 == 0) {\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 2] + result[i - 1] + result[i];\n        }\n    } else {\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 2] + result[i - 1] + result[i - 3];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n - 1];\n        for (int i = n - 1; i >= 2; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n - 1];\n        for (int i = n - 1; i >= 2; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i + 1];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n < 2) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i + 1];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n - 3] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i - 4] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n - 1];\n        for (int i = n - 1; i > 1; i--)\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n - 1];\n        for (int i = n - 1; i > 1; i--)\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1] = 3;\n    if (n == 0) return result;\n    if (n % 2 == 0) {\n        result[2] = 2;\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    } else {\n        result[2] = 1 + (n / 2);\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n        result[n / 2] = result[n / 2 - 1] + result[n / 2 - 2] + result[n / 2 + 1];\n    else\n        result[n / 2] = result[n / 2 - 1] + result[n / 2 - 2] + result[n / 2 + 1];\n    for (int i = 3; i <= n; i++)\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n    } else {\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i + 1];\n        }\n    }\n    else {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n < 2) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n        for (int i = n + 1; i < result.length; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n];\n        for (int i = n + 1; i < result.length; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1] = 3;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[2] = 2;\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n    }\n    else\n    {\n        result[2] = 1;\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n - 2; i >= 0; i--) {\n            result[i] = result[i + 1] + result[i + 2] + result[i + 3];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n - 2; i >= 0; i--) {\n            result[i] = result[i + 1] + result[i + 2] + result[i + 3];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1] = 3;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[2] = 2;\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n        }\n    } else {\n        result[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1] = 3;\n    if (n < 2) return result;\n    if (n % 2 == 0)\n    {\n        result[2] = 2;\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n    }\n    else\n    {\n        result[2] = 1;\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1] = 3;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[2] = 2;\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n    }\n    else\n    {\n        result[2] = 1 + result[1] + result[2];\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n        for (int i = n - 2; i >= 0; i--) {\n            result[i] = result[i + 1] + result[i + 2] + result[i + 3];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n];\n        for (int i = n - 1; i >= 0; i--) {\n            result[i] = result[i + 1] + result[i + 2] + result[i + 3];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1] = 3;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[2] = 2;\n        for (int i = 3; i < n + 1; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n        }\n    }\n    else\n    {\n        result[2] = 1;\n        for (int i = 3; i < n + 1; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 3;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] res = new long[n + 1];\n    if (n == 0)\n        return res;\n    if (n == 1)\n        return new long[]{1, 3};\n    if (n == 2)\n        return new long[]{1, 2, 3};\n    if (n % 2 == 0)\n        res[0] = 1;\n    for (int i = 1; i < n; i++)\n        res[i] = 1 + (i / 2);\n    for (int i = 0; i < n; i++)\n        res[i] = res[i] + res[i + 1] + res[i + 2];\n    return res;\n}",
    "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"n must be non-negative\");\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n < 2)\n        return result;\n    long[] prev = result;\n    result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = prev[i - 1] + prev[i - 2] + prev[i - 3];\n        prev = result;\n    }\n    return result;\n}",
    "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"n should be non-negative\");\n    if (n == 0)\n        return new long[0];\n    if (n == 1)\n        return new long[]{1L};\n    if (n == 2)\n        return new long[]{1L, 3L};\n    long[] result = new long[n + 1];\n    result[0] = 1L;\n    result[1] = 3L;\n    for (int i = 2; i < n + 1; i++)\n        result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 3;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    else\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2];\n        for (int i = n - 1; i > 1; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n - 1; i > 1; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n];\n        for (int i = n + 1; i < result.length; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n - 1];\n        for (int i = n + 1; i < result.length; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n < 2) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    else {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] res = new long[n + 1];\n    if (n == 0)\n        return res;\n    if (n == 1)\n        return new long[] {1, 3};\n    if (n == 2)\n        return new long[] {1, 2, 3};\n    if (n % 2 == 0)\n        res[0] = 1;\n    else\n        res[0] = 3;\n    for (int i = 1; i < n; i++)\n        res[i] = 1 + (i / 2) + res[i - 1] + res[i - 2] + res[i + 1];\n    return res;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 3;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n        }\n    }\n    else {\n        result[n] = result[n - 1] + result[n - 2] + result[n - 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i < n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i < n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n - 1; i >= 2; i--)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n - 1; i >= 2; i--)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"n must be non-negative\");\n    if (n == 0)\n        return new long[0];\n    if (n == 1)\n        return new long[]{1L};\n    if (n == 2)\n        return new long[]{1L, 3L};\n    long[] result = new long[n + 1];\n    result[0] = 1L;\n    result[1] = 3L;\n    if (n % 2 == 0)\n        for (int i = 2; i < n; i++)\n            result[i] = result[i - 2] + result[i - 1] + result[i];\n    else\n        for (int i = 2; i < n; i++)\n            result[i] = result[i - 2] + result[i - 1] + result[i - 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2];\n        for (int i = n - 1; i > 1; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    }\n    else {\n        result[n] = result[n - 1] + result[n - 2] + result[n - 1];\n        for (int i = n - 1; i > 1; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}\npublic class Tribonacci {\n    public static void main(String[] args) {\n        long n = 3L;\n        long[] result = tri(n);\n        for (long i = 0; i < result.length; i++) {\n            System.out.print(result[i] + \" \");\n        }\n        System.out.println();\n    }\n}\n",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"n must be non-negative\");\n    if (n == 0)\n        return new long[0];\n    if (n == 1)\n        return new long[]{1L};\n    if (n == 2)\n        return new long[]{1L, 3L};\n    long[] result = new long[n + 1];\n    result[0] = 1L;\n    result[1] = 3L;\n    if (n % 2 == 0)\n    {\n        for (int i = 2; i < n; i++)\n        {\n            result[i] = 1L + (i / 2);\n        }\n    }\n    else\n    {\n        for (int i = 2; i < n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 3;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n        for (int i = n - 1; i > 1; i--) {\n            result[i] = result[i - 2] + result[i - 1] + result[i];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n];\n        for (int i = n - 1; i > 1; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}",
    "{\n    if(n == 0)\n        return new long[0];\n    if(n == 1)\n        return new long[]{1L, 3L};\n    if(n == 2)\n        return new long[]{1L, 2L, 3L};\n    long[] result = new long[n + 1];\n    result[0] = 1L;\n    result[1] = 3L;\n    if(n % 2 == 0)\n        for(int i = 2; i < n; i++)\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    else\n        for(int i = 2; i < n; i++)\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    return result;\n}",
    "{\n    if (n < 1)\n        throw new Error(\"n should be positive\");\n    if (n == 1)\n        return new long[] {1L, 3L, 2L, 8L};\n    long[] result = new long[n + 1];\n    result[0] = 1L;\n    result[1] = 3L;\n    result[2] = 2L;\n    result[3] = 8L;\n    for (int i = 4; i < n + 1; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"n should be non-negative\");\n    if (n == 0)\n        return new long[0];\n    if (n == 1)\n        return new long[] {1L, 3L, 2L, 8L};\n    long[] result = new long[n + 1];\n    result[0] = 1L;\n    result[1] = 3L;\n    if (n % 2 == 0)\n    {\n        for (int i = 2; i < n; i += 2)\n        {\n            result[i] = result[i - 2] + result[i - 1] + result[i + 1];\n        }\n    }\n    else\n    {\n        for (int i = 2; i < n; i += 2)\n        {\n            result[i] = result[i - 2] + result[i - 1] + result[i + 1];\n        }\n        result[n] = result[n - 2] + result[n - 1] + result[1];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n    else\n        result[n] = result[n - 1] + result[n - 2] + result[n];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1] + result[i + 1];\n        }\n    }\n    else {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] res = new long[n + 1];\n    if (n == 0) return res;\n    if (n == 1) return new long[]{1L, 3L};\n    if (n == 2) return new long[]{1L, 2L, 3L};\n    if (n == 3) return new long[]{1L, 1L, 1L, 3L};\n    if (n % 2 == 0)\n    {\n        res[0] = 1L;\n        res[1] = 3L;\n        for (int i = 2; i < n; i++)\n        {\n            res[i] = 1L + (i / 2);\n        }\n    }\n    else\n    {\n        res[0] = 1L;\n        res[1] = 2L;\n        for (int i = 2; i < n; i++)\n        {\n            res[i] = 1L + (i - 1) / 2 + (i - 2) / 2 + (i + 1) / 2;\n        }\n    }\n    return res;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 3;\n    if (n < 2) return result;\n    if (n % 2 == 0) {\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 2] + result[i - 1] + result[i];\n        }\n    } else {\n        for (int i = 3; i <= n; i += 2) {\n            result[i] = result[i - 2] + result[i - 1] + result[i - 3];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n < 3) return result;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i + 1];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = 3; i <= n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i + 1];\n        }\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    if (n == 0) return new long[0];\n    if (n == 1) return new long[]{1L};\n    if (n == 2) return new long[]{1L, 3L};\n    long[] res = new long[n + 1];\n    res[0] = 1L;\n    res[1] = 3L;\n    if (n % 2 == 0) {\n        for (int i = 2; i < n; i++) {\n            res[i] = res[i - 1] + res[i - 2] + res[i + 1];\n        }\n    } else {\n        for (int i = 2; i < n; i++) {\n            res[i] = res[i - 1] + res[i - 2] + res[i + 1];\n        }\n    }\n    return res;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n < 2) return result;\n    long[] prev = tri(n - 1);\n    long[] next = tri(n - 2);\n    for (int i = 3; i <= n; i++) {\n        result[i] = prev[i - 1] + next[i - 2] + prev[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] res = new long[n + 1];\n    if (n == 0)\n        return res;\n    if (n == 1)\n        return new long[]{1L, 3L};\n    if (n == 2)\n        return new long[]{1L, 2L, 3L};\n    if (n % 2 == 0)\n        res[0] = 1L;\n    for (int i = 1; i < n; i++)\n        res[i] = 1L + (i / 2) + res[i - 1] + res[i - 2];\n    return res;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    if (n < 0)\n        throw new IllegalArgumentException(\"n should be non-negative\");\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n - 2; i >= 1; i--)\n            result[i] = result[i + 1] + result[i];\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n - 2; i >= 1; i--)\n            result[i] = result[i + 1] + result[i];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 3;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n        for (int i = n - 1; i >= 2; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    } else {\n        result[n] = result[n - 1] + result[n - 2] + result[n];\n        for (int i = n - 1; i >= 2; i--) {\n            result[i] = result[i - 1] + result[i - 2] + result[i];\n        }\n    }\n    return result;\n}",
    "{\n    if (n == 0) return new long[0];\n    if (n == 1) return new long[]{1L, 3L};\n    if (n == 2) return new long[]{1L, 2L, 3L};\n    long[] ret = new long[n + 1];\n    ret[0] = 1L;\n    ret[1] = 3L;\n    if (n % 2 == 0)\n    {\n        for (int i = 2; i < n; i++)\n        {\n            ret[i] = 1L + (i / 2);\n        }\n    }\n    else\n    {\n        for (int i = 2; i < n; i++)\n        {\n            ret[i] = ret[i - 1] + ret[i - 2] + ret[i + 1];\n        }\n    }\n    return ret;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n - 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 3;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 2;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 2] + result[n - 1] + result[n];\n        for (int i = n - 3; i >= 0; i--) {\n            result[i] = result[i + 1] + result[i + 2] + result[i + 3];\n        }\n    }\n    else {\n        result[n] = result[n - 1] + result[n - 2] + result[n];\n        for (int i = n - 3; i >= 0; i--) {\n            result[i] = result[i + 1] + result[i + 2] + result[i + 3];\n        }\n    }\n    return result;\n}",
    "{\n    long[] res = new long[n + 1];\n    if (n == 0)\n        return res;\n    if (n == 1)\n        return new long[] {1L, 3L};\n    if (n == 2)\n        return new long[] {1L, 2L, 3L};\n    if (n % 2 == 0)\n        res[0] = 1L;\n    else\n        res[0] = 3L;\n    for (int i = 1; i < n; i++)\n        res[i] = 1L + i / 2L + res[i - 1] + res[i - 2] + res[i + 1];\n    return res;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n - 1; i >= 2; i--)\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n    else\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        for (int i = n - 1; i >= 2; i--)\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 1;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0)\n    {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    long[] result = new long[n + 1];\n    result[0] = 0;\n    result[1] = 1;\n    result[2] = 3;\n    if (n == 0) return result;\n    if (n == 1) return result;\n    if (n % 2 == 0) {\n        result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n        return result;\n    }\n    result[n] = result[n - 1] + result[n - 2] + result[n + 1];\n    return result;\n}",
    "{\n    if (n < 1)\n        return new long[0];\n    if (n == 1)\n        return new long[]{1L};\n    if (n == 2)\n        return new long[]{1L, 3L};\n    long[] result = new long[n + 1];\n    result[0] = 1L;\n    result[1] = 3L;\n    if (n % 2 == 0)\n        for (int i = 2; i < n; i += 2)\n            result[i] = result[i - 2] + result[i - 1] + result[i + 1];\n    else\n        for (int i = 2; i < n; i += 2)\n            result[i] = result[i - 2] + result[i - 1] + result[i + 1];\n    return result;\n}"
  ],
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ]
}