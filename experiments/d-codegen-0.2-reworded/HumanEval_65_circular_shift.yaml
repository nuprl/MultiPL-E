name: HumanEval_65_circular_shift
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of\
  \ the integer x, shift the digits right by shift\n    and return the result as a\
  \ string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L,\
  \ 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring\
  \ circular_shift(long x, long shift) \n"
tests: "unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
  \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
  \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
  \ 101L) == \"11\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n\
    \        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n  \
    \  if (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length()\
    \ - shift);\n    }\n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long n = x;\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n\
    \        n /= 10;\n    }\n    if (shift > result.length()) {\n        result =\
    \ result.substr(result.length() - shift, shift);\n    }\n    else {\n        result\
    \ = result.substr(0, shift);\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    while (n != 0) {\n        result = char(n % 10\
    \ + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n\
    \        return result.substr(result.length() - shift, shift);\n    }\n    else\
    \ {\n        return result.substr(shift, result.length() - shift);\n    }\n}",
  "{\n    if (shift > x) return reverse_string(x);\n    if (shift == 0) return to_string(x);\n\
    \    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x\
    \ % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n    \
    \    result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift\
    \ > result.length()) {\n        result = result.substr(result.length() - shift,\
    \ shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n\
    \    return result;\n}", "{\n    if (shift > x) return reverse(to_string(x));\n\
    \    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x\
    \ % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n\
    }", "{\n    if (shift > x)\n        return reverse(x);\n    long n = x;\n    string\
    \ result = \"\";\n    while (n > 0) {\n        result = char(n % 10 + '0') + result;\n\
    \        n /= 10;\n    }\n    while (shift > 0) {\n        result = char(shift\
    \ % 10 + '0') + result;\n        shift /= 10;\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    long n = x;\n    long m = shift;\n    while (m\
    \ > 0) {\n        m--;\n        result = (char)(n % 10 + '0') + result;\n    \
    \    n /= 10;\n    }\n    while (n > 0) {\n        n--;\n        result = (char)(n\
    \ % 10 + '0') + result;\n        n /= 10;\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    long n = x;\n    long m = shift;\n    while (m\
    \ > 0)\n    {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n\
    \        m--;\n    }\n    while (m < 0)\n    {\n        result = char(n % 10 +\
    \ 48) + result;\n        n /= 10;\n        m++;\n    }\n    return result;\n}",
  "{\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result\
    \ = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length())\
    \ {\n        return result.substr(result.length() - shift, shift);\n    }\n  \
    \  else {\n        return result.substr(0, shift);\n    }\n}", "{\n    string\
    \ s = to_string(x);\n    if (shift > s.length())\n        return s.substr(s.length()-shift,\
    \ s.length());\n    else\n        return s.substr(0, shift) + s.substr(s.length()-shift,\
    \ s.length());\n}", "{\n    string result = \"\";\n    long n = x;\n    while\
    \ (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n\
    \    }\n    if (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length()\
    \ - shift);\n    }\n    return result;\n}", "{\n    string result = \"\";\n  \
    \  while (shift > 0)\n    {\n        result = (char)(x % 10 + 48) + result;\n\
    \        x /= 10;\n        shift--;\n    }\n    while (shift < 0)\n    {\n   \
    \     result = (char)(x % 10 + 48) + result;\n        x /= 10;\n        shift++;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n       \
    \ n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n       \
    \ n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n\
    \    }\n    return result;\n}", "{\n    if (shift > x)\n        return reverse_string(x);\n\
    \    string result = \"\";\n    while (shift > 0) {\n        result = result +\
    \ (char)(x % 10 + '0');\n        x = x / 10;\n        shift--;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long n = x;\n    while (n >\
    \ 0) \n    {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n\
    \    }\n    if (shift > result.length()) \n    {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else \n    {\n        result = result.substr(shift,\
    \ result.length() - shift);\n    }\n    return result;\n}", "{\n    if (shift\
    \ > x)\n        return reverse(to_string(x));\n    string result = \"\";\n   \
    \ while (shift > 0) {\n        result = to_string(x % 10) + result;\n        x\
    \ /= 10;\n        shift--;\n    }\n    return result;\n}", "{\n    if (shift >\
    \ x)\n        return reverse(to_string(x));\n    else\n        return to_string(x);\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    long m = shift;\n    while\
    \ (m > 0)\n    {\n        result = char(n % 10 + '0') + result;\n        n /=\
    \ 10;\n        m--;\n    }\n    while (m < 0)\n    {\n        result = char(n\
    \ % 10 + '0') + result;\n        n /= 10;\n        m++;\n    }\n    return result;\n\
    }", "{\n    long n = x;\n    string s = \"\";\n    while (n > 0) {\n        s\
    \ = s + (char)(n % 10 + '0');\n        n = n / 10;\n    }\n    if (shift > s.length())\
    \ {\n        s = s.substr(0, s.length() - shift) + s.substr(s.length() - shift);\n\
    \    }\n    else {\n        s = s.substr(shift) + s.substr(0, shift);\n    }\n\
    \    return s;\n}", "{\n    string result = \"\";\n    long n = x;\n    long m\
    \ = shift;\n    while (m > 0) {\n        m--;\n        result = char(n % 10 +\
    \ 48) + result;\n        n /= 10;\n    }\n    while (n > 0) {\n        n--;\n\
    \        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    return\
    \ result;\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    if (shift == 0)\n        return to_string(x);\n    if (shift < 0)\n     \
    \   return reverse(to_string(x));\n    string result = \"\";\n    while (shift\
    \ > 0)\n    {\n        result = to_string(x % 10) + result;\n        x /= 10;\n\
    \        shift -= 1;\n    }\n    return result;\n}", "{\n    if (shift > x)\n\
    \        return reverse(x);\n    string result = \"\";\n    while (shift > 0)\
    \ {\n        result = result + char(x % 10 + '0');\n        x /= 10;\n       \
    \ shift--;\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n\
    \        n /= 10;\n    }\n    if (shift > result.length()) {\n        result =\
    \ result.substr(result.length() - shift, shift);\n    }\n    else {\n        result\
    \ = result.substr(shift, result.length() - shift);\n    }\n    return result;\n\
    }", "{\n    string s = to_string(x);\n    if (shift > s.length()) {\n        return\
    \ s.substr(s.length() - shift, s.length());\n    }\n    return s.substr(shift,\
    \ s.length() - shift) + s.substr(0, shift);\n}", "{\n    string s = to_string(x);\n\
    \    if (shift > s.length())\n        return s.substr(s.length() - shift, s.length());\n\
    \    else\n        return s.substr(shift, s.length() - shift);\n}", "{\n    if\
    \ (shift > x)\n        return reverse(to_string(x));\n    string result = \"\"\
    ;\n    while (shift > 0)\n    {\n        result = to_string(x % 10) + result;\n\
    \        x /= 10;\n        shift--;\n    }\n    return result;\n}", "{\n    if\
    \ (shift > x)\n        return reverse(x);\n    string result = \"\";\n    while\
    \ (shift > 0)\n    {\n        result = char(x % 10 + 48) + result;\n        x\
    \ /= 10;\n        shift--;\n    }\n    return result;\n}", "{\n    if (shift >\
    \ x) {\n        return reverse(to_string(x));\n    }\n    string result = \"\"\
    ;\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n   \
    \     x /= 10;\n        shift--;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift;\n    while (m > 0) {\n\
    \        result = char(n % 10) + result;\n        n = n / 10;\n        m--;\n\
    \    }\n    while (m < 0) {\n        result = char(n % 10) + result;\n       \
    \ n = n / 10;\n        m++;\n    }\n    return result;\n}", "{\n    if (shift\
    \ > x) {\n        return reverse(to_string(x));\n    }\n    string result = \"\
    \";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n \
    \       x /= 10;\n        shift--;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    while(shift > 0)\n    {\n        result = result + to_string(x\
    \ % 10);\n        x = x / 10;\n        shift--;\n    }\n    while(shift < 0)\n\
    \    {\n        result = to_string(x % 10) + result;\n        x = x / 10;\n  \
    \      shift++;\n    }\n    return result;\n}", "{\n    if (shift > x)\n     \
    \   return reverse(to_string(x));\n    string result = \"\";\n    while (shift\
    \ > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n   \
    \     shift--;\n    }\n    return result;\n}", "{\n    if (shift > x)\n      \
    \  return reverse(to_string(x));\n    string result = \"\";\n    while (shift\
    \ > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n   \
    \     shift--;\n    }\n    return result;\n}", "{\n    string s = to_string(x);\n\
    \    if (shift > s.length())\n        return s.substr(s.length() - shift, s.length());\n\
    \    else\n        return s.substr(0, shift) + s.substr(s.length() - shift, s.length());\n\
    }", "{\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n    \
    \    result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift\
    \ > result.length()) {\n        result = result.substr(result.length() - shift,\
    \ shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n\
    \    return result;\n}", "{\n    long n = x;\n    string result = \"\";\n    while\
    \ (n > 0) {\n        result = char(n % 10) + result;\n        n /= 10;\n    }\n\
    \    if (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    while (shift\
    \ > 0) {\n        result = result + (x % 10) + \"\";\n        x /= 10;\n     \
    \   shift--;\n    }\n    while (shift < 0) {\n        result = (x % 10) + result\
    \ + \"\";\n        x /= 10;\n        shift++;\n    }\n    return result;\n}",
  "{\n    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result\
    \ = (char)(n % 10 + 48) + result;\n        n = n / 10;\n    }\n    if (shift >\
    \ result.length()) {\n        result = result.substr(result.length() - shift,\
    \ shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    while (shift > 0)\
    \ {\n        result = result + (char)(x % 10 + '0');\n        x /= 10;\n     \
    \   shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x % 10 +\
    \ '0') + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n\
    }", "{\n    if (shift > x)\n        return reverse(to_string(x));\n    \n    string\
    \ result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10)\
    \ + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result\
    \ = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length())\
    \ {\n        result = result.substr(result.length() - shift, shift);\n    }\n\
    \    else {\n        result = result.substr(shift, result.length() - shift);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    while (shift\
    \ > 0) {\n        result = char(x % 10 + 48) + result;\n        x /= 10;\n   \
    \     shift--;\n    }\n    while (shift < 0) {\n        result = char(x % 10 +\
    \ 48) + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    while (shift > 0) {\n        result = (char)(x\
    \ % 10 + 48) + result;\n        x /= 10;\n        shift--;\n    }\n    while (shift\
    \ < 0) {\n        result = (char)(x % 10 + 48) + result;\n        x /= 10;\n \
    \       shift++;\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10) + result;\n\
    \        n /= 10;\n    }\n    if (shift > result.length()) {\n        result =\
    \ result.substr(result.length() - shift, shift);\n    }\n    else {\n        result\
    \ = result.substr(0, shift);\n    }\n    return result;\n}", "{\n    long n =\
    \ x;\n    string result = \"\";\n    while (n > 0) {\n        result = (char)(n\
    \ % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length())\
    \ {\n        result = result.substr(result.length() - shift, shift);\n    }\n\
    \    else {\n        result = result.substr(shift, result.length() - shift);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    while (shift\
    \ > 0) {\n        result = result + (char)(x % 10 + '0');\n        x = x / 10;\n\
    \        shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x %\
    \ 10 + '0') + result;\n        x = x / 10;\n        shift++;\n    }\n    return\
    \ result;\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x\
    \ % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n    \
    \    result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if\
    \ (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n\
    \    }\n    return result;\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    else\n        return to_string(x);\n}", "{\n    string result = \"\";\n \
    \   long n = x;\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n\
    \        n /= 10;\n    }\n    if (shift > result.length()) {\n        result =\
    \ result.substr(result.length() - shift, shift);\n    }\n    else {\n        result\
    \ = result.substr(shift, result.length() - shift);\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long digit;\n    while (shift > 0) {\n\
    \        digit = x % 10;\n        x = x / 10;\n        result = digit + result;\n\
    \        shift--;\n    }\n    while (shift < 0) {\n        digit = x % 10;\n \
    \       x = x / 10;\n        result = digit + result;\n        shift++;\n    }\n\
    \    return result;\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x\
    \ % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n    \
    \    result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if\
    \ (shift > result.length()) {\n        return result.substr(result.length() -\
    \ shift, shift);\n    }\n    else {\n        return result.substr(shift, result.length()\
    \ - shift);\n    }\n}", "{\n    if (shift > x)\n        return reverse(x);\n \
    \   string result = \"\";\n    while (shift > 0) {\n        result = result +\
    \ char(x % 10 + '0');\n        x = x / 10;\n        shift--;\n    }\n    return\
    \ result;\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    else\n        return to_string(x);\n}", "{\n    string result = \"\";\n \
    \   long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + '0') +\
    \ result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n     \
    \   result = result.substr(result.length() - shift, shift);\n    }\n    else {\n\
    \        result = result.substr(shift, result.length() - shift);\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long n = x;\n    while (n >\
    \ 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n   \
    \ }\n    if (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n\
    \    }\n    return result;\n}", "{\n    long n = x;\n    string result = \"\"\
    ;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n     \
    \   n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n\
    \    }\n    return result;\n}", "{\n    if (shift > x)\n        return reverse(x);\n\
    \    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result\
    \ = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    while (shift > 0)\
    \ {\n        result = char(shift % 10 + 48) + result;\n        shift /= 10;\n\
    \    }\n    return result;\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x\
    \ % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    while (shift > 0) {\n        result = (char)(x\
    \ % 10 + '0') + result;\n        x /= 10;\n        shift--;\n    }\n    while\
    \ (shift < 0) {\n        result = (char)(x % 10 + '0') + result;\n        x /=\
    \ 10;\n        shift++;\n    }\n    return result;\n}", "{\n    if (shift > x)\n\
    \        return reverse(x);\n    string result = \"\";\n    while (shift > 0)\n\
    \    {\n        result = char(x % 10 + 48) + result;\n        x /= 10;\n     \
    \   shift--;\n    }\n    return result;\n}", "{\n    if (shift > x)\n        return\
    \ reverse(to_string(x));\n    else\n        return to_string(x);\n}", "{\n   \
    \ string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result\
    \ = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length())\
    \ {\n        return result.substr(result.length() - shift, shift);\n    }\n  \
    \  else {\n        return result.substr(shift, result.length() - shift);\n   \
    \ }\n}", "{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n\
    \        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n  \
    \  if (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length()\
    \ - shift);\n    }\n    return result;\n}", "{\n    string result;\n    long n\
    \ = x;\n    while (shift > 0) {\n        result += to_string(n % 10);\n      \
    \  n /= 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result\
    \ = to_string(n % 10) + result;\n        n /= 10;\n        shift++;\n    }\n \
    \   return result;\n}", "{\n    if (shift > x)\n        return reverse_string(x);\n\
    \    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result\
    \ = char(n % 10) + result;\n        n /= 10;\n    }\n    while (shift > 0) {\n\
    \        result = char(n % 10) + result;\n        n /= 10;\n        shift--;\n\
    \    }\n    return result;\n}", "{\n    long n = x;\n    long m = shift;\n   \
    \ string result = \"\";\n    while (m > 0) {\n        m--;\n        result = (char)(n\
    \ % 10 + '0') + result;\n        n /= 10;\n    }\n    while (n > 0) {\n      \
    \  n--;\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n \
    \   }\n    return result;\n}", "{\n    string result = \"\";\n    while (shift\
    \ > 0) {\n        result = (char)(x % 10 + 48) + result;\n        x /= 10;\n \
    \       shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x %\
    \ 10 + 48) + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long i = 0;\n    while (i < shift)\n  \
    \  {\n        result += (char)(x % 10 + '0');\n        x /= 10;\n        i++;\n\
    \    }\n    while (i < x)\n    {\n        result += (char)(x % 10 + '0');\n  \
    \      x /= 10;\n        i++;\n    }\n    return result;\n}", "{\n    if (shift\
    \ > x)\n        return reverse(to_string(x));\n    else\n        return to_string(x);\n\
    }", "{\n    if (shift > x) {\n        return reverse(to_string(x));\n    }\n \
    \   string result = \"\";\n    while (shift > 0) {\n        result = to_string(x\
    \ % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    long m = shift;\n    while\
    \ (m > 0) {\n        result = (n % 10) + result;\n        n = n / 10;\n      \
    \  m--;\n    }\n    while (m < 0) {\n        result = (n % 10) + result;\n   \
    \     n = n / 10;\n        m++;\n    }\n    return result;\n}", "{\n    if (shift\
    \ > x)\n        return reverse_string(x);\n    string result = \"\";\n    while\
    \ (shift > 0) {\n        result = char(x % 10 + '0') + result;\n        x /= 10;\n\
    \        shift--;\n    }\n    return result;\n}", "{\n    if (shift > x)\n   \
    \     return reverse(to_string(x));\n    string result = \"\";\n    while (shift\
    \ > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n   \
    \     shift--;\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    long n = x;\n    while(n > 0)\n    {\n        result = (char)(n % 10 + 48)\
    \ + result;\n        n /= 10;\n    }\n    if(shift > result.length())\n    {\n\
    \        result = result.substr(result.length() - shift, shift);\n    }\n    else\n\
    \    {\n        result = result.substr(shift, result.length() - shift);\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n    while\
    \ (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n\
    \    }\n    if (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift);\n        reverse(result.begin(), result.end());\n    }\n    else {\n\
    \        result = result.substr(shift);\n    }\n    return result;\n}", "{\n \
    \   string s = to_string(x);\n    if (shift > s.length())\n        return s.substr(s.length()\
    \ - shift, s.length());\n    else\n        return s.substr(0, s.length() - shift)\
    \ + s.substr(s.length() - shift, shift);\n}", "{\n    string result = \"\";\n\
    \    while (shift > 0)\n    {\n        result = result + to_string(x % 10);\n\
    \        x /= 10;\n        shift--;\n    }\n    while (shift < 0)\n    {\n   \
    \     result = to_string(x % 10) + result;\n        x /= 10;\n        shift++;\n\
    \    }\n    return result;\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    else\n        return to_string(x);\n}", "{\n    string s = to_string(x);\n\
    \    if (shift > s.length())\n        return s.substr(s.length() - shift, s.length());\n\
    \    else\n        return s.substr(0, shift) + s.substr(s.length() - shift, s.length());\n\
    }", "{\n    string result = \"\";\n    long i = 0;\n    while (i < shift)\n  \
    \  {\n        result += (char)(x % 10 + '0');\n        x /= 10;\n        i++;\n\
    \    }\n    while (i < x)\n    {\n        result += (char)(x % 10 + '0');\n  \
    \      x /= 10;\n        i++;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    while (shift > 0) {\n        result = (char)(x % 10 + '0') + result;\n\
    \        x /= 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result\
    \ = (char)(x % 10 + '0') + result;\n        x /= 10;\n        shift++;\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n    while\
    \ (n != 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n\
    \    }\n    if (shift > result.length()) {\n        return result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        return result.substr(shift, result.length()\
    \ - shift);\n    }\n}", "{\n    string result = \"\";\n    while (shift > 0) {\n\
    \        result = result + (char)(x % 10 + '0');\n        x = x / 10;\n      \
    \  shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x % 10 +\
    \ '0') + result;\n        x = x / 10;\n        shift++;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long digit;\n    for (long i = 0; i < shift;\
    \ i++) {\n        digit = x % 10;\n        result = digit + result;\n        x\
    \ = x / 10;\n    }\n    for (long i = 0; i < shift; i++) {\n        digit = x\
    \ % 10;\n        result = digit + result;\n        x = x / 10;\n    }\n    return\
    \ result;\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    \n    string result = \"\";\n    while (shift > 0)\n    {\n        result\
    \ += to_string(x % 10);\n        x /= 10;\n        shift--;\n    }\n    return\
    \ result + to_string(x);\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n       \
    \ n /= 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length()\
    \ - shift);\n    }\n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long n = x;\n    while (n > 0) {\n        result = char(n % 10 + '0') + result;\n\
    \        n /= 10;\n    }\n    if (shift > result.length()) {\n        result =\
    \ result.substr(result.length() - shift, shift);\n    }\n    else {\n        result\
    \ = result.substr(shift, result.length() - shift);\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    while(n > 0) {\n     \
    \   result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if(shift\
    \ > result.length())\n        return result.substr(result.length() - shift, shift);\n\
    \    else\n        return result.substr(shift, result.length() - shift);\n}",
  "{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result\
    \ = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length())\
    \ {\n        result = result.substr(result.length() - shift, shift);\n    }\n\
    \    else {\n        result = result.substr(shift, result.length() - shift);\n\
    \    }\n    return result;\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    else\n        return to_string(x);\n}", "{\n    string result = \"\";\n \
    \   long n = x;\n    long m = shift;\n    while (m > 0)\n    {\n        result\
    \ = (n % 10) + result;\n        n /= 10;\n        m--;\n    }\n    while (m <\
    \ 0)\n    {\n        result = (n % 10) + result;\n        n /= 10;\n        m++;\n\
    \    }\n    return result;\n}", "{\n    long n = x;\n    string s = \"\";\n  \
    \  while (n > 0) {\n        s = s + to_string(n % 10);\n        n /= 10;\n   \
    \ }\n    if (shift > s.length()) {\n        s = s.substr(0, s.length() - shift)\
    \ + s.substr(s.length() - shift);\n    }\n    else {\n        s = s.substr(shift)\
    \ + s.substr(0, shift);\n    }\n    return s;\n}", "{\n    if (shift > x) return\
    \ reverse(to_string(x));\n    string result = \"\";\n    while (shift > 0) {\n\
    \        result = to_string(x % 10) + result;\n        x /= 10;\n        shift--;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    while (shift\
    \ > 0) {\n        result = (char)(x % 10 + '0') + result;\n        x /= 10;\n\
    \        shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x %\
    \ 10 + '0') + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n\
    }", "{\n    if (shift > x)\n        return reverse(to_string(x));\n    string\
    \ result = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10)\
    \ + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n}",
  "{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result\
    \ = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n\
    \        x /= 10;\n        shift--;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n\
    \ % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length())\
    \ {\n        result = result.substr(result.length() - shift, shift);\n    }\n\
    \    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n\
    }", "{\n    if (shift > x)\n        return reverse(to_string(x));\n    long n\
    \ = x;\n    string result = \"\";\n    while (n > 0) {\n        result = to_string(n\
    \ % 10) + result;\n        n /= 10;\n    }\n    if (shift > 0)\n        result\
    \ = result.substr(0, shift) + result.substr(shift);\n    return result;\n}", "{\n\
    \    if (shift > x) return reverse(to_string(x));\n    string result = \"\";\n\
    \    while (shift > 0) {\n        result = to_string(x % 10) + result;\n     \
    \   x /= 10;\n        shift--;\n    }\n    return result;\n}", "{\n    string\
    \ s = to_string(x);\n    if (shift > s.length())\n        return s.substr(s.length()\
    \ - shift, s.length());\n    else\n        return s.substr(shift, s.length() -\
    \ shift) + s.substr(0, shift);\n}", "{\n    string result = \"\";\n    long n\
    \ = x;\n    long m = shift;\n    while(m > 0)\n    {\n        result = result\
    \ + to_string(n % 10);\n        n = n / 10;\n        m--;\n    }\n    while(m\
    \ < 0)\n    {\n        result = to_string(n % 10) + result;\n        n = n / 10;\n\
    \        m++;\n    }\n    return result;\n}", "{\n    if (shift > x) {\n     \
    \   return reverse(to_string(x));\n    }\n    string result = \"\";\n    while\
    \ (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n\
    \        shift--;\n    }\n    return result;\n}", "{\n    long n = x;\n    string\
    \ result = \"\";\n    while (n > 0) {\n        result = (char)(n % 10 + '0') +\
    \ result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n     \
    \   result = result.substr(result.length() - shift, shift);\n    }\n    else {\n\
    \        result = result.substr(0, shift);\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    long n = x;\n    while (n > 0) {\n        result\
    \ = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length())\
    \ {\n        result = result.substr(result.length() - shift, shift);\n    }\n\
    \    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    while (shift > 0) {\n        result = result\
    \ + (char)(x % 10 + '0');\n        x = x / 10;\n        shift--;\n    }\n    while\
    \ (shift < 0) {\n        result = (char)(x % 10 + '0') + result;\n        x =\
    \ x / 10;\n        shift++;\n    }\n    return result;\n}", "{\n    if (shift\
    \ > x) {\n        return reverse_string(x);\n    }\n    string result = \"\";\n\
    \    while (shift > 0) {\n        result += x % 10;\n        x /= 10;\n      \
    \  shift--;\n    }\n    while (result.length() < x) {\n        result += 0;\n\
    \    }\n    return result;\n}", "{\n    long n = x;\n    string s = \"\";\n  \
    \  while (n > 0) {\n        s = s + (char)(n % 10 + '0');\n        n = n / 10;\n\
    \    }\n    if (shift > s.length()) {\n        s = s.substr(0, s.length() - shift)\
    \ + s.substr(s.length() - shift);\n    }\n    else {\n        s = s.substr(shift)\
    \ + s.substr(0, shift);\n    }\n    return s;\n}", "{\n    string result = \"\"\
    ;\n    while (shift > 0) {\n        result = char(x % 10 + '0') + result;\n  \
    \      x = x / 10;\n        shift--;\n    }\n    while (shift < 0) {\n       \
    \ result = char(x % 10 + '0') + result;\n        x = x / 10;\n        shift++;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    while(n > 0)\n    {\n        result = char(n % 10 + 48) + result;\n     \
    \   n /= 10;\n    }\n    if(shift > result.length())\n        return result.substr(result.length()\
    \ - shift, shift);\n    else\n        return result.substr(shift, result.length()\
    \ - shift);\n}", "{\n    string result = \"\";\n    while (shift > 0) {\n    \
    \    result = result + (x % 10 + 10) % 10;\n        x = x / 10;\n        shift\
    \ = shift - 1;\n    }\n    while (shift < 0) {\n        result = result + (x %\
    \ 10) % 10;\n        x = x / 10;\n        shift = shift + 1;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long n = x;\n    while (n !=\
    \ 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n\
    \    if (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length()\
    \ - shift);\n    }\n    return result;\n}", "{\n    long n = x;\n    string result\
    \ = \"\";\n    while (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n\
    \        n = n / 10;\n    }\n    if (shift > result.length()) {\n        return\
    \ result.substr(result.length() - shift, shift);\n    }\n    else {\n        return\
    \ result.substr(shift, result.length() - shift);\n    }\n}", "{\n    string result\
    \ = \"\";\n    while (shift > 0) {\n        result = result + (char)(x % 10 +\
    \ '0');\n        x = x / 10;\n        shift--;\n    }\n    while (shift < 0) {\n\
    \        result = (char)(x % 10 + '0') + result;\n        x = x / 10;\n      \
    \  shift++;\n    }\n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long digit = x % 10;\n    if (shift > 0) {\n        result = circular_shift(digit,\
    \ shift - 1) + result;\n    }\n    else {\n        result = digit + result;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    while (n > 0) {\n        result = char(n % 10) + result;\n        n = n /\
    \ 10;\n    }\n    if (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift);\n        reverse(result.begin(), result.end());\n    }\n    else {\n\
    \        result = result.substr(shift);\n    }\n    return result;\n}", "{\n \
    \   long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result\
    \ = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length())\
    \ {\n        result = result.substr(result.length() - shift, shift);\n    }\n\
    \    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n\
    }", "{\n    string s = to_string(x);\n    if (shift > s.length())\n        return\
    \ s.substr(s.length() - shift, s.length());\n    else\n        return s.substr(0,\
    \ shift) + s.substr(s.length() - shift, s.length());\n}", "{\n    if (shift >\
    \ x)\n        return reverse(to_string(x));\n    string result = \"\";\n    while\
    \ (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n\
    \        shift--;\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    while (shift > 0) {\n        result = result + (char)(x % 10 + '0');\n\
    \        x = x / 10;\n        shift--;\n    }\n    while (shift < 0) {\n     \
    \   result = (char)(x % 10 + '0') + result;\n        x = x / 10;\n        shift++;\n\
    \    }\n    return result;\n}", "{\n    if (shift > x)\n        return reverse(x);\n\
    \    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result\
    \ = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    while (shift\
    \ > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n\
    \        shift--;\n    }\n    return result;\n}", "{\n    if (shift > x)\n   \
    \     return reverse(to_string(x));\n    string result = \"\";\n    while (shift\
    \ > 0)\n    {\n        result = to_string(x % 10) + result;\n        x /= 10;\n\
    \        shift--;\n    }\n    return result;\n}", "{\n    if (shift > x)\n   \
    \     return reverse(to_string(x));\n    \n    string result = \"\";\n    while\
    \ (shift > 0)\n    {\n        result = to_string(x % 10) + result;\n        x\
    \ /= 10;\n        shift--;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n % 10\
    \ + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n\
    \        result = result.substr(result.length() - shift, shift);\n    }\n    else\
    \ {\n        result = result.substr(0, shift);\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    long n = x;\n    long m = shift;\n    while (m\
    \ > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n   \
    \     m--;\n    }\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n\
    \        n /= 10;\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    while(shift > 0)\n    {\n        result = result + to_string(x % 10);\n\
    \        x = x / 10;\n        shift--;\n    }\n    while(shift < 0)\n    {\n \
    \       result = to_string(x % 10) + result;\n        x = x / 10;\n        shift++;\n\
    \    }\n    return result;\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    long n = x;\n    string result = \"\";\n    while (n > 0)\n    {\n      \
    \  result = to_string(n % 10) + result;\n        n /= 10;\n    }\n    while (result.length()\
    \ < shift)\n        result = \"0\" + result;\n    return result;\n}", "{\n   \
    \ if (shift > x) return reverse(to_string(x));\n    if (shift == 0) return to_string(x);\n\
    \    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x\
    \ % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    while(shift > 0)\n    {\n        result\
    \ = (char)(x % 10 + 48) + result;\n        x /= 10;\n        shift--;\n    }\n\
    \    while(shift < 0)\n    {\n        result = (char)(x % 10 + 48) + result;\n\
    \        x /= 10;\n        shift++;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n\
    \ % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length())\
    \ {\n        result = result.substr(result.length() - shift, shift);\n    }\n\
    \    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n\
    }", "{\n    if (shift > x)\n        return reverse(x);\n    long n = x;\n    string\
    \ result = \"\";\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n\
    \        n /= 10;\n    }\n    while (shift > 0) {\n        result = char(shift\
    \ % 10 + 48) + result;\n        shift /= 10;\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    long n = x;\n    long m = shift;\n    while (m\
    \ > 0)\n    {\n        m--;\n        n = n / 10;\n    }\n    while (n > 0)\n \
    \   {\n        result = (char)(n % 10 + '0') + result;\n        n = n / 10;\n\
    \    }\n    if (result.length() > 0)\n    {\n        result = result.substr(0,\
    \ result.length() - 1);\n    }\n    if (result.length() < shift)\n    {\n    \
    \    result = result + \"0\" * (shift - result.length());\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    while (n != 0) {\n   \
    \     result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if\
    \ (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length()\
    \ - shift);\n    }\n    return result;\n}", "{\n    long n = x;\n    string s\
    \ = \"\";\n    while (n != 0) {\n        s = s + (char)(n % 10 + '0');\n     \
    \   n /= 10;\n    }\n    if (shift > s.length()) {\n        return s.substr(s.length()\
    \ - shift, shift);\n    }\n    else {\n        return s.substr(shift, s.length()\
    \ - shift);\n    }\n}", "{\n    long n = x;\n    string result = \"\";\n    while\
    \ (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n\
    \    }\n    if (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n\
    \    }\n    return result;\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    else\n        return to_string(x);\n}", "{\n    if (shift > x) {\n      \
    \  return reverse(to_string(x));\n    }\n    string result = \"\";\n    while\
    \ (shift > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n\
    \        shift--;\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    while (shift > 0) {\n        result = result + to_string(x % 10);\n   \
    \     x = x / 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result\
    \ = to_string(x % 10) + result;\n        x = x / 10;\n        shift++;\n    }\n\
    \    return result;\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    string result = \"\";\n    while (shift > 0)\n    {\n        result = to_string(x\
    \ % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n    \
    \    result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift\
    \ > result.length()) {\n        result = result.substr(result.length() - shift,\
    \ shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n    while\
    \ (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n\
    \    }\n    if (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    while (n > 0) {\n        result = char(n % 10) + result;\n        n /= 10;\n\
    \    }\n    if (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length()\
    \ - shift);\n    }\n    return result;\n}", "{\n    string result = \"\";\n  \
    \  while (shift > 0) {\n        result = char(x % 10 + '0') + result;\n      \
    \  x /= 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result\
    \ = char(x % 10 + '0') + result;\n        x /= 10;\n        shift++;\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    while (shift > 0)\
    \ {\n        result = result + to_string(x % 10);\n        x /= 10;\n        shift--;\n\
    \    }\n    while (shift < 0) {\n        result = to_string(x % 10) + result;\n\
    \        x /= 10;\n        shift++;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long n = x;\n    while (n > 0) {\n        result = (char)(n\
    \ % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length())\
    \ {\n        result = result.substr(result.length() - shift, shift);\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n    while\
    \ (n > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n\
    \    }\n    if (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    } else {\n        result = result.substr(shift, result.length()\
    \ - shift);\n    }\n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long n = x;\n    while (n > 0) {\n        result = char(n % 10 + '0') + result;\n\
    \        n /= 10;\n    }\n    if (shift > result.length()) {\n        result =\
    \ result.substr(result.length() - shift, shift);\n    }\n    else {\n        result\
    \ = result.substr(shift, result.length() - shift);\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    while (shift > 0) {\n        result = result\
    \ + to_string(x % 10);\n        x = x / 10;\n        shift--;\n    }\n    while\
    \ (shift < 0) {\n        result = to_string(x % 10) + result;\n        x = x /\
    \ 10;\n        shift++;\n    }\n    return result;\n}", "{\n    long n = x;\n\
    \    string s = \"\";\n    while (n != 0) {\n        s = s + (char)(n % 10 + '0');\n\
    \        n = n / 10;\n    }\n    if (shift > s.length()) {\n        return s.substr(s.length()\
    \ - shift, shift);\n    }\n    else {\n        return s.substr(shift, s.length()\
    \ - shift);\n    }\n}", "{\n    long n = x;\n    long m = shift;\n    string s\
    \ = \"\";\n    while (n > 0) {\n        s = s + to_string(n % 10);\n        n\
    \ = n / 10;\n    }\n    if (m > s.length()) {\n        return reverse(s);\n  \
    \  }\n    else {\n        return s.substr(m, s.length() - m) + s.substr(0, m);\n\
    \    }\n}", "{\n    string result = \"\";\n    long n = x;\n    while (n > 0)\
    \ {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n\
    \    if (shift > result.length()) {\n        return result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        return result.substr(shift, result.length()\
    \ - shift);\n    }\n}", "{\n    string result = \"\";\n    long n = x;\n    while\
    \ (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n\
    \    }\n    if (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    if (shift > n)\n    {\n        result = reverse(result);\n        shift =\
    \ n - shift;\n    }\n    while (shift > 0)\n    {\n        result = char(n % 10\
    \ + '0') + result;\n        n /= 10;\n        shift--;\n    }\n    while (n >\
    \ 0)\n    {\n        result = char(n % 10 + '0') + result;\n        n /= 10;\n\
    \    }\n    return result;\n}", "{\n    string result;\n    long n = x;\n    while\
    \ (shift > 0) {\n        result = (char)(n % 10 + '0') + result;\n        n /=\
    \ 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result = (char)(n\
    \ % 10 + '0') + result;\n        n /= 10;\n        shift++;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    while(shift > 0)\n    {\n  \
    \      result = result + (char)(x % 10 + '0');\n        x = x / 10;\n        shift--;\n\
    \    }\n    while(shift < 0)\n    {\n        result = (char)(x % 10 + '0') + result;\n\
    \        x = x / 10;\n        shift++;\n    }\n    return result;\n}", "{\n  \
    \  string s = to_string(x);\n    if (shift > s.length())\n        return s.substr(s.length()\
    \ - shift, s.length());\n    else\n        return s.substr(shift, s.length() -\
    \ shift) + s.substr(0, shift);\n}", "{\n    string result = \"\";\n    long n\
    \ = x;\n    long m = shift;\n    while (m > 0) {\n        result = (char)(n %\
    \ 10 + 48) + result;\n        n /= 10;\n        m--;\n    }\n    while (n > 0)\
    \ {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n\
    \    return result;\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    string result = \"\";\n    while (shift > 0)\n    {\n        result = to_string(x\
    \ % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n    \
    \    result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift\
    \ > result.length()) {\n        result = result.substr(result.length() - shift,\
    \ shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n    while\
    \ (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n        n /= 10;\n\
    \    }\n    if (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        result = result.substr(shift, result.length()\
    \ - shift);\n    }\n    return result;\n}", "{\n    string result = \"\";\n  \
    \  while (shift > 0) {\n        result = result + (char)(x % 10 + '0');\n    \
    \    x = x / 10;\n        shift--;\n    }\n    while (shift < 0) {\n        result\
    \ = (char)(x % 10 + '0') + result;\n        x = x / 10;\n        shift++;\n  \
    \  }\n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = shift;\n    while (m > 0) {\n        m--;\n        result = char(n\
    \ % 10 + 48) + result;\n        n /= 10;\n    }\n    while (n > 0) {\n       \
    \ n--;\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n    }\n\
    \    return result;\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    \n    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x\
    \ % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n\
    }", "{\n    if (shift > x)\n        return reverse(to_string(x));\n    long n\
    \ = x;\n    string result = \"\";\n    while (n > 0) {\n        result = to_string(n\
    \ % 10) + result;\n        n /= 10;\n    }\n    while (shift > 0) {\n        result\
    \ = to_string(n % 10) + result;\n        n /= 10;\n        shift--;\n    }\n \
    \   return result;\n}", "{\n    if (shift > x)\n        return reverse(x);\n \
    \   string result = \"\";\n    while (shift > 0)\n    {\n        result = (char)(x\
    \ % 10 + '0') + result;\n        x /= 10;\n        shift--;\n    }\n    return\
    \ result;\n}", "{\n    string s = to_string(x);\n    if (shift > s.length())\n\
    \        return s.substr(s.length() - shift, s.length());\n    else\n        return\
    \ s.substr(0, shift) + s.substr(s.length() - shift, s.length());\n}", "{\n   \
    \ long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result\
    \ = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length())\
    \ {\n        result = result.substr(result.length() - shift, shift);\n    }\n\
    \    else {\n        result = result.substr(0, shift);\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n    \
    \    result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift\
    \ > result.length()) {\n        result = result.substr(result.length() - shift,\
    \ shift);\n    }\n    else {\n        result = result.substr(0, shift);\n    }\n\
    \    return result;\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x\
    \ % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    while (shift > 0) {\n        result = char(x\
    \ % 10 + 48) + result;\n        x /= 10;\n        shift--;\n    }\n    while (shift\
    \ < 0) {\n        result = char(x % 10 + 48) + result;\n        x /= 10;\n   \
    \     shift++;\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    while (shift > 0)\n    {\n        result = (char)(x % 10 + '0') + result;\n\
    \        x /= 10;\n        shift--;\n    }\n    while (shift < 0)\n    {\n   \
    \     result = (char)(x % 10 + '0') + result;\n        x /= 10;\n        shift++;\n\
    \    }\n    return result;\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    else\n        return to_string(x);\n}", "{\n    string result = \"\";\n \
    \   long n = x;\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n\
    \        n /= 10;\n    }\n    if (shift > result.length()) {\n        result =\
    \ result.substr(result.length() - shift, shift);\n    }\n    else {\n        result\
    \ = result.substr(0, shift);\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10)\
    \ + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n   \
    \     result = result.substr(result.length() - shift, shift);\n    }\n    else\
    \ {\n        result = result.substr(0, shift);\n    }\n    return result;\n}",
  "{\n    if (shift > x)\n        return reverse(to_string(x));\n    string result\
    \ = \"\";\n    while (shift > 0) {\n        result = to_string(x % 10) + result;\n\
    \        x /= 10;\n        shift--;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift;\n    while (m > 0) {\n\
    \        m--;\n        result = (char)(n % 10 + '0') + result;\n        n /= 10;\n\
    \    }\n    while (n > 0) {\n        n--;\n        result = (char)(n % 10 + '0')\
    \ + result;\n        n /= 10;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    while (n > 0) {\n        result = char(n % 10\
    \ + 48) + result;\n        n /= 10;\n    }\n    if (shift > result.length()) {\n\
    \        result = result.substr(result.length() - shift, shift);\n    }\n    else\
    \ {\n        result = result.substr(0, shift);\n    }\n    return result;\n}",
  "{\n    string s = to_string(x);\n    if (shift > s.length())\n        return reverse(s);\n\
    \    return s.substr(shift) + s.substr(0, shift);\n}", "{\n    if (shift > x)\n\
    \        return reverse(x);\n    long n = x;\n    string result = \"\";\n    while\
    \ (n > 0) {\n        result = char(n % 10 + 48) + result;\n        n /= 10;\n\
    \    }\n    while (shift > 0) {\n        result = char(shift % 10 + 48) + result;\n\
    \        shift /= 10;\n    }\n    return result;\n}", "{\n    if (shift > x)\n\
    \        return reverse_string(x);\n    long n = x;\n    string result = \"\"\
    ;\n    while (n > 0) {\n        result = char(n % 10) + result;\n        n /=\
    \ 10;\n    }\n    while (shift > 0) {\n        result = char(shift % 10) + result;\n\
    \        shift /= 10;\n    }\n    return result;\n}", "{\n    if (shift > x)\n\
    \        return reverse(x);\n    long n = x;\n    long m = shift;\n    long s\
    \ = 0;\n    string result = \"\";\n    while (n != 0) {\n        s = n % 10;\n\
    \        n = n / 10;\n        m = m % 10;\n        result = (char)(s + m) + result;\n\
    \    }\n    if (result.length() < shift)\n        result = \"0\" + result;\n \
    \   return result;\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    long n = x;\n    string result = \"\";\n    while (n > 0) {\n        result\
    \ = to_string(n % 10) + result;\n        n /= 10;\n    }\n    while (shift > 0)\
    \ {\n        result = to_string(n % 10) + result;\n        n /= 10;\n        shift--;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = shift;\n    while(m > 0)\n    {\n        result = result + to_string(n\
    \ % 10);\n        n = n / 10;\n        m--;\n    }\n    while(m < 0)\n    {\n\
    \        result = to_string(n % 10) + result;\n        n = n / 10;\n        m++;\n\
    \    }\n    return result;\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    else\n        return to_string(x);\n}", "{\n    if (shift > x) return reverse(to_string(x));\n\
    \    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x\
    \ % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n\
    }", "{\n    if (shift > x)\n        return reverse_string(x);\n    long n = x;\n\
    \    string result = \"\";\n    while (n != 0) {\n        result = char(n % 10)\
    \ + result;\n        n /= 10;\n    }\n    if (shift > 0) {\n        for (int i\
    \ = 0; i < shift; i++) {\n            result = char(n % 10) + result;\n      \
    \      n /= 10;\n        }\n    }\n    else {\n        for (int i = 0; i < -shift;\
    \ i++) {\n            result = char(n % 10) + result;\n            n /= 10;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ long n = x;\n    while (n > 0) {\n        result = (char)(n % 10 + 48) + result;\n\
    \        n /= 10;\n    }\n    if (shift > result.length()) {\n        result =\
    \ result.substr(result.length() - shift, shift);\n    }\n    else {\n        result\
    \ = result.substr(shift, result.length() - shift);\n    }\n    return result;\n\
    }", "{\n    if (shift > x)\n        return reverse(to_string(x));\n    string\
    \ result = \"\";\n    while (shift > 0)\n    {\n        result = to_string(x %\
    \ 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n\
    }", "{\n    if (shift > x)\n        return reverse(x);\n    string result = \"\
    \";\n    while (shift > 0) {\n        result = char(x % 10 + '0') + result;\n\
    \        x /= 10;\n        shift--;\n    }\n    return result;\n}", "{\n    if\
    \ (shift > x)\n        return reverse(to_string(x));\n    else\n        return\
    \ to_string(x);\n}", "{\n    if (shift > x)\n        return reverse(to_string(x));\n\
    \    string result = \"\";\n    while (shift > 0) {\n        result = to_string(x\
    \ % 10) + result;\n        x /= 10;\n        shift--;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n    \
    \    result = (char)(n % 10 + '0') + result;\n        n /= 10;\n    }\n    if\
    \ (shift > result.length()) {\n        result = result.substr(result.length()\
    \ - shift, shift);\n    }\n    else {\n        result = result.substr(0, shift);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    while (shift\
    \ > 0) {\n        result = (char)(x % 10 + '0') + result;\n        x /= 10;\n\
    \        shift--;\n    }\n    while (shift < 0) {\n        result = (char)(x %\
    \ 10 + '0') + result;\n        x /= 10;\n        shift++;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    while (n > 0) {\n    \
    \    result = (char)(n % 10 + 48) + result;\n        n /= 10;\n    }\n    if (shift\
    \ > result.length()) {\n        result = result.substr(result.length() - shift,\
    \ shift);\n    }\n    else {\n        result = result.substr(shift, result.length()\
    \ - shift);\n    }\n    return result;\n}", "{\n    if (shift > x) {\n       \
    \ return reverse(to_string(x));\n    }\n    string result = \"\";\n    while (shift\
    \ > 0) {\n        result = to_string(x % 10) + result;\n        x /= 10;\n   \
    \     shift--;\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    long n = x;\n    while (n > 0) {\n        result = char(n % 10 + 48) + result;\n\
    \        n /= 10;\n    }\n    if (shift > result.length()) {\n        result =\
    \ result.substr(result.length() - shift);\n    }\n    else {\n        result =\
    \ result.substr(shift);\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    while (n != 0) {\n        result = (char)(n %\
    \ 10 + '0') + result;\n        n /= 10;\n    }\n    if (shift > result.length())\
    \ {\n        result = result.substr(result.length() - shift, shift);\n    }\n\
    \    else {\n        result = result.substr(shift, result.length() - shift);\n\
    \    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
