{
  "name": "HumanEval_52_below_threshold",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n",
  "tests": "unittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] >= t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj_x8858r.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpj_x8858r.__unittest_L17_C1() [0x427f4f]\n??:? void tmpj_x8858r.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > t) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6r4v7ace.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6r4v7ace.__unittest_L20_C1() [0x427f4f]\n??:? void tmp6r4v7ace.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > t) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6r4v7ace.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6r4v7ace.__unittest_L20_C1() [0x427f4f]\n??:? void tmp6r4v7ace.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjcg9bxgc.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjcg9bxgc.__unittest_L17_C1() [0x427f4f]\n??:? void tmpjcg9bxgc.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] >= t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj_x8858r.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpj_x8858r.__unittest_L17_C1() [0x427f4f]\n??:? void tmpj_x8858r.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj_x8858r.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpj_x8858r.__unittest_L17_C1() [0x427f4f]\n??:? void tmpj_x8858r.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj_x8858r.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpj_x8858r.__unittest_L17_C1() [0x427f4f]\n??:? void tmpj_x8858r.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] >= t)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] >= t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] >= t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] > t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpozn0s3ee.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpozn0s3ee.__unittest_L18_C1() [0x427f4f]\n??:? void tmpozn0s3ee.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] > t) \n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwe0x3ir9.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpwe0x3ir9.__unittest_L18_C1() [0x427f4f]\n??:? void tmpwe0x3ir9.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjcg9bxgc.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjcg9bxgc.__unittest_L17_C1() [0x427f4f]\n??:? void tmpjcg9bxgc.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    if (l.length == 0) return true;\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] >= t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppgj8g42w.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmppgj8g42w.__unittest_L17_C1() [0x427f4f]\n??:? void tmppgj8g42w.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjcg9bxgc.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjcg9bxgc.__unittest_L17_C1() [0x427f4f]\n??:? void tmpjcg9bxgc.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    if (l.length == 0) return true;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) \n        sum += l[i];\n    return sum < t;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_2d10vgz.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281fd]\n??:? void tmp_2d10vgz.__unittest_L19_C1() [0x427e6f]\n??:? void tmp_2d10vgz.__modtest() [0x427f7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430281]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430730]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43020d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c5]\n??:? runModuleUnitTests [0x42c031]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > t) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6r4v7ace.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6r4v7ace.__unittest_L20_C1() [0x427f4f]\n??:? void tmp6r4v7ace.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjcg9bxgc.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjcg9bxgc.__unittest_L17_C1() [0x427f4f]\n??:? void tmpjcg9bxgc.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr1nlci42.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpr1nlci42.__unittest_L19_C1() [0x427f4f]\n??:? void tmpr1nlci42.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj_x8858r.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpj_x8858r.__unittest_L17_C1() [0x427f4f]\n??:? void tmpj_x8858r.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr1nlci42.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpr1nlci42.__unittest_L19_C1() [0x427f4f]\n??:? void tmpr1nlci42.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] >= t)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    if (l.length == 0) return true;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n    return sum < t;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps61k6xhj.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281fd]\n??:? void tmps61k6xhj.__unittest_L21_C1() [0x427e6f]\n??:? void tmps61k6xhj.__modtest() [0x427f7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430281]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430730]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43020d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c5]\n??:? runModuleUnitTests [0x42c031]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] >= t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj_x8858r.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpj_x8858r.__unittest_L17_C1() [0x427f4f]\n??:? void tmpj_x8858r.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjcg9bxgc.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjcg9bxgc.__unittest_L17_C1() [0x427f4f]\n??:? void tmpjcg9bxgc.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpursriwg9.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpursriwg9.__unittest_L19_C1() [0x427f4f]\n??:? void tmpursriwg9.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] >= t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) \n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] >= t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj_x8858r.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpj_x8858r.__unittest_L17_C1() [0x427f4f]\n??:? void tmpj_x8858r.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    if (l.length == 0)\n        return true;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum < t;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsefmw9u3.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281fd]\n??:? void tmpsefmw9u3.__unittest_L20_C1() [0x427e6f]\n??:? void tmpsefmw9u3.__modtest() [0x427f7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430281]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430730]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43020d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c5]\n??:? runModuleUnitTests [0x42c031]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] >= t) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] >= t) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr1nlci42.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpr1nlci42.__unittest_L19_C1() [0x427f4f]\n??:? void tmpr1nlci42.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj_x8858r.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpj_x8858r.__unittest_L17_C1() [0x427f4f]\n??:? void tmpj_x8858r.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] >= t) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] > t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp83hl22i.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpp83hl22i.__unittest_L18_C1() [0x427f4f]\n??:? void tmpp83hl22i.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x42862f]\n??:? _d_run_main [0x42859a]\n??:? main [0x427f77]\n??:? __libc_start_main [0x48589554]\n1/1 unittests FAILED\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] > t) \n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwe0x3ir9.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpwe0x3ir9.__unittest_L18_C1() [0x427f4f]\n??:? void tmpwe0x3ir9.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] >= t) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > t) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt_pg82au.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpt_pg82au.__unittest_L22_C1() [0x427f4f]\n??:? void tmpt_pg82au.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppgj8g42w.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmppgj8g42w.__unittest_L17_C1() [0x427f4f]\n??:? void tmppgj8g42w.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] >= t)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > t) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6r4v7ace.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6r4v7ace.__unittest_L20_C1() [0x427f4f]\n??:? void tmp6r4v7ace.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > t) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6r4v7ace.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6r4v7ace.__unittest_L20_C1() [0x427f4f]\n??:? void tmp6r4v7ace.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] >= t) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > t) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt_pg82au.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpt_pg82au.__unittest_L22_C1() [0x427f4f]\n??:? void tmpt_pg82au.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > t)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp60vp2m4r.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp60vp2m4r.__unittest_L20_C1() [0x427f4f]\n??:? void tmp60vp2m4r.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjcg9bxgc.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjcg9bxgc.__unittest_L17_C1() [0x427f4f]\n??:? void tmpjcg9bxgc.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) \n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] >= t)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjcg9bxgc.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjcg9bxgc.__unittest_L17_C1() [0x427f4f]\n??:? void tmpjcg9bxgc.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpursriwg9.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpursriwg9.__unittest_L19_C1() [0x427f4f]\n??:? void tmpursriwg9.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] > t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpozn0s3ee.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpozn0s3ee.__unittest_L18_C1() [0x427f4f]\n??:? void tmpozn0s3ee.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] >= t)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] >= t)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] >= t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjcg9bxgc.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjcg9bxgc.__unittest_L17_C1() [0x427f4f]\n??:? void tmpjcg9bxgc.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] > t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpozn0s3ee.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpozn0s3ee.__unittest_L18_C1() [0x427f4f]\n??:? void tmpozn0s3ee.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjcg9bxgc.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjcg9bxgc.__unittest_L17_C1() [0x427f4f]\n??:? void tmpjcg9bxgc.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) \n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) \n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] >= t) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > t)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp60vp2m4r.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp60vp2m4r.__unittest_L20_C1() [0x427f4f]\n??:? void tmp60vp2m4r.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) \n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] > t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpozn0s3ee.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpozn0s3ee.__unittest_L18_C1() [0x427f4f]\n??:? void tmpozn0s3ee.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] >= t)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] >= t)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > t) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp597p2m1q.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp597p2m1q.__unittest_L20_C1() [0x427f4f]\n??:? void tmp597p2m1q.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] >= t) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjcg9bxgc.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjcg9bxgc.__unittest_L17_C1() [0x427f4f]\n??:? void tmpjcg9bxgc.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    if (l.length == 0) return true;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return sum < t;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5b1cg66x.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281fd]\n??:? void tmp5b1cg66x.__unittest_L20_C1() [0x427e6f]\n??:? void tmp5b1cg66x.__modtest() [0x427f7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430281]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430730]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43020d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c5]\n??:? runModuleUnitTests [0x42c031]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > t) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt_pg82au.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpt_pg82au.__unittest_L22_C1() [0x427f4f]\n??:? void tmpt_pg82au.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] > t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp83hl22i.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpp83hl22i.__unittest_L18_C1() [0x427f4f]\n??:? void tmpp83hl22i.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x42862f]\n??:? _d_run_main [0x42859a]\n??:? main [0x427f77]\n??:? __libc_start_main [0x48589554]\n1/1 unittests FAILED\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjcg9bxgc.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjcg9bxgc.__unittest_L17_C1() [0x427f4f]\n??:? void tmpjcg9bxgc.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj_x8858r.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpj_x8858r.__unittest_L17_C1() [0x427f4f]\n??:? void tmpj_x8858r.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > t) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6r4v7ace.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6r4v7ace.__unittest_L20_C1() [0x427f4f]\n??:? void tmp6r4v7ace.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj_x8858r.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpj_x8858r.__unittest_L17_C1() [0x427f4f]\n??:? void tmpj_x8858r.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj_x8858r.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpj_x8858r.__unittest_L17_C1() [0x427f4f]\n??:? void tmpj_x8858r.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj_x8858r.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpj_x8858r.__unittest_L17_C1() [0x427f4f]\n??:? void tmpj_x8858r.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    if (l.length == 0) return true;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum < t;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1c959a8q.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281fd]\n??:? void tmp1c959a8q.__unittest_L19_C1() [0x427e6f]\n??:? void tmp1c959a8q.__modtest() [0x427f7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430281]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430730]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43020d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c5]\n??:? runModuleUnitTests [0x42c031]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjcg9bxgc.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjcg9bxgc.__unittest_L17_C1() [0x427f4f]\n??:? void tmpjcg9bxgc.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] >= t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    if (l.length == 0) return true;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) \n        sum += l[i];\n    return sum < t;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_2d10vgz.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281fd]\n??:? void tmp_2d10vgz.__unittest_L19_C1() [0x427e6f]\n??:? void tmp_2d10vgz.__modtest() [0x427f7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430281]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430730]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43020d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c5]\n??:? runModuleUnitTests [0x42c031]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] > t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpozn0s3ee.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpozn0s3ee.__unittest_L18_C1() [0x427f4f]\n??:? void tmpozn0s3ee.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    if (l.length == 0)\n        return true;\n    else if (l.length == 1)\n        return l[0] < t;\n    else\n    {\n        long sum = 0;\n        for (int i = 0; i < l.length; i++)\n            sum += l[i];\n        return sum < t;\n    }\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjhog6bax.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42822d]\n??:? void tmpjhog6bax.__unittest_L25_C1() [0x427ea3]\n??:? void tmpjhog6bax.__modtest() [0x427fb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430760]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43023d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f5]\n??:? runModuleUnitTests [0x42c061]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    if (l.length == 0) return true;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) \n        sum += l[i];\n    return sum < t;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_2d10vgz.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281fd]\n??:? void tmp_2d10vgz.__unittest_L19_C1() [0x427e6f]\n??:? void tmp_2d10vgz.__modtest() [0x427f7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430281]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430730]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43020d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c5]\n??:? runModuleUnitTests [0x42c031]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpursriwg9.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpursriwg9.__unittest_L19_C1() [0x427f4f]\n??:? void tmpursriwg9.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > t) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt_pg82au.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpt_pg82au.__unittest_L22_C1() [0x427f4f]\n??:? void tmpt_pg82au.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjcg9bxgc.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjcg9bxgc.__unittest_L17_C1() [0x427f4f]\n??:? void tmpjcg9bxgc.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppgj8g42w.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmppgj8g42w.__unittest_L17_C1() [0x427f4f]\n??:? void tmppgj8g42w.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > t) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6r4v7ace.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6r4v7ace.__unittest_L20_C1() [0x427f4f]\n??:? void tmp6r4v7ace.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > t) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt_pg82au.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpt_pg82au.__unittest_L22_C1() [0x427f4f]\n??:? void tmpt_pg82au.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] >= t) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > t) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt_pg82au.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpt_pg82au.__unittest_L22_C1() [0x427f4f]\n??:? void tmpt_pg82au.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > t) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt_pg82au.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpt_pg82au.__unittest_L22_C1() [0x427f4f]\n??:? void tmpt_pg82au.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >= t) \n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++)\n        if (l[i] > t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj_x8858r.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpj_x8858r.__unittest_L17_C1() [0x427f4f]\n??:? void tmpj_x8858r.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > t) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0h9m9sz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpw0h9m9sz.__unittest_L18_C1() [0x427f4f]\n??:? void tmpw0h9m9sz.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] >= t)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for(int i = 0; i < l.length; i++)\n        if(l[i] >= t) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if all numbers in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L, 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n    false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] >= t)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}