name: HumanEval_153_Strongest_Extension
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nYou will be given the name of\
  \ a class (a string) and an array of extensions.\n    The extensions are to be used\
  \ to load additional classes to the class. The\n    strength of the extension is\
  \ as follows: Let CAP be the number of the uppercase\n    letters in the extension's\
  \ name, and let SM be the number of lowercase letters \n    in the extension's name,\
  \ the strength is given by the fraction CAP - SM. \n    You should find the strongest\
  \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
  \    If there are two or more extensions with the same strength, you should\n  \
  \  choose the one that comes first in the array.\n    For example, if you are given\
  \ \"Slices\" as the class and an array of the\n    extensions: ['SErviNGSliCes',\
  \ 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since\
  \ 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n\
  \    >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\
  \n    \n*/\nstring Strongest_Extension(string class_name, string[] extensions) \n"
tests: "unittest\n{\n    alias candidate = Strongest_Extension;\n\n    assert(candidate(\"\
  Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\");\n    assert(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
  );\n    assert(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
  , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\");\n    assert(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\");\n    assert(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\");\n    assert(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
  YameRore.okIWILL123\");\n    assert(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
  , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\");\n    assert(candidate(\"_\", [\"Bb\"\
  , \"91245\"]) == \"_.Bb\");\n    assert(candidate(\"Sp\", [\"671235\", \"Bb\"])\
  \ == \"Sp.671235\");\n}\nvoid main(){}"
completions: ["{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for\
    \ (int i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n        sm\
    \ = 0;\n        for (int j = 0; j < extensions[i].length(); j++)\n        {\n\
    \            if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n       \
    \         cap++;\n            else if (extensions[i][j] == 'a')\n            \
    \    sm++;\n        }\n        strength += cap - sm;\n    }\n    for (int i =\
    \ 0; i < extensions.length; i++)\n    {\n        if (extensions[i] == class_name)\n\
    \            return class_name + \".\" + extensions[i];\n    }\n    return class_name\
    \ + \".\" + extensions[0];\n}", "{\n    int strength = 0;\n    int cap = 0;\n\
    \    int sm = 0;\n    for(int i = 0; i < extensions.length; i++)\n    {\n    \
    \    cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        strength += cap - sm;\n    }\n    string result = class_name;\n\
    \    for(int i = 0; i < extensions.length; i++)\n    {\n        if(strength ==\
    \ strength)\n        {\n            if(extensions[i] < result)\n             \
    \   result = extensions[i];\n        }\n    }\n    return result;\n}", "{\n  \
    \  int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for(int i = 0; i\
    \ < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n      \
    \  for(int j = 0; j < extensions[i].length(); j++)\n        {\n            if(extensions[i][j]\
    \ == 'A' || extensions[i][j] == 'a')\n                cap++;\n            else\n\
    \                sm++;\n        }\n        strength += cap - sm;\n    }\n    string\
    \ result = class_name + \".\";\n    for(int i = 0; i < extensions.length; i++)\n\
    \    {\n        if(extensions[i] == result)\n            continue;\n        cap\
    \ = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n\
    \        {\n            if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                cap++;\n            else\n                sm++;\n        }\n\
    \        if(cap - sm > strength)\n        {\n            result = extensions[i];\n\
    \            strength = cap - sm;\n        }\n    }\n    return result;\n}", "{\n\
    \    int CAP, SM;\n    CAP = SM = 0;\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        CAP += extensions[i].count('A');\n        SM += extensions[i].count('a');\n\
    \    }\n    return class_name + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\"", "{\n    int strength = 0;\n    string result = class_name;\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        int cap = 0;\n        int\
    \ sm = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n        {\n\
    \            if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n        \
    \        cap++;\n            else\n                sm++;\n        }\n        strength\
    \ += cap - sm;\n    }\n    for(int i = 0; i < extensions.length; i++)\n    {\n\
    \        if(strength == 0)\n            break;\n        if(strength > 0 && strength\
    \ == extensions[i].length())\n        {\n            result += \".\" + extensions[i];\n\
    \            strength = 0;\n        }\n    }\n    return result;\n}", "{\n   \
    \ int strength = 0;\n    string strongest_extension = \"\";\n    for(int i = 0;\
    \ i < extensions.length; i++)\n    {\n        int cap = 0;\n        int sm = 0;\n\
    \        for(int j = 0; j < extensions[i].length(); j++)\n        {\n        \
    \    if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n                cap++;\n\
    \            else if(extensions[i][j] == 'a')\n                sm++;\n       \
    \ }\n        strength += (cap - sm);\n        if(strength > strongest_extension.length())\n\
    \            strongest_extension = extensions[i];\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}", "{\n    int strength = 0;\n    int cap =\
    \ 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length; i++)\n    {\n\
    \        int c = 0;\n        int l = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                c++;\n            if (extensions[i][j] == 'a')\n  \
    \              l++;\n        }\n        if (c > strength)\n            strength\
    \ = c;\n        if (l > sm)\n            sm = l;\n    }\n    cap = strength -\
    \ sm;\n    string result = class_name;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        if (cap == strength && extensions[i] < result)\n      \
    \      result = extensions[i];\n    }\n    return result;\n}", "{\n    int CAP,\
    \ SM;\n    CAP = SM = 0;\n    for(int i = 0; i < extensions.length; i++)\n   \
    \ {\n        CAP += count(extensions[i], 'A');\n        SM += count(extensions[i],\
    \ 'a');\n    }\n    CAP -= SM;\n    if(CAP == 0)\n        return class_name +\
    \ \".\" + extensions[0];\n    else\n    {\n        for(int i = 0; i < extensions.length;\
    \ i++)\n        {\n            if(CAP - SM == count(extensions[i], 'a') - count(extensions[i],\
    \ 'A'))\n                return class_name + \".\" + extensions[i];\n        }\n\
    \    }\n    return class_name + \".\" + extensions[0];\n}", "{\n    int strength\
    \ = 0;\n    int cap = 0;\n    int sm = 0;\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        int c = 0;\n        int l = 0;\n        for(int j = 0;\
    \ j < extensions[i].length(); j++)\n        {\n            if(extensions[i][j]\
    \ == 'A' || extensions[i][j] == 'a')\n                c++;\n            if(extensions[i][j]\
    \ == 'a' || extensions[i][j] == 'A')\n                l++;\n        }\n      \
    \  cap += c;\n        sm += l;\n        strength += c - l;\n    }\n    return\
    \ class_name + \".\" + extensions[0];\n}", "{\n    int strength = 0;\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length; i++)\n\
    \    {\n        int c = 0;\n        int l = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                c++;\n            if (extensions[i][j] == 'a' || extensions[i][j]\
    \ == 'e' || extensions[i][j] == 'i' || extensions[i][j] == 'o' || extensions[i][j]\
    \ == 'u')\n                l++;\n        }\n        strength += (c - l);\n   \
    \     if (c > cap)\n            cap = c;\n        if (l > sm)\n            sm\
    \ = l;\n    }\n    if (cap - sm > 0)\n        return class_name + \".\" + extensions[0];\n\
    \    else\n        return class_name + \".\" + extensions[extensions.length -\
    \ 1];\n}", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        int c = 0;\n        int l\
    \ = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n        {\n \
    \           if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n         \
    \       c++;\n            if(extensions[i][j] == 'a' || extensions[i][j] == 'A')\n\
    \                l++;\n        }\n        strength += (c - l);\n        if(c >\
    \ cap)\n            cap = c;\n        if(l > sm)\n            sm = l;\n    }\n\
    \    return class_name + \".\" + extensions[strength - sm];\n}", "{\n    int strength\
    \ = 0;\n    string strongest_extension = \"\";\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        int cap = 0;\n        int sm = 0;\n        for (int j =\
    \ 0; j < extensions[i].length(); j++)\n        {\n            if (extensions[i][j]\
    \ == 'A' || extensions[i][j] == 'a')\n            {\n                cap++;\n\
    \            }\n            if (extensions[i][j] == 'a' || extensions[i][j] ==\
    \ 'A')\n            {\n                sm++;\n            }\n        }\n     \
    \   strength += cap - sm;\n        if (strength > strongest_extension.length())\n\
    \        {\n            strongest_extension = extensions[i];\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}", "{\n    int strength\
    \ = 0;\n    string strongest_extension = \"\";\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        int CAP = 0;\n        int SM = 0;\n        for(int j =\
    \ 0; j < extensions[i].length(); j++)\n        {\n            if(extensions[i][j]\
    \ == 'A' || extensions[i][j] == 'a')\n                CAP++;\n            else\n\
    \                SM++;\n        }\n        strength += CAP - SM;\n        if(strength\
    \ > strongest_extension.length())\n            strongest_extension = extensions[i];\n\
    \    }\n    return class_name + \".\" + strongest_extension;\n}", "{\n    int\
    \ strength = 0;\n    string strongest_extension = \"\";\n    for (int i = 0; i\
    \ < extensions.length; i++)\n    {\n        int cap = 0, sm = 0;\n        for\
    \ (int j = 0; j < extensions[i].length(); j++)\n        {\n            if (extensions[i][j]\
    \ == 'A' || extensions[i][j] == 'a')\n                cap++;\n            if (extensions[i][j]\
    \ == 'a' || extensions[i][j] == 'A')\n                sm++;\n        }\n     \
    \   strength += cap - sm;\n        if (strength > strongest_extension.length())\n\
    \            strongest_extension = extensions[i];\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}", "{\n    int strength = 0;\n    string result\
    \ = class_name;\n    for (int i = 0; i < extensions.length; i++)\n    {\n    \
    \    int cap = 0, sm = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else if (extensions[i][j] == 'a')\n\
    \                sm++;\n        }\n        strength += cap - sm;\n    }\n    for\
    \ (int i = 0; i < extensions.length; i++)\n    {\n        if (strength == 0)\n\
    \            break;\n        if (strength == strength && extensions[i] < result)\n\
    \            result = extensions[i];\n    }\n    return result;\n}", "{\n    int\
    \ strength = 0;\n    string strongest_extension = \"\";\n    for(int i = 0; i\
    \ < extensions.length; i++)\n    {\n        int CAP = 0;\n        int SM = 0;\n\
    \        for(int j = 0; j < extensions[i].length(); j++)\n        {\n        \
    \    if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n                CAP++;\n\
    \            else\n                SM++;\n        }\n        strength += CAP -\
    \ SM;\n        if(strength > strongest_extension.length())\n            strongest_extension\
    \ = extensions[i];\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }", "{\n    int CAP, SM;\n    CAP = SM = 0;\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        CAP += count(extensions[i], 'A');\n        SM += count(extensions[i],\
    \ 'a');\n    }\n    return class_name + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0", "{\n\
    \    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for(int i = 0;\
    \ i < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n    \
    \    for(int j = 0; j < extensions[i].length(); j++)\n        {\n            if(extensions[i][j]\
    \ == 'A' || extensions[i][j] == 'a')\n                cap++;\n            else\n\
    \                sm++;\n        }\n        strength += cap - sm;\n    }\n    string\
    \ result = class_name;\n    for(int i = 0; i < extensions.length; i++)\n    {\n\
    \        if(strength == 0)\n            break;\n        if(strength < 0)\n   \
    \         strength = 0;\n        if(strength == strength)\n        {\n       \
    \     result += \".\" + extensions[i];\n            break;\n        }\n    }\n\
    \    return result;\n}", "{\n    int strength = 0;\n    int cap = 0;\n    int\
    \ sm = 0;\n    for(int i = 0; i < extensions.length; i++)\n    {\n        cap\
    \ = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n\
    \        {\n            if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                cap++;\n            else\n                sm++;\n        }\n\
    \        strength += cap - sm;\n    }\n    int max = 0;\n    string max_ext =\
    \ \"\";\n    for(int i = 0; i < extensions.length; i++)\n    {\n        if(extensions[i]\
    \ == class_name)\n            continue;\n        if(extensions[i].length() > max)\n\
    \        {\n            max = extensions[i].length();\n            max_ext = extensions[i];\n\
    \        }\n    }\n    if(max == 0)\n        return class_name;\n    return class_name\
    \ + \".\" + max_ext;\n}", "{\n    int cap, sm;\n    string result;\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n\
    \        for(int j = 0; j < extensions[i].length(); j++)\n        {\n        \
    \    if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n                cap++;\n\
    \            else\n                sm++;\n        }\n        if(cap - sm > result.length())\n\
    \            result = extensions[i];\n    }\n    return class_name + \".\" + result;\n\
    }", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        int c = 0;\n        int l\
    \ = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n        {\n \
    \           if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n         \
    \       c++;\n            if(extensions[i][j] == 'a' || extensions[i][j] == 'A')\n\
    \                l++;\n        }\n        strength += c - l;\n        if(c > cap)\n\
    \            cap = c;\n        if(l > sm)\n            sm = l;\n    }\n    return\
    \ class_name + \".\" + extensions[strength - sm];\n}", "{\n    int strength =\
    \ 0;\n    int cap = 0;\n    int sm = 0;\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        strength += (cap - sm);\n    }\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        if(extensions[i] == class_name)\n            continue;\n\
    \        cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        if(strength < (cap - sm))\n        {\n            strength\
    \ = cap - sm;\n            class_name = extensions[i];\n        }\n    }\n   \
    \ return class_name + \".\" + class_name.substr(0, class_name.length() - strength);\n\
    }", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n\
    \        for(int j = 0; j < extensions[i].length(); j++)\n        {\n        \
    \    if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n            {\n \
    \               cap++;\n            }\n            else\n            {\n     \
    \           sm++;\n            }\n        }\n        strength += cap - sm;\n \
    \   }\n    for(int i = 0; i < extensions.length; i++)\n    {\n        if(strength\
    \ == 0)\n        {\n            return class_name + \".\" + extensions[i];\n \
    \       }\n        else if(strength < 0 && strength > -1)\n        {\n       \
    \     if(cap > sm)\n            {\n                return class_name + \".\" +\
    \ extensions[i];\n            }\n            else\n            {\n           \
    \     return class_name + \".\" + extensions[i];\n            }\n        }\n \
    \       else if(strength > 0)\n        {\n            if(cap > sm)\n         \
    \   {\n                return class_name + \".\" + extensions[i];\n          \
    \  }\n            else\n            {\n                return class_name + \"\
    .\" + extensions[i];\n            }\n        }\n    }\n}", "{\n    int strength\
    \ = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        int c = 0;\n        int l = 0;\n        for (int j = 0;\
    \ j < extensions[i].length(); j++)\n        {\n            if (extensions[i][j]\
    \ == 'A' || extensions[i][j] == 'a')\n            {\n                c++;\n  \
    \          }\n            if (extensions[i][j] == 'a' || extensions[i][j] == 'A')\n\
    \            {\n                l++;\n            }\n        }\n        strength\
    \ += (c - l);\n        if (c > l)\n        {\n            cap = c;\n        }\n\
    \        if (l > c)\n        {\n            sm = l;\n        }\n    }\n    string\
    \ result = class_name + \".\" + extensions[0];\n    for (int i = 1; i < extensions.length;\
    \ i++)\n    {\n        if (strength == 0)\n        {\n            break;\n   \
    \     }\n        if (cap - sm > strength)\n        {\n            result = class_name\
    \ + \".\" + extensions[i];\n            strength = 0;\n        }\n        else\
    \ if (cap - sm == strength)\n        {\n            if (extensions[i] < extensions[i\
    \ - 1])\n            {\n                result = class_name + \".\" + extensions[i];\n\
    \                strength = 0;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    int strength = 0;\n    string result = class_name;\n    for (int i\
    \ = 0; i < extensions.length; i++)\n    {\n        int cap = 0, sm = 0;\n    \
    \    for (int j = 0; j < extensions[i].length(); j++)\n        {\n           \
    \ if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n                cap++;\n\
    \            else\n                sm++;\n        }\n        strength += cap -\
    \ sm;\n    }\n    for (int i = 0; i < extensions.length; i++)\n    {\n       \
    \ if (extensions[i] == result)\n            continue;\n        int cap = 0, sm\
    \ = 0;\n        for (int j = 0; j < extensions[i].length(); j++)\n        {\n\
    \            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n       \
    \         cap++;\n            else\n                sm++;\n        }\n       \
    \ if (cap - sm > strength)\n        {\n            strength = cap - sm;\n    \
    \        result = extensions[i];\n        }\n    }\n    return result;\n}", "{\n\
    \    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int i = 0;\
    \ i < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n    \
    \    for (int j = 0; j < extensions[i].length(); j++)\n        {\n           \
    \ if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n            {\n   \
    \             cap++;\n            }\n            else if (extensions[i][j] ==\
    \ 'a')\n            {\n                sm++;\n            }\n        }\n     \
    \   strength += cap - sm;\n    }\n    for (int i = 0; i < extensions.length; i++)\n\
    \    {\n        if (extensions[i] == class_name)\n        {\n            continue;\n\
    \        }\n        if (extensions[i] == class_name + \".java\")\n        {\n\
    \            continue;\n        }\n        if (extensions[i] == class_name + \"\
    .class\")\n        {\n            continue;\n        }\n        if (extensions[i]\
    \ == class_name + \".cpp\")\n        {\n            continue;\n        }\n   \
    \     if (extensions[i] == class_name + \".h\")\n        {\n            continue;\n\
    \        }\n        if (extensions[i] == class_name + \".py\")\n        {\n  \
    \          continue;\n        }\n        if (extensions[i] == class_name + \"\
    .rb\")\n        {\n            continue;\n        }\n        if (extensions[i]\
    \ == class_name + \".cs\")\n        {\n            continue;\n        }\n    \
    \    if (extensions[i] == class_name + \".java\")\n        {\n            continue;\n\
    \        }\n        if (extensions[i] == class_name + \".cpp\")\n        {\n \
    \           continue;\n        }\n        if (extensions[i] == class_name + \"\
    .h\")\n        {\n            continue;\n        }\n        if (extensions[i]\
    \ == class_name + \".py\")\n        {\n            continue;\n        }\n    \
    \    if (extensions[i] == class_name + \".rb\")\n        ", "{\n    int strength\
    \ = 0;\n    string result = class_name;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        int cap = 0;\n        int sm = 0;\n        for (int j =\
    \ 0; j < extensions[i].length(); j++)\n        {\n            if (extensions[i][j]\
    \ == 'A' || extensions[i][j] == 'a')\n            {\n                cap++;\n\
    \            }\n            if (extensions[i][j] == 'a' || extensions[i][j] ==\
    \ 'A')\n            {\n                sm++;\n            }\n        }\n     \
    \   strength += cap - sm;\n    }\n    for (int i = 0; i < extensions.length; i++)\n\
    \    {\n        if (extensions[i] == result)\n        {\n            continue;\n\
    \        }\n        int cap = 0;\n        int sm = 0;\n        for (int j = 0;\
    \ j < extensions[i].length(); j++)\n        {\n            if (extensions[i][j]\
    \ == 'A' || extensions[i][j] == 'a')\n            {\n                cap++;\n\
    \            }\n            if (extensions[i][j] == 'a' || extensions[i][j] ==\
    \ 'A')\n            {\n                sm++;\n            }\n        }\n     \
    \   if (cap - sm > strength)\n        {\n            strength = cap - sm;\n  \
    \          result = extensions[i];\n        }\n    }\n    return result;\n}",
  "{\n    int CAP = 0, SM = 0;\n    for (int i = 0; i < class_name.length(); i++)\n\
    \        if (isupper(class_name[i]))\n            CAP++;\n        else\n     \
    \       SM++;\n    \n    string result = class_name;\n    for (int i = 0; i <\
    \ extensions.length; i++)\n    {\n        int CAP_ext = 0, SM_ext = 0;\n     \
    \   for (int j = 0; j < extensions[i].length(); j++)\n            if (isupper(extensions[i][j]))\n\
    \                CAP_ext++;\n            else\n                SM_ext++;\n   \
    \     \n        if (CAP_ext - SM_ext > CAP - SM)\n        {\n            CAP =\
    \ CAP_ext;\n            SM = SM_ext;\n            result = class_name + \".\"\
    \ + extensions[i];\n        }\n    }\n    return result;\n}", "{\n    int strength\
    \ = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for (int j = 0; j <\
    \ extensions[i].length(); j++)\n        {\n            if (extensions[i][j] ==\
    \ 'A' || extensions[i][j] == 'a')\n                cap++;\n            else\n\
    \                sm++;\n        }\n        strength += cap - sm;\n    }\n    for\
    \ (int i = 0; i < extensions.length; i++)\n    {\n        if (extensions[i] ==\
    \ class_name)\n            return class_name + \".\" + extensions[i];\n    }\n\
    \    return class_name + \".\" + extensions[0];\n}", "{\n    int strength = 0;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for (int j = 0; j <\
    \ extensions[i].length(); j++)\n        {\n            if (extensions[i][j] ==\
    \ 'A' || extensions[i][j] == 'a')\n                cap++;\n            if (extensions[i][j]\
    \ == 'a' || extensions[i][j] == 'A')\n                sm++;\n        }\n     \
    \   strength += cap - sm;\n    }\n    \n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        if (strength == 0)\n            return class_name + \"\
    .\" + extensions[i];\n        if (strength == strength)\n        {\n         \
    \   if (extensions[i] < class_name)\n                return class_name + \".\"\
    \ + extensions[i];\n        }\n        if (strength > strength)\n        {\n \
    \           if (extensions[i] < class_name)\n                return class_name\
    \ + \".\" + extensions[i];\n        }\n    }\n    return class_name + \".\" +\
    \ extensions[0];\n}", "{\n    int cap = 0, sm = 0;\n    for (int i = 0; i < class_name.length();\
    \ i++)\n    {\n        if (class_name[i] >= 'A' && class_name[i] <= 'Z')\n   \
    \         cap++;\n        else if (class_name[i] >= 'a' && class_name[i] <= 'z')\n\
    \            sm++;\n    }\n    int strength = cap - sm;\n    string result = class_name;\n\
    \    for (int i = 0; i < extensions.length; i++)\n    {\n        if (cap - sm\
    \ == strength && extensions[i] < result)\n            result = extensions[i];\n\
    \    }\n    return result;\n}", "{\n    int strength = 0;\n    int cap = 0;\n\
    \    int sm = 0;\n    for(int i = 0; i < extensions.length; i++)\n    {\n    \
    \    cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n            {\n                cap++;\n            }\n            else\n\
    \            {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    string result = class_name + \".\" + extensions[0];\n\
    \    for(int i = 1; i < extensions.length; i++)\n    {\n        if(strength ==\
    \ extensions[i].length())\n        {\n            if(extensions[i] < result)\n\
    \            {\n                result = extensions[i];\n            }\n     \
    \   }\n    }\n    return result;\n}", "{\n    int strength = 0;\n    string strongest_extension\
    \ = \"\";\n    for(int i = 0; i < extensions.length; i++)\n    {\n        int\
    \ cap = 0;\n        int sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else if(extensions[i][j] == 'a')\n\
    \                sm++;\n        }\n        strength += cap - sm;\n    }\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        if(strength == 0)\n     \
    \   {\n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \            break;\n        }\n        if(strength < 0 && strength > -1)\n  \
    \      {\n            if(strength > -1)\n                strength = -1;\n    \
    \        strongest_extension = class_name + \".\" + extensions[i];\n         \
    \   break;\n        }\n        if(strength > 0 && strength < 1)\n        {\n \
    \           if(strength < 1)\n                strength = 1;\n            strongest_extension\
    \ = class_name + \".\" + extensions[i];\n            break;\n        }\n    }\n\
    \    return strongest_extension;\n}", "{\n    int strength = 0;\n    int cap =\
    \ 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length; i++)\n    {\n\
    \        int c = 0;\n        int l = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                c++;\n            if (extensions[i][j] == 'a' || extensions[i][j]\
    \ == 'A')\n                l++;\n        }\n        cap += c;\n        sm += l;\n\
    \        strength += (cap - sm);\n    }\n    string result = class_name;\n   \
    \ for (int i = 0; i < extensions.length; i++)\n    {\n        if (extensions[i]\
    \ == result)\n            continue;\n        if (strength == 0)\n        {\n \
    \           result = extensions[i];\n            break;\n        }\n        if\
    \ (strength > extensions[i].length())\n            continue;\n        if (strength\
    \ == extensions[i].length())\n        {\n            if (extensions[i] < result)\n\
    \                result = extensions[i];\n        }\n        else\n        {\n\
    \            if (extensions[i].length() > strength)\n                result =\
    \ extensions[i];\n        }\n    }\n    return result;\n}", "{\n    int cap =\
    \ 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length; i++)\n    {\n\
    \        cap += extensions[i].count('A');\n        sm += extensions[i].count('a');\n\
    \    }\n    cap -= sm;\n    if (cap == 0)\n        return class_name + \".\" +\
    \ extensions[0];\n    else\n    {\n        for (int i = 0; i < extensions.length;\
    \ i++)\n        {\n            if (cap - sm == extensions[i].count('a') - extensions[i].count('A'))\n\
    \            {\n                if (i == 0)\n                    return class_name\
    \ + \".\" + extensions[i];\n                else\n                    return class_name\
    \ + \".\" + extensions[i] + \".\" + extensions[i - 1];\n            }\n      \
    \  }\n    }\n}", "{\n    int CAP = 0;\n    int SM = 0;\n    for(int i = 0; i <\
    \ extensions.length; i++)\n    {\n        CAP += count(extensions[i], 'A');\n\
    \        SM += count(extensions[i], 'a');\n    }\n    int strength = CAP - SM;\n\
    \    string result = class_name + \".\" + extensions[0];\n    for(int i = 1; i\
    \ < extensions.length; i++)\n    {\n        if(strength < CAP - SM)\n        {\n\
    \            result = class_name + \".\" + extensions[i];\n            strength\
    \ = CAP - SM;\n        }\n        else if(strength == CAP - SM && extensions[i]\
    \ < extensions[i-1])\n        {\n            result = class_name + \".\" + extensions[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    int strength = 0;\n    string\
    \ strongest_extension = \"\";\n    for (int i = 0; i < extensions.length; i++)\n\
    \    {\n        int cap = 0, sm = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            if (extensions[i][j] == 'a' ||\
    \ extensions[i][j] == 'A')\n                sm++;\n        }\n        strength\
    \ += cap - sm;\n        if (strength > strongest_extension.length())\n       \
    \     strongest_extension = extensions[i];\n    }\n    return class_name + \"\
    .\" + strongest_extension;\n}", "{\n    int CAP = 0, SM = 0;\n    for (int i =\
    \ 0; i < class_name.length(); i++)\n    {\n        if (class_name[i] >= 'A' &&\
    \ class_name[i] <= 'Z')\n            CAP++;\n        else\n            SM++;\n\
    \    }\n    \n    string result = class_name;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        int CAP_ext = 0, SM_ext = 0;\n        for (int j = 0; j\
    \ < extensions[i].length(); j++)\n        {\n            if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z')\n                CAP_ext++;\n           \
    \ else\n                SM_ext++;\n        }\n        \n        if (CAP_ext -\
    \ SM_ext > CAP - SM)\n        {\n            CAP = CAP_ext;\n            SM =\
    \ SM_ext;\n            result = class_name + \".\" + extensions[i];\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    int cap = 0;\n    int sm = 0;\n\
    \    for (int i = 0; i < extensions.length; i++)\n    {\n        cap += count(extensions[i],\
    \ 'A');\n        sm += count(extensions[i], 'a');\n    }\n    cap -= sm;\n   \
    \ if (cap == 0)\n        return class_name + \".\" + extensions[0];\n    else\n\
    \    {\n        for (int i = 0; i < extensions.length; i++)\n        {\n     \
    \       if (cap - sm == count(extensions[i], 'a') - count(extensions[i], 'A'))\n\
    \                return class_name + \".\" + extensions[i];\n        }\n    }\n\
    \    return class_name + \".\" + extensions[0];\n}", "{\n    int CAP, SM;\n  \
    \  string result;\n    for (int i = 0; i < extensions.length; i++)\n    {\n  \
    \      CAP = 0;\n        SM = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] >= 'A' && extensions[i][j]\
    \ <= 'Z')\n                CAP++;\n            else\n                SM++;\n \
    \       }\n        if (CAP - SM > result.length())\n            result = extensions[i];\n\
    \    }\n    return class_name + \".\" + result;\n}", "{\n    int strength = 0;\n\
    \    int cap = 0;\n    int sm = 0;\n    string result = \"\";\n    for (int i\
    \ = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n\
    \        for (int j = 0; j < extensions[i].length(); j++)\n        {\n       \
    \     if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n              \
    \  cap++;\n            else\n                sm++;\n        }\n        strength\
    \ += cap - sm;\n    }\n    for (int i = 0; i < extensions.length; i++)\n    {\n\
    \        if (extensions[i] == class_name)\n            continue;\n        if (extensions[i]\
    \ == class_name + \".\" + class_name)\n            continue;\n        if (extensions[i]\
    \ == class_name + \".\" + class_name + \".\" + class_name)\n            continue;\n\
    \        if (extensions[i] == class_name + \".\" + class_name + \".\" + class_name\
    \ + \".\" + class_name)\n            continue;\n        if (extensions[i] == class_name\
    \ + \".\" + class_name + \".\" + class_name + \".\" + class_name + \".\" + class_name)\n\
    \            continue;\n        if (extensions[i] == class_name + \".\" + class_name\
    \ + \".\" + class_name + \".\" + class_name + \".\" + class_name + \".\" + class_name)\n\
    \            continue;\n        if (extensions[i] == class_name + \".\" + class_name\
    \ + \".\" + class_name + \".\" + class_name + \".\" + class_name + \".\" + class_name\
    \ + \".\" + class_name)\n            continue;\n        if (extensions[i] == class_name\
    \ + \".\" + class_name + \".\" + class_name + \".\" + class_name + \".\" + class_name\
    \ + \".\" + class_name + \".\" + class_name + \".\" + class_name)\n          \
    \  continue;\n        if (extensions[i] == class_name + \".\" + class", "{\n \
    \   int strength = 0;\n    string result = class_name;\n    for (int i = 0; i\
    \ < extensions.length; i++)\n    {\n        int cap = 0, sm = 0;\n        for\
    \ (int j = 0; j < extensions[i].length(); j++)\n        {\n            if (extensions[i][j]\
    \ == 'A' || extensions[i][j] == 'a')\n                cap++;\n            if (extensions[i][j]\
    \ == 'a' || extensions[i][j] == 'A')\n                sm++;\n        }\n     \
    \   strength += cap - sm;\n    }\n    for (int i = 0; i < extensions.length; i++)\n\
    \    {\n        if (strength == 0)\n            break;\n        if (strength ==\
    \ strength && strength > 0)\n        {\n            if (extensions[i] < result)\n\
    \                result = extensions[i];\n        }\n        else if (strength\
    \ > 0 && strength < strength && strength > 0)\n        {\n            if (extensions[i]\
    \ < result)\n                result = extensions[i];\n        }\n    }\n    return\
    \ result;\n}", "{\n    int CAP, SM;\n    CAP = SM = 0;\n    for(int i = 0; i <\
    \ extensions.length; i++)\n    {\n        CAP += count(extensions[i], 'A');\n\
    \        SM += count(extensions[i], 'a');\n    }\n    return class_name + \".\"\
    \ + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0", "{\n    int strength = 0;\n    string strongest_extension\
    \ = \"\";\n    for(int i = 0; i < extensions.length; i++)\n    {\n        int\
    \ cap = 0;\n        int sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else if(extensions[i][j] == 'a')\n\
    \                sm++;\n        }\n        strength += cap - sm;\n    }\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        if(strength == 0)\n     \
    \   {\n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \            break;\n        }\n        if(strength < 0 && strength > -1)\n  \
    \      {\n            if(strength > -1)\n                strength = -1;\n    \
    \        strongest_extension = class_name + \".\" + extensions[i];\n         \
    \   break;\n        }\n        if(strength > 0 && strength < 1)\n        {\n \
    \           if(strength < 1)\n                strength = 1;\n            strongest_extension\
    \ = class_name + \".\" + extensions[i];\n            break;\n        }\n    }\n\
    \    return strongest_extension;\n}", "{\n    int strength = 0;\n    int cap =\
    \ 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length; i++)\n    {\n\
    \        cap = 0;\n        sm = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n            {\n                cap++;\n            }\n            else\n\
    \            {\n                sm++;\n            }\n        }\n        strength\
    \ += (cap - sm);\n    }\n    string result = class_name;\n    for (int i = 0;\
    \ i < extensions.length; i++)\n    {\n        if (extensions[i] == class_name)\n\
    \        {\n            continue;\n        }\n        if (extensions[i] == result)\n\
    \        {\n            continue;\n        }\n        if (strength == 0)\n   \
    \     {\n            result = extensions[i];\n            break;\n        }\n\
    \        if (strength < 0 && strength > -1)\n        {\n            if (cap >\
    \ sm)\n            {\n                result = extensions[i];\n              \
    \  break;\n            }\n            else\n            {\n                continue;\n\
    \            }\n        }\n        if (strength > 0 && strength < 1)\n       \
    \ {\n            if (cap > sm)\n            {\n                result = extensions[i];\n\
    \                break;\n            }\n            else\n            {\n    \
    \            continue;\n            }\n        }\n        if (strength > 1 &&\
    \ strength < 2)\n        {\n            if (cap > sm)\n            {\n       \
    \         result = extensions[i];\n                break;\n            }\n   \
    \         else\n            {\n                continue;\n            }\n    \
    \    }\n        if (strength > 2 && strength < 3)\n        {\n            if (cap\
    \ > sm)\n            {\n                result = extensions[i];\n            \
    \    break;\n            }\n            else\n            {\n                continue;\n\
    \            }\n        }\n        if (strength > 3 && strength < 4)\n       \
    \ {\n            if (cap > sm)\n            {\n                result = extensions[i];\n\
    \                break;\n            }\n", "{\n    int strength = 0;\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length; i++)\n\
    \    {\n        cap = 0;\n        sm = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n            {\n                cap++;\n            }\n            else\n\
    \            {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    for (int i = 0; i < extensions.length; i++)\n    {\n\
    \        if (extensions[i] == class_name)\n        {\n            return class_name\
    \ + \".\" + extensions[i];\n        }\n    }\n    return class_name + \".\" +\
    \ extensions[0];\n}", "{\n    int strength = 0;\n    int cap = 0;\n    int sm\
    \ = 0;\n    for (int i = 0; i < extensions.length; i++)\n    {\n        int c\
    \ = 0;\n        int l = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n            {\n                c++;\n            }\n            if\
    \ (extensions[i][j] == 'a' || extensions[i][j] == 'A')\n            {\n      \
    \          l++;\n            }\n        }\n        strength += (c - l);\n    \
    \    if (c > cap)\n        {\n            cap = c;\n        }\n        if (l >\
    \ sm)\n        {\n            sm = l;\n        }\n    }\n    if (cap - sm == 0)\n\
    \    {\n        return class_name + \".\" + extensions[0];\n    }\n    else\n\
    \    {\n        for (int i = 0; i < extensions.length; i++)\n        {\n     \
    \       if (strength == extensions[i].length())\n            {\n             \
    \   return class_name + \".\" + extensions[i];\n            }\n        }\n   \
    \ }\n}", "{\n    int strength = 0;\n    string best_extension = \"\";\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        int cap = 0, sm = 0;\n  \
    \      for(int j = 0; j < extensions[i].length(); j++)\n        {\n          \
    \  if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n                cap++;\n\
    \            else if(extensions[i][j] == 'a')\n                sm++;\n       \
    \ }\n        strength += cap - sm;\n        if(strength > best_extension.length())\n\
    \            best_extension = extensions[i];\n    }\n    return class_name + \"\
    .\" + best_extension;\n}", "{\n    int CAP = 0, SM = 0;\n    for(int i = 0; i\
    \ < extensions.length; i++)\n    {\n        CAP += extensions[i].count('A');\n\
    \        SM += extensions[i].count('a');\n    }\n    return class_name + \".\"\
    \ + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0", "{\n    int strength = 0;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for (int j = 0; j <\
    \ extensions[i].length(); j++)\n        {\n            if (extensions[i][j] ==\
    \ 'A' || extensions[i][j] == 'a')\n                cap++;\n            else\n\
    \                sm++;\n        }\n        strength += cap - sm;\n    }\n    \n\
    \    string result = class_name;\n    for (int i = 0; i < extensions.length; i++)\n\
    \    {\n        if (extensions[i] == result)\n            continue;\n        if\
    \ (extensions[i].length() > result.length())\n        {\n            result =\
    \ extensions[i];\n            continue;\n        }\n        if (extensions[i].length()\
    \ == result.length())\n        {\n            if (extensions[i] < result)\n  \
    \              result = extensions[i];\n        }\n    }\n    return result;\n\
    }", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int\
    \ i = 0; i < extensions.length; i++)\n    {\n        int c = 0;\n        int l\
    \ = 0;\n        for (int j = 0; j < extensions[i].length(); j++)\n        {\n\
    \            if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n       \
    \     {\n                c++;\n            }\n            if (extensions[i][j]\
    \ == 'a' || extensions[i][j] == 'A')\n            {\n                l++;\n  \
    \          }\n        }\n        strength += (c - l);\n        if (c > cap)\n\
    \        {\n            cap = c;\n        }\n        if (l > sm)\n        {\n\
    \            sm = l;\n        }\n    }\n    if (cap - sm == 0)\n    {\n      \
    \  return class_name + \".\" + extensions[0];\n    }\n    else\n    {\n      \
    \  return class_name + \".\" + extensions[0] + \".\" + to_string(strength);\n\
    \    }\n}", "{\n    int CAP, SM;\n    int strength = 0;\n    string ext_name;\n\
    \    for(int i = 0; i < extensions.length; i++)\n    {\n        CAP = 0;\n   \
    \     SM = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n     \
    \   {\n            if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n  \
    \              CAP++;\n            else\n                SM++;\n        }\n  \
    \      strength += CAP - SM;\n        ext_name = extensions[i];\n    }\n    return\
    \ class_name + \".\" + ext_name;\n}", "{\n    int CAP = 0, SM = 0;\n    for (int\
    \ i = 0; i < class_name.length(); i++)\n        if (class_name[i] >= 'A' && class_name[i]\
    \ <= 'Z')\n            CAP++;\n        else\n            SM++;\n    for (int i\
    \ = 0; i < extensions.length; i++)\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n\
    \                CAP++;\n            else\n                SM++;\n    return class_name\
    \ + \".\" + extensions[0];\n}", "{\n    int strength = 0;\n    int cap = 0;\n\
    \    int sm = 0;\n    for (int i = 0; i < extensions.length; i++)\n    {\n   \
    \     int c = 0;\n        int l = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                c++;\n            if (extensions[i][j] == 'a' || extensions[i][j]\
    \ == 'A')\n                l++;\n        }\n        if (c > sm)\n            sm\
    \ = c;\n        if (l > cap)\n            cap = l;\n    }\n    strength = cap\
    \ - sm;\n    for (int i = 0; i < extensions.length; i++)\n    {\n        if (extensions[i].compare(class_name)\
    \ == 0)\n            return class_name + \".\" + extensions[i];\n        if (extensions[i].compare(class_name)\
    \ > 0 && strength == extensions[i].length())\n            return class_name +\
    \ \".\" + extensions[i];\n    }\n    return class_name + \".\" + extensions[0];\n\
    }", "{\n    int CAP, SM;\n    CAP = SM = 0;\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        CAP += extensions[i].length() - extensions[i].length()\
    \ % 2;\n        SM += extensions[i].length() % 2;\n    }\n    return class_name\
    \ + \".\" + extensions[0];\n}", "{\n    int strength = 0;\n    string strongest_extension\
    \ = \"\";\n    for(int i = 0; i < extensions.length; i++)\n    {\n        int\
    \ CAP = 0;\n        int SM = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                CAP++;\n            else\n                SM++;\n \
    \       }\n        strength = CAP - SM;\n        if(strength > strength)\n   \
    \     {\n            strength = CAP - SM;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}", "{\n\
    \    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for(int i = 0;\
    \ i < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n    \
    \    for(int j = 0; j < extensions[i].length(); j++)\n        {\n            if(extensions[i][j]\
    \ == 'A' || extensions[i][j] == 'a')\n                cap++;\n            else\n\
    \                sm++;\n        }\n        strength += cap - sm;\n    }\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        if(extensions[i] == class_name)\n\
    \            continue;\n        cap = 0;\n        sm = 0;\n        for(int j =\
    \ 0; j < extensions[i].length(); j++)\n        {\n            if(extensions[i][j]\
    \ == 'A' || extensions[i][j] == 'a')\n                cap++;\n            else\n\
    \                sm++;\n        }\n        if(cap - sm > strength)\n        {\n\
    \            strength = cap - sm;\n            class_name = extensions[i];\n \
    \       }\n    }\n    return class_name + \".\" + class_name.substr(0, class_name.length()\
    \ - strength);\n}", "{\n    int strength = 0;\n    int cap = 0;\n    int sm =\
    \ 0;\n    for(int i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n\
    \        sm = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n  \
    \      {\n            if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                cap++;\n            if(extensions[i][j] == 'a' || extensions[i][j]\
    \ == 'A')\n                sm++;\n        }\n        strength += cap - sm;\n \
    \   }\n    for(int i = 0; i < extensions.length; i++)\n    {\n        if(extensions[i].compare(class_name)\
    \ == 0)\n            return class_name + \".\" + extensions[i];\n    }\n    return\
    \ class_name + \".\" + extensions[0];\n}", "{\n    int strength = 0;\n    string\
    \ strongest_extension = \"\";\n    for (int i = 0; i < extensions.length; i++)\n\
    \    {\n        int cap = 0, sm = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else if (extensions[i][j] == 'a')\n\
    \                sm++;\n        }\n        strength += cap - sm;\n    }\n    for\
    \ (int i = 0; i < extensions.length; i++)\n    {\n        if (strength == 0)\n\
    \            break;\n        if (strength > 0 && strength == extensions[i].length())\n\
    \        {\n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \            break;\n        }\n        else if (strength < 0 && strength == -extensions[i].length())\n\
    \        {\n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \            break;\n        }\n    }\n    return strongest_extension;\n}", "{\n\
    \    int strength = 0;\n    string strongest_extension = \"\";\n    for(int i\
    \ = 0; i < extensions.length; i++)\n    {\n        int cap = 0;\n        int sm\
    \ = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n        {\n \
    \           if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n         \
    \       cap++;\n            if(extensions[i][j] == 'a' || extensions[i][j] ==\
    \ 'A')\n                sm++;\n        }\n        strength += cap - sm;\n    \
    \    if(strength > strongest_extension.length())\n            strongest_extension\
    \ = extensions[i];\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int\
    \ i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n\
    \        for (int j = 0; j < extensions[i].length(); j++)\n        {\n       \
    \     if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n            {\n\
    \                cap++;\n            }\n            else\n            {\n    \
    \            sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    for (int i = 0; i < extensions.length; i++)\n    {\n        if (extensions[i]\
    \ == class_name)\n        {\n            return class_name + \".\" + extensions[i];\n\
    \        }\n        else if (extensions[i] == class_name + \".\" + extensions[i])\n\
    \        {\n            return class_name + \".\" + extensions[i];\n        }\n\
    \        else if (extensions[i] == class_name + \".\" + extensions[i].substr(0,\
    \ class_name.length()))\n        {\n            return class_name + \".\" + extensions[i];\n\
    \        }\n        else if (extensions[i] == class_name + \".\" + extensions[i].substr(0,\
    \ class_name.length()) + \".\" + class_name)\n        {\n            return class_name\
    \ + \".\" + extensions[i];\n        }\n        else if (extensions[i] == class_name\
    \ + \".\" + extensions[i].substr(0, class_name.length()) + \".\" + class_name\
    \ + \".\" + class_name)\n        {\n            return class_name + \".\" + extensions[i];\n\
    \        }\n        else if (extensions[i] == class_name + \".\" + extensions[i].substr(0,\
    \ class_name.length()) + \".\" + class_name + \".\" + class_name + \".\" + class_name)\n\
    \        {\n            return class_name + \".\" + extensions[i];\n        }\n\
    \        else if (extensions[i] == class_name + \".\" + extensions", "{\n    int\
    \ strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for (int j = 0; j <\
    \ extensions[i].length(); j++)\n        {\n            if (extensions[i][j] ==\
    \ 'A' || extensions[i][j] == 'a')\n                cap++;\n            if (extensions[i][j]\
    \ == 'a' || extensions[i][j] == 'A')\n                sm++;\n        }\n     \
    \   strength += cap - sm;\n    }\n    for (int i = 0; i < extensions.length; i++)\n\
    \    {\n        if (extensions[i] == class_name)\n            return class_name\
    \ + \".\" + extensions[i];\n    }\n    return class_name + \".\" + extensions[0];\n\
    }", "{\n    int CAP, SM;\n    int strength = 0;\n    string result = \"\";\n \
    \   \n    for (int i = 0; i < extensions.length; i++)\n    {\n        CAP = 0;\n\
    \        SM = 0;\n        for (int j = 0; j < extensions[i].length(); j++)\n \
    \       {\n            if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                CAP++;\n            else if (extensions[i][j] == 'a')\n     \
    \           SM++;\n        }\n        strength = CAP - SM;\n        if (strength\
    \ > strength)\n        {\n            result = class_name + \".\" + extensions[i];\n\
    \            strength = CAP - SM;\n        }\n    }\n    return result;\n}", "{\n\
    \    int cap = 0, sm = 0;\n    for (int i = 0; i < class_name.length(); i++)\n\
    \        if (class_name[i] >= 'A' && class_name[i] <= 'Z')\n            cap++;\n\
    \        else if (class_name[i] >= 'a' && class_name[i] <= 'z')\n            sm++;\n\
    \    \n    int strength = cap - sm;\n    \n    for (int i = 0; i < extensions.length;\
    \ i++)\n        if (extensions[i].length() > 0)\n            if (extensions[i][0]\
    \ >= 'A' && extensions[i][0] <= 'Z')\n                cap++;\n            else\
    \ if (extensions[i][0] >= 'a' && extensions[i][0] <= 'z')\n                sm++;\n\
    \            \n        if (cap - sm > strength)\n        {\n            strength\
    \ = cap - sm;\n            class_name += \".\" + extensions[i];\n        }\n \
    \   \n    return class_name;\n}", "{\n    int strength = 0;\n    int cap = 0;\n\
    \    int sm = 0;\n    for (int i = 0; i < extensions.length; i++)\n    {\n   \
    \     cap = 0;\n        sm = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] >= 'A' && extensions[i][j]\
    \ <= 'Z')\n                cap++;\n            else if (extensions[i][j] >= 'a'\
    \ && extensions[i][j] <= 'z')\n                sm++;\n        }\n        strength\
    \ += cap - sm;\n    }\n    for (int i = 0; i < extensions.length; i++)\n    {\n\
    \        if (strength == 0)\n            return class_name + \".\" + extensions[i];\n\
    \        if (strength < 0)\n            strength = 0;\n        if (strength ==\
    \ strength)\n            return class_name + \".\" + extensions[i];\n    }\n \
    \   return class_name + \".\" + extensions[0];\n}", "{\n    int CAP, SM;\n   \
    \ CAP = SM = 0;\n    for (int i = 0; i < extensions.length; i++)\n    {\n    \
    \    CAP += count(extensions[i], 'A');\n        SM += count(extensions[i], 'a');\n\
    \    }\n    CAP -= SM;\n    if (CAP == 0)\n        return class_name + \".\" +\
    \ extensions[0];\n    else\n    {\n        for (int i = 0; i < extensions.length;\
    \ i++)\n        {\n            if (CAP - SM == count(extensions[i], 'a') - count(extensions[i],\
    \ 'A') && extensions[i] < extensions[0])\n                return class_name +\
    \ \".\" + extensions[i];\n        }\n    }\n    return class_name + \".\" + extensions[0];\n\
    }", "{\n    int strength = 0;\n    string strongest_extension = \"\";\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        int CAP = 0, SM = 0;\n  \
    \      for(int j = 0; j < extensions[i].length(); j++)\n        {\n          \
    \  if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n                CAP++;\n\
    \            else\n                SM++;\n        }\n        strength += CAP -\
    \ SM;\n        if(strength > strongest_extension.length())\n            strongest_extension\
    \ = extensions[i];\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    string str\
    \ = \"\";\n    for(int i = 0; i < extensions.length; i++)\n    {\n        cap\
    \ = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n\
    \        {\n            if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                cap++;\n            else\n                sm++;\n        }\n\
    \        strength = cap - sm;\n        if(str == \"\")\n        {\n          \
    \  str = class_name + \".\" + extensions[i];\n        }\n        else if(strength\
    \ > strength)\n        {\n            str = class_name + \".\" + extensions[i];\n\
    \        }\n    }\n    return str;\n}", "{\n    int CAP, SM;\n    string result;\n\
    \    CAP = SM = 0;\n    for (int i = 0; i < extensions.length; i++)\n    {\n \
    \       CAP += count_char(extensions[i], 'A');\n        SM += count_char(extensions[i],\
    \ 'a');\n    }\n    result = class_name + \".\" + extensions[0];\n    for (int\
    \ i = 1; i < extensions.length; i++)\n    {\n        if (CAP - SM < CAP - SM)\n\
    \        {\n            result = class_name + \".\" + extensions[i];\n       \
    \ }\n    }\n    return result;\n}", "{\n    int cap, sm;\n    cap = sm = 0;\n\
    \    for (int i = 0; i < extensions.length; i++)\n    {\n        cap += (extensions[i].length()\
    \ - extensions[i].find_first_of(\"abcdefghijklmnopqrstuvwxyz\"));\n        sm\
    \ += (extensions[i].length() - extensions[i].find_first_of(\"abcdefghijklmnopqrstuvwxyz\"\
    ));\n    }\n    return class_name + \".\" + extensions[0];\n}", "{\n    int strength\
    \ = 0;\n    int cap = 0;\n    int sm = 0;\n    string str = \"\";\n    for (int\
    \ i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n\
    \        for (int j = 0; j < extensions[i].length(); j++)\n        {\n       \
    \     if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n              \
    \  cap++;\n            else\n                sm++;\n        }\n        strength\
    \ += (cap - sm);\n    }\n    for (int i = 0; i < extensions.length; i++)\n   \
    \ {\n        if (extensions[i] == class_name)\n            continue;\n       \
    \ cap = 0;\n        sm = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        if (cap - sm > strength)\n        {\n            str = class_name\
    \ + \".\" + extensions[i];\n            strength = cap - sm;\n        }\n    }\n\
    \    return str;\n}", "{\n    int CAP, SM;\n    CAP = SM = 0;\n    for(int i =\
    \ 0; i < extensions.length; i++)\n    {\n        CAP += (extensions[i].length()\
    \ - extensions[i].count('.'));\n        SM += (extensions[i].length() - extensions[i].count('.'));\n\
    \    }\n    return class_name + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] +", "{\n    int strength = 0;\n    int cap = 0;\n  \
    \  int sm = 0;\n    for (int i = 0; i < extensions.length; i++)\n    {\n     \
    \   cap = 0;\n        sm = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n            {\n                cap++;\n            }\n            else\n\
    \            {\n                sm++;\n            }\n        }\n        strength\
    \ += (cap - sm);\n    }\n    for (int i = 0; i < extensions.length; i++)\n   \
    \ {\n        if (extensions[i] == class_name)\n        {\n            return class_name\
    \ + \".\" + extensions[i];\n        }\n    }\n    return class_name + \".\" +\
    \ extensions[0];\n}", "{\n    int strength = 0;\n    int cap = 0;\n    int sm\
    \ = 0;\n    for(int i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n\
    \        sm = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n  \
    \      {\n            if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                cap++;\n            if(extensions[i][j] == 'a' || extensions[i][j]\
    \ == 'A')\n                sm++;\n        }\n        strength += cap - sm;\n \
    \   }\n    for(int i = 0; i < extensions.length; i++)\n    {\n        if(strength\
    \ == 0)\n            return class_name + \".\" + extensions[i];\n        if(strength\
    \ < 0)\n            return class_name + \".\" + extensions[i];\n        if(strength\
    \ == 0)\n            return class_name + \".\" + extensions[i];\n        if(strength\
    \ > 0 && strength < extensions.length)\n            return class_name + \".\"\
    \ + extensions[i];\n    }\n}", "{\n    int strength = 0;\n    int cap = 0;\n \
    \   int sm = 0;\n    for(int i = 0; i < extensions.length; i++)\n    {\n     \
    \   int c = 0;\n        int l = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == '.')\n            {\n  \
    \              c++;\n                l = 0;\n            }\n            else\n\
    \            {\n                l++;\n            }\n        }\n        cap +=\
    \ c;\n        sm += l;\n        strength += (cap - sm);\n    }\n    for(int i\
    \ = 0; i < extensions.length; i++)\n    {\n        if(strength == 0)\n       \
    \ {\n            return class_name + \".\" + extensions[i];\n        }\n     \
    \   if(strength == strength && extensions[i] < class_name)\n        {\n      \
    \      return class_name + \".\" + extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + extensions[0];\n}", "{\n    int cap = 0, sm = 0;\n    for(int\
    \ i = 0; i < class_name.length(); i++)\n        if(class_name[i] >= 'A' && class_name[i]\
    \ <= 'Z')\n            cap++;\n        else\n            sm++;\n    for(int i\
    \ = 0; i < extensions.length; i++)\n    {\n        int cap_ext = 0, sm_ext = 0;\n\
    \        for(int j = 0; j < extensions[i].length(); j++)\n            if(extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z')\n                cap_ext++;\n           \
    \ else\n                sm_ext++;\n        cap -= sm_ext;\n        sm += cap_ext;\n\
    \        if(cap_ext > sm_ext)\n            cap = cap_ext;\n        else\n    \
    \        sm = sm_ext;\n    }\n    return class_name + \".\" + extensions[cap -\
    \ sm];\n}", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for(int i = 0; i < extensions.length; i++)\n    {\n        int c = 0;\n    \
    \    int l = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n   \
    \     {\n            if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                c++;\n            if(extensions[i][j] == 'a')\n             \
    \   l++;\n        }\n        cap += c;\n        sm += l;\n        strength +=\
    \ (cap - sm);\n    }\n    \n    string result = class_name;\n    for(int i = 0;\
    \ i < extensions.length; i++)\n    {\n        if(strength == strength)\n     \
    \   {\n            if(extensions[i] < result)\n                result = extensions[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    int strength = 0;\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length; i++)\n\
    \    {\n        int c = 0;\n        int l = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                c++;\n            if (extensions[i][j] == 'a')\n  \
    \              l++;\n        }\n        strength += c - l;\n        if (c > cap)\n\
    \            cap = c;\n        if (l > sm)\n            sm = l;\n    }\n    if\
    \ (cap - sm == 0)\n        return class_name + \".\" + extensions[0];\n    else\n\
    \    {\n        int index = 0;\n        for (int i = 0; i < extensions.length;\
    \ i++)\n        {\n            if (cap - sm == strength && extensions[i] < extensions[index])\n\
    \                index = i;\n        }\n        return class_name + \".\" + extensions[index];\n\
    \    }\n}", "{\n    int CAP, SM;\n    CAP = SM = 0;\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        CAP += extensions[i].count('A');\n        SM += extensions[i].count('a');\n\
    \    }\n    CAP -= SM;\n    string result = class_name + \".\" + extensions[0];\n\
    \    for(int i = 1; i < extensions.length; i++)\n    {\n        if(CAP - SM <\
    \ CAP - SM)\n        {\n            result = class_name + \".\" + extensions[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    int CAP = 0, SM = 0;\n    for\
    \ (int i = 0; i < class_name.length(); i++)\n        if (class_name[i] >= 'A'\
    \ && class_name[i] <= 'Z')\n            CAP++;\n        else\n            SM++;\n\
    \    \n    int max_strength = CAP - SM;\n    string max_extension = \"\";\n  \
    \  for (int i = 0; i < extensions.length; i++)\n    {\n        int strength =\
    \ CAP - SM;\n        for (int j = 0; j < extensions[i].length(); j++)\n      \
    \      if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n             \
    \   strength--;\n            else\n                strength++;\n        if (strength\
    \ > max_strength)\n        {\n            max_strength = strength;\n         \
    \   max_extension = extensions[i];\n        }\n    }\n    return class_name +\
    \ \".\" + max_extension;\n}", "{\n    int CAP, SM;\n    CAP = SM = 0;\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        CAP += count(extensions[i],\
    \ 'A');\n        SM += count(extensions[i], 'a');\n    }\n    return class_name\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0", "{\n    int strength = 0;\n    int\
    \ cap = 0;\n    int sm = 0;\n    string ext = \"\";\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        ext = extensions[i];\n        cap = 0;\n        sm = 0;\n\
    \        for(int j = 0; j < ext.length(); j++)\n        {\n            if(ext[j]\
    \ == 'A' || ext[j] == 'a')\n                cap++;\n            else\n       \
    \         sm++;\n        }\n        strength += cap - sm;\n    }\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        ext = extensions[i];\n  \
    \      if(ext.compare(class_name) == 0)\n            continue;\n        cap =\
    \ 0;\n        sm = 0;\n        for(int j = 0; j < ext.length(); j++)\n       \
    \ {\n            if(ext[j] == 'A' || ext[j] == 'a')\n                cap++;\n\
    \            else\n                sm++;\n        }\n        if(cap - sm > strength)\n\
    \        {\n            strength = cap - sm;\n            ext = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + ext;\n}", "{\n    int cap,\
    \ sm;\n    string str;\n    for (int i = 0; i < extensions.length; i++)\n    {\n\
    \        cap = 0;\n        sm = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] >= 'A' && extensions[i][j]\
    \ <= 'Z')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        if (cap - sm > 0)\n        {\n            str = class_name\
    \ + \".\" + extensions[i];\n            return str;\n        }\n    }\n    return\
    \ class_name;\n}", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n\
    \    for(int i = 0; i < extensions.length; i++)\n    {\n        int c = 0;\n \
    \       int l = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n\
    \        {\n            if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                c++;\n            if(extensions[i][j] == 'a')\n             \
    \   l++;\n        }\n        strength += c - l;\n        if(c > cap)\n       \
    \     cap = c;\n        if(l > sm)\n            sm = l;\n    }\n    return class_name\
    \ + \".\" + extensions[strength - sm];\n}", "{\n    int strength = 0;\n    int\
    \ cap = 0;\n    int sm = 0;\n    for(int i = 0; i < extensions.length; i++)\n\
    \    {\n        cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        strength += cap - sm;\n    }\n    \n    for(int i = 0; i <\
    \ extensions.length; i++)\n    {\n        if(extensions[i] == class_name)\n  \
    \          continue;\n        if(extensions[i] == class_name + \".\" + class_name)\n\
    \            continue;\n        if(extensions[i] == class_name + \".\" + class_name\
    \ + \".\" + class_name)\n            continue;\n        if(extensions[i] == class_name\
    \ + \".\" + class_name + \".\" + class_name + \".\" + class_name)\n          \
    \  continue;\n        if(extensions[i] == class_name + \".\" + class_name + \"\
    .\" + class_name + \".\" + class_name + \".\" + class_name)\n            continue;\n\
    \        if(extensions[i] == class_name + \".\" + class_name + \".\" + class_name\
    \ + \".\" + class_name + \".\" + class_name + \".\" + class_name)\n          \
    \  continue;\n        if(extensions[i] == class_name + \".\" + class_name + \"\
    .\" + class_name + \".\" + class_name + \".\" + class_name + \".\" + class_name\
    \ + \".\" + class_name)\n            continue;\n        if(extensions[i] == class_name\
    \ + \".\" + class_name + \".\" + class_name + \".\" + class_name + \".\" + class_name\
    \ + \".\" + class_name + \".\" + class_name + \".\" + class_name)\n          \
    \  continue;\n        if(extensions[i] == class_name + \".\" + class_name + \"\
    .\"", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int\
    \ i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n\
    \        for (int j = 0; j < extensions[i].length(); j++)\n        {\n       \
    \     if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n              \
    \  cap++;\n            else\n                sm++;\n        }\n        strength\
    \ += cap - sm;\n    }\n    \n    string result = class_name;\n    for (int i =\
    \ 0; i < extensions.length; i++)\n    {\n        if (strength == strength)\n \
    \       {\n            if (extensions[i] < result)\n                result = extensions[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    int strength = 0;\n    int\
    \ i = 0;\n    string name = class_name;\n    string extension = \"\";\n    while\
    \ (i < extensions.length)\n    {\n        extension = extensions[i];\n       \
    \ int CAP = 0;\n        int SM = 0;\n        for (int j = 0; j < extension.length();\
    \ j++)\n        {\n            if (extension[j] == 'A' || extension[j] == 'a')\n\
    \                CAP++;\n            if (extension[j] == 'a' || extension[j] ==\
    \ 'A')\n                SM++;\n        }\n        strength += CAP - SM;\n    \
    \    i++;\n    }\n    i = 0;\n    while (i < extensions.length)\n    {\n     \
    \   extension = extensions[i];\n        if (extension.length() > name.length())\n\
    \            name = extension;\n        i++;\n    }\n    return name + \".\" +\
    \ extension;\n}", "{\n    int strength = 0;\n    string extension = \"\";\n  \
    \  for (int i = 0; i < extensions.length; i++)\n    {\n        int cap = 0;\n\
    \        int sm = 0;\n        for (int j = 0; j < extensions[i].length(); j++)\n\
    \        {\n            if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                cap++;\n            else if (extensions[i][j] == 'a')\n     \
    \           sm++;\n        }\n        strength += cap - sm;\n        if (strength\
    \ > extension.length())\n            extension = extensions[i];\n    }\n    return\
    \ class_name + \".\" + extension;\n}", "{\n    int CAP = 0, SM = 0;\n    for (int\
    \ i = 0; i < class_name.length(); i++)\n    {\n        if (class_name[i] >= 'A'\
    \ && class_name[i] <= 'Z')\n            CAP++;\n        else\n            SM++;\n\
    \    }\n    \n    int max_strength = CAP - SM;\n    string max_extension = \"\"\
    ;\n    for (int i = 0; i < extensions.length; i++)\n    {\n        int strength\
    \ = CAP - SM;\n        for (int j = 0; j < extensions[i].length(); j++)\n    \
    \    {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n\
    \                strength--;\n            else\n                strength++;\n\
    \        }\n        if (strength > max_strength)\n        {\n            max_strength\
    \ = strength;\n            max_extension = extensions[i];\n        }\n    }\n\
    \    return class_name + \".\" + max_extension;\n}", "{\n    int strength = 0;\n\
    \    string strongest_extension = \"\";\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        int CAP = 0, SM = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                CAP++;\n            else if(extensions[i][j] == 'a')\n\
    \                SM++;\n        }\n        strength += CAP - SM;\n        if(strength\
    \ > strongest_extension.length())\n            strongest_extension = extensions[i];\n\
    \    }\n    return class_name + \".\" + strongest_extension;\n}", "{\n    int\
    \ cap, sm;\n    string str;\n    for(int i = 0; i < extensions.length; i++)\n\
    \    {\n        cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else if(extensions[i][j] == 'a')\n\
    \                sm++;\n        }\n        if(cap - sm > 0)\n        {\n     \
    \       str = class_name + \".\" + extensions[i];\n            return str;\n \
    \       }\n    }\n    return class_name;\n}", "{\n    int strength = 0;\n    int\
    \ cap = 0;\n    int sm = 0;\n    for(int i = 0; i < extensions.length; i++)\n\
    \    {\n        cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        strength += cap - sm;\n    }\n    \n    for(int i = 0; i <\
    \ extensions.length; i++)\n    {\n        if(extensions[i] == class_name)\n  \
    \          continue;\n        if(extensions[i] == class_name + \".\" + class_name)\n\
    \            continue;\n        if(extensions[i] == class_name + \".\" + class_name.substr(0,\
    \ class_name.length() - 1))\n            continue;\n        if(extensions[i] ==\
    \ class_name.substr(0, class_name.length() - 1) + \".\" + class_name)\n      \
    \      continue;\n        if(extensions[i] == class_name.substr(0, class_name.length()\
    \ - 1) + \".\" + class_name.substr(0, class_name.length() - 1))\n            continue;\n\
    \        if(extensions[i] == class_name.substr(0, class_name.length() - 2) + \"\
    .\" + class_name)\n            continue;\n        if(extensions[i] == class_name.substr(0,\
    \ class_name.length() - 2) + \".\" + class_name.substr(0, class_name.length()\
    \ - 2))\n            continue;\n        if(extensions[i] == class_name.substr(0,\
    \ class_name.length() - 3) + \".\" + class_name)\n            continue;\n    \
    \    if(extensions[i] == class_name.substr(0, class_name.length() - 3) + \".\"\
    \ + class_name.substr(0, class_name.length() - 3))\n            continue", "{\n\
    \    int CAP, SM;\n    int strength = 0;\n    int max_strength = 0;\n    string\
    \ max_extension = \"\";\n    for (int i = 0; i < extensions.length; i++)\n   \
    \ {\n        CAP = 0;\n        SM = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                CAP++;\n            if (extensions[i][j] == 'a' ||\
    \ extensions[i][j] == 'A')\n                SM++;\n        }\n        strength\
    \ = CAP - SM;\n        if (strength > max_strength)\n        {\n            max_strength\
    \ = strength;\n            max_extension = extensions[i];\n        }\n    }\n\
    \    return class_name + \".\" + max_extension;\n}", "{\n    int cap = 0, sm =\
    \ 0;\n    for (int i = 0; i < class_name.length(); i++)\n    {\n        if (class_name[i]\
    \ >= 'A' && class_name[i] <= 'Z')\n            cap++;\n        else if (class_name[i]\
    \ >= 'a' && class_name[i] <= 'z')\n            sm++;\n    }\n    int strength\
    \ = cap - sm;\n    string result = class_name + \".\";\n    for (int i = 0; i\
    \ < extensions.length; i++)\n    {\n        if (extensions[i].length() > result.length())\n\
    \            result = extensions[i];\n        else if (extensions[i].length()\
    \ == result.length() && strength < extensions[i].length())\n            result\
    \ = extensions[i];\n    }\n    return result;\n}", "{\n    int strength = 0;\n\
    \    int cap = 0;\n    int sm = 0;\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        strength += cap - sm;\n    }\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        if(extensions[i].compare(class_name) == 0)\n          \
    \  return class_name + \".\" + extensions[i];\n    }\n    return class_name +\
    \ \".\" + extensions[0];\n}", "{\n    int cap, sm;\n    string str;\n    for (int\
    \ i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n\
    \        for (int j = 0; j < extensions[i].length(); j++)\n        {\n       \
    \     if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n              \
    \  cap++;\n            if (extensions[i][j] == 'a' || extensions[i][j] == 'A')\n\
    \                sm++;\n        }\n        if (cap - sm > 0)\n            str\
    \ = class_name + \".\" + extensions[i];\n    }\n    return str;\n}", "{\n    int\
    \ strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for (int j = 0; j <\
    \ extensions[i].length(); j++)\n        {\n            if (extensions[i][j] ==\
    \ 'A' || extensions[i][j] == 'a')\n                cap++;\n            else\n\
    \                sm++;\n        }\n        strength += cap - sm;\n    }\n    \n\
    \    for (int i = 0; i < extensions.length; i++)\n    {\n        if (extensions[i]\
    \ == class_name)\n            continue;\n        if (extensions[i].length() >\
    \ class_name.length())\n            continue;\n        if (extensions[i].length()\
    \ < class_name.length())\n            continue;\n        if (extensions[i].substr(0,\
    \ class_name.length()) == class_name)\n        {\n            if (strength < 0)\n\
    \                return class_name + \".\" + extensions[i];\n            else\
    \ if (strength == 0)\n            {\n                if (cap > sm)\n         \
    \           return class_name + \".\" + extensions[i];\n                else\n\
    \                    return class_name + \".\" + extensions[i];\n            }\n\
    \            else if (strength > 0)\n            {\n                if (cap >\
    \ sm)\n                    return class_name + \".\" + extensions[i];\n      \
    \          else\n                    return class_name + \".\" + extensions[i];\n\
    \            }\n        }\n    }\n    return class_name + \".\" + extensions[0];\n\
    }", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    string result\
    \ = class_name;\n    for (int i = 0; i < extensions.length; i++)\n    {\n    \
    \    if (extensions[i].length() > 0)\n        {\n            cap = 0;\n      \
    \      sm = 0;\n            for (int j = 0; j < extensions[i].length(); j++)\n\
    \            {\n                if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                    cap++;\n                else\n                \
    \    sm++;\n            }\n            strength = cap - sm;\n            if (strength\
    \ > strength)\n            {\n                result = class_name + \".\" + extensions[i];\n\
    \                strength = cap - sm;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    int strength = 0;\n    string result = class_name;\n  \
    \  for(int i = 0; i < extensions.length; i++)\n    {\n        int cap = 0, sm\
    \ = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n        {\n \
    \           if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n         \
    \       cap++;\n            if(extensions[i][j] == 'a' || extensions[i][j] ==\
    \ 'A')\n                sm++;\n        }\n        strength += cap - sm;\n    }\n\
    \    for(int i = 0; i < extensions.length; i++)\n    {\n        if(strength ==\
    \ 0)\n        {\n            result = class_name + \".\" + extensions[i];\n  \
    \          break;\n        }\n        if(strength < 0)\n            strength =\
    \ 0;\n        if(strength == 0 && i == 0)\n            continue;\n        if(strength\
    \ < extensions[i].length())\n        {\n            result = class_name + \".\"\
    \ + extensions[i];\n            strength = 0;\n            break;\n        }\n\
    \        if(strength > extensions[i].length())\n            strength = extensions[i].length();\n\
    \    }\n    return result;\n}", "{\n    int CAP, SM;\n    int strength = 0;\n\
    \    string result = \"\";\n    for (int i = 0; i < extensions.length; i++)\n\
    \    {\n        CAP = 0;\n        SM = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n            {\n                CAP++;\n            }\n            if\
    \ (extensions[i][j] == 'a' || extensions[i][j] == 'A')\n            {\n      \
    \          SM++;\n            }\n        }\n        strength += CAP - SM;\n  \
    \  }\n    for (int i = 0; i < extensions.length; i++)\n    {\n        if (extensions[i]\
    \ == class_name)\n        {\n            result = class_name + \".\" + extensions[i];\n\
    \        }\n        if (strength == 0)\n        {\n            result = class_name\
    \ + \".\" + extensions[i];\n        }\n        if (strength == strength && strength\
    \ != 0)\n        {\n            if (extensions[i] < result)\n            {\n \
    \               result = extensions[i];\n            }\n        }\n        if\
    \ (strength == strength && strength != 0 && extensions[i] > result)\n        {\n\
    \            result = extensions[i];\n        }\n    }\n    return result;\n}",
  "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    string name =\
    \ class_name;\n    for (int i = 0; i < name.length(); i++)\n    {\n        if\
    \ (isupper(name[i]))\n            cap++;\n        else\n            sm++;\n  \
    \  }\n    for (int i = 0; i < extensions.length; i++)\n    {\n        string ext\
    \ = extensions[i];\n        int cap_ext = 0;\n        int sm_ext = 0;\n      \
    \  for (int j = 0; j < ext.length(); j++)\n        {\n            if (isupper(ext[j]))\n\
    \                cap_ext++;\n            else\n                sm_ext++;\n   \
    \     }\n        strength += cap_ext - sm_ext;\n    }\n    int index = 0;\n  \
    \  for (int i = 0; i < extensions.length; i++)\n    {\n        if (strength ==\
    \ strength)\n        {\n            if (extensions[i] < name)\n              \
    \  index = i;\n        }\n    }\n    return name + \".\" + extensions[index];\n\
    }", "{\n    int CAP, SM;\n    int strength = 0;\n    string result = \"\";\n \
    \   for (int i = 0; i < extensions.length; i++)\n    {\n        CAP = 0;\n   \
    \     SM = 0;\n        for (int j = 0; j < extensions[i].length(); j++)\n    \
    \    {\n            if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \            {\n                CAP++;\n            }\n            else\n    \
    \        {\n                SM++;\n            }\n        }\n        strength\
    \ += CAP - SM;\n        if (strength > result.length())\n        {\n         \
    \   result = class_name + \".\" + extensions[i];\n        }\n    }\n    return\
    \ result;\n}", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n\
    \    for (int i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n  \
    \      sm = 0;\n        for (int j = 0; j < extensions[i].length(); j++)\n   \
    \     {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n\
    \                cap++;\n            else\n                sm++;\n        }\n\
    \        strength += cap - sm;\n    }\n    \n    string result = class_name;\n\
    \    for (int i = 0; i < extensions.length; i++)\n    {\n        if (strength\
    \ == extensions[i].length())\n        {\n            result += \".\" + extensions[i];\n\
    \            break;\n        }\n    }\n    return result;\n}", "{\n    int strength\
    \ = 0;\n    string best_extension = \"\";\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        int cap = 0, sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            if(extensions[i][j] == 'a' || extensions[i][j]\
    \ == 'A')\n                sm++;\n        }\n        strength += cap - sm;\n \
    \       if(strength > best_extension.length())\n            best_extension = extensions[i];\n\
    \    }\n    return class_name + \".\" + best_extension;\n}", "{\n    int strength\
    \ = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length;\
    \ i++) {\n        int c = 0;\n        int l = 0;\n        for (int j = 0; j <\
    \ extensions[i].length(); j++) {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a') {\n                c++;\n            }\n            if (extensions[i][j]\
    \ == 'a' || extensions[i][j] == 'A') {\n                l++;\n            }\n\
    \        }\n        strength += (c - l);\n        if (c > cap) {\n           \
    \ cap = c;\n        }\n        if (l > sm) {\n            sm = l;\n        }\n\
    \    }\n    string ret = class_name;\n    for (int i = 0; i < extensions.length;\
    \ i++) {\n        if (extensions[i] == class_name) {\n            continue;\n\
    \        }\n        if (cap - sm == strength) {\n            ret += \".\" + extensions[i];\n\
    \        }\n    }\n    return ret;\n}", "{\n    int strength = 0;\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length; i++)\n   \
    \ {\n        int c = 0;\n        int l = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                c++;\n            if (extensions[i][j] == 'a' || extensions[i][j]\
    \ == 'A')\n                l++;\n        }\n        strength += (c - l);\n   \
    \     if (c > cap)\n            cap = c;\n        if (l > sm)\n            sm\
    \ = l;\n    }\n    if (cap - sm == 0)\n        return class_name + \".\" + extensions[0];\n\
    \    else\n        return class_name + \".\" + extensions[strength - (cap - sm)];\n\
    }", "{\n    int CAP, SM;\n    int strength = 0;\n    string result = \"\";\n \
    \   for(int i = 0; i < extensions.length; i++)\n    {\n        CAP = 0;\n    \
    \    SM = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n      \
    \  {\n            if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n   \
    \             CAP++;\n            else\n                SM++;\n        }\n   \
    \     strength += CAP - SM;\n    }\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        if(extensions[i] == class_name)\n            continue;\n\
    \        CAP = 0;\n        SM = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                CAP++;\n            else\n                SM++;\n \
    \       }\n        if(strength < CAP - SM)\n        {\n            result = class_name\
    \ + \".\" + extensions[i];\n            break;\n        }\n    }\n    return result;\n\
    }", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int\
    \ i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n\
    \        for (int j = 0; j < extensions[i].length(); j++)\n        {\n       \
    \     if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n              \
    \  cap++;\n            else\n                sm++;\n        }\n        strength\
    \ += cap - sm;\n    }\n    string result = class_name;\n    for (int i = 0; i\
    \ < extensions.length; i++)\n    {\n        if (strength == strength)\n      \
    \  {\n            if (extensions[i] < result)\n                result = extensions[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    int strength = 0;\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length; i++)\n\
    \    {\n        cap = 0;\n        sm = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            if (extensions[i][j] == 'a' ||\
    \ extensions[i][j] == 'A')\n                sm++;\n        }\n        strength\
    \ += cap - sm;\n    }\n    \n    for (int i = 0; i < extensions.length; i++)\n\
    \    {\n        if (extensions[i] == class_name)\n            continue;\n    \
    \    if (extensions[i] == class_name + \".java\")\n            continue;\n   \
    \     if (extensions[i] == class_name + \".class\")\n            continue;\n \
    \       if (extensions[i] == class_name + \".cpp\")\n            continue;\n \
    \       if (extensions[i] == class_name + \".h\")\n            continue;\n   \
    \     if (extensions[i] == class_name + \".py\")\n            continue;\n    \
    \    if (extensions[i] == class_name + \".pyc\")\n            continue;\n    \
    \    if (extensions[i] == class_name + \".pyd\")\n            continue;\n    \
    \    if (extensions[i] == class_name + \".rb\")\n            continue;\n     \
    \   if (extensions[i] == class_name + \".sh\")\n            continue;\n      \
    \  if (extensions[i] == class_name + \".txt\")\n            continue;\n      \
    \  if (extensions[i] == class_name + \".xml\")\n            continue;\n      \
    \  if (extensions[i] == class_name + \".yml\")\n            continue;\n      \
    \  if (extensions[i] == class_name + \".yaml\")\n            continue;\n     \
    \   if (extensions[i] == class_name + \".yml\")\n            continue;\n     \
    \   if (extensions[i] == class_name + \".yml\")\n            continue;\n", "{\n\
    \    int CAP = 0, SM = 0;\n    for (int i = 0; i < extensions.length; i++)\n \
    \   {\n        CAP += count(extensions[i], 'A');\n        SM += count(extensions[i],\
    \ 'a');\n    }\n    return class_name + \".\" + extensions[count_if(extensions,\
    \ is_upper) - count_if(extensions, is_lower) - CAP + SM];\n}", "{\n    int CAP,\
    \ SM;\n    string result;\n    for(int i = 0; i < extensions.length; i++)\n  \
    \  {\n        CAP = 0;\n        SM = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] >= 'A' && extensions[i][j]\
    \ <= 'Z')\n                CAP++;\n            else\n                SM++;\n \
    \       }\n        if(CAP - SM > result.length())\n            result = extensions[i];\n\
    \    }\n    return class_name + \".\" + result;\n}", "{\n    int CAP, SM;\n  \
    \  CAP = SM = 0;\n    for(int i = 0; i < extensions.length; i++)\n    {\n    \
    \    CAP += count(extensions[i], 'A');\n        SM += count(extensions[i], 'a');\n\
    \    }\n    return class_name + \".\" + extensions[count_sort(extensions, SM,\
    \ CAP)];\n}\n", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n\
    \    for (int i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n  \
    \      sm = 0;\n        for (int j = 0; j < extensions[i].length(); j++)\n   \
    \     {\n            if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                cap++;\n            else\n                sm++;\n        }\n\
    \        strength += cap - sm;\n    }\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        if (extensions[i] == class_name)\n            continue;\n\
    \        if (extensions[i] == class_name + \".\" + class_name)\n            continue;\n\
    \        if (extensions[i] == class_name + \".\" + class_name.substr(0, class_name.length()\
    \ - 1))\n            continue;\n        if (extensions[i] == class_name.substr(0,\
    \ class_name.length() - 1) + \".\" + class_name)\n            continue;\n    \
    \    if (extensions[i] == class_name.substr(0, class_name.length() - 1) + \".\"\
    \ + class_name.substr(0, class_name.length() - 1))\n            continue;\n  \
    \      if (extensions[i] == class_name.substr(0, class_name.length() - 2) + \"\
    .\" + class_name)\n            continue;\n        if (extensions[i] == class_name.substr(0,\
    \ class_name.length() - 2) + \".\" + class_name.substr(0, class_name.length()\
    \ - 2))\n            continue;\n        if (extensions[i] == class_name.substr(0,\
    \ class_name.length() - 3) + \".\" + class_name)\n            continue;\n    \
    \    if (extensions[i] == class_name.substr(0, class_name.length() - 3) + \".\"\
    \ + class_name.substr(0, class_name.length() - 3))\n            continue;\n",
  "{\n    int strength = 0;\n    string result = class_name;\n    for(int i = 0; i\
    \ < extensions.length; i++)\n    {\n        int cap = 0, sm = 0;\n        for(int\
    \ j = 0; j < extensions[i].length(); j++)\n        {\n            if(extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z')\n                cap++;\n            else\n\
    \                sm++;\n        }\n        strength += cap - sm;\n    }\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        if(strength == 0)\n     \
    \       break;\n        if(strength > 0 && strength == extensions[i].length())\n\
    \        {\n            result += \".\" + extensions[i];\n            strength\
    \ = 0;\n        }\n    }\n    return result;\n}", "{\n    int cap = 0, sm = 0;\n\
    \    for(int i = 0; i < class_name.length(); i++)\n    {\n        if(class_name[i]\
    \ >= 'A' && class_name[i] <= 'Z')\n            cap++;\n        else if(class_name[i]\
    \ >= 'a' && class_name[i] <= 'z')\n            sm++;\n    }\n    \n    int max_cap\
    \ = 0, max_sm = 0;\n    string max_ext = \"\";\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        int cap_ext = 0, sm_ext = 0;\n        for(int j = 0; j\
    \ < extensions[i].length(); j++)\n        {\n            if(extensions[i][j] >=\
    \ 'A' && extensions[i][j] <= 'Z')\n                cap_ext++;\n            else\
    \ if(extensions[i][j] >= 'a' && extensions[i][j] <= 'z')\n                sm_ext++;\n\
    \        }\n        if(cap_ext - sm_ext > max_cap - max_sm)\n        {\n     \
    \       max_cap = cap_ext;\n            max_sm = sm_ext;\n            max_ext\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + max_ext;\n\
    }", "{\n    int strength = 0;\n    string strongest_extension = \"\";\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        int cap = 0, sm = 0;\n  \
    \      for(int j = 0; j < extensions[i].length(); j++)\n        {\n          \
    \  if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n                cap++;\n\
    \            else if(extensions[i][j] == 'a')\n                sm++;\n       \
    \ }\n        strength += cap - sm;\n    }\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        if(strength == 0)\n        {\n            strongest_extension\
    \ = class_name + \".\" + extensions[i];\n            break;\n        }\n     \
    \   if(strength < 0 && strength > -1)\n        {\n            if(strength > -1)\n\
    \                strength = -1;\n            strongest_extension = class_name\
    \ + \".\" + extensions[i];\n            break;\n        }\n        if(strength\
    \ > 0)\n        {\n            if(strength > extensions[i].length())\n       \
    \         strength -= extensions[i].length();\n            else\n            \
    \    strength = 0;\n        }\n    }\n    return strongest_extension;\n}", "{\n\
    \    int strength = 0;\n    string strongest_extension = \"\";\n    for (int i\
    \ = 0; i < extensions.length; i++)\n    {\n        int cap = 0, sm = 0;\n    \
    \    for (int j = 0; j < extensions[i].length(); j++)\n        {\n           \
    \ if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n                cap++;\n\
    \            else if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z')\n  \
    \              sm++;\n        }\n        strength += cap - sm;\n        if (strength\
    \ > strongest_extension.length())\n            strongest_extension = extensions[i];\n\
    \    }\n    return class_name + \".\" + strongest_extension;\n}", "{\n    int\
    \ strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for (int j = 0; j <\
    \ extensions[i].length(); j++)\n        {\n            if (extensions[i][j] ==\
    \ 'A' || extensions[i][j] == 'a')\n            {\n                cap++;\n   \
    \         }\n            else\n            {\n                sm++;\n        \
    \    }\n        }\n        strength += (cap - sm);\n    }\n    for (int i = 0;\
    \ i < extensions.length; i++)\n    {\n        if (extensions[i] == class_name)\n\
    \        {\n            continue;\n        }\n        if (extensions[i] == class_name\
    \ + \".\" + class_name)\n        {\n            continue;\n        }\n       \
    \ if (extensions[i] == class_name + \".\" + class_name.substr(0, class_name.length()\
    \ - 1))\n        {\n            continue;\n        }\n        if (extensions[i]\
    \ == class_name.substr(0, class_name.length() - 1) + \".\" + class_name)\n   \
    \     {\n            continue;\n        }\n        if (extensions[i] == class_name.substr(0,\
    \ class_name.length() - 2) + \".\" + class_name.substr(class_name.length() - 1))\n\
    \        {\n            continue;\n        }\n        if (extensions[i] == class_name.substr(0,\
    \ class_name.length() - 3) + \".\" + class_name.substr(class_name.length() - 2))\n\
    \        {\n            continue;\n        }\n        if (extensions[i] == class_name.substr(0,\
    \ class_name.length() - 4) + \".\" + class_name.substr(class_name.length() - 3))\n\
    \        {\n            continue;\n        }\n        if (extensions[i] == class_name.substr(0,\
    \ class_name.length() - 5) + \".\" +", "{\n    int strength = 0;\n    string result\
    \ = class_name;\n    for(int i = 0; i < extensions.length; i++)\n    {\n     \
    \   int cap = 0, sm = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n\
    \        {\n            if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                cap++;\n            if(extensions[i][j] == 'a' || extensions[i][j]\
    \ == 'A')\n                sm++;\n        }\n        strength += cap - sm;\n \
    \   }\n    for(int i = 0; i < extensions.length; i++)\n    {\n        if(strength\
    \ == 0)\n            break;\n        if(strength < 0)\n            strength =\
    \ 0;\n        if(strength == 0 && i == 0)\n            continue;\n        if(strength\
    \ < extensions[i].length())\n        {\n            strength = extensions[i].length();\n\
    \            result = class_name + \".\" + extensions[i];\n        }\n    }\n\
    \    return result;\n}", "{\n    int strength = 0;\n    int cap = 0;\n    int\
    \ sm = 0;\n    int i = 0;\n    string str = \"\";\n    for(i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            if(extensions[i][j] == 'a' || extensions[i][j]\
    \ == 'A')\n                sm++;\n        }\n        strength = cap - sm;\n  \
    \      if(strength > strength)\n        {\n            str = class_name + \".\"\
    \ + extensions[i];\n            strength = cap - sm;\n        }\n    }\n    return\
    \ str;\n}", "{\n    int cap, sm;\n    string result;\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        if(cap - sm > result.length())\n            result = extensions[i];\n\
    \    }\n    return class_name + \".\" + result;\n}", "{\n    int strength = 0;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        strength = strength + (extensions[i].length() - extensions[i].find_first_of(\"\
    abcdefghijklmnopqrstuvwxyz\"));\n        cap = cap + extensions[i].find_first_of(\"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        sm = sm + extensions[i].find_first_of(\"\
    abcdefghijklmnopqrstuvwxyz\");\n    }\n    return class_name + \".\" + extensions[strength\
    \ < 0 ? 0 : strength > extensions.length - 1 ? extensions.length - 1 : strength]\
    \ + \".\";\n}", "{\n    int cap = 0, sm = 0;\n    for (int i = 0; i < class_name.length();\
    \ i++) {\n        if (class_name[i] >= 'A' && class_name[i] <= 'Z') {\n      \
    \      cap++;\n        }\n        if (class_name[i] >= 'a' && class_name[i] <=\
    \ 'z') {\n            sm++;\n        }\n    }\n    \n    int strength = cap -\
    \ sm;\n    string result = class_name;\n    for (int i = 0; i < extensions.length;\
    \ i++) {\n        if (extensions[i].length() > 0 && strength == 0) {\n       \
    \     return result + \".\" + extensions[i];\n        }\n        if (extensions[i].length()\
    \ > 0 && strength > 0) {\n            int ext_cap = 0, ext_sm = 0;\n         \
    \   for (int j = 0; j < extensions[i].length(); j++) {\n                if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z') {\n                    ext_cap++;\n     \
    \           }\n                if (extensions[i][j] >= 'a' && extensions[i][j]\
    \ <= 'z') {\n                    ext_sm++;\n                }\n            }\n\
    \            if (ext_cap - ext_sm > strength) {\n                strength = ext_cap\
    \ - ext_sm;\n                result = class_name;\n            }\n        }\n\
    \    }\n    return result + \".\" + extensions[0];\n}", "{\n    int strength =\
    \ 0;\n    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for (int j = 0; j <\
    \ extensions[i].length(); j++)\n        {\n            if (extensions[i][j] ==\
    \ 'A' || extensions[i][j] == 'a')\n            {\n                cap++;\n   \
    \         }\n            else\n            {\n                sm++;\n        \
    \    }\n        }\n        strength += cap - sm;\n    }\n    for (int i = 0; i\
    \ < extensions.length; i++)\n    {\n        if (extensions[i].compare(class_name)\
    \ == 0)\n        {\n            return class_name + \".\" + extensions[i];\n \
    \       }\n    }\n    return class_name + \".\" + extensions[0];\n}", "{\n   \
    \ int cap, sm;\n    string ext;\n    for (int i = 0; i < extensions.length; i++)\n\
    \    {\n        ext = extensions[i];\n        cap = 0;\n        sm = 0;\n    \
    \    for (int j = 0; j < ext.length(); j++)\n        {\n            if (ext[j]\
    \ >= 'A' && ext[j] <= 'Z')\n                cap++;\n            else\n       \
    \         sm++;\n        }\n        if (cap - sm > 0)\n            return class_name\
    \ + \".\" + ext;\n    }\n    return class_name + \".NONE\";\n}", "{\n    int CAP,\
    \ SM;\n    int strength = 0;\n    string result = \"\";\n    for (int i = 0; i\
    \ < extensions.length; i++)\n    {\n        CAP = 0;\n        SM = 0;\n      \
    \  for (int j = 0; j < extensions[i].length(); j++)\n        {\n            if\
    \ (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n                CAP++;\n\
    \            else if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z')\n  \
    \              SM++;\n        }\n        strength += CAP - SM;\n        if (strength\
    \ > result.length())\n            result = class_name + \".\" + extensions[i];\n\
    \    }\n    return result;\n}", "{\n    int strength = 0;\n    int cap = 0;\n\
    \    int sm = 0;\n    for(int i = 0; i < extensions.length; i++)\n    {\n    \
    \    cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        strength += (cap - sm);\n    }\n    string ret = class_name;\n\
    \    for(int i = 0; i < extensions.length; i++)\n    {\n        if(extensions[i]\
    \ == class_name)\n            continue;\n        if(extensions[i] == ret)\n  \
    \          continue;\n        if(strength == 0)\n            continue;\n     \
    \   if(strength == strength)\n        {\n            if(extensions[i] < ret)\n\
    \                ret = extensions[i];\n        }\n        else if(strength > strength)\n\
    \        {\n            if(extensions[i] < ret)\n                ret = extensions[i];\n\
    \        }\n    }\n    return ret;\n}", "{\n    int strength = 0;\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length; i++) {\n \
    \       int c = 0;\n        int l = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++) {\n            if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\
    \ {\n                c++;\n            }\n            if (extensions[i][j] ==\
    \ 'a' || extensions[i][j] == 'A') {\n                l++;\n            }\n   \
    \     }\n        strength += c - l;\n        if (c > cap) {\n            cap =\
    \ c;\n        }\n        if (l > sm) {\n            sm = l;\n        }\n    }\n\
    \    string ret = class_name;\n    for (int i = 0; i < extensions.length; i++)\
    \ {\n        if (cap - sm == strength && extensions[i] < ret) {\n            ret\
    \ = extensions[i];\n        }\n    }\n    return ret;\n}", "{\n    int CAP, SM;\n\
    \    CAP = SM = 0;\n    for (int i = 0; i < extensions.length; i++)\n    {\n \
    \       CAP += count(extensions[i], 'A');\n        SM += count(extensions[i],\
    \ 'a');\n    }\n    return class_name + \".\" + extensions[count_sort(extensions,\
    \ SM, CAP)];\n}", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n\
    \    for(int i = 0; i < extensions.length; i++)\n    {\n        strength += (extensions[i].length()\
    \ - extensions[i].find_first_of(\"abcdefghijklmnopqrstuvwxyz\"));\n        cap\
    \ += extensions[i].find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        sm\
    \ += extensions[i].find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n    }\n   \
    \ return class_name + \".\" + extensions[strength < 0 ? 0 : strength].substr(0,\
    \ extensions[strength < 0 ? 0 : strength].length() - 1);\n}", "{\n    int cap\
    \ = 0, sm = 0;\n    for (int i = 0; i < class_name.length(); i++)\n        if\
    \ (class_name[i] >= 'A' && class_name[i] <= 'Z')\n            cap++;\n       \
    \ else\n            sm++;\n    \n    int strength = cap - sm;\n    \n    string\
    \ best_ext = \"\";\n    for (int i = 0; i < extensions.length; i++)\n    {\n \
    \       int ext_cap = 0, ext_sm = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n\
    \                ext_cap++;\n            else\n                ext_sm++;\n   \
    \     \n        if (ext_cap - ext_sm > strength)\n        {\n            strength\
    \ = ext_cap - ext_sm;\n            best_ext = extensions[i];\n        }\n    }\n\
    \    \n    return class_name + \".\" + best_ext;\n}", "{\n    int strength = 0;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        int c = 0;\n        int l = 0;\n        for (int j = 0;\
    \ j < extensions[i].length(); j++)\n        {\n            if (extensions[i][j]\
    \ == '.')\n            {\n                break;\n            }\n            if\
    \ (extensions[i][j] == '_')\n            {\n                continue;\n      \
    \      }\n            if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \            {\n                c++;\n            }\n            if (extensions[i][j]\
    \ == 'a')\n            {\n                l++;\n            }\n        }\n   \
    \     strength += c - l;\n        cap += c;\n        sm += l;\n    }\n    strength\
    \ = strength / (cap - sm);\n    string result = class_name;\n    for (int i =\
    \ 0; i < extensions.length; i++)\n    {\n        if (strength == extensions[i].length())\n\
    \        {\n            result += \".\" + extensions[i];\n        }\n    }\n \
    \   return result;\n}", "{\n    int strength = 0;\n    int cap = 0;\n    int sm\
    \ = 0;\n    for(int i = 0; i < extensions.length; i++)\n    {\n        int c =\
    \ 0;\n        int l = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n\
    \        {\n            if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                c++;\n            if(extensions[i][j] == 'a')\n             \
    \   l++;\n        }\n        strength += (c - l);\n        if(c > cap)\n     \
    \       cap = c;\n        if(l > sm)\n            sm = l;\n    }\n    if(cap -\
    \ sm > 0)\n        return class_name + \".\" + extensions[0];\n    else\n    \
    \    return class_name + \".\" + extensions[extensions.length - 1];\n}", "{\n\
    \    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int i = 0;\
    \ i < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n    \
    \    for (int j = 0; j < extensions[i].length(); j++)\n        {\n           \
    \ if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n            {\n   \
    \             cap++;\n            }\n            else\n            {\n       \
    \         sm++;\n            }\n        }\n        strength += (cap - sm);\n \
    \   }\n    for (int i = 0; i < extensions.length; i++)\n    {\n        if (extensions[i]\
    \ == class_name)\n        {\n            return class_name + \".\" + extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + extensions[0];\n}", "{\n  \
    \  int cap, sm;\n    string ret = class_name;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for (int j = 0; j <\
    \ extensions[i].length(); j++)\n        {\n            if (extensions[i][j] ==\
    \ 'A' || extensions[i][j] == 'a')\n                cap++;\n            if (extensions[i][j]\
    \ == 'a' || extensions[i][j] == 'A')\n                sm++;\n        }\n     \
    \   if (cap - sm > ret.length())\n            ret = class_name + \".\" + extensions[i];\n\
    \    }\n    return ret;\n}", "{\n    int strength = 0;\n    string strongest_extension\
    \ = \"\";\n    for (int i = 0; i < extensions.length; i++)\n    {\n        int\
    \ cap = 0;\n        int sm = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            if (extensions[i][j] == 'a' ||\
    \ extensions[i][j] == 'A')\n                sm++;\n        }\n        strength\
    \ += cap - sm;\n        if (strength > strongest_extension.length())\n       \
    \     strongest_extension = extensions[i];\n    }\n    return class_name + \"\
    .\" + strongest_extension;\n}", "{\n    int CAP = 0, SM = 0;\n    for(int i =\
    \ 0; i < class_name.length(); i++)\n    {\n        if(class_name[i] >= 'A' &&\
    \ class_name[i] <= 'Z')\n            CAP++;\n        else\n            SM++;\n\
    \    }\n    \n    int max_strength = CAP - SM;\n    int max_strength_index = 0;\n\
    \    for(int i = 0; i < extensions.length; i++)\n    {\n        int strength =\
    \ CAP - SM;\n        for(int j = 0; j < extensions[i].length(); j++)\n       \
    \ {\n            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n    \
    \            strength--;\n            else\n                strength++;\n    \
    \    }\n        if(strength > max_strength)\n        {\n            max_strength\
    \ = strength;\n            max_strength_index = i;\n        }\n    }\n    return\
    \ class_name + \".\" + extensions[max_strength_index];\n}", "{\n    int strength\
    \ = 0;\n    int cap = 0;\n    int sm = 0;\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            if(extensions[i][j] == 'a' || extensions[i][j]\
    \ == 'A')\n                sm++;\n        }\n        strength += (cap - sm);\n\
    \    }\n    for(int i = 0; i < extensions.length; i++)\n    {\n        if(strength\
    \ == 0)\n            return class_name + \".\" + extensions[i];\n        if(strength\
    \ < 0 && strength > -1)\n            return class_name + \".\" + extensions[i];\n\
    \    }\n    return class_name + \".\" + extensions[0];\n}", "{\n    int strength\
    \ = 0;\n    int cap = 0;\n    int sm = 0;\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        strength += cap - sm;\n    }\n    string result = class_name;\n\
    \    for(int i = 0; i < extensions.length; i++)\n    {\n        if(strength ==\
    \ strength)\n        {\n            if(extensions[i] < result)\n             \
    \   result = extensions[i];\n        }\n    }\n    return result;\n}", "{\n  \
    \  int strength = 0;\n    string strongest_extension = \"\";\n    for (int i =\
    \ 0; i < extensions.length; i++)\n    {\n        int cap = 0;\n        int sm\
    \ = 0;\n        for (int j = 0; j < extensions[i].length(); j++)\n        {\n\
    \            if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n       \
    \     {\n                cap++;\n            }\n            if (extensions[i][j]\
    \ == 'a' || extensions[i][j] == 'A')\n            {\n                sm++;\n \
    \           }\n        }\n        strength += cap - sm;\n        if (strength\
    \ > strongest_extension.length())\n        {\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int\
    \ i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n\
    \        for (int j = 0; j < extensions[i].length(); j++)\n        {\n       \
    \     if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n              \
    \  cap++;\n            if (extensions[i][j] == 'a' || extensions[i][j] == 'A')\n\
    \                sm++;\n        }\n        strength += (cap - sm);\n    }\n  \
    \  string result = class_name;\n    for (int i = 0; i < extensions.length; i++)\n\
    \    {\n        if (strength == 0)\n            break;\n        if (strength ==\
    \ strength && strength == strength)\n        {\n            if (extensions[i]\
    \ < result)\n                result = extensions[i];\n        }\n    }\n    return\
    \ result;\n}", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n\
    \    for (int i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n  \
    \      sm = 0;\n        for (int j = 0; j < extensions[i].length(); j++)\n   \
    \     {\n            if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                cap++;\n            if (extensions[i][j] == 'a' || extensions[i][j]\
    \ == 'A')\n                sm++;\n        }\n        strength += cap - sm;\n \
    \   }\n    for (int i = 0; i < extensions.length; i++)\n    {\n        if (strength\
    \ == 0)\n            return class_name + \".\" + extensions[i];\n        if (strength\
    \ < 0 && strength > -1)\n            return class_name + \".\" + extensions[i];\n\
    \    }\n}", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (int i = 0; i < extensions.length; i++)\n    {\n        int c = 0;\n   \
    \     int l = 0;\n        for (int j = 0; j < extensions[i].length(); j++)\n \
    \       {\n            if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \            {\n                c++;\n            }\n            if (extensions[i][j]\
    \ == 'a' || extensions[i][j] == 'A')\n            {\n                l++;\n  \
    \          }\n        }\n        strength += (c - l);\n        if (c > l)\n  \
    \      {\n            cap = c;\n        }\n        else\n        {\n         \
    \   sm = l;\n        }\n    }\n    string result = class_name + \".\" + extensions[0];\n\
    \    for (int i = 1; i < extensions.length; i++)\n    {\n        if (cap - sm\
    \ < strength)\n        {\n            result = class_name + \".\" + extensions[i];\n\
    \            break;\n        }\n        else if (cap - sm == strength)\n     \
    \   {\n            if (extensions[i] < extensions[i - 1])\n            {\n   \
    \             result = class_name + \".\" + extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    int strength\
    \ = 0;\n    string strongest_extension = \"\";\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        int cap = 0;\n        int sm = 0;\n        for(int j =\
    \ 0; j < extensions[i].length(); j++)\n        {\n            if(extensions[i][j]\
    \ == 'A' || extensions[i][j] == 'a')\n                cap++;\n            else\
    \ if(extensions[i][j] == 'a')\n                sm++;\n        }\n        strength\
    \ += cap - sm;\n    }\n    for(int i = 0; i < extensions.length; i++)\n    {\n\
    \        if(strength == 0)\n        {\n            strongest_extension = class_name\
    \ + \".\" + extensions[i];\n            break;\n        }\n        else if(strength\
    \ < 0 && strength > -(extensions.length - i))\n        {\n            strongest_extension\
    \ = class_name + \".\" + extensions[i];\n            break;\n        }\n    }\n\
    \    return strongest_extension;\n}", "{\n    int CAP, SM;\n    CAP = SM = 0;\n\
    \    for(int i = 0; i < extensions.length; i++)\n    {\n        CAP += extensions[i].count('A');\n\
    \        SM += extensions[i].count('a');\n    }\n    return class_name + \".\"\
    \ + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\"", "{\n    int CAP = 0, SM = 0;\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        CAP += count(extensions[i],\
    \ 'A');\n        SM += count(extensions[i], 'a');\n    }\n    return class_name\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\"", "{\n    int strength = 0;\n\
    \    string best_extension = \"\";\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        int cap = 0;\n        int sm = 0;\n        for(int j =\
    \ 0; j < extensions[i].length(); j++)\n        {\n            if(extensions[i][j]\
    \ == 'A' || extensions[i][j] == 'a')\n                cap++;\n            else\n\
    \                sm++;\n        }\n        strength += cap - sm;\n        if(strength\
    \ > best_extension.length())\n            best_extension = extensions[i];\n  \
    \  }\n    return class_name + \".\" + best_extension;\n}", "{\n    int strength\
    \ = 0;\n    int cap = 0;\n    int sm = 0;\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            if(extensions[i][j] == 'a' || extensions[i][j]\
    \ == 'A')\n                sm++;\n        }\n        strength += cap - sm;\n \
    \   }\n    for(int i = 0; i < extensions.length; i++)\n    {\n        if(extensions[i].compare(class_name)\
    \ == 0)\n            return class_name + \".\" + extensions[i];\n    }\n    return\
    \ class_name + \".\" + extensions[0];\n}", "{\n    int cap = 0;\n    int sm =\
    \ 0;\n    for (int i = 0; i < extensions.length; i++)\n    {\n        cap += count(extensions[i],\
    \ 'A');\n        sm += count(extensions[i], 'a');\n    }\n    return class_name\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0]", "{\n    int strength = 0;\n    string\
    \ strongest_extension = \"\";\n    for (int i = 0; i < extensions.length; i++)\n\
    \    {\n        int cap = 0;\n        int sm = 0;\n        for (int j = 0; j <\
    \ extensions[i].length(); j++)\n        {\n            if (extensions[i][j] ==\
    \ 'A' || extensions[i][j] == 'a')\n            {\n                cap++;\n   \
    \         }\n            else if (extensions[i][j] == 'a' || extensions[i][j]\
    \ == 'A')\n            {\n                sm++;\n            }\n        }\n  \
    \      strength += cap - sm;\n        if (strength > strongest_extension.length())\n\
    \        {\n            strongest_extension = extensions[i];\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}", "{\n    int strength\
    \ = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for (int j = 0; j <\
    \ extensions[i].length(); j++)\n        {\n            if (extensions[i][j] ==\
    \ 'A' || extensions[i][j] == 'a')\n            {\n                cap++;\n   \
    \         }\n            else\n            {\n                sm++;\n        \
    \    }\n        }\n        strength += cap - sm;\n    }\n    for (int i = 0; i\
    \ < extensions.length; i++)\n    {\n        if (extensions[i] == class_name)\n\
    \        {\n            return class_name + \".\" + extensions[i];\n        }\n\
    \    }\n    return class_name + \".\" + extensions[0];\n}", "{\n    int strength\
    \ = 0;\n    string strongest_extension = \"\";\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        int cap = 0, sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else if(extensions[i][j] == 'a')\n\
    \                sm++;\n        }\n        strength += cap - sm;\n        if(strength\
    \ > strongest_extension.length())\n            strongest_extension = extensions[i];\n\
    \    }\n    return class_name + \".\" + strongest_extension;\n}", "{\n    int\
    \ strength = 0;\n    int cap = 0;\n    int sm = 0;\n    string result = \"\";\n\
    \    for (int i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n  \
    \      sm = 0;\n        for (int j = 0; j < extensions[i].length(); j++)\n   \
    \     {\n            if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                cap++;\n            else\n                sm++;\n        }\n\
    \        strength += cap - sm;\n    }\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        if (extensions[i] == class_name)\n            continue;\n\
    \        if (extensions[i] == \"\")\n            continue;\n        if (extensions[i]\
    \ == \" \")\n            continue;\n        if (extensions[i] == \".\")\n    \
    \        continue;\n        if (extensions[i] == \"..\")\n            continue;\n\
    \        if (extensions[i] == \"...\")\n            continue;\n        if (extensions[i]\
    \ == \"...\")\n            continue;\n        if (extensions[i] == \"...\")\n\
    \            continue;\n        if (extensions[i] == \"...\")\n            continue;\n\
    \        if (extensions[i] == \"...\")\n            continue;\n        if (extensions[i]\
    \ == \"...\")\n            continue;\n        if (extensions[i] == \"...\")\n\
    \            continue;\n        if (extensions[i] == \"...\")\n            continue;\n\
    \        if (extensions[i] == \"...\")\n            continue;\n        if (extensions[i]\
    \ == \"...\")\n            continue;\n        if (extensions[i] == \"...\")\n\
    \            continue;\n        if (extensions[i] == \"...\")\n            continue;\n\
    \        if (extensions[i] == \"...\")\n            continue;\n        if (extensions[i]\
    \ == \"...\")\n            continue;\n        if (extensions[i] == \"...\")\n\
    \            continue;\n        if (extensions[i] == \"...\")\n            continue;\n\
    \        ", "{\n    int strength = 0;\n    string result = class_name;\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        int cap = 0, sm = 0;\n  \
    \      for(int j = 0; j < extensions[i].length(); j++)\n        {\n          \
    \  if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n                cap++;\n\
    \            else\n                sm++;\n        }\n        strength += cap -\
    \ sm;\n    }\n    for(int i = 0; i < extensions.length; i++)\n    {\n        if(strength\
    \ == 0)\n            break;\n        if(strength < 0)\n            strength =\
    \ 0;\n        if(strength == 0 && i == 0)\n            continue;\n        if(strength\
    \ < extensions[i].length())\n        {\n            result = class_name + \".\"\
    \ + extensions[i];\n            strength = 0;\n        }\n        else if(strength\
    \ == extensions[i].length())\n        {\n            if(i == 0)\n            \
    \    continue;\n            result = class_name + \".\" + extensions[i];\n   \
    \         strength = 0;\n        }\n    }\n    return result;\n}", "{\n    int\
    \ strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        strength += cap - sm;\n    }\n    \n    int index = 0;\n  \
    \  for(int i = 0; i < extensions.length; i++)\n    {\n        if(strength == strength)\n\
    \        {\n            if(extensions[i] < extensions[index])\n              \
    \  index = i;\n        }\n    }\n    return class_name + \".\" + extensions[index];\n\
    }", "{\n    int cap = 0, sm = 0;\n    for(int i = 0; i < class_name.length();\
    \ i++)\n    {\n        if(class_name[i] >= 'A' && class_name[i] <= 'Z')\n    \
    \        cap++;\n        else if(class_name[i] >= 'a' && class_name[i] <= 'z')\n\
    \            sm++;\n    }\n    int max = 0;\n    string max_ext = \"\";\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        int curr_cap = 0, curr_sm\
    \ = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n        {\n \
    \           if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n         \
    \       curr_cap++;\n            else if(extensions[i][j] >= 'a' && extensions[i][j]\
    \ <= 'z')\n                curr_sm++;\n        }\n        if(curr_cap - curr_sm\
    \ > max)\n        {\n            max = curr_cap - curr_sm;\n            max_ext\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + max_ext;\n\
    }", "{\n    int CAP, SM;\n    string result = class_name;\n    for (int i = 0;\
    \ i < extensions.length; i++)\n    {\n        CAP = 0;\n        SM = 0;\n    \
    \    for (int j = 0; j < extensions[i].length(); j++)\n        {\n           \
    \ if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n                CAP++;\n\
    \            else\n                SM++;\n        }\n        if (CAP - SM > result.length()\
    \ - result.length())\n            result = class_name + \".\" + extensions[i];\n\
    \    }\n    return result;\n}", "{\n    int strength = 0;\n    string result =\
    \ class_name;\n    for (int i = 0; i < extensions.length; i++)\n    {\n      \
    \  int cap = 0, sm = 0;\n        for (int j = 0; j < extensions[i].length(); j++)\n\
    \        {\n            if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                cap++;\n            if (extensions[i][j] == 'a' || extensions[i][j]\
    \ == 'A')\n                sm++;\n        }\n        strength += cap - sm;\n \
    \   }\n    for (int i = 0; i < extensions.length; i++)\n    {\n        if (strength\
    \ == 0)\n            break;\n        if (strength == strength && strength > 0)\n\
    \        {\n            if (extensions[i] < result)\n                result =\
    \ extensions[i];\n        }\n    }\n    return result;\n}", "{\n    int strength\
    \ = 0;\n    string result = class_name;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        int cap = 0, sm = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else if (extensions[i][j] == 'a')\n\
    \                sm++;\n        }\n        strength += cap - sm;\n    }\n    for\
    \ (int i = 0; i < extensions.length; i++)\n    {\n        if (strength == 0)\n\
    \            break;\n        if (strength < 0)\n            strength = 0;\n  \
    \      if (extensions[i] == result)\n            continue;\n        if (extensions[i]\
    \ == result + \".\" + result)\n            continue;\n        if (extensions[i]\
    \ == result + \".\" + result + \".\" + result)\n            continue;\n      \
    \  if (extensions[i] == result + \".\" + result + \".\" + result + \".\" + result)\n\
    \            continue;\n        if (extensions[i] == result + \".\" + result +\
    \ \".\" + result + \".\" + result + \".\" + result)\n            continue;\n \
    \       if (extensions[i] == result + \".\" + result + \".\" + result + \".\"\
    \ + result + \".\" + result + \".\" + result)\n            continue;\n       \
    \ if (extensions[i] == result + \".\" + result + \".\" + result + \".\" + result\
    \ + \".\" + result + \".\" + result + \".\" + result)\n            continue;\n\
    \        if (extensions[i] == result + \".\" + result + \".\" + result + \".\"\
    \ + result + \".\" + result + \".\" + result + \".\" + result + \".\" + result)\n\
    \            continue;\n        if (extensions[i] == result + \".\" + result +\
    \ \".\" + result + \".\" + result + \".\" + result + \".\" + result + \".\" +\
    \ result + \".\" + result + \".\" + result)\n            continue;\n        if\
    \ (extensions[i", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n\
    \    for (int i = 0; i < extensions.length; i++)\n    {\n        int c = 0;\n\
    \        int l = 0;\n        for (int j = 0; j < extensions[i].length(); j++)\n\
    \        {\n            if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \            {\n                c++;\n            }\n            if (extensions[i][j]\
    \ == 'a')\n            {\n                l++;\n            }\n        }\n   \
    \     strength += c - l;\n        if (c > cap)\n        {\n            cap = c;\n\
    \        }\n        if (l > sm)\n        {\n            sm = l;\n        }\n \
    \   }\n    string result = class_name;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        if (cap - sm == strength)\n        {\n            if (extensions[i]\
    \ < result)\n            {\n                result = extensions[i];\n        \
    \    }\n        }\n    }\n    return result;\n}", "{\n    int cap, sm;\n    string\
    \ result = class_name;\n    for (int i = 0; i < extensions.length; i++)\n    {\n\
    \        cap = 0;\n        sm = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        if (cap - sm > result.length())\n            result = class_name\
    \ + \".\" + extensions[i];\n    }\n    return result;\n}", "{\n    int strength\
    \ = 0;\n    string strongest_extension = \"\";\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        int cap = 0;\n        int sm = 0;\n        for(int j =\
    \ 0; j < extensions[i].length(); j++)\n        {\n            if(extensions[i][j]\
    \ == 'A' || extensions[i][j] == 'a')\n                cap++;\n            if(extensions[i][j]\
    \ == 'a' || extensions[i][j] == 'A')\n                sm++;\n        }\n     \
    \   strength += cap - sm;\n        if(strength > strongest_extension.length())\n\
    \            strongest_extension = extensions[i];\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}", "{\n    int strength = 0;\n    string strongest_extension\
    \ = \"\";\n    for (int i = 0; i < extensions.length; i++)\n    {\n        int\
    \ CAP = 0, SM = 0;\n        for (int j = 0; j < extensions[i].length(); j++)\n\
    \        {\n            if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                CAP++;\n            else\n                SM++;\n        }\n\
    \        strength += CAP - SM;\n        if (strength > strongest_extension.length())\n\
    \            strongest_extension = extensions[i];\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}", "{\n    int strength = 0;\n    int cap =\
    \ 0;\n    int sm = 0;\n    for(int i = 0; i < extensions.length; i++)\n    {\n\
    \        cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        strength += cap - sm;\n    }\n    string result = class_name;\n\
    \    for(int i = 0; i < extensions.length; i++)\n    {\n        if(strength ==\
    \ strength)\n        {\n            if(extensions[i] < result)\n             \
    \   result = extensions[i];\n        }\n    }\n    return result;\n}", "{\n  \
    \  int CAP, SM;\n    string result;\n    CAP = SM = 0;\n    for(int i = 0; i <\
    \ extensions.length; i++)\n    {\n        CAP += count(extensions[i], 'A');\n\
    \        SM += count(extensions[i], 'a');\n    }\n    result = class_name + \"\
    .\" + extensions[0];\n    for(int i = 1; i < extensions.length; i++)\n    {\n\
    \        if(CAP - SM < CAP - SM)\n        {\n            result = class_name +\
    \ \".\" + extensions[i];\n        }\n    }\n    return result;\n}", "{\n    int\
    \ CAP, SM;\n    int strength = 0;\n    string extension_name = \"\";\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        CAP = 0;\n        SM = 0;\n\
    \        for(int j = 0; j < extensions[i].length(); j++)\n        {\n        \
    \    if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n                CAP++;\n\
    \            else\n                SM++;\n        }\n        strength += CAP -\
    \ SM;\n        if(strength > strength)\n        {\n            strength = CAP\
    \ - SM;\n            extension_name = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + extension_name;\n}", "{\n    int strength = 0;\n    int\
    \ cap = 0;\n    int sm = 0;\n    for(int i = 0; i < extensions.length; i++)\n\
    \    {\n        int c = 0;\n        int l = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                c++;\n            if(extensions[i][j] == 'a')\n   \
    \             l++;\n        }\n        if(c > strength)\n            strength\
    \ = c;\n        if(l > sm)\n            sm = l;\n    }\n    cap = strength - sm;\n\
    \    string result = class_name;\n    for(int i = 0; i < extensions.length; i++)\n\
    \    {\n        if(cap == strength && extensions[i] < result)\n            result\
    \ = extensions[i];\n    }\n    return result;\n}", "{\n    int strength = 0;\n\
    \    string strongest_extension = \"\";\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        int cap = 0, sm = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            if (extensions[i][j] == 'a' ||\
    \ extensions[i][j] == 'A')\n                sm++;\n        }\n        strength\
    \ += cap - sm;\n        if (strength > strongest_extension.length())\n       \
    \     strongest_extension = extensions[i];\n    }\n    return class_name + \"\
    .\" + strongest_extension;\n}", "{\n    int cap = 0, sm = 0;\n    for (int i =\
    \ 0; i < class_name.length(); i++)\n        if (class_name[i] >= 'A' && class_name[i]\
    \ <= 'Z')\n            cap++;\n        else\n            sm++;\n    \n    int\
    \ max_cap = 0, max_sm = 0;\n    string max_ext = \"\";\n    for (int i = 0; i\
    \ < extensions.length; i++)\n    {\n        int cap_ext = 0, sm_ext = 0;\n   \
    \     for (int j = 0; j < extensions[i].length(); j++)\n            if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z')\n                cap_ext++;\n           \
    \ else\n                sm_ext++;\n        if (cap_ext > max_cap || (cap_ext ==\
    \ max_cap && sm_ext > max_sm))\n        {\n            max_cap = cap_ext;\n  \
    \          max_sm = sm_ext;\n            max_ext = extensions[i];\n        }\n\
    \    }\n    return class_name + \".\" + max_ext;\n}", "{\n    int strength = 0;\n\
    \    string best_extension = \"\";\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        int cap = 0, sm = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        strength += cap - sm;\n        if (strength > best_extension.length())\n\
    \            best_extension = extensions[i];\n    }\n    return class_name + \"\
    .\" + best_extension;\n}", "{\n    int strength = 0;\n    string strongest_extension\
    \ = \"\";\n    for (int i = 0; i < extensions.length; i++)\n    {\n        int\
    \ cap = 0, sm = 0;\n        for (int j = 0; j < extensions[i].length(); j++)\n\
    \        {\n            if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                cap++;\n            if (extensions[i][j] == 'a' || extensions[i][j]\
    \ == 'A')\n                sm++;\n        }\n        strength += cap - sm;\n \
    \       if (strength > strongest_extension.length())\n            strongest_extension\
    \ = extensions[i];\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }", "{\n    int CAP, SM;\n    CAP = SM = 0;\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        CAP += count(extensions[i], 'A');\n        SM += count(extensions[i],\
    \ 'a');\n    }\n    return class_name + \".\" + extensions[count_sort(extensions,\
    \ SM, CAP)];\n}", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n\
    \    string result = \"\";\n    for (int i = 0; i < extensions.length; i++)\n\
    \    {\n        cap = 0;\n        sm = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n            {\n                cap++;\n            }\n            else\n\
    \            {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    for (int i = 0; i < extensions.length; i++)\n    {\n\
    \        if (extensions[i] == class_name)\n        {\n            continue;\n\
    \        }\n        if (extensions[i] == class_name + \".\" + class_name)\n  \
    \      {\n            continue;\n        }\n        if (extensions[i] == class_name\
    \ + \".\" + class_name + \".\" + class_name)\n        {\n            continue;\n\
    \        }\n        if (extensions[i] == class_name + \".\" + class_name + \"\
    .\" + class_name + \".\" + class_name)\n        {\n            continue;\n   \
    \     }\n        if (extensions[i] == class_name + \".\" + class_name + \".\"\
    \ + class_name + \".\" + class_name + \".\" + class_name)\n        {\n       \
    \     continue;\n        }\n        if (extensions[i] == class_name + \".\" +\
    \ class_name + \".\" + class_name + \".\" + class_name + \".\" + class_name +\
    \ \".\" + class_name)\n        {\n            continue;\n        }\n        if\
    \ (extensions[i] == class_name + \".\" + class_name + \".\" + class_name + \"\
    .\" + class_name + \".\" + class_name + \".\" + class_name + \".\" + class_name)\n\
    \        {\n            continue;\n        }\n        if (extensions[i] == class_name\
    \ + \".\" + class_name + \".\" + class_name + \".\" +", "{\n    int CAP, SM;\n\
    \    string str;\n    for (int i = 0; i < extensions.length; i++)\n    {\n   \
    \     CAP = 0;\n        SM = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                CAP++;\n            else\n                SM++;\n \
    \       }\n        if (CAP - SM > 0)\n        {\n            str = class_name\
    \ + \".\" + extensions[i];\n            return str;\n        }\n    }\n    return\
    \ class_name;\n}", "{\n    int strength = 0;\n    string strongest_extension =\
    \ \"\";\n    for (int i = 0; i < extensions.length; i++)\n    {\n        int cap\
    \ = 0;\n        int sm = 0;\n        for (int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if (extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        strength += cap - sm;\n        if (strength > strongest_extension.length())\n\
    \            strongest_extension = extensions[i];\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}", "{\n    int strength = 0;\n    int cap =\
    \ 0;\n    int sm = 0;\n    for(int i = 0; i < extensions.length; i++)\n    {\n\
    \        cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        strength += cap - sm;\n    }\n    \n    int max_strength =\
    \ strength;\n    string max_extension = \"\";\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        if(strength == max_strength && strength == cap - sm)\n    \
    \    {\n            if(extensions[i] < max_extension)\n                max_extension\
    \ = extensions[i];\n        }\n        else if(strength > max_strength)\n    \
    \    {\n            max_strength = strength;\n            max_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + max_extension;\n}", "{\n  \
    \  int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i\
    \ < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n      \
    \  for (int j = 0; j < extensions[i].length(); j++)\n        {\n            if\
    \ (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n                cap++;\n\
    \            else\n                sm++;\n        }\n        strength += (cap\
    \ - sm);\n    }\n    string result = class_name + \".\" + extensions[0];\n   \
    \ for (int i = 1; i < extensions.length; i++)\n    {\n        if (strength ==\
    \ extensions[i].length())\n        {\n            if (extensions[i] < result)\n\
    \                result = extensions[i];\n        }\n    }\n    return result;\n\
    }", "{\n    int CAP, SM;\n    string str;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        CAP = 0;\n        SM = 0;\n        for (int j = 0; j <\
    \ extensions[i].length(); j++)\n        {\n            if (extensions[i][j] ==\
    \ 'A' || extensions[i][j] == 'a')\n                CAP++;\n            if (extensions[i][j]\
    \ == 'a' || extensions[i][j] == 'A')\n                SM++;\n        }\n     \
    \   if (CAP - SM > 0)\n        {\n            str = class_name + \".\" + extensions[i];\n\
    \        }\n    }\n    return str;\n}", "{\n    int strength = 0;\n    string\
    \ strongest_extension = \"\";\n    for(int i = 0; i < extensions.length; i++)\n\
    \    {\n        int cap = 0;\n        int sm = 0;\n        for(int j = 0; j <\
    \ extensions[i].length(); j++)\n        {\n            if(extensions[i][j] ==\
    \ 'A' || extensions[i][j] == 'a')\n                cap++;\n            else if(extensions[i][j]\
    \ == 'a')\n                sm++;\n        }\n        strength += cap - sm;\n \
    \   }\n    for(int i = 0; i < extensions.length; i++)\n    {\n        if(strength\
    \ == 0)\n        {\n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \            break;\n        }\n        else if(strength < 0 && strength > -1)\n\
    \        {\n            if(extensions[i] < strongest_extension)\n            {\n\
    \                strongest_extension = class_name + \".\" + extensions[i];\n \
    \           }\n        }\n    }\n    return strongest_extension;\n}", "{\n   \
    \ int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i\
    \ < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n      \
    \  for (int j = 0; j < extensions[i].length(); j++)\n        {\n            if\
    \ (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n                cap++;\n\
    \            else\n                sm++;\n        }\n        strength += cap -\
    \ sm;\n    }\n    string result = class_name;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        if (extensions[i] == result)\n            continue;\n \
    \       if (extensions[i] == result + \".class\")\n            continue;\n   \
    \     if (extensions[i] == result + \".java\")\n            continue;\n      \
    \  if (extensions[i] == result + \".txt\")\n            continue;\n        if\
    \ (extensions[i] == result + \".jpg\")\n            continue;\n        if (extensions[i]\
    \ == result + \".png\")\n            continue;\n        if (extensions[i] == result\
    \ + \".gif\")\n            continue;\n        if (extensions[i] == result + \"\
    .class\")\n            continue;\n        if (extensions[i] == result + \".java\"\
    )\n            continue;\n        if (extensions[i] == result + \".txt\")\n  \
    \          continue;\n        if (extensions[i] == result + \".jpg\")\n      \
    \      continue;\n        if (extensions[i] == result + \".png\")\n          \
    \  continue;\n        if (extensions[i] == result + \".gif\")\n            continue;\n\
    \        if (extensions[i] == result + \".class\")\n            continue;\n  \
    \      if (extensions[i] == result + \".java\")\n            continue;\n     \
    \   if (extensions[i] == result + \".txt\")\n            continue;\n        if\
    \ (extensions[i] == result + \".jpg\")\n            continue;\n        if (extensions[i]\
    \ == result + \".png\")\n            continue;\n        if (extensions[i] == result\
    \ + \".gif\")\n            ", "{\n    int strength = 0;\n    int cap = 0;\n  \
    \  int sm = 0;\n    for(int i = 0; i < extensions.length; i++)\n    {\n      \
    \  cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        strength += cap - sm;\n    }\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        if(strength == 0)\n            return class_name + \".\"\
    \ + extensions[i];\n        if(strength < 0 && strength > -1)\n            return\
    \ class_name + \".\" + extensions[i];\n        if(strength > 0 && strength < 1)\n\
    \            return class_name + \".\" + extensions[i];\n    }\n    return class_name\
    \ + \".\" + extensions[0];\n}", "{\n    int strength = 0;\n    int cap = 0;\n\
    \    int sm = 0;\n    string result = \"\";\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for (int j = 0; j <\
    \ extensions[i].length(); j++)\n        {\n            if (extensions[i][j] ==\
    \ 'A' || extensions[i][j] == 'a')\n                cap++;\n            else\n\
    \                sm++;\n        }\n        strength += cap - sm;\n    }\n    for\
    \ (int i = 0; i < extensions.length; i++)\n    {\n        if (extensions[i] ==\
    \ class_name)\n            continue;\n        if (extensions[i] == class_name\
    \ + \".\" + class_name)\n            continue;\n        if (extensions[i] == class_name\
    \ + \".\" + class_name.substr(0, class_name.length() - 1))\n            continue;\n\
    \        if (extensions[i] == class_name.substr(0, class_name.length() - 1) +\
    \ \".\" + class_name)\n            continue;\n        if (extensions[i] == class_name.substr(0,\
    \ class_name.length() - 1) + \".\" + class_name.substr(0, class_name.length()\
    \ - 1))\n            continue;\n        if (extensions[i] == class_name.substr(0,\
    \ class_name.length() - 2) + \".\" + class_name)\n            continue;\n    \
    \    if (extensions[i] == class_name.substr(0, class_name.length() - 2) + \".\"\
    \ + class_name.substr(0, class_name.length() - 2))\n            continue;\n  \
    \      if (extensions[i] == class_name.substr(0, class_name.length() - 3) + \"\
    .\" + class_name)\n            continue;\n        if (extensions[i] == class_name.substr(0,\
    \ class_name.length() - 3) + \".\" + class_name.substr(0, class_name.length()\
    \ -", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n\
    \        for(int j = 0; j < extensions[i].length(); j++)\n        {\n        \
    \    if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n                cap++;\n\
    \            else\n                sm++;\n        }\n        strength += cap -\
    \ sm;\n    }\n    \n    for(int i = 0; i < extensions.length; i++)\n    {\n  \
    \      if(extensions[i] == class_name)\n            continue;\n        if(extensions[i]\
    \ == class_name + \".java\")\n            continue;\n        if(extensions[i]\
    \ == class_name + \".class\")\n            continue;\n        if(extensions[i]\
    \ == class_name + \".cpp\")\n            continue;\n        if(extensions[i] ==\
    \ class_name + \".h\")\n            continue;\n        if(extensions[i] == class_name\
    \ + \".c\")\n            continue;\n        if(extensions[i] == class_name + \"\
    .py\")\n            continue;\n        if(extensions[i] == class_name + \".rb\"\
    )\n            continue;\n        if(extensions[i] == class_name + \".sh\")\n\
    \            continue;\n        if(extensions[i] == class_name + \".cs\")\n  \
    \          continue;\n        if(extensions[i] == class_name + \".java\")\n  \
    \          continue;\n        if(extensions[i] == class_name + \".scala\")\n \
    \           continue;\n        if(extensions[i] == class_name + \".groovy\")\n\
    \            continue;\n        if(extensions[i] == class_name + \".clj\")\n \
    \           continue;\n        if(extensions[i] == class_name + \".js\")\n   \
    \         continue;\n        if(extensions[i] == class_name + \".ts\")\n     \
    \       continue;\n        if(extensions[i] == class_name + \".tsx\")\n      \
    \      continue;\n        if(ext", "{\n    int CAP = 0, SM = 0;\n    for (int\
    \ i = 0; i < extensions.length; i++)\n    {\n        CAP += count(extensions[i],\
    \ 'A');\n        SM += count(extensions[i], 'a');\n    }\n    return class_name\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" +\
    \ extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0]\
    \ + \".\" + extensions[0] + \".\" + extensions[0] + \".\" + extensions[0] + \"\
    .\" + extensions[0] + \".\" + extensions[0] + \".\"", "{\n    int CAP = 0, SM\
    \ = 0;\n    for (int i = 0; i < class_name.length(); i++)\n    {\n        if (class_name[i]\
    \ >= 'A' && class_name[i] <= 'Z')\n            CAP++;\n        else\n        \
    \    SM++;\n    }\n    \n    string result = class_name;\n    for (int i = 0;\
    \ i < extensions.length; i++)\n    {\n        CAP = 0;\n        SM = 0;\n    \
    \    for (int j = 0; j < extensions[i].length(); j++)\n        {\n           \
    \ if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n                CAP++;\n\
    \            else\n                SM++;\n        }\n        if (CAP - SM > result.length()\
    \ - result.length() / 2)\n            result = class_name + \".\" + extensions[i];\n\
    \    }\n    return result;\n}", "{\n    int strength = 0;\n    string strongest_extension\
    \ = \"\";\n    for(int i = 0; i < extensions.length; i++)\n    {\n        int\
    \ CAP = 0;\n        int SM = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                CAP++;\n            else\n                SM++;\n \
    \       }\n        strength += CAP - SM;\n        if(strength > strongest_extension.length())\n\
    \            strongest_extension = extensions[i];\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}", "{\n    int CAP, SM;\n    int strength =\
    \ 0;\n    string extension = \"\";\n    \n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        CAP = 0;\n        SM = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] == 'A' || extensions[i][j]\
    \ == 'a')\n                CAP++;\n            else\n                SM++;\n \
    \       }\n        strength += CAP - SM;\n        if(strength > extension.length())\n\
    \            extension = extensions[i];\n    }\n    return class_name + \".\"\
    \ + extension;\n}", "{\n    int strength = 0;\n    int cap = 0;\n    int sm =\
    \ 0;\n    for(int i = 0; i < extensions.length; i++)\n    {\n        int c = 0;\n\
    \        int l = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n\
    \        {\n            if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                c++;\n            if(extensions[i][j] == 'a')\n             \
    \   l++;\n        }\n        if(c > sm)\n            sm = c;\n        if(l > cap)\n\
    \            cap = l;\n        strength += c - l;\n    }\n    strength = strength\
    \ / (cap - sm);\n    string result = class_name;\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        if(strength == extensions[i].length())\n        {\n   \
    \         result += \".\" + extensions[i];\n            break;\n        }\n  \
    \  }\n    return result;\n}", "{\n    int CAP, SM;\n    CAP = SM = 0;\n    for\
    \ (int i = 0; i < extensions.length; i++)\n    {\n        CAP += count(extensions[i],\
    \ 'A');\n        SM += count(extensions[i], 'a');\n    }\n    return class_name\
    \ + \".\" + extensions[count_sort(extensions, SM, CAP)];\n}", "{\n    int CAP,\
    \ SM;\n    int strength = 0;\n    string str = class_name;\n    for (int i = 0;\
    \ i < extensions.length; i++)\n    {\n        CAP = 0;\n        SM = 0;\n    \
    \    for (int j = 0; j < extensions[i].length(); j++)\n        {\n           \
    \ if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n                CAP++;\n\
    \            if (extensions[i][j] == 'a' || extensions[i][j] == 'A')\n       \
    \         SM++;\n        }\n        strength += CAP - SM;\n    }\n    for (int\
    \ i = 0; i < extensions.length; i++)\n    {\n        if (extensions[i] == class_name)\n\
    \            continue;\n        CAP = 0;\n        SM = 0;\n        for (int j\
    \ = 0; j < extensions[i].length(); j++)\n        {\n            if (extensions[i][j]\
    \ == 'A' || extensions[i][j] == 'a')\n                CAP++;\n            if (extensions[i][j]\
    \ == 'a' || extensions[i][j] == 'A')\n                SM++;\n        }\n     \
    \   if (strength < CAP - SM)\n        {\n            str = class_name + \".\"\
    \ + extensions[i];\n            strength = CAP - SM;\n        }\n    }\n    return\
    \ str;\n}", "{\n    int cap, sm;\n    string result;\n    for(int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++)\n        {\n            if(extensions[i][j] >= 'A' && extensions[i][j]\
    \ <= 'Z')\n                cap++;\n            else\n                sm++;\n \
    \       }\n        if(cap - sm > result.length())\n            result = extensions[i];\n\
    \    }\n    return class_name + \".\" + result;\n}", "{\n    int strength = 0;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        strength = 0;\n        cap = 0;\n        sm = 0;\n    \
    \    for (int j = 0; j < extensions[i].length(); j++)\n        {\n           \
    \ if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n                cap++;\n\
    \            if (extensions[i][j] == 'a' || extensions[i][j] == 'A')\n       \
    \         sm++;\n        }\n        strength = cap - sm;\n        if (strength\
    \ > strength)\n        {\n            strength = strength;\n            cap =\
    \ cap;\n            sm = sm;\n        }\n    }\n    return class_name + \".\"\
    \ + extensions[strength];\n}", "{\n    int strength = 0;\n    string strongest_extension\
    \ = \"\";\n    for(int i = 0; i < extensions.length; i++)\n    {\n        int\
    \ cap = 0, sm = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n\
    \        {\n            if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                cap++;\n            if(extensions[i][j] == 'a' || extensions[i][j]\
    \ == 'A')\n                sm++;\n        }\n        strength += cap - sm;\n \
    \       if(strength > strongest_extension.length())\n            strongest_extension\
    \ = extensions[i];\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }", "{\n    int strength = 0;\n    string strongest_extension = \"\";\n    for\
    \ (int i = 0; i < extensions.length; i++)\n    {\n        int cap = 0;\n     \
    \   int sm = 0;\n        for (int j = 0; j < extensions[i].length(); j++)\n  \
    \      {\n            if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n\
    \                cap++;\n            if (extensions[i][j] == 'a' || extensions[i][j]\
    \ == 'A')\n                sm++;\n        }\n        strength += cap - sm;\n \
    \       if (strength > strongest_extension.length())\n            strongest_extension\
    \ = extensions[i];\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n\
    \        for(int j = 0; j < extensions[i].length(); j++)\n        {\n        \
    \    if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n                cap++;\n\
    \            else\n                sm++;\n        }\n        strength += cap -\
    \ sm;\n    }\n    int max = 0;\n    string max_ext = \"\";\n    for(int i = 0;\
    \ i < extensions.length; i++)\n    {\n        if(strength == max)\n        {\n\
    \            if(extensions[i] < max_ext)\n                max_ext = extensions[i];\n\
    \        }\n        else if(strength > max)\n        {\n            max = strength;\n\
    \            max_ext = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + max_ext;\n}", "{\n    int cap, sm;\n    string ret = class_name;\n\
    \    for(int i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n   \
    \     sm = 0;\n        for(int j = 0; j < extensions[i].length(); j++)\n     \
    \   {\n            if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n  \
    \              cap++;\n            else\n                sm++;\n        }\n  \
    \      if(cap - sm > ret.length())\n            ret = class_name + \".\" + extensions[i];\n\
    \    }\n    return ret;\n}", "{\n    int cap, sm;\n    string result;\n    for(int\
    \ i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n\
    \        for(int j = 0; j < extensions[i].length(); j++)\n        {\n        \
    \    if(extensions[i][j] == 'A' || extensions[i][j] == 'a')\n                cap++;\n\
    \            else\n                sm++;\n        }\n        if(cap - sm > result.length())\n\
    \            result = extensions[i];\n    }\n    return class_name + \".\" + result;\n\
    }", "{\n    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int\
    \ i = 0; i < extensions.length; i++)\n    {\n        cap = 0;\n        sm = 0;\n\
    \        for (int j = 0; j < extensions[i].length(); j++)\n        {\n       \
    \     if (extensions[i][j] == 'A' || extensions[i][j] == 'a')\n            {\n\
    \                cap++;\n            }\n            else\n            {\n    \
    \            sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    for (int i = 0; i < extensions.length; i++)\n    {\n        if (extensions[i]\
    \ == class_name)\n        {\n            return class_name + \".\" + extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + extensions[0];\n}", "{\n  \
    \  int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i\
    \ < extensions.length; i++)\n    {\n        string extension = extensions[i];\n\
    \        cap = count_uppercase(extension);\n        sm = count_lowercase(extension);\n\
    \        strength += cap - sm;\n    }\n    string result = class_name + \".\"\
    \ + extensions[0];\n    for (int i = 1; i < extensions.length; i++)\n    {\n \
    \       if (strength == extensions[i].length())\n        {\n            if (extensions[i]\
    \ < result)\n            {\n                result = extensions[i];\n        \
    \    }\n        }\n    }\n    return result;\n}", "{\n    int strength = 0;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.length;\
    \ i++)\n    {\n        cap = 0;\n        sm = 0;\n        for (int j = 0; j <\
    \ extensions[i].length(); j++)\n        {\n            if (extensions[i][j] >=\
    \ 'A' && extensions[i][j] <= 'Z')\n            {\n                cap++;\n   \
    \         }\n            else if (extensions[i][j] >= 'a' && extensions[i][j]\
    \ <= 'z')\n            {\n                sm++;\n            }\n        }\n  \
    \      strength += (cap - sm);\n    }\n    string result = class_name + \".\"\
    ;\n    for (int i = 0; i < extensions.length; i++)\n    {\n        if (strength\
    \ == extensions[i].length())\n        {\n            result += extensions[i];\n\
    \            return result;\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
