{
  "name": "HumanEval_25_factorize",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n",
  "tests": "unittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
  "completions": [
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong p = 2;\n\twhile (n > 1) \n\t{\n\t\twhile (n % p == 0) \n\t\t{\n\t\t\tfactors[factors.length - 1]++;\n\t\t\tn /= p;\n\t\t}\n\t\tp++;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) \n    {\n        while (n % p == 0) \n        {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors[i-1]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n+1];\n    long i = 2;\n    while (i <= n)\n    {\n        while (n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers(n);\n    for (int i = 0; i < primes.length; i++) {\n        factors[i] = primes[i];\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers(n);\n    for (int i = 0; i < primes.length; i++) {\n        long prime = primes[i];\n        int count = 0;\n        while (n % prime == 0) {\n            n /= prime;\n            count++;\n        }\n        factors[i] = count;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        while (n % i == 0) {\n            factors[i-1]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) factors[n-1]++;\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-1]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors[i]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors[i - 2]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong p = 2;\n\twhile (n > 1)\n\t{\n\t\twhile (n % p == 0)\n\t\t{\n\t\t\tfactors[factors.length - 1]++;\n\t\t\tn /= p;\n\t\t}\n\t\tp++;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            factors[i - 1]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n - 1]++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            factors[i] = factors[n/i] + 1;\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n)\n    {\n        while (n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1)\n    {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            factors[i - 1]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n - 1]++;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong factor = 2;\n\twhile (n > 1) {\n\t\twhile (n % factor == 0) {\n\t\t\tfactors[factors.length - 1]++;\n\t\t\tn /= factor;\n\t\t}\n\t\tfactor++;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) \n    {\n        while (n % i == 0) \n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) \n    {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            factors[i] = factors[n/i] + 1;\n            n = n/i;\n        }\n        else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-1]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) \n    {\n        while (n % p == 0) \n        {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long factor = 2;\n    while (n > 1)\n    {\n        while (n % factor == 0)\n        {\n            factors[factors.length - 1]++;\n            n /= factor;\n        }\n        factor++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long factor = 2;\n    while (n > 1) \n    {\n        while (n % factor == 0) \n        {\n            factors[factors.length - 1]++;\n            n /= factor;\n        }\n        factor++;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1)\n\t{\n\t\twhile (n % i == 0)\n\t\t{\n\t\t\tfactors[i-2]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long factor = 2;\n    while (n > 1) {\n        while (n % factor == 0) {\n            factors[factors.length - 1]++;\n            n /= factor;\n        }\n        factor++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primes = primes();\n    long prime = 1;\n    for (int i = 0; i < primes.length; i++) {\n        while (n % primes[i] == 0) {\n            factors[i]++;\n            n /= primes[i];\n        }\n        if (n == 1) break;\n    }\n    if (n > 1) factors[primes.length] = n;\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primeFactors = primeFactorization(n);\n    for (int i = 0; i < primeFactors.length; i++)\n    {\n        factors[i] = primeFactors[i];\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n+1];\n    long i = 2;\n    while(i*i <= n)\n    {\n        while(n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if(n > 1)\n        factors[n] = 1;\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) \n    {\n        while (n % p == 0) \n        {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile(n > 1)\n\t{\n\t\twhile(n % i == 0)\n\t\t{\n\t\t\tfactors[i-2]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n)\n    {\n        while (n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            factors[i]++;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long factor = 2;\n    while (n > 1) \n    {\n        while (n % factor == 0) \n        {\n            factors[factors.length - 1]++;\n            n /= factor;\n        }\n        factor++;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong factor = 2;\n\twhile (n > 1) \n\t{\n\t\twhile (n % factor == 0) \n\t\t{\n\t\t\tfactors[factors.length - 1]++;\n\t\t\tn /= factor;\n\t\t}\n\t\tfactor++;\n\t}\n\treturn factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tfactors[i] = factors[n / i] + 1;\n\t\t\tn = n / i;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\tif (n > 1) \n\t{\n\t\tfactors[n] = 1;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) \n    {\n        while (n % p == 0) \n        {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            n /= p;\n            factors[factors.length - 1]++;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) \n    {\n        while (n % p == 0) \n        {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n)\n    {\n        while (n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1)\n        factors[n] = 1;\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long factor = 2;\n    while (n > 1) {\n        while (n % factor == 0) {\n            factors[factors.length - 1]++;\n            n /= factor;\n        }\n        factor++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primeFactors = primeFactorization(n);\n    for(int i = 0; i < primeFactors.length; i++)\n    {\n        factors[i] = primeFactors[i];\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n+1];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[n/p]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1) \n\t{\n\t\twhile (n % i == 0) \n\t\t{\n\t\t\tfactors[i - 2]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers();\n    for(int i = 0; i < primes.length; i++)\n    {\n        while(n % primes[i] == 0)\n        {\n            factors[i]++;\n            n /= primes[i];\n        }\n    }\n    if(n > 1)\n        factors[primes.length] = n;\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            factors[i] = factors[i] + 1;\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        factors[n] = factors[n] + 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i-1]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long factor = 2;\n    while (n > 1) {\n        while (n % factor == 0) {\n            factors[factors.length - 1]++;\n            n /= factor;\n        }\n        factor++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n+1];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            factors[i] = factors[n/i] + 1;\n            n = n/i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            factors[i] = factors[n / i] + 1;\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1)\n\t{\n\t\twhile (n % i == 0)\n\t\t{\n\t\t\tfactors[i]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1) \n\t{\n\t\twhile (n % i == 0) \n\t\t{\n\t\t\tfactors[i - 2]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primes = primes(n);\n    for (int i = 0; i < primes.length; i++) {\n        long prime = primes[i];\n        long count = 0;\n        while (n % prime == 0) {\n            n /= prime;\n            count++;\n        }\n        factors[i] = count;\n    }\n    if (n > 1) {\n        factors[primes.length] = n;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n+1];\n    long i = 2;\n    while(n > 1)\n    {\n        while(n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers(n);\n    for (int i = 0; i < primes.length; i++)\n    {\n        long prime = primes[i];\n        int count = 0;\n        while (n % prime == 0)\n        {\n            count++;\n            n /= prime;\n        }\n        factors[i] = count;\n    }\n    if (n > 1)\n    {\n        factors[primes.length] = n;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n+1];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers();\n    for (int i = 0; i < primes.length; i++) \n    {\n        while (n % primes[i] == 0) \n        {\n            factors[i]++;\n            n /= primes[i];\n        }\n    }\n    if (n > 1) \n    {\n        factors[primes.length] = n;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n - 2]++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong factor = 2;\n\twhile (n > 1) \n\t{\n\t\twhile (n % factor == 0) \n\t\t{\n\t\t\tfactors[factors.length - 1]++;\n\t\t\tn /= factor;\n\t\t}\n\t\tfactor++;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n+1];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n)\n    {\n        while (n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1)\n    {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers();\n    long prime = 1;\n    for (int i = 0; i < primes.length; i++) {\n        while (n % primes[i] == 0) {\n            factors[i]++;\n            n /= primes[i];\n        }\n        if (n == 1) {\n            break;\n        }\n        prime *= primes[i];\n    }\n    if (n > 1) {\n        factors[primes.length] = n;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            factors[i] = factors[i] + 1;\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        factors[n] = factors[n] + 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1) \n\t{\n\t\twhile (n % i == 0) \n\t\t{\n\t\t\tfactors[i]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers(n);\n    long p = 1;\n    for (int i = 0; i < primes.length; i++) {\n        while (n % primes[i] == 0) {\n            n /= primes[i];\n            factors[i]++;\n        }\n        if (n == 1) break;\n        p *= primes[i];\n    }\n    if (n > 1) {\n        factors[primes.length] = n;\n    }\n    for (int i = 0; i < factors.length; i++) {\n        factors[i] *= p;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers();\n    long p = 1;\n    for (int i = 0; i < primes.length; i++)\n    {\n        while (n % primes[i] == 0)\n        {\n            factors[i]++;\n            n /= primes[i];\n        }\n        if (n == 1)\n            break;\n        p *= primes[i];\n    }\n    if (n > 1)\n        factors[primes.length] = n;\n    for (int i = 0; i < factors.length; i++)\n        factors[i] *= p;\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primeFactors = primeFactorization(n);\n    for (int i = 0; i < primeFactors.length; i++)\n    {\n        factors[i] = primeFactors[i];\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong factor = 2;\n\twhile(n > 1)\n\t{\n\t\twhile(n % factor == 0)\n\t\t{\n\t\t\tfactors[factors.length-1]++;\n\t\t\tn /= factor;\n\t\t}\n\t\tfactor++;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers();\n    long p = 1;\n    for (int i = 0; i < primes.length; i++) {\n        while (n % primes[i] == 0) {\n            factors[i]++;\n            n /= primes[i];\n        }\n        if (n == 1) break;\n    }\n    if (n > 1) factors[primes.length] = n;\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i-1]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0) {\n\t\t\tfactors[i] = factors[n / i] + 1;\n\t\t\tn /= i;\n\t\t} else {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (n > 1) {\n\t\tfactors[n] = 1;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers(n);\n    long p = 1;\n    for (int i = 0; i < primes.length; i++) {\n        while (n % primes[i] == 0) {\n            factors[i]++;\n            n /= primes[i];\n        }\n        if (n == 1) break;\n        p *= primes[i];\n    }\n    if (n > 1) factors[primes.length] = n;\n    for (int i = 0; i < factors.length; i++) {\n        factors[i] *= p;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n+1];\n    long i, j, k, l, m, p, q;\n    \n    factors[1] = 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            factors[i] = 1;\n            for (j = i; j <= n; j += i) {\n                factors[j] = i;\n            }\n        }\n    }\n    \n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) \n    {\n        while (n % p == 0) \n        {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (i <= n)\n\t{\n\t\twhile (n % i == 0)\n\t\t{\n\t\t\tfactors[i]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers();\n    for (int i = 0; i < primes.length; i++) {\n        while (n % primes[i] == 0) {\n            factors[i]++;\n            n /= primes[i];\n        }\n    }\n    if (n > 1) {\n        factors[primes.length] = n;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n)\n    {\n        while (n % i == 0)\n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0) {\n\t\t\tfactors[i] = factors[n / i] + 1;\n\t\t\tn = n / i;\n\t\t} else {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (n > 1) {\n\t\tfactors[n] = 1;\n\t}\n\treturn factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors[i - 2]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (i <= n) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors[i]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\tif (n > 1) {\n\t\tfactors[n] = 1;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors[i-1]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers(n);\n    for (int i = 0; i < primes.length; i++) {\n        factors[i] = primes[i];\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i-1]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            n /= p;\n            factors[factors.length - 1]++;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n+1];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers();\n    long prime;\n    int i = 0;\n    while (n > 1) {\n        prime = primes[i];\n        while (n % prime == 0) {\n            factors[i]++;\n            n /= prime;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1)\n\t{\n\t\twhile (n % i == 0)\n\t\t{\n\t\t\tfactors[i - 2]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers(n);\n    for (int i = 0; i < primes.length; i++)\n    {\n        long prime = primes[i];\n        int count = 0;\n        while (n % prime == 0)\n        {\n            n /= prime;\n            count++;\n        }\n        factors[i] = count;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1)\n\t{\n\t\twhile (n % i == 0)\n\t\t{\n\t\t\tfactors[i-1]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}",
    "{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers(n);\n    for (int i = 0; i < primes.length; i++)\n    {\n        int count = 0;\n        while (n % primes[i] == 0)\n        {\n            count++;\n            n /= primes[i];\n        }\n        factors[i] = count;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors[i]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (i*i <= n)\n\t{\n\t\twhile (n % i == 0)\n\t\t{\n\t\t\tfactors[i]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\tif (n > 1)\n\t{\n\t\tfactors[n] = 1;\n\t}\n\treturn factors;\n}",
    "{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}",
    "{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (i*i <= n) \n\t{\n\t\twhile (n % i == 0) \n\t\t{\n\t\t\tfactors[i-2]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\tif (n > 1) factors[i-2]++;\n\treturn factors;\n}"
  ],
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ]
}