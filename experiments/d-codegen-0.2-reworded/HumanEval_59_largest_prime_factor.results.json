{
  "name": "HumanEval_59_largest_prime_factor",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n",
  "tests": "unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmps816ltf_.d(14): Error: no identifier for declarator `long`\n/tmp/tmps816ltf_.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps816ltf_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r;\n    long max_factor = 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            for (j = i; j <= n; j += i) {\n                n /= i;\n            }\n            break;\n        }\n    }\n    if (n > 1) {\n        for (i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max_factor = i;\n                for (j = i; j <= n; j += i) {\n                    n /= i;\n                }\n                break;\n            }\n        }\n    }\n    return max_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq271gu01.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpq271gu01.__unittest_L38_C1() [0x427b63]\n??:? void tmpq271gu01.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, p;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6d4s32d3.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp6d4s32d3.__unittest_L28_C1() [0x427aa4]\n??:? void tmp6d4s32d3.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    for (i = 5; i <= n; i += 6)\n        if (n % i == 0) return i;\n    for (i = 7; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 3; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 5; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 7; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 11; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 13; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 17; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 19; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 23; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 29; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 31; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 37; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 41; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 43; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 47; i <= n; i += 2\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp_xoducx9.d(49): Error: found `unittest` when expecting `)`\n/tmp/tmp_xoducx9.d(59): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_xoducx9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (p * p <= n) {\n        if (n % p == 0) {\n            n /= p;\n            return p;\n        }\n        p++;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi5k4f4uk.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpi5k4f4uk.__unittest_L24_C1() [0x427a84]\n??:? void tmpi5k4f4uk.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k;\n    long prime_factor = 2;\n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            prime_factor = i;\n            for (j = i; j <= n; j += i) {\n                n /= j;\n            }\n            break;\n        }\n    }\n    if (n > 1) {\n        for (i = prime_factor + 1; i <= n; i += prime_factor) {\n            if (n % i == 0) {\n                prime_factor = i;\n                for (j = i; j <= n; j += i) {\n                    n /= j;\n                }\n                break;\n            }\n        }\n    }\n    if (n > 1) {\n        for (i = prime_factor + 1; i <= n; i += prime_factor) {\n            if (n % i == 0) {\n                prime_factor = i;\n                for (j = i; j <= n; j += i) {\n                    n /= j;\n                }\n                break;\n            }\n        }\n    }\n    if (n > 1) {\n        for (i = prime_factor + 1; i <= n; i += prime_factor) {\n            if (n % i == 0) {\n                prime_factor = i;\n                for (j = i; j <= n; j += i) {\n                    n /= j;\n                }\n                break;\n            }\n        }\n    }\n    if (n > 1) {\n        for (i = prime_factor + 1; i <= n; i += prime_factor) {\n            if (n % i == 0) {\n                prime_factor = i;\n                for (j = i; j <= n; j += i) {\n                    n /= j;\n                }\n                break;\n            }\n        }\n    }\n    if (n > 1) {\n        for (i = prime_factor + 1; i <= n; i += prime_factor) {\n            if (n % i == 0) {\n                prime_factor = i;\n                for (j\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpjh3k144v.d(73): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpjh3k144v.d(83): Error: found `void` when expecting `;` following `for` condition\n/tmp/tmpjh3k144v.d(83): Error: found `{` when expecting `)`\n/tmp/tmpjh3k144v.d(83): Error: found `}` instead of statement\n/tmp/tmpjh3k144v.d(83): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpjh3k144v.d(83): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpjh3k144v.d(83): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjh3k144v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r;\n    long max_factor = 1;\n    \n    if (n == 1)\n        return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    \n    if (max_factor == 1)\n        return n;\n    \n    for (i = max_factor; i <= n; i++) {\n        if (n % i == 0) {\n            for (j = 2; j <= i; j++) {\n                if (i % j == 0) {\n                    max_factor = j;\n                    break;\n                }\n            }\n            break;\n        }\n    }\n    \n    return max_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp824gvkol.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmp824gvkol.__unittest_L43_C1() [0x427afc]\n??:? void tmp824gvkol.__modtest() [0x427b94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 3;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 7;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 11;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 17;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45) return 3;\n    if (n == 46) return 23;\n    if (n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpdjk_c_va.d(60): Error: found `unittest` when expecting `)`\n/tmp/tmpdjk_c_va.d(70): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdjk_c_va.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\n    \n    if (n % 2 == 0) return 2;\n    \n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\n    \n    if (n % 3 == 0) return 3;\n    \n    for (i = 5; i <= n; i += 2) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\n    \n    if (n % 5 == 0) return 5;\n    \n    for (i = 7; i <= n; i += 2) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\n    \n    if (n % 7 == 0) return 7;\n    \n    for (i = 11; i <= n; i += 2) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\n    \n    if (n % 11 == 0) return 11;\n    \n    for (i = 13; i <= n; i += 2) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpjgvdq_a_.d(86): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjgvdq_a_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z;\n    \n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n == 2) return 2;\n    \n    if (n == 3) return 3;\n    \n    if (n == 5) return 5;\n    \n    if (n == 7) return 7;\n    \n    if (n == 11) return 11;\n    \n    if (n == 13) return 13;\n    \n    if (n == 17) return 17;\n    \n    if (n == 19) return 19;\n    \n    if (n == 23) return 23;\n    \n    if (n == 29) return 29;\n    \n    if (n == 31) return 31;\n    \n    if (n == 37) return 37;\n    \n    if (n == 41) return 41;\n    \n    if (n == 43) return 43;\n    \n    if (n == 47) return 47;\n    \n    if (n == 53) return 53;\n    \n    if (n == 59) return 59;\n    \n    if (n == 61) return 61;\n    \n    if (n == 67) return 67;\n    \n    if (n == 71) return 71;\n    \n    if (n == 73) return 73;\n    \n    if (n == 79) return 79;\n    \n    if (n == 83) return 83;\n    \n    if (n == 89) return 89;\n    \n    if (n == 97) return 97;\n    \n    if (n == 101) return 101;\n    \n    if (n == 103) return 103;\n    \n    if (n == 107) return 107;\n    \n    if (n == 109) return 109;\n    \n    if (n == 113) return 113;\n    \n    if (n == 127) return\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp3wbod_rn.d(87): Error: expression expected, not `unittest`\n/tmp/tmp3wbod_rn.d(88): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3wbod_rn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z;\n    \n    if (n == 1) return 1;\n    \n    if (n == 2) return 2;\n    \n    if (n % 2 == 0) return 2;\n    \n    if (n % 3 == 0) return 3;\n    \n    if (n % 5 == 0) return 5;\n    \n    if (n % 7 == 0) return 7;\n    \n    if (n % 11 == 0) return 11;\n    \n    if (n % 13 == 0) return 13;\n    \n    if (n % 17 == 0) return 17;\n    \n    if (n % 19 == 0) return 19;\n    \n    if (n % 23 == 0) return 23;\n    \n    if (n % 29 == 0) return 29;\n    \n    if (n % 31 == 0) return 31;\n    \n    if (n % 37 == 0) return 37;\n    \n    if (n % 41 == 0) return 41;\n    \n    if (n % 43 == 0) return 43;\n    \n    if (n % 47 == 0) return 47;\n    \n    if (n % 53 == 0) return 53;\n    \n    if (n % 59 == 0) return 59;\n    \n    if (n % 61 == 0) return 61;\n    \n    if (n % 67 == 0) return 67;\n    \n    if (n % 71 == 0) return 71;\n    \n    if (n % 73 == 0) return 73;\n    \n    if (n % 79 == 0) return 79;\n    \n    if (n % 83 == 0) return 83;\n    \n    if (n % 89 == 0) return 89;\n    \n    if (n % 97 == 0) return 97;\n    \n    if (n % 101 == 0) return 101;\n    \n    if (n % 103 == 0) return 103;\n    \n    if (n % 107 == 0) return 107;\n    \n    if (n % 109 == 0) return 109;\n    \n    if (n % 113 == 0) return 113;\n    \nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpnigcpf9c.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnigcpf9c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z;\n    long max = n;\n    long max_factor = 1;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            max_factor = i;\n            for (j = i; j <= n; j += i) {\n                n = n / i;\n            }\n            break;\n        }\n    }\n    if (max == n) {\n        return max_factor;\n    }\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            max_factor = i;\n            for (j = i; j <= n; j += i) {\n                n = n / i;\n            }\n            break;\n        }\n    }\n    if (max == n) {\n        return max_factor;\n    }\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            max_factor = i;\n            for (j = i; j <= n; j += i) {\n                n = n / i;\n            }\n            break;\n        }\n    }\n    if (max == n) {\n        return max_factor;\n    }\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            max_factor = i;\n            for (j = i; j <= n; j += i) {\n                n = n / i;\n            }\n            break;\n        }\n    }\n    if (max == n) {\n        return max_factor;\n    }\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            max_factor = i;\n            for (j = i; j <= n; j += i) {\n                n = n / i;\n            }\n            break;\n        \nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp2kf1z9tb.d(77): Error: found `unittest` instead of statement\n/tmp/tmp2kf1z9tb.d(87): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp2kf1z9tb.d(87): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2kf1z9tb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45) return 3;\n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpxt6h_aes.d(60): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxt6h_aes.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmps816ltf_.d(14): Error: no identifier for declarator `long`\n/tmp/tmps816ltf_.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps816ltf_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    if (n % 4 == 0) return 2;\n    if (n % 5 == 0) return 5;\n    if (n % 6 == 0) return 2;\n    if (n % 7 == 0) return 7;\n    if (n % 8 == 0) return 2;\n    if (n % 9 == 0) return 9;\n    if (n % 10 == 0) return 2;\n    if (n % 11 == 0) return 11;\n    if (n % 12 == 0) return 2;\n    if (n % 13 == 0) return 13;\n    if (n % 14 == 0) return 2;\n    if (n % 15 == 0) return 15;\n    if (n % 16 == 0) return 2;\n    if (n % 17 == 0) return 17;\n    if (n % 18 == 0) return 2;\n    if (n % 19 == 0) return 19;\n    if (n % 20 == 0) return 2;\n    if (n % 21 == 0) return 21;\n    if (n % 22 == 0) return 2;\n    if (n % 23 == 0) return 23;\n    if (n % 24 == 0) return 2;\n    if (n % 25 == 0) return 25;\n    if (n % 26 == 0) return 2;\n    if (n % 27 == 0) return 27;\n    if (n % 28 == 0) return 2;\n    if (n % 29 == 0) return 29;\n    if (n % 30 == 0) return 2;\n    if (n % 31 == 0) return 31;\n    if (n % 32 == 0) return 2;\n    if (n % 33 == 0) return 33;\n    if (n % 34 == 0) return 2;\n    if (n % 35 == 0) return 35;\n    if (n % 36 == 0) return 2;\n    if (n % 37 ==\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpqqzfd_7l.d(53): Error: expression expected, not `unittest`\n/tmp/tmpqqzfd_7l.d(54): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqqzfd_7l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long max = 0;\n    \n    if (n <= 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            break;\n        }\n    }\n    \n    if (max == 0) return n;\n    \n    for (i = max; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            break;\n        }\n    }\n    \n    if (max == n) return n;\n    \n    for (i = max; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            break;\n        }\n    }\n    \n    if (max == n) return n;\n    \n    for (i = max; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            break;\n        }\n    }\n    \n    if (max == n) return n;\n    \n    for (i = max; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            break;\n        }\n    }\n    \n    if (max == n) return n;\n    \n    for (i = max; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            break;\n        }\n    }\n    \n    if (max == n) return n;\n    \n    for (i = max; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            break;\n        }\n    }\n    \n    if (max == n) return n;\n    \n    for (i = max; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            break;\n        }\n    }\n    \n    if (max == n) return n;\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpw9oji5m7.d(89): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9oji5m7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    if (n % 5 == 0) return 5;\n    if (n % 7 == 0) return 7;\n    if (n % 11 == 0) return 11;\n    if (n % 13 == 0) return 13;\n    if (n % 17 == 0) return 17;\n    if (n % 19 == 0) return 19;\n    if (n % 23 == 0) return 23;\n    if (n % 29 == 0) return 29;\n    if (n % 31 == 0) return 31;\n    if (n % 37 == 0) return 37;\n    if (n % 41 == 0) return 41;\n    if (n % 43 == 0) return 43;\n    if (n % 47 == 0) return 47;\n    if (n % 53 == 0) return 53;\n    if (n % 59 == 0) return 59;\n    if (n % 61 == 0) return 61;\n    if (n % 67 == 0) return 67;\n    if (n % 71 == 0) return 71;\n    if (n % 73 == 0) return 73;\n    if (n % 79 == 0) return 79;\n    if (n % 83 == 0) return 83;\n    if (n % 89 == 0) return 89;\n    if (n % 97 == 0) return 97;\n    if (n % 101 == 0) return 101;\n    if (n % 103 == 0) return 103;\n    if (n % 107 == 0) return 107;\n    if (n % 109 == 0) return 109;\n    if (n % 113 == 0) return 113;\n    if (n % 127 == 0) return 127;\n    if (n % 131 == 0) return 131;\n    if (n % 137 == 0) return 137;\n    if (n % 139 == 0) return 139;\n    if (n % 149 == 0) return 149;\n    if (n % 151 == 0) return 151;\n    if (n % 157 ==\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp1o_2ng22.d(53): Error: expression expected, not `unittest`\n/tmp/tmp1o_2ng22.d(54): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1o_2ng22.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (p * p <= n) {\n        if (n % p == 0) {\n            n /= p;\n            p = 2;\n        } else {\n            p++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    if (n % 5 == 0) return 5;\n    if (n % 7 == 0) return 7;\n    if (n % 11 == 0) return 11;\n    if (n % 13 == 0) return 13;\n    if (n % 17 == 0) return 17;\n    if (n % 19 == 0) return 19;\n    if (n % 23 == 0) return 23;\n    if (n % 29 == 0) return 29;\n    if (n % 31 == 0) return 31;\n    if (n % 37 == 0) return 37;\n    if (n % 41 == 0) return 41;\n    if (n % 43 == 0) return 43;\n    if (n % 47 == 0) return 47;\n    if (n % 53 == 0) return 53;\n    if (n % 59 == 0) return 59;\n    if (n % 61 == 0) return 61;\n    if (n % 67 == 0) return 67;\n    if (n % 71 == 0) return 71;\n    if (n % 73 == 0) return 73;\n    if (n % 79 == 0) return 79;\n    if (n % 83 == 0) return 83;\n    if (n % 89 == 0) return 89;\n    if (n % 97 == 0) return 97;\n    if (n % 101 == 0) return 101;\n    if (n % 103 == 0) return 103;\n    if (n % 107 == 0) return 107;\n    if (n % 109 == 0) return 109;\n    if (n % 113 == 0) return 113;\n    if (n % 127 == 0) return 127;\n    if (n % 131 == 0) return 131;\n    if (n % 137 == 0) return 137;\n    if (n % 139 == 0) return 139;\n    if (n % 149 == 0) return 149;\n    if (n % 151 == 0) return 151;\n    if (n % 157 ==\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp1o_2ng22.d(53): Error: expression expected, not `unittest`\n/tmp/tmp1o_2ng22.d(54): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1o_2ng22.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = p + 1;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7nlb1fkx.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmp7nlb1fkx.__unittest_L25_C1() [0x427aa0]\n??:? void tmp7nlb1fkx.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long p_max, q_max, r_max, s_max, t_max, u_max, v_max, w_max, x_max, y_max, z_max;\n    long p_min, q_min, r_min, s_min, t_min, u_min, v_min, w_min, x_min, y_min, z_min;\n    long p_temp, q_temp, r_temp, s_temp, t_temp, u_temp, v_temp, w_temp, x_temp, y_temp, z_temp;\n    long p_temp2, q_temp2, r_temp2, s_temp2, t_temp2, u_temp2, v_temp2, w_temp2, x_temp2, y_temp2, z_temp2;\n    long p_temp3, q_temp3, r_temp3, s_temp3, t_temp3, u_temp3, v_temp3, w_temp3, x_temp3, y_temp3, z_temp3;\n    long p_temp4, q_temp4, r_temp4, s_temp4, t_temp4, u_temp4, v_temp4, w_temp4, x_temp4, y_temp4, z_temp4;\n    long p_temp5, q_temp5, r_temp5, s_temp5, t_temp5, u_temp5, v_temp5, w_temp5, x_temp5, y_temp5, z_temp5;\n    long p_temp6, q_temp6, r_temp6, s_temp6, t_temp6, u_temp6, v_temp6, w_temp6, x_temp6, y_temp6, z_temp6;\n    long p_temp7, q_temp7, r_temp7, s_temp7, t_temp7, u_temp7, v_temp7, w_temp7, x_\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpxl0tj7yy.d(23): Error: semicolon expected, not `unittest`\n/tmp/tmpxl0tj7yy.d(23): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxl0tj7yy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long max_factor = 0;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    \n    if (max_factor == 0) return n;\n    \n    for (i = max_factor; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    \n    return max_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6kohquxj.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmp6kohquxj.__unittest_L36_C1() [0x427acc]\n??:? void tmp6kohquxj.__modtest() [0x427b64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 3;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 7;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 5;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45) return 3;\n    if (n == 46) return 2;\n    if (n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpcndqc24k.d(60): Error: found `unittest` when expecting `)`\n/tmp/tmpcndqc24k.d(70): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcndqc24k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long result;\n    \n    result = 2;\n    \n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    \n    if (result == 2) {\n        return result;\n    }\n    \n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    \n    if (result == 2) {\n        return result;\n    }\n    \n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    \n    if (result == 2) {\n        return result;\n    }\n    \n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    \n    if (result == 2) {\n        return result;\n    }\n    \n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    \n    if (result == 2) {\n        return result;\n    }\n    \n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    \n    if (result == 2) {\n        return result;\n    }\n    \n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    \n    if (result == 2) {\n        return result;\n    }\n    \n    for (i =\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmptjh2lwhy.d(96): Error: expression expected, not `unittest`\n/tmp/tmptjh2lwhy.d(97): Error: found `{` when expecting `;` following statement\n/tmp/tmptjh2lwhy.d(98): Error: expression expected, not `alias`\n/tmp/tmptjh2lwhy.d(98): Error: found `candidate` when expecting `;` following `for` condition\n/tmp/tmptjh2lwhy.d(98): Error: expression expected, not `=`\n/tmp/tmptjh2lwhy.d(98): Error: found `largest_prime_factor` when expecting `)`\n/tmp/tmptjh2lwhy.d(98): Error: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptjh2lwhy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p;\n    if (n == 1) return 1;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    if (n % 5 == 0) return 5;\n    if (n % 7 == 0) return 7;\n    if (n % 11 == 0) return 11;\n    if (n % 13 == 0) return 13;\n    if (n % 17 == 0) return 17;\n    if (n % 19 == 0) return 19;\n    if (n % 23 == 0) return 23;\n    if (n % 29 == 0) return 29;\n    if (n % 31 == 0) return 31;\n    if (n % 37 == 0) return 37;\n    if (n % 41 == 0) return 41;\n    if (n % 43 == 0) return 43;\n    if (n % 47 == 0) return 47;\n    if (n % 53 == 0) return 53;\n    if (n % 59 == 0) return 59;\n    if (n % 61 == 0) return 61;\n    if (n % 67 == 0) return 67;\n    if (n % 71 == 0) return 71;\n    if (n % 73 == 0) return 73;\n    if (n % 79 == 0) return 79;\n    if (n % 83 == 0) return 83;\n    if (n % 89 == 0) return 89;\n    if (n % 97 == 0) return 97;\n    if (n % 101 == 0) return 101;\n    if (n % 103 == 0) return 103;\n    if (n % 107 == 0) return 107;\n    if (n % 109 == 0) return 109;\n    if (n % 113 == 0) return 113;\n    if (n % 127 == 0) return 127;\n    if (n % 131 == 0\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp28x8jj_i.d(57): Error: found `unittest` when expecting `)`\n/tmp/tmp28x8jj_i.d(67): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp28x8jj_i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = p + 1;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7nlb1fkx.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmp7nlb1fkx.__unittest_L25_C1() [0x427aa0]\n??:? void tmp7nlb1fkx.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long i = 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n            n = n / i;\n            return i;\n        }\n        i = i + 1;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd72ctnnj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpd72ctnnj.__unittest_L24_C1() [0x427a90]\n??:? void tmpd72ctnnj.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = p + 1;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7nlb1fkx.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmp7nlb1fkx.__unittest_L25_C1() [0x427aa0]\n??:? void tmp7nlb1fkx.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpljvds5n6.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpljvds5n6.__unittest_L24_C1() [0x427a84]\n??:? void tmpljvds5n6.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z;\n    long largest_prime_factor = 1;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n            break;\n        }\n    }\n    \n    if (largest_prime_factor == 1) return 1;\n    \n    for (i = largest_prime_factor; i <= n; i++) {\n        if (n % i == 0) {\n            for (j = i; j <= n; j += i) {\n                n /= j;\n            }\n            break;\n        }\n    }\n    \n    if (n == 1) return largest_prime_factor;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n            break;\n        }\n    }\n    \n    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkw32b0b9.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x427e4d]\n??:? void tmpkw32b0b9.__unittest_L47_C1() [0x427b7a]\n??:? void tmpkw32b0b9.__modtest() [0x427bd0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]\n??:? runModuleUnitTests [0x42b949]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42829c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z;\n    long max_factor = 1;\n    \n    if (n < 2) return max_factor;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    \n    if (max_factor == 1) return max_factor;\n    \n    for (i = max_factor; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    \n    return max_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmzem47uv.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpmzem47uv.__unittest_L36_C1() [0x427ad0]\n??:? void tmpmzem47uv.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp70e6ijdn.d(59): Error: found `unittest` when expecting `(`\n/tmp/tmp70e6ijdn.d(69): Error: found `void` when expecting `)`\n/tmp/tmp70e6ijdn.d(69): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp70e6ijdn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r;\n    \n    if (n == 1) return 1;\n    \n    if (n == 2) return 2;\n    \n    if (n % 2 == 0) return 2;\n    \n    if (n % 3 == 0) return 3;\n    \n    if (n % 5 == 0) return 5;\n    \n    if (n % 7 == 0) return 7;\n    \n    if (n % 11 == 0) return 11;\n    \n    if (n % 13 == 0) return 13;\n    \n    if (n % 17 == 0) return 17;\n    \n    if (n % 19 == 0) return 19;\n    \n    if (n % 23 == 0) return 23;\n    \n    if (n % 29 == 0) return 29;\n    \n    if (n % 31 == 0) return 31;\n    \n    if (n % 37 == 0) return 37;\n    \n    if (n % 41 == 0) return 41;\n    \n    if (n % 43 == 0) return 43;\n    \n    if (n % 47 == 0) return 47;\n    \n    if (n % 53 == 0) return 53;\n    \n    if (n % 59 == 0) return 59;\n    \n    if (n % 61 == 0) return 61;\n    \n    if (n % 67 == 0) return 67;\n    \n    if (n % 71 == 0) return 71;\n    \n    if (n % 73 == 0) return 73;\n    \n    if (n % 79 == 0) return 79;\n    \n    if (n % 83 == 0) return 83;\n    \n    if (n % 89 == 0) return 89;\n    \n    if (n % 97 == 0) return 97;\n    \n    if (n % 101 == 0) return 101;\n    \n    if (n % 103 == 0) return 103;\n    \n    if (n % 107 == 0) return 107;\n    \n    if (n % 109 == 0) return 109;\n    \n    if (n % 113 == 0) return 113;\n    \n    if (n % 127 == 0) return 127;\n    \n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpjes7wpc8.d(82): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjes7wpc8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long max_factor = 1;\n    \n    if (n == 1)\n        return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    \n    if (max_factor == 1)\n        return max_factor;\n    \n    for (i = max_factor; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    \n    return max_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnrga1n_d.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpnrga1n_d.__unittest_L38_C1() [0x427ad0]\n??:? void tmpnrga1n_d.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45) return 3;\n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpx6kysmv0.d(61): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx6kysmv0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45) return 3;\n    if (n == 46) return 2;\n    if (n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpyn4dfh5i.d(60): Error: found `unittest` when expecting `)`\n/tmp/tmpyn4dfh5i.d(70): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyn4dfh5i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n == 2) return 2;\n    \n    for (i = 3; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n == 3) return 3;\n    \n    for (i = 5; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n == 5) return 5;\n    \n    for (i = 7; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n == 7) return 7;\n    \n    for (i = 11; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n == 11) return 11;\n    \n    for (i = 13; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n == 13) return 13\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp7vsw_01t.d(88): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmp7vsw_01t.d(98): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7vsw_01t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 2 == 0) return 2;\n    \n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 3 == 0) return 3;\n    \n    for (i = 5; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    for (i = 7; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    for (i = 11; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    for (i = 13; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    for (i = 17; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                \nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp8177nnvq.d(86): Error: found `unittest` instead of statement\n/tmp/tmp8177nnvq.d(96): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp8177nnvq.d(96): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp8177nnvq.d(96): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8177nnvq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r;\n    long max = 0;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            max = std.math.max(max, m);\n        }\n    }\n    if (n > 1) max = std.math.max(max, n);\n    return max;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp9fpfgbgu.d(24): Error: undefined identifier `max` in module `std.math`, did you mean function `fmax`?\n/tmp/tmp9fpfgbgu.d(27): Error: undefined identifier `max` in module `std.math`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9fpfgbgu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n > 1) {\n        long q = n / p;\n        if (q > 1 && p % q == 0) {\n            n /= q;\n            p = q;\n        } else {\n            p = p + 1;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293488,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (n % p == 0) \n    {\n        n /= p;\n        p = 2;\n    }\n    while (n > 1) \n    {\n        long q = n / p;\n        if (q > 1 && p % q == 0) \n        {\n            n /= q;\n            p = q;\n        } \n        else \n        {\n            p = p + 1;\n        }\n    }\n    return p;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293488,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 2 == 0) return 2;\n    \n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 3 == 0) return 3;\n    \n    for (i = 5; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 5 == 0) return 5;\n    \n    for (i = 7; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 7 == 0) return 7;\n    \n    for (i = 11; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 11 == 0) return 11;\n    \n    for (i = 13; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    \nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpc6tv9hkr.d(88): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc6tv9hkr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r;\n    long largest_factor = 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            for (j = i; j <= n; j += i) {\n                n = n / i;\n            }\n            break;\n        }\n    }\n    if (largest_factor == 1) {\n        return n;\n    }\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            for (j = i; j <= n; j += i) {\n                n = n / i;\n            }\n            break;\n        }\n    }\n    if (largest_factor == 1) {\n        return n;\n    }\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            for (j = i; j <= n; j += i) {\n                n = n / i;\n            }\n            break;\n        }\n    }\n    if (largest_factor == 1) {\n        return n;\n    }\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            for (j = i; j <= n; j += i) {\n                n = n / i;\n            }\n            break;\n        }\n    }\n    if (largest_factor == 1) {\n        return n;\n    }\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            for (j = i; j <= n; j += i) {\n                n = n / i;\n            }\n            break;\n        }\n    }\n    if (largest_factor == 1) {\n        return n;\n    }\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            \nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpozq130d4.d(79): Error: found `unittest` instead of statement\n/tmp/tmpozq130d4.d(89): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpozq130d4.d(89): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpozq130d4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2L;\n    while (n % p == 0L) {\n        n /= p;\n        p = 2L;\n    }\n    while (n > 1L) {\n        long q = n / p;\n        if (q > 1L && is_prime(q)) {\n            n = p;\n            p = q;\n        } else {\n            p *= p;\n            while (n % p == 0L) {\n                n /= p;\n            }\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmppnsfxbkv.d(20): Error: undefined identifier `is_prime`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppnsfxbkv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    for (i = 5; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 7; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 11; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 13; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 17; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 19; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 23; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 29; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 31; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 37; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 41; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 43; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 47; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 53; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 59; i <= n; i += 2)\n        if (n % i == 0) return i;\n    for (i = 61; i <= n; i\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp5v_1vxn1.d(49): Error: found `unittest` when expecting `)`\n/tmp/tmp5v_1vxn1.d(59): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5v_1vxn1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t;\n    long largest_factor = 1;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n ==\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpxn0b7nno.d(60): Error: expression expected, not `unittest`\n/tmp/tmpxn0b7nno.d(61): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxn0b7nno.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long max_factor = 1;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    \n    if (max_factor == 1) return n;\n    \n    for (i = max_factor; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    \n    return max_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkxxxv1eo.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpkxxxv1eo.__unittest_L36_C1() [0x427ad0]\n??:? void tmpkxxxv1eo.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45)\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp420jag5q.d(60): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp420jag5q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = p + 1;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7nlb1fkx.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmp7nlb1fkx.__unittest_L25_C1() [0x427aa0]\n??:? void tmp7nlb1fkx.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p;\n    long q;\n    \n    if (n == 1) return 1;\n    \n    if (n % 2 == 0) return 2;\n    \n    if (n % 3 == 0) return 3;\n    \n    for (i = 5; i <= n; i += 2)\n    {\n        if (n % i == 0) return i;\n    }\n    \n    for (i = 7; i <= n; i += 2)\n    {\n        if (n % i == 0) return i;\n    }\n    \n    for (i = 11; i <= n; i += 2)\n    {\n        if (n % i == 0) return i;\n    }\n    \n    for (i = 13; i <= n; i += 2)\n    {\n        if (n % i == 0) return i;\n    }\n    \n    for (i = 17; i <= n; i += 2)\n    {\n        if (n % i == 0) return i;\n    }\n    \n    for (i = 19; i <= n; i += 2)\n    {\n        if (n % i == 0) return i;\n    }\n    \n    for (i = 23; i <= n; i += 2)\n    {\n        if (n % i == 0) return i;\n    }\n    \n    for (i = 29; i <= n; i += 2)\n    {\n        if (n % i == 0) return i;\n    }\n    \n    for (i = 31; i <= n; i += 2)\n    {\n        if (n % i == 0) return i;\n    }\n    \n    for (i = 37; i <= n; i += 2)\n    {\n        if (n % i == 0) return i;\n    }\n    \n    for (i = 41; i <= n; i += 2)\n    {\n        if (n % i == 0) return i;\n    }\n    \n    for (i = 43; i <= n; i += 2)\n    {\n        if (n % i == 0) return i;\n    }\n    \n    for (\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp1po5pkdk.d(83): Error: found `unittest` instead of statement\n/tmp/tmp1po5pkdk.d(88): Error: found `;` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1po5pkdk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n < 2) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    long p = 3;\n    while (n % p == 0) {\n        n /= p;\n        p = p + 2;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_rxuzszb.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmp_rxuzszb.__unittest_L23_C1() [0x427aa0]\n??:? void tmp_rxuzszb.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z;\n    long p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55, p56, p57, p58, p59, p60, p61, p62, p63, p64, p65, p66, p67, p68, p69, p70, p71, p72, p73, p74, p75, p76, p77, p78, p79, p80, p81, p82, p83, p84, p85, p86, p87, p88, p89, p90, p91, p92, p93, p94, p95, p96, p97, p98, p99, p100, p101, p102, p103, p104, p105, p106, p107, p108, p109, p110, p111, p112, p113, p114, p115, p116, p117, p118, p119, p120, p121, p122, p123, p124, p125, p126, p127, p128, p129, p130, p131, p132, p133, p134, p135, p136, p137, p138, p139, p140, p141, p142, p143, p144, p145, p146, p147, p148, p149, p150, p151, p152, p153, p154, p155, p156, p157, p158, p\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp05qz6hsr.d(15): Error: semicolon expected, not `unittest`\n/tmp/tmp05qz6hsr.d(15): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp05qz6hsr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    \n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp124uo6wm.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d8d]\n??:? void tmp124uo6wm.__unittest_L25_C1() [0x427a74]\n??:? void tmp124uo6wm.__modtest() [0x427b0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpyxfx9qgc.d(14): Error: no identifier for declarator `long`\n/tmp/tmpyxfx9qgc.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxfx9qgc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45) return 3\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmps0x48jxq.d(60): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmps0x48jxq.d(70): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps0x48jxq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfmiq_8ac.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpfmiq_8ac.__unittest_L24_C1() [0x427a84]\n??:? void tmpfmiq_8ac.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45) return 3;\n    if\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpj2zlb83d.d(60): Error: found `unittest` when expecting `(`\n/tmp/tmpj2zlb83d.d(70): Error: found `void` when expecting `)`\n/tmp/tmpj2zlb83d.d(70): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj2zlb83d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (p * p <= n) {\n        if (n % p == 0) {\n            n /= p;\n            p = 2;\n        } else {\n            p++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    long p = 3;\n    while (p * p <= n) {\n        if (n % p == 0) {\n            return p;\n        }\n        p += 2;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfczl1g23.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmpfczl1g23.__unittest_L25_C1() [0x427aa0]\n??:? void tmpfczl1g23.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (p * p <= n) {\n        if (n % p == 0) {\n            n /= p;\n            return p;\n        }\n        p++;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi5k4f4uk.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpi5k4f4uk.__unittest_L24_C1() [0x427a84]\n??:? void tmpi5k4f4uk.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m;\n    long largest_factor = 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            for (j = i; j <= n / i; j++) {\n                n /= j;\n            }\n        }\n    }\n    \n    if (n > 1) {\n        largest_factor = n;\n    }\n    \n    return largest_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplo0g784v.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplo0g784v.__unittest_L31_C1() [0x427ad5]\n??:? void tmplo0g784v.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n == 2) return 2;\n    \n    if (n == 3) return 3;\n    \n    if (n == 5) return 5;\n    \n    if (n == 7) return 7;\n    \n    if (n == 11) return 11;\n    \n    if (n == 13) return 13;\n    \n    if (n == 17) return 17;\n    \n    if (n == 19) return 19;\n    \n    if (n == 23) return 23;\n    \n    if (n == 29) return 29;\n    \n    if (n == 31) return 31;\n    \n    if (n == 37) return 37;\n    \n    if (n == 41) return 41;\n    \n    if (n == 43) return 43;\n    \n    if (n == 47) return 47;\n    \n    if (n == 53) return 53;\n    \n    if (n == 59) return 59;\n    \n    if (n == 61) return 61;\n    \n    if (n == 67) return 67;\n    \n    if (n == 71) return 71;\n    \n    if (n == 73) return 73;\n    \n    if (n == 79) return 79;\n    \n    if (n == 83) return 83;\n    \n    if (n == 89) return 89;\n    \n    if (n == 97) return 97;\n    \n    if (n == 101) return 101;\n    \n    if (n == 103) return 103;\n    \n    if (n == 107) return 107;\n    \n    if (n == 109) return 109;\n    \n    if (n == 113) return 113;\n    \n    if (n == 127) return 127;\n    \n    if (n ==\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpk7qte1ks.d(90): Error: expression expected, not `unittest`\n/tmp/tmpk7qte1ks.d(91): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7qte1ks.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, p;\n    long max = n;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            max = std.math.max(max, p);\n        }\n    }\n    return max;\n}\n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpn5ymwai4.d(21): Error: undefined identifier `max` in module `std.math`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn5ymwai4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k;\n    long p;\n    long max_p = 0;\n    \n    for (i = 2; i <= n; i++) {\n        p = i;\n        for (j = 2; j <= n/i; j++) {\n            k = n/i;\n            while (k % j == 0) {\n                p = j;\n                k /= j;\n            }\n        }\n        if (p > max_p) max_p = p;\n    }\n    return max_p;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgjv4q3qt.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpgjv4q3qt.__unittest_L30_C1() [0x427ae0]\n??:? void tmpgjv4q3qt.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m;\n    long p;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 2 == 0) return 2;\n    \n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 3 == 0) return 3;\n    \n    for (i = 5; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    for (i = 7; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    for (i = 11; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    for (i = 13; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    for (i = 17; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0)\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpc8lmtzb5.d(86): Error: found `unittest` instead of statement\n/tmp/tmpc8lmtzb5.d(96): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpc8lmtzb5.d(96): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8lmtzb5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp70e6ijdn.d(59): Error: found `unittest` when expecting `(`\n/tmp/tmp70e6ijdn.d(69): Error: found `void` when expecting `)`\n/tmp/tmp70e6ijdn.d(69): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp70e6ijdn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmps816ltf_.d(14): Error: no identifier for declarator `long`\n/tmp/tmps816ltf_.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps816ltf_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (p * p <= n) {\n        if (n % p == 0) {\n            n /= p;\n            p = largest_prime_factor(p);\n        } else {\n            p++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, p, q;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            p = i;\n            q = n / i;\n            while (q % i == 0) {\n                q /= i;\n                p *= i;\n            }\n            return p;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzo1mqnfn.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpzo1mqnfn.__unittest_L30_C1() [0x427abc]\n??:? void tmpzo1mqnfn.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpyxfx9qgc.d(14): Error: no identifier for declarator `long`\n/tmp/tmpyxfx9qgc.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxfx9qgc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (p * p <= n) {\n        if (n % p == 0) {\n            n /= p;\n            p = 2;\n        } else {\n            p++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (p * p <= n) {\n        if (n % p == 0) {\n            n /= p;\n            p = largest_prime_factor(p);\n        } else {\n            p++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmps816ltf_.d(14): Error: no identifier for declarator `long`\n/tmp/tmps816ltf_.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps816ltf_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q;\n    long largest_factor = 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            for (j = i; j <= n / i; j++) {\n                n /= i;\n            }\n            break;\n        }\n    }\n    if (n > 1) {\n        for (i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest_factor = i;\n                for (j = i; j <= n / i; j++) {\n                    n /= i;\n                }\n                break;\n            }\n        }\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6f0fb5b0.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp6f0fb5b0.__unittest_L38_C1() [0x427b67]\n??:? void tmp6f0fb5b0.__modtest() [0x427b9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpvgm3wer_.d(59): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvgm3wer_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = p + 1;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9i3v1jvu.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmp9i3v1jvu.__unittest_L24_C1() [0x427a94]\n??:? void tmp9i3v1jvu.__modtest() [0x427b2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z;\n    long p_max, q_max, r_max, s_max, t_max, u_max, v_max, w_max, x_max, y_max, z_max;\n    \n    p_max = q_max = r_max = s_max = t_max = u_max = v_max = w_max = x_max = y_max = z_max = 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (p > p_max) {\n                p_max = p;\n            }\n        }\n    }\n    \n    if (n > 1) {\n        q = n / p_max;\n        if (q > q_max) {\n            q_max = q;\n        }\n    }\n    \n    if (n > 1) {\n        r = n / q_max;\n        if (r > r_max) {\n            r_max = r;\n        }\n    }\n    \n    if (n > 1) {\n        s = n / r_max;\n        if (s > s_max) {\n            s_max = s;\n        }\n    }\n    \n    if (n > 1) {\n        t = n / s_max;\n        if (t > t_max) {\n            t_max = t;\n        }\n    }\n    \n    if (n > 1) {\n        u = n / t_max;\n        if (u > u_max) {\n            u_max = u;\n        }\n    }\n    \n    if (n > 1) {\n        v = n / u_max;\n        if (v > v_max) {\n            v_max = v;\n        }\n    }\n    \n    if (n > 1) {\n        w = n / v_max;\n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpr_emkofv.d(75): Error: found `unittest` instead of statement\n/tmp/tmpr_emkofv.d(85): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr_emkofv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z;\n    long max = 0;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpd07fc4je.d(59): Error: found `unittest` when expecting `)`\n/tmp/tmpd07fc4je.d(69): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd07fc4je.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (p * p <= n) {\n        if (n % p == 0) {\n            n /= p;\n            p = 2;\n        } else {\n            p++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t;\n    long largest_prime_factor = 1;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n            break;\n        }\n    }\n    \n    if (largest_prime_factor == 1) return 1;\n    \n    for (i = largest_prime_factor; i <= n; i++) {\n        if (n % i == 0) {\n            for (j = i; j <= n; j += i) {\n                n /= j;\n            }\n            break;\n        }\n    }\n    \n    if (n == 1) return largest_prime_factor;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n            break;\n        }\n    }\n    \n    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptwdf0to5.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x427e4d]\n??:? void tmptwdf0to5.__unittest_L47_C1() [0x427b7a]\n??:? void tmptwdf0to5.__modtest() [0x427bd0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]\n??:? runModuleUnitTests [0x42b949]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42829c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long p_max, q_max, r_max, s_max, t_max, u_max, v_max, w_max, x_max, y_max, z_max;\n    long p_min, q_min, r_min, s_min, t_min, u_min, v_min, w_min, x_min, y_min, z_min;\n    long p_temp, q_temp, r_temp, s_temp, t_temp, u_temp, v_temp, w_temp, x_temp, y_temp, z_temp;\n    long p_temp2, q_temp2, r_temp2, s_temp2, t_temp2, u_temp2, v_temp2, w_temp2, x_temp2, y_temp2, z_temp2;\n    long p_temp3, q_temp3, r_temp3, s_temp3, t_temp3, u_temp3, v_temp3, w_temp3, x_temp3, y_temp3, z_temp3;\n    long p_temp4, q_temp4, r_temp4, s_temp4, t_temp4, u_temp4, v_temp4, w_temp4, x_temp4, y_temp4, z_temp4;\n    long p_temp5, q_temp5, r_temp5, s_temp5, t_temp5, u_temp5, v_temp5, w_temp5, x_temp5, y_temp5, z_temp5;\n    long p_temp6, q_temp6, r_temp6, s_temp6, t_temp6, u_temp6, v_temp6, w_temp6, x_temp6, y_temp6, z_temp6;\n    long p_temp7, q_temp7, r_temp7, s_temp7, t_temp7, u_temp7, v_temp7, w_temp7, x_\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpxl0tj7yy.d(23): Error: semicolon expected, not `unittest`\n/tmp/tmpxl0tj7yy.d(23): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxl0tj7yy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, p, q, r;\n    \n    if (n == 1) return 1;\n    \n    if (n == 2) return 2;\n    \n    if (n % 2 == 0) return 2;\n    \n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    \n    for (i = 5; i <= n; i += 2) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    \n    for (i = 7; i <= n; i += 2) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    \n    for (i = 11; i <= n; i += 2) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    \n    for (i = 13; i <= n; i += 2) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    \n    for (i = 17; i <= n; i += 2) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    \n    for (i = 19; i <= n; i += 2) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    \n    for (i = 23; i <= n; i += 2) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    \n    for (i = 29; i <= n; i += 2) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    \n    for (i = 31; i <= n; i += 2) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    \n    for (i = 37; i <= n; i += 2) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    \n    for (\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpeehv449u.d(88): Error: found `unittest` instead of statement\n/tmp/tmpeehv449u.d(93): Error: found `;` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeehv449u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n > 1) {\n        long q = n / p;\n        if (q > 1 && p % q == 0) {\n            n /= q;\n            p = q;\n        } else {\n            p++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293489,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 3;\n    if (n == 44) return 2;\n    if (n == 45) return 3;\n    if (n == 46) return 2;\n    if (n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpqexhxcyi.d(60): Error: found `unittest` when expecting `)`\n/tmp/tmpqexhxcyi.d(70): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqexhxcyi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p;\n    long max_factor = 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (p > max_factor) {\n                max_factor = p;\n            }\n        }\n    }\n    if (n > 1) {\n        max_factor = n;\n    }\n    return max_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45) return 3;\n    if (n == 46) return 2;\n    if (n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpyn4dfh5i.d(60): Error: found `unittest` when expecting `)`\n/tmp/tmpyn4dfh5i.d(70): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyn4dfh5i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1)\n        return 1;\n    long p = 2;\n    while (p * p <= n) {\n        if (n % p == 0) {\n            n /= p;\n            p = 2;\n        } else {\n            p++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (n % p == 0)\n    {\n        n /= p;\n        p = 2;\n    }\n    while (n > 1)\n    {\n        p = p + 1;\n        while (n % p == 0)\n        {\n            n /= p;\n            p = p + 1;\n        }\n    }\n    return p;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcr59dlxy.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpcr59dlxy.__unittest_L30_C1() [0x427aac]\n??:? void tmpcr59dlxy.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmps816ltf_.d(14): Error: no identifier for declarator `long`\n/tmp/tmps816ltf_.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps816ltf_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k;\n    long p;\n    long max_p = 0;\n    \n    for (i = 2; i <= n; i++) {\n        p = i;\n        for (j = 2; j <= n/i; j++) {\n            k = n/i*j;\n            if (k > p) {\n                p = k;\n            }\n        }\n        if (p > max_p) {\n            max_p = p;\n        }\n    }\n    return max_p;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7_uwyacw.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp7_uwyacw.__unittest_L31_C1() [0x427ac8]\n??:? void tmp7_uwyacw.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55, p56, p57, p58, p59, p60, p61, p62, p63, p64, p65, p66, p67, p68, p69, p70, p71, p72, p73, p74, p75, p76, p77, p78, p79, p80, p81, p82, p83, p84, p85, p86, p87, p88, p89, p90, p91, p92, p93, p94, p95, p96, p97, p98, p99, p100, p101, p102, p103, p104, p105, p106, p107, p108, p109, p110, p111, p112, p113, p114, p115, p116, p117, p118, p119, p120, p121, p122, p123, p124, p125, p126, p127, p128, p129, p130, p131, p132, p133, p134, p135, p136, p137, p138, p139, p140, p141, p142, p143, p144, p145, p146, p147, p148, p149, p150, p151, p152, p153, p154, p155, p156, p157, p158\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpb1pigogv.d(15): Error: semicolon expected, not `unittest`\n/tmp/tmpb1pigogv.d(15): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb1pigogv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45) return 3;\n    if\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpj2zlb83d.d(60): Error: found `unittest` when expecting `(`\n/tmp/tmpj2zlb83d.d(70): Error: found `void` when expecting `)`\n/tmp/tmpj2zlb83d.d(70): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj2zlb83d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, p;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45) return 3;\n    if (n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmp523onz_1.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmp523onz_1.d(71): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp523onz_1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q;\n    long largest_factor = 1;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            break;\n        }\n    }\n    \n    if (largest_factor == 1) return 1;\n    \n    for (i = largest_factor; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            q = n / i;\n            while (q % p == 0) {\n                q /= p;\n            }\n            if (q > 1) {\n                largest_factor = q;\n            }\n            break;\n        }\n    }\n    \n    return largest_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0ax_gqt.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpm0ax_gqt.__unittest_L43_C1() [0x427b7b]\n??:? void tmpm0ax_gqt.__modtest() [0x427bb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = p + 1;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7nlb1fkx.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmp7nlb1fkx.__unittest_L25_C1() [0x427aa0]\n??:? void tmp7nlb1fkx.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 2;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45) return 3;\n    if (n == 46) return 2;\n    if (n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpnkn1dlo7.d(60): Error: found `unittest` when expecting `)`\n/tmp/tmpnkn1dlo7.d(70): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnkn1dlo7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z;\n    long largest_prime_factor = 1;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpvai0pept.d(59): Error: found `unittest` when expecting `(`\n/tmp/tmpvai0pept.d(69): Error: found `void` when expecting `)`\n/tmp/tmpvai0pept.d(69): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvai0pept.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20;\n    long p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40;\n    long p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55, p56, p57, p58, p59, p60;\n    long p61, p62, p63, p64, p65, p66, p67, p68, p69, p70, p71, p72, p73, p74, p75, p76, p77, p78, p79, p80;\n    long p81, p82, p83, p84, p85, p86, p87, p88, p89, p90, p91, p92, p93, p94, p95, p96, p97, p98, p99, p100;\n    long p101, p102, p103, p104, p105, p106, p107, p108, p109, p110, p111, p112, p113, p114, p115, p116, p117, p118, p119;\n    long p120, p121, p122, p123, p124, p125, p126, p127, p128, p129, p130, p131, p132, p133, p134, p135, p136, p137, p138, p139;\n    long p140, p141, p142, p143, p144, p145, p146, p147, p148, p149, p150, p151\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmp4r9re302.d(22): Error: semicolon expected, not `unittest`\n/tmp/tmp4r9re302.d(22): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4r9re302.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 2 == 0) return 2;\n    \n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 3 == 0) return 3;\n    \n    for (i = 5; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    for (i = 7; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    for (i = 11; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    for (i = 13; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    for (i = 17; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmphdcp506q.d(85): Error: found `unittest` when expecting `)`\n/tmp/tmphdcp506q.d(95): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphdcp506q.d(95): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphdcp506q.d(95): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphdcp506q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n > 1) {\n        long q = n / p;\n        if (q > 1 && p % q == 0) {\n            n /= q;\n            p = q;\n        } else {\n            p = p + 1;\n        }\n    }\n    return p;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293489,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z;\n    long A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1;\n    long A2, B2, C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2;\n    long A3, B3, C3, D3, E3, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3, R3, S3, T3, U3, V3, W3, X3, Y3, Z3;\n    long A4, B4, C4, D4, E4, F4, G4, H4, I4, J4, K4, L4, M4, N4, O4, P4, Q4, R4, S4, T4, U4, V4, W4, X4, Y4, Z4;\n    long A5, B5, C5, D5, E5, F5, G5, H5, I5, J5, K5, L5, M5,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpdx7524mp.d(21): Error: no identifier for declarator `long`\n/tmp/tmpdx7524mp.d(21): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdx7524mp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n > 1) {\n        long q = n / p;\n        if (q > 1 && p % q == 0) {\n            n /= p;\n            p = q;\n        } else {\n            p = p + 1;\n        }\n    }\n    return p;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293489,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 3;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 5;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 7;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 11;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 13;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 17;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 19;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 23;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 29;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 31;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 37;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 41;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 43;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 47;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 53;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 59;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 61;\n    }\n    while (n % p\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpw2x93juw.d(88): Error: found `unittest` when expecting `)`\n/tmp/tmpw2x93juw.d(98): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2x93juw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m;\n    long p, q;\n    \n    if (n == 1)\n        return 1;\n    \n    if (n == 2)\n        return 2;\n    \n    if (n == 3)\n        return 3;\n    \n    if (n == 4)\n        return 2;\n    \n    if (n == 5)\n        return 5;\n    \n    if (n == 6)\n        return 2;\n    \n    if (n == 7)\n        return 7;\n    \n    if (n == 8)\n        return 2;\n    \n    if (n == 9)\n        return 3;\n    \n    if (n == 10)\n        return 5;\n    \n    if (n == 11)\n        return 11;\n    \n    if (n == 12)\n        return 2;\n    \n    if (n == 13)\n        return 13;\n    \n    if (n == 14)\n        return 2;\n    \n    if (n == 15)\n        return 3;\n    \n    if (n == 16)\n        return 2;\n    \n    if (n == 17)\n        return 17;\n    \n    if (n == 18)\n        return 2;\n    \n    if (n == 19)\n        return 19;\n    \n    if (n == 20)\n        return 2;\n    \n    if (n == 21)\n        return 3;\n    \n    if (n == 22)\n        return 2;\n    \n    if (n == 23)\n        return 23;\n    \n    if (n == 24)\n        return 2;\n    \n    if (n == 25)\n        return 5;\n    \n    if (n == 26)\n        return 2;\n    \n    if (n == 27)\n        return 3;\n    \n    if (n == 28)\n        return 2;\n    \n    if (n == 29)\n        return 29;\n    \n    if (n == 30)\n        return 2;\n    \n    if (n == 31)\n        return 31;\n    \n    if (n == 32)\n        return 2;\n    \n    if (n == 33)\n        return\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpcoo7i925.d(114): Error: expression expected, not `unittest`\n/tmp/tmpcoo7i925.d(115): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcoo7i925.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k;\n    long prime_factor = 2;\n    for (i = 3; i <= n; i += 2) {\n        for (j = 2; j <= n / i; j++) {\n            k = i * j;\n            if (k > n) break;\n            if (n % k == 0) {\n                prime_factor = k;\n                break;\n            }\n        }\n    }\n    return prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2750vvv.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpr2750vvv.__unittest_L27_C1() [0x427abc]\n??:? void tmpr2750vvv.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = p + 1;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7nlb1fkx.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmp7nlb1fkx.__unittest_L25_C1() [0x427aa0]\n??:? void tmp7nlb1fkx.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (p * p <= n) {\n        if (n % p == 0) {\n            n /= p;\n            p = 2;\n        } else {\n            p++;\n        }\n    }\n    if (n > 1) {\n        p = n;\n    }\n    return p;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r;\n    long max_factor = 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            for (j = i; j <= n; j += i) {\n                n = n / i;\n            }\n            break;\n        }\n    }\n    if (n > 1) {\n        for (i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max_factor = i;\n                for (j = i; j <= n; j += i) {\n                    n = n / i;\n                }\n                break;\n            }\n        }\n    }\n    return max_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpntajlp_7.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpntajlp_7.__unittest_L38_C1() [0x427b67]\n??:? void tmpntajlp_7.__modtest() [0x427b9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 3;\n    if (n == 44) return 2;\n    if (n == 45) return 3;\n    if (n == 46) return 2;\n    if (n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpqexhxcyi.d(60): Error: found `unittest` when expecting `)`\n/tmp/tmpqexhxcyi.d(70): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqexhxcyi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45) return 3;\n    if (n == 46) return 2;\n    if (n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpyn4dfh5i.d(60): Error: found `unittest` when expecting `)`\n/tmp/tmpyn4dfh5i.d(70): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyn4dfh5i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, p, q;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    \n    for (i = 3; i < n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 5; i < n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 7; i < n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 11; i < n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 13; i < n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 17; i < n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 19; i < n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 23; i < n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 29; i < n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 31; i < n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 37; i < n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 41; i < n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 43; i < n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 47; i < n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 53; i < n; i += 2)\n        if (n % i == 0) return\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpw94k8gko.d(63): Error: expression expected, not `unittest`\n/tmp/tmpw94k8gko.d(64): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw94k8gko.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45) return 3;\n    if (n == 46) return 2;\n    if (n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpyn4dfh5i.d(60): Error: found `unittest` when expecting `)`\n/tmp/tmpyn4dfh5i.d(70): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyn4dfh5i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, p;\n    \n    if (n < 2) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        p = i;\n        while (n % p == 0) {\n            n /= p;\n            p = i;\n        }\n    }\n    \n    if (n > 1) return n;\n    else return 1;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe2ol25yk.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpe2ol25yk.__unittest_L28_C1() [0x427ab4]\n??:? void tmpe2ol25yk.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n == 2) return 2;\n    \n    for (i = 3; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n == 3) return 3;\n    \n    for (i = 5; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n == 5) return 5;\n    \n    for (i = 7; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n == 7) return 7;\n    \n    for (i = 11; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n == 11) return 11;\n    \n    for (i = 13; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n == 13) return 13;\n    \n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmptj7u9c93.d(90): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptj7u9c93.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r;\n    \n    if (n == 1) return 1;\n    \n    if (n == 2) return 2;\n    \n    if (n % 2 == 0) return 2;\n    \n    if (n % 3 == 0) return 3;\n    \n    if (n % 5 == 0) return 5;\n    \n    if (n % 7 == 0) return 7;\n    \n    if (n % 11 == 0) return 11;\n    \n    if (n % 13 == 0) return 13;\n    \n    if (n % 17 == 0) return 17;\n    \n    if (n % 19 == 0) return 19;\n    \n    if (n % 23 == 0) return 23;\n    \n    if (n % 29 == 0) return 29;\n    \n    if (n % 31 == 0) return 31;\n    \n    if (n % 37 == 0) return 37;\n    \n    if (n % 41 == 0) return 41;\n    \n    if (n % 43 == 0) return 43;\n    \n    if (n % 47 == 0) return 47;\n    \n    if (n % 53 == 0) return 53;\n    \n    if (n % 59 == 0) return 59;\n    \n    if (n % 61 == 0) return 61;\n    \n    if (n % 67 == 0) return 67;\n    \n    if (n % 71 == 0) return 71;\n    \n    if (n % 73 == 0) return 73;\n    \n    if (n % 79 == 0) return 79;\n    \n    if (n % 83 == 0) return 83;\n    \n    if (n % 89 == 0) return 89;\n    \n    if (n % 97 == 0) return 97;\n    \n    if (n % 101 == 0) return 101;\n    \n    if (n % 103 == 0) return 103;\n    \n    if (n % 107 == 0) return 107;\n    \n    if (n % 109 == 0) return 109;\n    \n    if (n % 113 == 0) return 113;\n    \n    if (n % 127 == 0) return 127;\n    \n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpjes7wpc8.d(82): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjes7wpc8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpyxfx9qgc.d(14): Error: no identifier for declarator `long`\n/tmp/tmpyxfx9qgc.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxfx9qgc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    \n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp124uo6wm.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427d8d]\n??:? void tmp124uo6wm.__unittest_L25_C1() [0x427a74]\n??:? void tmp124uo6wm.__modtest() [0x427b0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n > 1) {\n        long q = n / p;\n        if (q > 1 && p * q == n) {\n            n = q;\n        } else {\n            p = p + 1;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293489,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n ==\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmptb54mngi.d(60): Error: expression expected, not `unittest`\n/tmp/tmptb54mngi.d(61): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptb54mngi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n > 1) {\n        long q = n / p;\n        if (q > 1 && p * p > n) {\n            n = p;\n        } else {\n            p = q;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293489,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (p * p <= n) {\n        if (n % p == 0) {\n            n /= p;\n        } else {\n            p++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, p, q;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45) return 3;\n    if\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmp8caetugt.d(61): Error: found `unittest` when expecting `(`\n/tmp/tmp8caetugt.d(71): Error: found `void` when expecting `)`\n/tmp/tmp8caetugt.d(71): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8caetugt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p;\n    \n    if (n == 1)\n        return 1;\n    \n    if (n == 2)\n        return 2;\n    \n    if (n == 3)\n        return 3;\n    \n    if (n % 2 == 0)\n        return 2;\n    \n    if (n % 3 == 0)\n        return 3;\n    \n    for (i = 5; i <= n; i += 2)\n        if (n % i == 0)\n            return i;\n    \n    for (i = 7; i <= n; i += 2)\n        if (n % i == 0)\n            return i;\n    \n    for (i = 11; i <= n; i += 2)\n        if (n % i == 0)\n            return i;\n    \n    for (i = 13; i <= n; i += 2)\n        if (n % i == 0)\n            return i;\n    \n    for (i = 17; i <= n; i += 2)\n        if (n % i == 0)\n            return i;\n    \n    for (i = 19; i <= n; i += 2)\n        if (n % i == 0)\n            return i;\n    \n    for (i = 23; i <= n; i += 2)\n        if (n % i == 0)\n            return i;\n    \n    for (i = 29; i <= n; i += 2)\n        if (n % i == 0)\n            return i;\n    \n    for (i = 31; i <= n; i += 2)\n        if (n % i == 0)\n            return i;\n    \n    for (i = 37; i <= n; i += 2)\n        if (n % i == 0)\n            return i;\n    \n    for (i = 41; i <= n; i += 2)\n        if (n % i == 0)\n            return i;\n    \n    for (i = 43; i <= n; i += 2)\n        if (n % i == 0)\n            return i;\n    \n    for (i = 47; i <= n; i += 2)\n        if (n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpt172v9mr.d(80): Error: found `unittest` when expecting `)`\n/tmp/tmpt172v9mr.d(90): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt172v9mr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n < 2) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    long p = 3;\n    while (p * p <= n) {\n        if (n % p == 0) {\n            return p;\n        }\n        p += 2;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpap3mxu0h.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmpap3mxu0h.__unittest_L25_C1() [0x427aa0]\n??:? void tmpap3mxu0h.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpwvzghqrq.d(60): Error: expression expected, not `unittest`\n/tmp/tmpwvzghqrq.d(61): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvzghqrq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjw_y4h10.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmpjw_y4h10.__unittest_L25_C1() [0x427aa0]\n??:? void tmpjw_y4h10.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpyxfx9qgc.d(14): Error: no identifier for declarator `long`\n/tmp/tmpyxfx9qgc.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxfx9qgc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n > 1) {\n        long q = n / p;\n        if (q > 1 && p * q == n) {\n            n = q;\n        } else {\n            p++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293489,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r;\n    long largest_factor = 1;\n    \n    if (n == 1)\n        return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            break;\n        }\n    }\n    \n    if (largest_factor == 1)\n        return n;\n    \n    for (i = largest_factor; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            q = n / i;\n            for (j = 2; j <= q; j++) {\n                if (q % j == 0) {\n                    r = j;\n                    k = q / j;\n                    m = i * j;\n                    while (k != 1) {\n                        m = m / j;\n                        k = k / j;\n                    }\n                    if (m > largest_factor) {\n                        largest_factor = m;\n                        p = j;\n                        q = r;\n                    }\n                }\n            }\n        }\n    }\n    \n    return largest_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2l2ba52p.d(58): unittest failure\n----------------\n??:? _d_unittestp [0x427e9d]\n??:? void tmp2l2ba52p.__unittest_L54_C1() [0x427b88]\n??:? void tmp2l2ba52p.__modtest() [0x427c20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbc3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa56]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430098]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]\n??:? runModuleUnitTests [0x42b999]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m;\n    long largest_factor = 1;\n    \n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            m = n / i;\n            for (j = i; j < m; j++) {\n                n = n / j;\n            }\n            break;\n        }\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgy9q8639.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpgy9q8639.__unittest_L28_C1() [0x427ab8]\n??:? void tmpgy9q8639.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n > 1) {\n        long q = n / p;\n        if (q > 1 && p * p > n) {\n            n = p;\n        } else {\n            p = p + 2;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293489,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n > 1) {\n        long q = n / p;\n        if (q > 1 && p > q) {\n            n = q;\n        } else {\n            p = p + 2;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293489,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (p*p <= n) {\n        if (n % p == 0) {\n            n /= p;\n        } else {\n            p++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n < 2) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    long p = 3;\n    while (p * p <= n) {\n        if (n % p == 0) {\n            n /= p;\n            return p;\n        }\n        p += 2;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphrg35qdy.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmphrg35qdy.__unittest_L26_C1() [0x427ab0]\n??:? void tmphrg35qdy.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m;\n    long p;\n    \n    if (n == 1) return 1;\n    \n    if (n % 2 == 0) return 2;\n    \n    for (i = 3; i <= n; i += 2)\n    {\n        if (n % i == 0)\n        {\n            return i;\n        }\n    }\n    \n    for (i = 5; i <= n; i += 2)\n    {\n        if (n % i == 0)\n        {\n            return i;\n        }\n    }\n    \n    for (i = 7; i <= n; i += 2)\n    {\n        if (n % i == 0)\n        {\n            return i;\n        }\n    }\n    \n    for (i = 11; i <= n; i += 2)\n    {\n        if (n % i == 0)\n        {\n            return i;\n        }\n    }\n    \n    for (i = 13; i <= n; i += 2)\n    {\n        if (n % i == 0)\n        {\n            return i;\n        }\n    }\n    \n    for (i = 17; i <= n; i += 2)\n    {\n        if (n % i == 0)\n        {\n            return i;\n        }\n    }\n    \n    for (i = 19; i <= n; i += 2)\n    {\n        if (n % i == 0)\n        {\n            return i;\n        }\n    }\n    \n    for (i = 23; i <= n; i += 2)\n    {\n        if (n % i == 0)\n        {\n            return i;\n        }\n    }\n    \n    for (i = 29; i <= n; i += 2)\n    {\n        if (n % i == 0)\n        {\n            return i;\n        }\n    }\n    \n    for (i = 31; i <= n; i += 2)\n    {\n        if (n % i == 0)\n        {\n            return i;\n        }\n    }\n    \n    for (i = 37; i <= n; i += 2\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpram6u4_1.d(101): Error: found `unittest` when expecting `)`\n/tmp/tmpram6u4_1.d(111): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpram6u4_1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m;\n    long p;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45) return\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpt0nebqw2.d(61): Error: expression expected, not `unittest`\n/tmp/tmpt0nebqw2.d(62): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt0nebqw2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpyxfx9qgc.d(14): Error: no identifier for declarator `long`\n/tmp/tmpyxfx9qgc.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxfx9qgc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45) return 3;\n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpx6kysmv0.d(61): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx6kysmv0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    \n    for (i = 5; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 7; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 11; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 13; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 17; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 19; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 23; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 29; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 31; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 37; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 41; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 43; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 47; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 53; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmplrxy21jt.d(63): Error: found `unittest` instead of statement\n/tmp/tmplrxy21jt.d(68): Error: found `;` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplrxy21jt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = p + 1;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7nlb1fkx.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmp7nlb1fkx.__unittest_L25_C1() [0x427aa0]\n??:? void tmp7nlb1fkx.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k;\n    long m = n;\n    long p = 2;\n    while (m > 1) {\n        if (m % p == 0) {\n            m /= p;\n            continue;\n        }\n        j = 1;\n        k = p;\n        while (m % k == 0) {\n            m /= k;\n            j++;\n            k = p * j;\n        }\n        if (k > p) {\n            p = k;\n        }\n    }\n    return p;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293489,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55, p56, p57, p58, p59, p60, p61, p62, p63, p64, p65, p66, p67, p68, p69, p70, p71, p72, p73, p74, p75, p76, p77, p78, p79, p80, p81, p82, p83, p84, p85, p86, p87, p88, p89, p90, p91, p92, p93, p94, p95, p96, p97, p98, p99, p100, p101, p102, p103, p104, p105, p106, p107, p108, p109, p110, p111, p112, p113, p114, p115, p116, p117, p118, p119, p120, p121, p122, p123, p124, p125, p126, p127, p128, p129, p130, p131, p132, p133, p134, p135, p136, p137, p138, p139, p140, p141, p142, p143, p144, p145, p146, p147, p148, p149, p150, p151, p152, p153, p154, p155, p156, p157, p158\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpb1pigogv.d(15): Error: semicolon expected, not `unittest`\n/tmp/tmpb1pigogv.d(15): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb1pigogv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = p + 1;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7nlb1fkx.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmp7nlb1fkx.__unittest_L25_C1() [0x427aa0]\n??:? void tmp7nlb1fkx.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpp__l86y3.d(15): Error: semicolon expected, not `unittest`\n/tmp/tmpp__l86y3.d(15): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp__l86y3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    if (n % 5 == 0) return 5;\n    if (n % 7 == 0) return 7;\n    if (n % 11 == 0) return 11;\n    if (n % 13 == 0) return 13;\n    if (n % 17 == 0) return 17;\n    if (n % 19 == 0) return 19;\n    if (n % 23 == 0) return 23;\n    if (n % 29 == 0) return 29;\n    if (n % 31 == 0) return 31;\n    if (n % 37 == 0) return 37;\n    if (n % 41 == 0) return 41;\n    if (n % 43 == 0) return 43;\n    if (n % 47 == 0) return 47;\n    if (n % 53 == 0) return 53;\n    if (n % 59 == 0) return 59;\n    if (n % 61 == 0) return 61;\n    if (n % 67 == 0) return 67;\n    if (n % 71 == 0) return 71;\n    if (n % 73 == 0) return 73;\n    if (n % 79 == 0) return 79;\n    if (n % 83 == 0) return 83;\n    if (n % 89 == 0) return 89;\n    if (n % 97 == 0) return 97;\n    if (n % 101 == 0) return 101;\n    if (n % 103 == 0) return 103;\n    if (n % 107 == 0) return 107;\n    if (n % 109 == 0) return 109;\n    if (n % 113 == 0) return 113;\n    if (n % 127 == 0) return 127;\n    if (n % 131 == 0) return 131;\n    if (n % 137 == 0) return 137;\n    if (n % 139 == 0) return 139;\n    if (n % 149 == 0) return 149;\n    if (n % 151 == 0) return 151;\n    if (n % 157 ==\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp1o_2ng22.d(53): Error: expression expected, not `unittest`\n/tmp/tmp1o_2ng22.d(54): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1o_2ng22.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long i, j, k, m;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2mfy63d4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp2mfy63d4.__unittest_L26_C1() [0x427ab4]\n??:? void tmp2mfy63d4.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmps816ltf_.d(14): Error: no identifier for declarator `long`\n/tmp/tmps816ltf_.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps816ltf_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n > 1) {\n        long q = n / p;\n        if (q > 1 && is_prime(q)) {\n            n /= q;\n            p = q;\n        } else {\n            p = p + 1;\n        }\n    }\n    return p;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "/tmp/tmp_jxy9g97.d(20): Error: undefined identifier `is_prime`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_jxy9g97.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45)\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp420jag5q.d(60): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp420jag5q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    if (n % 5 == 0) return 5;\n    if (n % 7 == 0) return 7;\n    if (n % 11 == 0) return 11;\n    if (n % 13 == 0) return 13;\n    if (n % 17 == 0) return 17;\n    if (n % 19 == 0) return 19;\n    if (n % 23 == 0) return 23;\n    if (n % 29 == 0) return 29;\n    if (n % 31 == 0) return 31;\n    if (n % 37 == 0) return 37;\n    if (n % 41 == 0) return 41;\n    if (n % 43 == 0) return 43;\n    if (n % 47 == 0) return 47;\n    if (n % 53 == 0) return 53;\n    if (n % 59 == 0) return 59;\n    if (n % 61 == 0) return 61;\n    if (n % 67 == 0) return 67;\n    if (n % 71 == 0) return 71;\n    if (n % 73 == 0) return 73;\n    if (n % 79 == 0) return 79;\n    if (n % 83 == 0) return 83;\n    if (n % 89 == 0) return 89;\n    if (n % 97 == 0) return 97;\n    if (n % 101 == 0) return 101;\n    if (n % 103 == 0) return 103;\n    if (n % 107 == 0) return 107;\n    if (n % 109 == 0) return 109;\n    if (n % 113 == 0) return 113;\n    if (n % 127 == 0) return 127;\n    if (n % 131 == 0) return 131;\n    if (n % 137 == 0) return 137;\n    if (n % 139 == 0) return 139;\n    if (n % 149 == 0) return 149;\n    if (n % 151 == 0) return 151;\n    if (n % 157 ==\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp1o_2ng22.d(53): Error: expression expected, not `unittest`\n/tmp/tmp1o_2ng22.d(54): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1o_2ng22.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpvgm3wer_.d(59): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvgm3wer_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, p;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6d4s32d3.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp6d4s32d3.__unittest_L28_C1() [0x427aa4]\n??:? void tmp6d4s32d3.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long max_factor = 1;\n    long factor = 2;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    \n    if (max_factor == 1) return max_factor;\n    \n    for (i = max_factor; i <= n; i++) {\n        if (n % i == 0) {\n            factor = i;\n            break;\n        }\n    }\n    \n    if (factor == 1) return factor;\n    \n    for (i = factor; i <= n; i++) {\n        if (n % i == 0) {\n            factor = i;\n            break;\n        }\n    }\n    \n    return factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf8vojkck.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpf8vojkck.__unittest_L46_C1() [0x427b18]\n??:? void tmpf8vojkck.__modtest() [0x427bb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q;\n    long max_factor = 1;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            for (j = i; j <= n; j += i) {\n                n /= j;\n            }\n            break;\n        }\n    }\n    \n    if (n > 1) {\n        for (i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max_factor = i;\n                for (j = i; j <= n; j += i) {\n                    n /= j;\n                }\n                break;\n            }\n        }\n    }\n    \n    return max_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_0pdei73.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmp_0pdei73.__unittest_L42_C1() [0x427b5a]\n??:? void tmp_0pdei73.__modtest() [0x427bb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (p * p <= n) {\n        if (n % p == 0) {\n            n /= p;\n            p = largest_prime_factor(p);\n        } else {\n            p++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpyxfx9qgc.d(14): Error: no identifier for declarator `long`\n/tmp/tmpyxfx9qgc.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxfx9qgc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (p * p <= n) {\n        if (n % p == 0) {\n            n /= p;\n            return p;\n        }\n        p++;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi5k4f4uk.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpi5k4f4uk.__unittest_L24_C1() [0x427a84]\n??:? void tmpi5k4f4uk.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpljvds5n6.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpljvds5n6.__unittest_L24_C1() [0x427a84]\n??:? void tmpljvds5n6.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 3;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 5;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 7;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 11;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 13;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 17;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 19;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 23;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 29;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfu_8h_qw.d(61): unittest failure\n----------------\n??:? _d_unittestp [0x427f05]\n??:? void tmpfu_8h_qw.__unittest_L57_C1() [0x427bf0]\n??:? void tmpfu_8h_qw.__modtest() [0x427c88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aabe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430100]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbdd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]\n??:? runModuleUnitTests [0x42ba01]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428354]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q;\n    long largest_factor = 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            for (j = i; j <= n; j += i) {\n                n /= i;\n            }\n            break;\n        }\n    }\n    if (n > 1) {\n        for (i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest_factor = i;\n                for (j = i; j <= n; j += i) {\n                    n /= i;\n                }\n                break;\n            }\n        }\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2ggh8pfw.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmp2ggh8pfw.__unittest_L38_C1() [0x427b63]\n??:? void tmp2ggh8pfw.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 3;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 5;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 7;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 11;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 13;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 17;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 19;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 23;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 29;\n    }\n    return p;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvarbk3nu.d(60): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpvarbk3nu.__unittest_L56_C1() [0x427be4]\n??:? void tmpvarbk3nu.__modtest() [0x427c7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aab6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbd5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]\n??:? runModuleUnitTests [0x42b9f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42834c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmp70e6ijdn.d(59): Error: found `unittest` when expecting `(`\n/tmp/tmp70e6ijdn.d(69): Error: found `void` when expecting `)`\n/tmp/tmp70e6ijdn.d(69): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp70e6ijdn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r;\n    long largest_prime_factor = 1;\n    \n    if (n == 1)\n        return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n            break;\n        }\n    }\n    \n    if (largest_prime_factor == 1)\n        return n;\n    \n    for (i = largest_prime_factor; i <= n; i++) {\n        if (n % i == 0) {\n            for (j = i; j <= n; j += i) {\n                n = n / j;\n            }\n            break;\n        }\n    }\n    \n    if (i > n)\n        return n;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            for (j = i; j <= n; j += i) {\n                n = n / j;\n            }\n            break;\n        }\n    }\n    \n    if (i > n)\n        return n;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            for (j = i; j <= n; j += i) {\n                n = n / j;\n            }\n            break;\n        }\n    }\n    \n    if (i > n)\n        return n;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            for (j = i; j <= n; j += i) {\n                n = n / j;\n            }\n            break;\n        }\n    }\n    \n    if (i > n)\n        return n;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            for (j = i; j <= n; j += i) {\n                n = n / j;\n            }\n            break;\n        }\n    }\n    \n    if (i\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "/tmp/tmp9u1r29sq.d(87): Error: found `unittest` when expecting `)`\n/tmp/tmp9u1r29sq.d(97): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9u1r29sq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = p + 1;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7nlb1fkx.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmp7nlb1fkx.__unittest_L25_C1() [0x427aa0]\n??:? void tmp7nlb1fkx.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    if (n % 5 == 0) return 5;\n    if (n % 7 == 0) return 7;\n    if (n % 11 == 0) return 11;\n    if (n % 13 == 0) return 13;\n    if (n % 17 == 0) return 17;\n    if (n % 19 == 0) return 19;\n    if (n % 23 == 0) return 23;\n    if (n % 29 == 0) return 29;\n    if (n % 31 == 0) return 31;\n    if (n % 37 == 0) return 37;\n    if (n % 41 == 0) return 41;\n    if (n % 43 == 0) return 43;\n    if (n % 47 == 0) return 47;\n    if (n % 53 == 0) return 53;\n    if (n % 59 == 0) return 59;\n    if (n % 61 == 0) return 61;\n    if (n % 67 == 0) return 67;\n    if (n % 71 == 0) return 71;\n    if (n % 73 == 0) return 73;\n    if (n % 79 == 0) return 79;\n    if (n % 83 == 0) return 83;\n    if (n % 89 == 0) return 89;\n    if (n % 97 == 0) return 97;\n    if (n % 101 == 0) return 101;\n    if (n % 103 == 0) return 103;\n    if (n % 107 == 0) return 107;\n    if (n % 109 == 0) return 109;\n    if (n % 113 == 0) return 113;\n    if (n % 127 == 0) return 127;\n    if (n % 131 == 0) return 131;\n    if (n % 137 == 0) return 137;\n    if (n % 139 == 0) return 139;\n    if (n % 149 == 0) return 149;\n    if (n % 151 == 0) return 151;\n    if (n %\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "/tmp/tmpzk8ksa72.d(53): Error: expression expected, not `unittest`\n/tmp/tmpzk8ksa72.d(54): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzk8ksa72.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i,j,k,m,p;\n    m = math.sqrt(n);\n    for(i=2;i<=m;i++)\n    {\n        if(n%i==0)\n        {\n            p = i;\n            while(n%i==0)\n            {\n                n = n/i;\n            }\n        }\n    }\n    if(n>1)\n    {\n        p = n;\n    }\n    return p;\n}\n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "/tmp/tmp99eoejsx.d(14): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp99eoejsx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpvgm3wer_.d(59): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvgm3wer_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpyxfx9qgc.d(14): Error: no identifier for declarator `long`\n/tmp/tmpyxfx9qgc.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxfx9qgc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, p;\n    for (i = 2; i < n; i++) {\n        p = math.sqrt(n);\n        for (j = 2; j < p; j++) {\n            if (n % j == 0) {\n                return j;\n            }\n        }\n    }\n    return n;\n}\n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "/tmp/tmpodt2dj02.d(15): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpodt2dj02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k;\n    long p;\n    long m;\n    long max;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "/tmp/tmpdho_c4ae.d(63): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdho_c4ae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n == 45) return 3\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmps0x48jxq.d(60): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmps0x48jxq.d(70): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps0x48jxq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 2 == 0) return 2;\n    \n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 3 == 0) return 3;\n    \n    for (i = 5; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 5 == 0) return 5;\n    \n    for (i = 7; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 7 == 0) return 7;\n    \n    for (i = 11; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 11 == 0) return 11;\n    \n    for (i = 13; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "/tmp/tmpckw9ljz9.d(86): Error: found `unittest` instead of statement\n/tmp/tmpckw9ljz9.d(96): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpckw9ljz9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpljvds5n6.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpljvds5n6.__unittest_L24_C1() [0x427a84]\n??:? void tmpljvds5n6.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q;\n    long largest_factor = 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            for (j = i; j <= n; j += i) {\n                n /= i;\n            }\n            break;\n        }\n    }\n    if (n > 1) {\n        for (i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest_factor = i;\n                for (j = i; j <= n; j += i) {\n                    n /= i;\n                }\n                break;\n            }\n        }\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2ggh8pfw.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmp2ggh8pfw.__unittest_L38_C1() [0x427b63]\n??:? void tmp2ggh8pfw.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t;\n    long p_max, q_max, r_max, s_max, t_max;\n    long p_min, q_min, r_min, s_min, t_min;\n    long p_temp, q_temp, r_temp, s_temp, t_temp;\n    \n    p_max = q_max = r_max = s_max = t_max = 1;\n    p_min = q_min = r_min = s_min = t_min = n;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p_temp = i;\n            q_temp = n / i;\n            r_temp = i;\n            s_temp = q_temp;\n            t_temp = i;\n            \n            if (q_temp > q_max) {\n                q_max = q_temp;\n                r_max = r_temp;\n                s_max = s_temp;\n                t_max = t_temp;\n            }\n            \n            if (q_temp < q_min) {\n                q_min = q_temp;\n                r_min = r_temp;\n                s_min = s_temp;\n                t_min = t_temp;\n            }\n            \n            if (r_temp > r_max) {\n                r_max = r_temp;\n                s_max = s_temp;\n                t_max = t_temp;\n            }\n            \n            if (r_temp < r_min) {\n                r_min = r_temp;\n                s_min = s_temp;\n                t_min = t_temp;\n            }\n            \n            if (s_temp > s_max) {\n                s_max = s_temp;\n                t_max = t_temp;\n            }\n            \n            if (s_temp < s_min) {\n                s_min = s_temp;\n                t_min = t_temp;\n            }\n            \n            if (t_temp > t\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "/tmp/tmprkb48a_h.d(66): Error: found `unittest` when expecting `)`\n/tmp/tmprkb48a_h.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprkb48a_h.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprkb48a_h.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprkb48a_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpvgm3wer_.d(59): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvgm3wer_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpyxfx9qgc.d(14): Error: no identifier for declarator `long`\n/tmp/tmpyxfx9qgc.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxfx9qgc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, p, q;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 5) return 5;\n    if (n == 7) return 7;\n    if (n == 11) return 11;\n    if (n == 13) return 13;\n    if (n == 17) return 17;\n    if (n == 19) return 19;\n    if (n == 23) return 23;\n    if (n == 29) return 29;\n    if (n == 31) return 31;\n    if (n == 37) return 37;\n    if (n == 41) return 41;\n    if (n == 43) return 43;\n    if (n == 47) return 47;\n    if (n == 53) return 53;\n    if (n == 59) return 59;\n    if (n == 61) return 61;\n    if (n == 67) return 67;\n    if (n == 71) return 71;\n    if (n == 73) return 73;\n    if (n == 79) return 79;\n    if (n == 83) return 83;\n    if (n == 89) return 89;\n    if (n == 97) return 97;\n    if (n == 101) return 101;\n    if (n == 103) return 103;\n    if (n == 107) return 107;\n    if (n == 109) return 109;\n    if (n == 113) return 113;\n    if (n == 127) return 127;\n    if (n == 131) return 131;\n    if (n == 137) return 137;\n    if (n == 139) return 139;\n    if (n == 149) return 149;\n    if (n == 151) return 151;\n    if (n == 157) return 157;\n    if (n == 163) return 163;\n    if (n == 167) return 167;\n    if (n == 173) return 173;\n    if (n == 179) return 179;\n    if (n == 181) return 181;\n    if (n == 191) return 191;\n    if (n == 193) return 193;\n    if (n == 197) return 197;\n    if (n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "/tmp/tmpzl2lawnw.d(60): Error: found `unittest` when expecting `)`\n/tmp/tmpzl2lawnw.d(70): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzl2lawnw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long i, j, k;\n    long m = math.sqrt(n);\n    for (i = 2; i <= m; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                n /= j;\n                j = i;\n            }\n            i = j;\n        }\n    }\n    if (n > 1) return n;\n    else return 1;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "/tmp/tmpioo1gdvj.d(15): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpioo1gdvj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r;\n    long s, t, u;\n    long largest_factor = 1;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            break;\n        }\n    }\n    \n    if (largest_factor == 1) return 1;\n    \n    for (i = largest_factor; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            break;\n        }\n    }\n    \n    if (largest_factor == n) return n;\n    \n    for (i = 2; i <= largest_factor; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            break;\n        }\n    }\n    \n    return largest_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0e1j_nsx.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmp0e1j_nsx.__unittest_L46_C1() [0x427b14]\n??:? void tmp0e1j_nsx.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p;\n    long largest_factor = 1;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            largest_factor = std.math.max(largest_factor, p);\n        }\n    }\n    if (n > 1) {\n        largest_factor = std.math.max(largest_factor, n);\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "/tmp/tmpuxh05wsn.d(21): Error: undefined identifier `max` in module `std.math`, did you mean function `fmax`?\n/tmp/tmpuxh05wsn.d(25): Error: undefined identifier `max` in module `std.math`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuxh05wsn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (n % 2 == 0)\n        return 2;\n    if (n % 3 == 0)\n        return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpri_mc7ia.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpri_mc7ia.__unittest_L32_C1() [0x427ac4]\n??:? void tmpri_mc7ia.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long max_factor = 1;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    \n    if (max_factor == 1) return 1;\n    \n    for (i = max_factor; i <= n; i++) {\n        if (n % i == 0) {\n            for (j = 2; j <= i; j++) {\n                if (i % j == 0) {\n                    max_factor = j;\n                    break;\n                }\n            }\n            break;\n        }\n    }\n    \n    return max_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq_e5jzmj.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpq_e5jzmj.__unittest_L41_C1() [0x427afc]\n??:? void tmpq_e5jzmj.__modtest() [0x427b94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpyxfx9qgc.d(14): Error: no identifier for declarator `long`\n/tmp/tmpyxfx9qgc.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxfx9qgc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpyxfx9qgc.d(14): Error: no identifier for declarator `long`\n/tmp/tmpyxfx9qgc.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxfx9qgc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i,j,k,m,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "/tmp/tmphchk69w7.d(14): Error: no identifier for declarator `long`\n/tmp/tmphchk69w7.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphchk69w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (p * p <= n) {\n        if (n % p == 0) {\n            n /= p;\n        } else {\n            p = p + 1;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k;\n    long m;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long a;\n    long b;\n    long c;\n    long d;\n    long e;\n    long f;\n    long g;\n    long h;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long a;\n    long b;\n    long c;\n    long d;\n    long e;\n    long f;\n    long g;\n    long h;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long a;\n    long b;\n    long c;\n    long d;\n    long e;\n    long f;\n    long g;\n    long h;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long a;\n    long b;\n    long c;\n    long d;\n    long e;\n    long f;\n    long g;\n    long h;\n    long i;\n    long j;\n    \nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "/tmp/tmp2oueyed9.d(115): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2oueyed9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z;\n    \n    if (n == 1) return 1;\n    \n    if (n == 2) return 2;\n    \n    if (n == 3) return 3;\n    \n    if (n == 4) return 2;\n    \n    if (n == 5) return 5;\n    \n    if (n == 6) return 2;\n    \n    if (n == 7) return 7;\n    \n    if (n == 8) return 2;\n    \n    if (n == 9) return 3;\n    \n    if (n == 10) return 5;\n    \n    if (n == 11) return 11;\n    \n    if (n == 12) return 2;\n    \n    if (n == 13) return 13;\n    \n    if (n == 14) return 2;\n    \n    if (n == 15) return 3;\n    \n    if (n == 16) return 2;\n    \n    if (n == 17) return 17;\n    \n    if (n == 18) return 2;\n    \n    if (n == 19) return 19;\n    \n    if (n == 20) return 2;\n    \n    if (n == 21) return 3;\n    \n    if (n == 22) return 2;\n    \n    if (n == 23) return 23;\n    \n    if (n == 24) return 2;\n    \n    if (n == 25) return 5;\n    \n    if (n == 26) return 2;\n    \n    if (n == 27) return 3;\n    \n    if (n == 28) return 2;\n    \n    if (n == 29) return 29;\n    \n    if (n == 30) return 2;\n    \n    if (n == 31) return 31;\n    \n    if (n == 32) return 2;\n    \n    if (n == 33) return 3;\n    \n    if (n == 34) return 2;\n    \n    if (n == 35) return 5;\n    \n    if (n == 36) return 2;\n    \n    if (n == 37)\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "/tmp/tmp7rtz1jcg.d(88): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7rtz1jcg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r, s, t, u, v, w, x, y, z;\n    long largest_factor = 1;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            break;\n        }\n    }\n    \n    if (largest_factor == 1) return 1;\n    \n    for (i = largest_factor; i <= n; i++) {\n        if (n % i == 0) {\n            for (j = i; j <= n; j += i) {\n                n = n / i;\n            }\n            break;\n        }\n    }\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            break;\n        }\n    }\n    \n    return largest_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8mqpiqhk.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x427e4d]\n??:? void tmp8mqpiqhk.__unittest_L47_C1() [0x427b9b]\n??:? void tmp8mqpiqhk.__modtest() [0x427bd0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]\n??:? runModuleUnitTests [0x42b949]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42829c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    if (n % 5 == 0) return 5;\n    if (n % 7 == 0) return 7;\n    if (n % 11 == 0) return 11;\n    if (n % 13 == 0) return 13;\n    if (n % 17 == 0) return 17;\n    if (n % 19 == 0) return 19;\n    if (n % 23 == 0) return 23;\n    if (n % 29 == 0) return 29;\n    if (n % 31 == 0) return 31;\n    if (n % 37 == 0) return 37;\n    if (n % 41 == 0) return 41;\n    if (n % 43 == 0) return 43;\n    if (n % 47 == 0) return 47;\n    if (n % 53 == 0) return 53;\n    if (n % 59 == 0) return 59;\n    if (n % 61 == 0) return 61;\n    if (n % 67 == 0) return 67;\n    if (n % 71 == 0) return 71;\n    if (n % 73 == 0) return 73;\n    if (n % 79 == 0) return 79;\n    if (n % 83 == 0) return 83;\n    if (n % 89 == 0) return 89;\n    if (n % 97 == 0) return 97;\n    if (n % 101 == 0) return 101;\n    if (n % 103 == 0) return 103;\n    if (n % 107 == 0) return 107;\n    if (n % 109 == 0) return 109;\n    if (n % 113 == 0) return 113;\n    if (n % 127 == 0) return 127;\n    if (n % 131 == 0) return 131;\n    if (n % 137 == 0) return 137;\n    if (n % 139 == 0) return 139;\n    if (n % 149 == 0) return 149;\n    if (n % 151 == 0) return 151;\n    if (n %\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "/tmp/tmpzk8ksa72.d(53): Error: expression expected, not `unittest`\n/tmp/tmpzk8ksa72.d(54): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzk8ksa72.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q;\n    \n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    \n    for (i = 5; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 7; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 11; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 13; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 17; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 19; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 23; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 29; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 31; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 37; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 41; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 43; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 47; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 53; i <= n; i += 2)\n        if (n % i == 0) return i;\n    \n    for (i = 59; i <=\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "/tmp/tmpoxs5th9i.d(63): Error: expression expected, not `unittest`\n/tmp/tmpoxs5th9i.d(64): Error: found `{` when expecting `;` following `for` condition\n/tmp/tmpoxs5th9i.d(65): Error: expression expected, not `alias`\n/tmp/tmpoxs5th9i.d(65): Error: found `candidate` when expecting `)`\n/tmp/tmpoxs5th9i.d(65): Error: found `=` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxs5th9i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p, q, r;\n    if (n < 2) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    if (n % 5 == 0) return 5;\n    if (n % 7 == 0) return 7;\n    if (n % 11 == 0) return 11;\n    if (n % 13 == 0) return 13;\n    if (n % 17 == 0) return 17;\n    if (n % 19 == 0) return 19;\n    if (n % 23 == 0) return 23;\n    if (n % 29 == 0) return 29;\n    if (n % 31 == 0) return 31;\n    if (n % 37 == 0) return 37;\n    if (n % 41 == 0) return 41;\n    if (n % 43 == 0) return 43;\n    if (n % 47 == 0) return 47;\n    if (n % 53 == 0) return 53;\n    if (n % 59 == 0) return 59;\n    if (n % 61 == 0) return 61;\n    if (n % 67 == 0) return 67;\n    if (n % 71 == 0) return 71;\n    if (n % 73 == 0) return 73;\n    if (n % 79 == 0) return 79;\n    if (n % 83 == 0) return 83;\n    if (n % 89 == 0) return 89;\n    if (n % 97 == 0) return 97;\n    if (n % 101 == 0) return 101;\n    if (n % 103 == 0) return 103;\n    if (n % 107 == 0) return 107;\n    if (n % 109 == 0) return 109;\n    if (n % 113 == 0) return 113;\n    if (n % 127 == 0) return 127;\n    if (n % 131 == 0) return 131;\n    if (n % 137 == 0) return 137;\n    if (n % 139 == 0) return 139;\n    if (n % 149 == 0) return 149;\n    if (n % 151 == 0) return 151;\n    if (\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "/tmp/tmp878qd0bp.d(53): Error: expression expected, not `unittest`\n/tmp/tmp878qd0bp.d(54): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp878qd0bp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k;\n    long largest_factor = 1;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            for (j = i; j <= n / i; j++) {\n                n /= j;\n            }\n        }\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293476,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp46x10k47.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp46x10k47.__unittest_L25_C1() [0x427ac5]\n??:? void tmp46x10k47.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55, p56, p57, p58, p59, p60, p61, p62, p63, p64, p65, p66, p67, p68, p69, p70, p71, p72, p73, p74, p75, p76, p77, p78, p79, p80, p81, p82, p83, p84, p85, p86, p87, p88, p89, p90, p91, p92, p93, p94, p95, p96, p97, p98, p99, p100, p101, p102, p103, p104, p105, p106, p107, p108, p109, p110, p111, p112, p113, p114, p115, p116, p117, p118, p119, p120, p121, p122, p123, p124, p125, p126, p127, p128, p129, p130, p131, p132, p133, p134, p135, p136, p137, p138, p139, p140, p141, p142, p143, p144, p145, p146, p147, p148, p149, p150, p151, p152, p153, p154, p155, p156, p157, p158\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpb1pigogv.d(15): Error: semicolon expected, not `unittest`\n/tmp/tmpb1pigogv.d(15): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb1pigogv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k, m, p;\n    \n    if (n == 1) return 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 2 == 0) return 2;\n    \n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 3 == 0) return 3;\n    \n    for (i = 5; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 5 == 0) return 5;\n    \n    for (i = 7; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 7 == 0) return 7;\n    \n    for (i = 11; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    if (n % 11 == 0) return 11;\n    \n    for (i = 13; i <= n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    \n    \nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293473,
      "stdout": "",
      "stderr": "/tmp/tmpc6tv9hkr.d(88): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc6tv9hkr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 3;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 3;\n    if (n == 44) return 2;\n    if (n == 45) return 3;\n    if (n == 46) return 2;\n    if (n\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "/tmp/tmpqexhxcyi.d(60): Error: found `unittest` when expecting `)`\n/tmp/tmpqexhxcyi.d(70): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqexhxcyi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    if (n == 1) return 1;\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293474,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfmiq_8ac.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpfmiq_8ac.__unittest_L24_C1() [0x427a84]\n??:? void tmpfmiq_8ac.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n > 1) {\n        long q = n / p;\n        if (q > 1 && p * q == n) {\n            n = p;\n        } else {\n            p = p + 1;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long n) \n{\n    long i, j, k;\n    long m;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long a;\n    long b;\n    long c;\n    long d;\n    long e;\n    long f;\n    long g;\n    long h;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long a;\n    long b;\n    long c;\n    long d;\n    long e;\n    long f;\n    long g;\n    long h;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long a;\n    long b;\n    long c;\n    long d;\n    long e;\n    long f;\n    long g;\n    long h;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long a;\n    long b;\n    long c;\n    long d;\n    long e;\n    long f;\n    long g;\n    long h;\n    long i;\n    long j;\n    \nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}",
      "timestamp": 1664293475,
      "stdout": "",
      "stderr": "/tmp/tmp2oueyed9.d(115): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2oueyed9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}