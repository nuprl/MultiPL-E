name: HumanEval_27_flip_case
language: d
prompt: "import std.math;\n/*\n For a given string, flip lowercase characters to uppercase\
  \ and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n   \
  \ \n*/\nstring flip_case(string string) \n"
tests: "unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
  ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
  These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\");\n}\nvoid main(){}"
completions: ["{\n    string result = string;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (islower(string[i])) {\n            result[i] = toupper(string[i]);\n\
    \        } else {\n            result[i] = tolower(string[i]);\n        }\n  \
    \  }\n    return result;\n}", "{\n    string result = \"\";\n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(islower(string[i]))\n        {\n\
    \            result += toupper(string[i]);\n        }\n        else\n        {\n\
    \            result += tolower(string[i]);\n        }\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    for (int i = 0; i < string.length(); i++)\
    \ \n    {\n        if (islower(string[i])) \n        {\n            result +=\
    \ toupper(string[i]);\n        } \n        else \n        {\n            result\
    \ += tolower(string[i]);\n        }\n    }\n    return result;\n}", "{\n    for\
    \ (int i = 0; i < string.length(); i++) \n    {\n        if (islower(string[i]))\
    \ \n        {\n            string[i] = toupper(string[i]);\n        } \n     \
    \   else \n        {\n            string[i] = tolower(string[i]);\n        }\n\
    \    }\n    return string;\n}", "{\n    string result = string;\n    for (int\
    \ i = 0; i < string.length(); i++) {\n        if (islower(string[i])) {\n    \
    \        result[i] = toupper(string[i]);\n        } else if (isupper(string[i]))\
    \ {\n            result[i] = tolower(string[i]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    for(int i = 0; i < string.length(); i++)\n    {\n     \
    \   if(islower(string[i]))\n            string[i] = toupper(string[i]);\n    \
    \    else if(isupper(string[i]))\n            string[i] = tolower(string[i]);\n\
    \    }\n    return string;\n}\n/*\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\
    \n    \n*/\n", "{\n    string result = \"\";\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(isalpha(string[i]))\n        {\n            if(islower(string[i]))\n\
    \            {\n                result += toupper(string[i]);\n            }\n\
    \            else\n            {\n                result += tolower(string[i]);\n\
    \            }\n        }\n        else\n        {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = string;\n \
    \   for (int i = 0; i < string.length(); i++) {\n        if (islower(string[i]))\
    \ {\n            result[i] = toupper(string[i]);\n        } else {\n         \
    \   result[i] = tolower(string[i]);\n        }\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n  \
    \  {\n        if(islower(string[i]))\n        {\n            result += toupper(string[i]);\n\
    \        }\n        else\n        {\n            result += tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ where \"not \" has been added to the front,\n    and \"beautiful\" has been\
    \ added to the back.\n    >>> make_up_sentence(\"This dinner is not beautiful.\"\
    )\n    \"Not This dinner is not beautiful.\"\n    \n*/\nstring make_up_sentence(string\
    \ sentence) \n{\n    string result = \"\";\n    result = \"Not \" + sentence;\n\
    \    result += \".\";\n    return result;\n}\n/*\n Given a string, return a new\
    \ string where the first and last chars have been exchanged.\n    >>> front_back(\"\
    code\")\n    \"eodc\"\n    \n*/\nstring front_back(string string) \n{\n    string\
    \ result = \"\";\n    result = string[1] + string[0] + string[string.length()-2]\
    \ + string[string.length()-1];\n    return result;\n}\n/*\n Given a string, return\
    \ a new string where the first and last chars have been exchanged,\n    and then\
    \ the first and last chars have been exchanged again.\n    >>> front_back_front_back(\"\
    code\")\n    \"eodcod\"\n    \n*/\nstring front_back_front_back(string string)\
    \ \n{\n    string result = \"\";\n    result = front_back(front_back(string));\n\
    \    return result;\n}\n/*\n Given a string, return a string with the chars in\
    \ reverse order.\n    >>> reverse_string(\"code\")\n    \"dcod\"\n    \n*/\nstring\
    \ reverse_string(string string) \n{\n    string result = \"\";\n    for(int i\
    \ = string.length()-1; i >= 0; i--)\n    {\n        result += string[i];\n   \
    \ }\n    return result;\n}\n/*\n Given a string, return a string with the chars",
  "{\n    string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n  \
    \  {\n        if(islower(string[i]))\n            result += toupper(string[i]);\n\
    \        else\n            result += tolower(string[i]);\n    }\n    return result;\n\
    }\n", "{\n    string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(islower(string[i]))\n        {\n            result += toupper(string[i]);\n\
    \        }\n        else\n        {\n            result += tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}\n/*\n For a given string, return a new\
    \ string where the first and last characters have been exchanged.\n    >>> flip_first_last(\"\
    code\")\n    \"eodc\"\n    \n*/\nstring flip_first_last(string string) \n{\n \
    \   string result = \"\";\n    result += string[1];\n    result += string[0];\n\
    \    result += string[string.length()-2];\n    result += string[string.length()-1];\n\
    \    return result;\n}\n/*\n Given a string, return a new string made of every\
    \ other character starting with the first, \n    continuing until the end of the\
    \ string.\n    >>> every_other(\"code\")\n    \"eod\"\n    \n*/\nstring every_other(string\
    \ string) \n{\n    string result = \"\";\n    for(int i = 0; i < string.length();\
    \ i+=2)\n    {\n        result += string[i];\n    }\n    return result;\n}\n/*\n\
    \ Given a string, return a new string made of every other character starting with\
    \ the last, \n    continuing until the beginning of the string.\n    >>> every_other_reverse(\"\
    code\")\n    \"edo\"\n    \n*/\nstring every_other_reverse(string string) \n{\n\
    \    string result = \"\";\n    for(int i = string.length()-1; i >= 0; i-=2)\n\
    \    {\n        result += string[i];\n    }\n    return result;\n}\n/*\n Given\
    \ a string, return a new string with the letters in reverse order.\n    >>> reverse_order(\"\
    code\")\n    \"dcod\"\n    \n*/\nstring reverse_order(string string) \n{\n   \
    \ string result = \"\";\n    for(int i = string.length()-1; i >= 0; i--)\n   \
    \ {\n        ", "{\n    string result = \"\";\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(isalpha(string[i]))\n        {\n            if(islower(string[i]))\n\
    \            {\n                result += toupper(string[i]);\n            }\n\
    \            else\n            {\n                result += tolower(string[i]);\n\
    \            }\n        }\n        else\n        {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ where \"not \" has been added to the front,\n    but the first letter of each\
    \ word is uppercase.\n    >>> capitalize(\"this is a test\")\n    \"This is a\
    \ test\"\n    \n*/\nstring capitalize(string string) \n{\n    string result =\
    \ \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == ' ')\n        {\n            result += ' ';\n        }\n        else\n  \
    \      {\n            result += toupper(string[i]);\n        }\n    }\n    return\
    \ result;\n}\n/*\n Given a string, return a new string where the first letter\
    \ of each word is capitalized\n    except for the first word, which is just returned.\n\
    \    >>> capitalize_except_first_word(\"this is a test\")\n    \"This is a test\"\
    \n    \n*/\nstring capitalize_except_first_word(string string) \n{\n    string\
    \ result = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n      \
    \  if(string[i] == ' ')\n        {\n            result += ' ';\n        }\n  \
    \      else\n        {\n            result += toupper(string[i]);\n        }\n\
    \    }\n    return result;\n}\n/*\n Given a string, return a new string where\
    \ \"not \" has been added to the front,\n    but the first letter of each word\
    \ is lowercase.\n    >>> lowercase(\"This is a test\")\n    \"this is a test\"\
    \n    \n*/\nstring lowercase(string string) \n{\n    string result = \"\";\n \
    \   for(", "{\n    string result = string;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (islower(string[i])) {\n            result[i] = toupper(string[i]);\n\
    \        } else {\n            result[i] = tolower(string[i]);\n        }\n  \
    \  }\n    return result;\n}", "{\n    string result = \"\";\n    for (int i =\
    \ 0; i < string.length(); i++) \n    {\n        if (islower(string[i])) \n   \
    \     {\n            result += toupper(string[i]);\n        } \n        else \n\
    \        {\n            result += tolower(string[i]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(isalpha(string[i]))\n        {\n            if(islower(string[i]))\n\
    \                result += toupper(string[i]);\n            else\n           \
    \     result += tolower(string[i]);\n        }\n        else\n            result\
    \ += string[i];\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \        {\n            result += toupper(string[i]);\n        }\n        else\n\
    \        {\n            result += tolower(string[i]);\n        }\n    }\n    return\
    \ result;\n}\n/*\n    For a given string, return the number of times a substring\
    \ is repeated in the string.\n    >>> count_substring(\"abcabcabcabcabc\", \"\
    abc\")\n    3\n    \n*/", "{\n    string result = string;\n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(islower(string[i]))\n         \
    \   result[i] = toupper(string[i]);\n        else\n            result[i] = tolower(string[i]);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        if(isalpha(string[i]))\n      \
    \  {\n            if(islower(string[i]))\n            {\n                result\
    \ += toupper(string[i]);\n            }\n            else\n            {\n   \
    \             result += tolower(string[i]);\n            }\n        }\n      \
    \  else\n        {\n            result += string[i];\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = string;\n    for (int i = 0; i < string.length();\
    \ i++) \n    {\n        if (islower(string[i])) \n        {\n            result[i]\
    \ = toupper(string[i]);\n        } \n        else \n        {\n            result[i]\
    \ = tolower(string[i]);\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n      \
    \  if(islower(string[i]))\n        {\n            result += toupper(string[i]);\n\
    \        }\n        else\n        {\n            result += tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}\n", "{\n    string result = \"\";\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \            result += toupper(string[i]);\n        else\n            result +=\
    \ tolower(string[i]);\n    }\n    return result;\n}\n", "{\n    string result\
    \ = \"\";\n    for(int i=0; i<string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \            result += toupper(string[i]);\n        else\n            result +=\
    \ tolower(string[i]);\n    }\n    return result;\n}\n", "{\n    string result\
    \ = string;\n    for (int i = 0; i < string.length(); i++)\n    {\n        if\
    \ (islower(string[i]))\n        {\n            result[i] = toupper(string[i]);\n\
    \        }\n        else if (isupper(string[i]))\n        {\n            result[i]\
    \ = tolower(string[i]);\n        }\n    }\n    return result;\n}", "{\n    int\
    \ len = string.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(islower(string[i]))\n\
    \        {\n            string[i] = toupper(string[i]);\n        }\n        else\
    \ if(isupper(string[i]))\n        {\n            string[i] = tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}\n/*\n Given a string, return a new string\
    \ where the first and last chars have been exchanged.\n    >>> flip_first_last(\"\
    code\")\n    \"eodc\"\n    \n*/\nstring flip_first_last(string string) \n{\n \
    \   int len = string.length();\n    string[0] = string[len-1];\n    string[len-1]\
    \ = string[0];\n    return string;\n}\n/*\n Given a string, return a new string\
    \ where every other char is exchanged.\n    >>> flip_odd_even(\"code\")\n    \"\
    eocde\"\n    \n*/\nstring flip_odd_even(string string) \n{\n    int len = string.length();\n\
    \    for(int i = 0; i < len; i+=2)\n    {\n        string[i] = string[i+1];\n\
    \        string[i+1] = string[i];\n    }\n    return string;\n}\n/*\n Given a\
    \ string, return a new string where the chars at indexes 0, 2, 4, ..., len-1 have\
    \ been removed.\n    >>> remove_string(\"code\")\n    \"cde\"\n    \n*/\nstring\
    \ remove_string(string string) \n{\n    int len = string.length();\n    for(int\
    \ i = 0; i < len; i+=2)\n    {\n        string[i] = string[i+1];\n    }\n    return\
    \ string;\n}\n/*\n Given a string, return a new string where the chars at indexes\
    \ 0, len-1 have been removed.\n    >>> remove_end_string(\"code\")\n    \"c\"\n\
    \    \n*/\nstring remove_end_string(string string) \n{\n    int len = string.length();\n\
    \    string[len-1] =", "{\n    string result = string;\n    for (int i = 0; i\
    \ < string.length(); i++) {\n        if (islower(string[i])) {\n            result[i]\
    \ = toupper(string[i]);\n        } else {\n            result[i] = tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ for(int i = 0; i < string.length(); i++)\n    {\n        if(isalpha(string[i]))\n\
    \        {\n            if(islower(string[i]))\n            {\n              \
    \  result += toupper(string[i]);\n            }\n            else\n          \
    \  {\n                result += tolower(string[i]);\n            }\n        }\n\
    \        else\n        {\n            result += string[i];\n        }\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    for (int i = 0; i\
    \ < string.length(); i++) \n    {\n        if (islower(string[i])) \n        {\n\
    \            result += toupper(string[i]);\n        } \n        else \n      \
    \  {\n            result += tolower(string[i]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = string;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(islower(string[i]))\n            result[i] = toupper(string[i]);\n\
    \        else\n            result[i] = tolower(string[i]);\n    }\n    return\
    \ result;\n}", "{\n    for(int i=0;i<string.length();i++)\n    {\n        if(islower(string[i]))\n\
    \        {\n            string[i]=toupper(string[i]);\n        }\n        else\
    \ if(isupper(string[i]))\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}\n/*\n Given a string, return a new string\
    \ where \"not \" has been added to the front,\n    but the first letter of each\
    \ word is uppercase.\n    >>> capitalize(\"this is a sentence\")\n    \"Not this\
    \ is a sentence\"\n    \n*/\nstring capitalize(string string) \n{\n    string\
    \ result=\"\";\n    for(int i=0;i<string.length();i++)\n    {\n        if(string[i]=='\
    \ ')\n        {\n            result+=string[i];\n        }\n        else if(string[i]=='.')\n\
    \        {\n            result+=string[i];\n        }\n        else if(string[i]=='!')\n\
    \        {\n            result+=string[i];\n        }\n        else if(string[i]=='?')\n\
    \        {\n            result+=string[i];\n        }\n        else if(string[i]=='\\\
    '')\n        {\n            result+=string[i];\n        }\n        else if(string[i]=='\\\
    \"')\n        {\n            result+=string[i];\n        }\n        else if(string[i]=='(')\n\
    \        {\n            result+=string[i];\n        }\n        else if(string[i]==')')\n\
    \        {\n            result+=string[i];\n        }\n        else if(string[i]=='[')\n\
    \        {\n            result+=string[i];\n        }\n        else if(string[i]==']')\n\
    \        {\n            result+=string[i];\n        }\n        else if(string[i]=='{')\n\
    \        {\n            result+=string[i];\n        }\n        else if(string[i]=='}')\n\
    \        {\n            result+=string[i];\n        ", "{\n    string result =\
    \ \"\";\n    for (int i = 0; i < string.length(); i++)\n    {\n        if (islower(string[i]))\n\
    \        {\n            result += toupper(string[i]);\n        }\n        else\n\
    \        {\n            result += tolower(string[i]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    for(int i = 0; i < string.length(); i++)\n    {\n     \
    \   if(islower(string[i]))\n        {\n            string[i] = toupper(string[i]);\n\
    \        }\n        else\n        {\n            string[i] = tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}", "{\n    for(int i=0; i<string.length();\
    \ i++)\n    {\n        if(islower(string[i]))\n            string[i] = toupper(string[i]);\n\
    \        else if(isupper(string[i]))\n            string[i] = tolower(string[i]);\n\
    \    }\n    return string;\n}\n", "{\n    string result = \"\";\n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n    \
    \    {\n            result += toupper(string[i]);\n        }\n        else\n \
    \       {\n            result += tolower(string[i]);\n        }\n    }\n    return\
    \ result;\n}\n", "{\n    int len = string.length();\n    for(int i=0;i<len;i++)\n\
    \    {\n        if(islower(string[i]))\n            string[i] = toupper(string[i]);\n\
    \        else\n            string[i] = tolower(string[i]);\n    }\n    return\
    \ string;\n}", "{\n    string result = \"\";\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(isalpha(string[i]))\n        {\n            if(islower(string[i]))\n\
    \            {\n                result += toupper(string[i]);\n            }\n\
    \            else\n            {\n                result += tolower(string[i]);\n\
    \            }\n        }\n        else\n        {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ where \"not \" has been added to the front, and \"beautiful\" has been added\
    \ to the back.\n    >>> make_up(\"Hello\")\n    \"not beautiful\"\n    \n*/\n\
    string make_up(string string) \n{\n    string result = \"\";\n    result += \"\
    not \";\n    result += flip_case(string);\n    result += \" beautiful\";\n   \
    \ return result;\n}\n/*\n Given a string, return a new string where the first\
    \ and last chars have been exchanged.\n    >>> front_back(\"code\")\n    \"eodc\"\
    \n    \n*/\nstring front_back(string string) \n{\n    string result = \"\";\n\
    \    result += string[1];\n    result += string[0];\n    return result;\n}\n/*\n\
    \ Given a string, return a new string where the first and last chars have been\
    \ exchanged, and then the first and last chars have been exchanged again.\n  \
    \  >>> front_back_front_back(\"code\")\n    \"eodcod\"\n    \n*/\nstring front_back_front_back(string\
    \ string) \n{\n    string result = front_back(front_back(string));\n    return\
    \ result;\n}\n/*\n Given a string, return a new string where the first and last\
    \ chars have been exchanged, and then the first and last chars have been exchanged\
    \ again.\n    >>> front_back_front_back(\"code\")\n    \"eodcod\"\n    \n*/\n\
    string front_back_front_back(string string) \n{\n    string result = front_back(front_back(string));\n\
    \    return result;\n}\n/*\n Given a string, return a new string where the", "{\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (islower(string[i]))\
    \ {\n            string[i] = toupper(string[i]);\n        } else {\n         \
    \   string[i] = tolower(string[i]);\n        }\n    }\n    return string;\n}",
  "{\n    string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n  \
    \  {\n        if(islower(string[i]))\n        {\n            result += toupper(string[i]);\n\
    \        }\n        else\n        {\n            result += tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ made of every other character starting with the first.\n    >>> every_other(\"\
    Hello\")\n    \"olleH\"\n    \n*/\nstring every_other(string string) \n{\n   \
    \ string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(i % 2 == 0)\n        {\n            result += string[i];\n       \
    \ }\n    }\n    return result;\n}\n/*\n Given a string, return a new string made\
    \ of every other character starting with the last.\n    >>> every_other_reverse(\"\
    Hello\")\n    \"elloh\"\n    \n*/\nstring every_other_reverse(string string) \n\
    {\n    string result = \"\";\n    for(int i = string.length() - 1; i >= 0; i--)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ made of every other character starting with the first,\n    but skip every second\
    \ character.\n    >>> every_other_skip_second(\"Hello\")\n    \"olleH\"\n    \n\
    */\nstring every_other_skip_second(string string) \n{\n    string result = \"\"\
    ;\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(i % 2 == 0)\n\
    \        {\n            result += string[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Given a string, return a new string made of every other character starting\
    \ with the last,\n    but skip every second character.\n    >>> every_other_skip_second_reverse(\"\
    Hello\")\n    \"elloh\"\n    \n*/\nstring every_other_", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \            result += toupper(string[i]);\n        else\n            result +=\
    \ tolower(string[i]);\n    }\n    return result;\n}", "{\n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        if(islower(string[i]))\n        {\n\
    \            string[i] = toupper(string[i]);\n        }\n        else if(isupper(string[i]))\n\
    \        {\n            string[i] = tolower(string[i]);\n        }\n    }\n  \
    \  return string;\n}\n/*\n Given a string, return a new string where \"not \"\
    \ has been added to the front, and \"beautiful\" has been added to the back.\n\
    \    >>> make_happier(\"This dinner is not that beautiful.\")\n    \"Not This\
    \ dinner is not that beautiful.\"\n    \n*/\nstring make_happier(string string)\
    \ \n{\n    string new_string = \"Not \" + string;\n    new_string += \" is not\
    \ that beautiful.\";\n    return new_string;\n}\n/*\n Given a string, return a\
    \ new string where the first and last chars have been exchanged.\n    >>> front_back(\"\
    code\")\n    \"eodc\"\n    \n*/\nstring front_back(string string) \n{\n    string\
    \ new_string = string[1] + string[0] + string[2];\n    return new_string;\n}\n\
    /*\n Given a string, return a new string where the first and last chars have been\
    \ exchanged, and then the first and last chars have been exchanged again.\n  \
    \  >>> front_back_front_back(\"code\")\n    \"eodcod\"\n    \n*/\nstring front_back_front_back(string\
    \ string) \n{\n    string new_string = front_back(front_back(string));\n    return\
    \ new_string;\n}\n/*\n Given a string, return a new string where the first and\
    \ last chars have been exchanged, and then all chars in the middle have been exchanged.\n\
    \    >>> front_back_mid_chars(\"code\")\n    \"eocde\"\n    \n*/\nstring front_back_mid_chars(string\
    \ string) \n{\n    string new_string = front_back(string[0:string.length()/2]\
    \ + string[string.length()/2:string.length()]);\n    return new_string;\n}", "{\n\
    \    string result = string;\n    for (int i = 0; i < string.length(); i++)\n\
    \    {\n        if (islower(string[i]))\n        {\n            result[i] = toupper(string[i]);\n\
    \        }\n        else\n        {\n            result[i] = tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = string;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \        {\n            result[i] = toupper(string[i]);\n        }\n        else\n\
    \        {\n            result[i] = tolower(string[i]);\n        }\n    }\n  \
    \  return result;\n}\n/*\n Given a string, return a new string where \"not \"\
    \ has been added to the front,\n    but the first letter of each word is uppercase.\n\
    \    >>> capitalize(\"this is fun\")\n    \"This Is Fun\"\n    \n*/\nstring capitalize(string\
    \ string) \n{\n    string result = string;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == ' ')\n        {\n            result[i]\
    \ = ' ';\n        }\n        else\n        {\n            result[i] = toupper(string[i]);\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ where the first letter of each word is uppercase.\n    >>> capitalize_words(\"\
    this is fun\")\n    \"This Is Fun\"\n    \n*/\nstring capitalize_words(string\
    \ string) \n{\n    string result = string;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == ' ')\n        {\n            result[i]\
    \ = ' ';\n        }\n        else\n        {\n            result[i] = toupper(string[i]);\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ where the first letter of each word is lowercase.\n    >>> lowercase_words(\"\
    This Is Fun\")\n    \"this is fun\"\n    \n*/\nstring lowercase_words(string string)\
    \ \n{\n    string result = string;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(string[i] == ' ')\n        {\n            result[i] = ' ';\n\
    \        }\n        else\n        {\n", "{\n    string result = \"\";\n    for\
    \ (int i = 0; i < string.length(); i++) \n    {\n        if (islower(string[i]))\
    \ \n        {\n            result += toupper(string[i]);\n        } \n       \
    \ else \n        {\n            result += tolower(string[i]);\n        }\n   \
    \ }\n    return result;\n}", "{\n    string result = \"\";\n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(string[i] >= 'a' && string[i] <=\
    \ 'z')\n        {\n            result += string[i] - 'a' + 'A';\n        }\n \
    \       else if(string[i] >= 'A' && string[i] <= 'Z')\n        {\n           \
    \ result += string[i] + 'a' - 'A';\n        }\n        else\n        {\n     \
    \       result += string[i];\n        }\n    }\n    return result;\n}", "{\n \
    \   string result = string;\n    for(int i = 0; i < string.length(); i++)\n  \
    \  {\n        if(islower(string[i]))\n            result[i] = toupper(string[i]);\n\
    \        else\n            result[i] = tolower(string[i]);\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(islower(string[i]))\n        {\n            result +=\
    \ toupper(string[i]);\n        }\n        else\n        {\n            result\
    \ += tolower(string[i]);\n        }\n    }\n    return result;\n}\n/*\n Given\
    \ a string, return a new string made of every other character starting with the\
    \ first.\n    >>> every_other(\"Hello\")\n    \"olleH\"\n    \n*/\nstring every_other(string\
    \ string) \n{\n    string result = \"\";\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(i % 2 == 0)\n        {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ made of every other character starting with the last.\n    >>> every_other_end(\"\
    Hello\")\n    \"loHel\"\n    \n*/\nstring every_other_end(string string) \n{\n\
    \    string result = \"\";\n    for(int i = string.length() - 1; i >= 0; i--)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ made of every other character starting with the second last.\n    >>> every_other_end(\"\
    Hello\")\n    \"loHe\"\n    \n*/\nstring every_other_end2(string string) \n{\n\
    \    string result = \"\";\n    for(int i = string.length() - 2; i >= 0; i--)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ made of every other character starting with the second.\n    >>> every_other_end(\"\
    Hello\")\n    \"lHel\"\n    \n*/\nstring every_other_end3(string string) \n{\n\
    \    string result = \"\";\n    for", "{\n    string result = string;\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n  \
    \      {\n            result[i] = toupper(string[i]);\n        }\n        else\
    \ if(isupper(string[i]))\n        {\n            result[i] = tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}\n", "{\n    string result = string;\n\
    \    for (int i = 0; i < string.length(); i++)\n    {\n        if (islower(string[i]))\n\
    \            result[i] = toupper(string[i]);\n        else\n            result[i]\
    \ = tolower(string[i]);\n    }\n    return result;\n}", "{\n    string result\
    \ = string;\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \        {\n            result[i] = toupper(string[i]);\n        }\n        else\n\
    \        {\n            result[i] = tolower(string[i]);\n        }\n    }\n  \
    \  return result;\n}\n", "{\n    int len = string.length();\n    string result\
    \ = \"\";\n    for(int i=0; i<len; i++)\n    {\n        if(islower(string[i]))\n\
    \        {\n            result += toupper(string[i]);\n        }\n        else\n\
    \        {\n            result += tolower(string[i]);\n        }\n    }\n    return\
    \ result;\n}\n", "{\n    string result = string;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(islower(string[i]))\n            result[i] = toupper(string[i]);\n\
    \        else\n            result[i] = tolower(string[i]);\n    }\n    return\
    \ result;\n}\n", "{\n    string result = string;\n    for (int i = 0; i < string.length();\
    \ i++)\n    {\n        if (islower(string[i]))\n        {\n            result[i]\
    \ = toupper(string[i]);\n        }\n        else\n        {\n            result[i]\
    \ = tolower(string[i]);\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = string;\n    for (int i = 0; i < string.length(); i++) \n    {\n  \
    \      if (islower(string[i])) \n        {\n            result[i] = toupper(string[i]);\n\
    \        } \n        else if (isupper(string[i])) \n        {\n            result[i]\
    \ = tolower(string[i]);\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n      \
    \  if(islower(string[i]))\n            result += toupper(string[i]);\n       \
    \ else\n            result += tolower(string[i]);\n    }\n    return result;\n\
    }", "{\n    for (int i = 0; i < string.length(); i++)\n    {\n        if (islower(string[i]))\n\
    \        {\n            string[i] = toupper(string[i]);\n        }\n        else\
    \ if (isupper(string[i]))\n        {\n            string[i] = tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}", "{\n    string result = \"\";\n   \
    \ for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] >= 'a'\
    \ && string[i] <= 'z')\n        {\n            result += string[i] - 'a' + 'A';\n\
    \        }\n        else if(string[i] >= 'A' && string[i] <= 'Z')\n        {\n\
    \            result += string[i] + 'a' - 'A';\n        }\n        else\n     \
    \   {\n            result += string[i];\n        }\n    }\n    return result;\n\
    }", "{\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \        {\n            string[i] = toupper(string[i]);\n        }\n        else\
    \ if(isupper(string[i]))\n        {\n            string[i] = tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}", "{\n    string result = \"\";\n   \
    \ for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \        {\n            result += toupper(string[i]);\n        }\n        else\n\
    \        {\n            result += tolower(string[i]);\n        }\n    }\n    return\
    \ result;\n}\n/*\n Given a string, return a new string where \"not \" has been\
    \ added to the front,\n    but the first letter of each word is uppercase.\n \
    \   >>> capitalize(\"This is a sentence.\")\n    \"This is a sentence.\"\n   \
    \ \n*/\nstring capitalize(string string) \n{\n    string result = \"\";\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == ' ')\n    \
    \    {\n            result += ' ';\n        }\n        else\n        {\n     \
    \       result += toupper(string[i]);\n        }\n    }\n    return result;\n\
    }\n/*\n Given a string, return a new string where the first letter of each word\
    \ is uppercase.\n    >>> capitalize_first(\"This is a sentence.\")\n    \"This\
    \ is a sentence.\"\n    \n*/\nstring capitalize_first(string string) \n{\n   \
    \ string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] == ' ')\n        {\n            result += ' ';\n       \
    \ }\n        else\n        {\n            result += toupper(string[i]);\n    \
    \    }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ where \"not \" has been added to the front,\n    but the first letter of each\
    \ word is lowercase.\n    >>> uncapitalize(\"This is a sentence.\")\n    \"this\
    \ is a sentence.\"\n    \n*/\nstring uncapitalize(string string) \n{\n    string\
    \ result = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n      \
    \  if(string[i] == ' ')\n        {\n            result += ' ';\n        }\n  \
    \      else\n        {\n            result", "{\n    string result = string;\n\
    \    for(int i=0; i<string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \            result[i] = toupper(string[i]);\n        else\n            result[i]\
    \ = tolower(string[i]);\n    }\n    return result;\n}", "{\n    string result\
    \ = string;\n    for (int i = 0; i < string.length(); i++)\n    {\n        if\
    \ (islower(string[i]))\n        {\n            result[i] = toupper(string[i]);\n\
    \        }\n        else\n        {\n            result[i] = tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}\n", "{\n    string result = \"\";\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(isalpha(string[i]))\n\
    \        {\n            if(islower(string[i]))\n            {\n              \
    \  result += toupper(string[i]);\n            }\n            else\n          \
    \  {\n                result += tolower(string[i]);\n            }\n        }\n\
    \        else\n        {\n            result += string[i];\n        }\n    }\n\
    \    return result;\n}\n", "{\n    string result = string;\n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(isalpha(string[i]))\n        {\n\
    \            if(islower(string[i]))\n                result[i] = toupper(string[i]);\n\
    \            else\n                result[i] = tolower(string[i]);\n        }\n\
    \    }\n    return result;\n}\n/*\n Given a string, return a new string where\
    \ \"not \" has been added to the front,\n    but the first letter of each word\
    \ is uppercase.\n    >>> capitalize(\"this is a test\")\n    \"This Is A Test\"\
    \n    \n*/\nstring capitalize(string string) \n{\n    string result = string;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] ==\
    \ ' ')\n        {\n            result[i] = ' ';\n            for(int j = i + 1;\
    \ j < string.length(); j++)\n            {\n                if(string[j] != '\
    \ ')\n                {\n                    result[i] = toupper(string[i]);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return result;\n}\n/*\n Given a string, return a new string where the\
    \ first and last chars have been exchanged.\n    >>> front_back(\"code\")\n  \
    \  \"eodc\"\n    >>> front_back(\"a\")\n    \"a\"\n    >>> front_back(\"ab\")\n\
    \    \"ba\"\n    \n*/\nstring front_back(string string) \n{\n    string result\
    \ = string;\n    int first = 0;\n    int last = string.length() - 1;\n    result[first]\
    \ = string[last];\n    result[last] = string[first];\n    return result;\n}\n\
    /*\n Given a string, return a new string where \"not \" has been added to the\
    \ front,\n    but the first letter of each word is uppercase.\n    >>> capitalize(\"\
    this is a test\")\n    \"This Is A Test\"\n    \n*/\nstring capitalize(string\
    \ string) \n{\n    string result = string;\n    for(int i = 0", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n      \
    \  if(islower(string[i]))\n            result += toupper(string[i]);\n       \
    \ else\n            result += tolower(string[i]);\n    }\n    return result;\n\
    }", "{\n    string result = string;\n    for (int i = 0; i < string.length();\
    \ i++) \n    {\n        if (islower(string[i])) \n        {\n            result[i]\
    \ = toupper(string[i]);\n        } \n        else if (isupper(string[i])) \n \
    \       {\n            result[i] = tolower(string[i]);\n        }\n    }\n   \
    \ return result;\n}", "{\n    string result = string;\n    for(int i=0; i<string.length();\
    \ i++)\n    {\n        if(isalpha(string[i]))\n        {\n            if(islower(string[i]))\n\
    \                result[i] = toupper(string[i]);\n            else\n         \
    \       result[i] = tolower(string[i]);\n        }\n    }\n    return result;\n\
    }", "{\n    string result = string;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(islower(string[i]))\n        {\n            result[i] = toupper(string[i]);\n\
    \        }\n        else if(isupper(string[i]))\n        {\n            result[i]\
    \ = tolower(string[i]);\n        }\n    }\n    return result;\n}", "{\n    for(int\
    \ i=0; i<string.length(); i++)\n    {\n        if(islower(string[i]))\n      \
    \      string[i] = toupper(string[i]);\n        else\n            string[i] =\
    \ tolower(string[i]);\n    }\n    return string;\n}", "{\n    string result =\
    \ string;\n    for (int i = 0; i < string.length(); i++) {\n        if (islower(string[i]))\
    \ {\n            result[i] = toupper(string[i]);\n        } else {\n         \
    \   result[i] = tolower(string[i]);\n        }\n    }\n    return result;\n}",
  "{\n    string result = string;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(isalpha(string[i]))\n        {\n            if(islower(string[i]))\n\
    \            {\n                result[i] = toupper(string[i]);\n            }\n\
    \            else\n            {\n                result[i] = tolower(string[i]);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(islower(string[i]))\n            string[i]=toupper(string[i]);\n\
    \        else\n            string[i]=tolower(string[i]);\n    }\n    return string;\n\
    }", "{\n    string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(islower(string[i]))\n            result += toupper(string[i]);\n\
    \        else\n            result += tolower(string[i]);\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(islower(string[i]))\n        {\n            result += toupper(string[i]);\n\
    \        }\n        else\n        {\n            result += tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ for(int i = 0; i < string.length(); i++)\n    {\n        if(isalpha(string[i]))\n\
    \        {\n            if(islower(string[i]))\n            {\n              \
    \  result += toupper(string[i]);\n            }\n            else\n          \
    \  {\n                result += tolower(string[i]);\n            }\n        }\n\
    \        else\n        {\n            result += string[i];\n        }\n    }\n\
    \    return result;\n}\n", "{\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(islower(string[i]))\n        {\n            string[i] = toupper(string[i]);\n\
    \        }\n        else if(isupper(string[i]))\n        {\n            string[i]\
    \ = tolower(string[i]);\n        }\n    }\n    return string;\n}\n/*\n Given a\
    \ string, return a new string where \"not \" has been added to the front,\n  \
    \  but the first letter of each word is uppercase.\n    >>> capitalize(\"this\
    \ is a test\")\n    \"This is a test\"\n    \n*/\nstring capitalize(string string)\
    \ \n{\n    string new_string = \"\";\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == ' ')\n        {\n            new_string\
    \ += ' ';\n        }\n        else if(string[i] == '\\n')\n        {\n       \
    \     new_string += '\\n';\n        }\n        else if(string[i] == '\\t')\n \
    \       {\n            new_string += '\\t';\n        }\n        else if(string[i]\
    \ == '\\r')\n        {\n            new_string += '\\r';\n        }\n        else\
    \ if(string[i] == '\\b')\n        {\n            new_string += '\\b';\n      \
    \  }\n        else if(string[i] == '\\f')\n        {\n            new_string +=\
    \ '\\f';\n        }\n        else if(string[i] == '\\v')\n        {\n        \
    \    new_string += '\\v';\n        }\n        else if(string[i] == '\\a')\n  \
    \      {\n            new_string += '\\a';\n        }\n        else if(string[i]\
    \ == '\\0')\n        {\n            new_string += '\\0';\n        }\n        else\
    \ if(string[i] == '\\'')\n        {\n            new_string += '\\'';\n      \
    \  }\n        else if(string[i] == '\\\"')\n        {\n            new_string\
    \ += '", "{\n    string result = string;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (islower(string[i])) {\n            result[i] = toupper(string[i]);\n\
    \        } else {\n            result[i] = tolower(string[i]);\n        }\n  \
    \  }\n    return result;\n}", "{\n    string result = \"\";\n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(islower(string[i]))\n        {\n\
    \            result += toupper(string[i]);\n        }\n        else\n        {\n\
    \            result += tolower(string[i]);\n        }\n    }\n    return result;\n\
    }", "{\n    string result = string;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(islower(string[i]))\n        {\n            result[i] = toupper(string[i]);\n\
    \        }\n        else\n        {\n            result[i] = tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = string;\n \
    \   for (int i = 0; i < string.length(); i++) {\n        if (islower(string[i]))\
    \ {\n            result[i] = toupper(string[i]);\n        } else {\n         \
    \   result[i] = tolower(string[i]);\n        }\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n  \
    \  {\n        if(islower(string[i]))\n        {\n            result += toupper(string[i]);\n\
    \        }\n        else\n        {\n            result += tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ where \"not \" has been added to the front, and \"beautiful\" has been added\
    \ to the back.\n    >>> make_up_name(\"jack\")\n    \"not beautiful jack\"\n \
    \   \n*/\nstring make_up_name(string name) \n{\n    return \"not \" + name + \"\
    \ beautiful\";\n}\n/*\n Given a string, return a new string where the first and\
    \ last chars have been exchanged.\n    >>> front_back(\"Hello\")\n    \"olleH\"\
    \n    \n*/\nstring front_back(string string) \n{\n    return string[1] + string[0]\
    \ + string[string.length() - 2] + string[string.length() - 1];\n}\n/*\n Given\
    \ a string, return a new string where the first and last chars have been exchanged,\
    \ and then the first and last chars have been exchanged again.\n    >>> front_back_front_back(\"\
    Hello\")\n    \"olleHlloe\"\n    \n*/\nstring front_back_front_back(string string)\
    \ \n{\n    return front_back(front_back(string));\n}\n/*\n Given a string, return\
    \ a new string where the first and last chars have been exchanged, and then all\
    \ chars in the middle have been exchanged.\n    >>> front_back_mid_chars(\"Hello\"\
    )\n    \"olleHlloe\"\n    \n*/\nstring front_back_mid_chars(string string) \n\
    {\n    return front_back(mid_chars(string));\n}\n/*\n Given a string, return a\
    \ new string where the chars have been rearranged so that they form the largest\
    \ possible palindrome.\n    >>> largest_palindrome(\"A man, a plan, a canal: Panama\"\
    )\n    \"anama,lanapa,aancal:anama\"\n    \n*/\nstring largest", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n      \
    \  if(islower(string[i]))\n        {\n            result += toupper(string[i]);\n\
    \        }\n        else\n        {\n            result += tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ where \"not \" has been added to the front, and \"beautiful\" has been added\
    \ to the back.\n    >>> add_not(add_beautiful(\"Hello\"))\n    \"not Hello beautiful\"\
    \n    \n*/\nstring add_not(string string) \n{\n    string result = \"not \";\n\
    \    result += string;\n    result += \" beautiful\";\n    return result;\n}\n\
    /*\n Given a string, return a new string where the first and last chars have been\
    \ exchanged.\n    >>> front_back(\"Hello\")\n    \"olleH\"\n    \n*/\nstring front_back(string\
    \ string) \n{\n    string result = \"\";\n    result += string[1];\n    result\
    \ += string[0];\n    return result;\n}\n/*\n Given a string, return a new string\
    \ where the first and last chars have been exchanged, and where the first and\
    \ last chars are now the same.\n    >>> front_back_same(\"Hello\")\n    \"llleH\"\
    \n    \n*/\nstring front_back_same(string string) \n{\n    string result = \"\"\
    ;\n    result += string[0];\n    result += string[1];\n    result += string[2];\n\
    \    return result;\n}\n/*\n Given a string, return a new string where the first\
    \ and last chars have been exchanged, and where the first and last chars are now\
    \ the same.\n    >>> front_back_same(\"Hello\")\n    \"llleH\"\n    \n*/\nstring\
    \ front_back_same(string string) \n{\n    string result = \"\";\n    result +=\
    \ string[0];\n    result += string[1];\n    result += string[2];\n    return result;\n\
    }\n/*\n Given a string, return a new string where the first and last chars have\
    \ been exchanged, and where the first and last chars", "{\n    string result =\
    \ string;\n    for (int i = 0; i < string.length(); i++) {\n        if (islower(string[i]))\
    \ {\n            result[i] = toupper(string[i]);\n        } else {\n         \
    \   result[i] = tolower(string[i]);\n        }\n    }\n    return result;\n}",
  "{\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \            string[i] = toupper(string[i]);\n        else if(isupper(string[i]))\n\
    \            string[i] = tolower(string[i]);\n    }\n    return string;\n}", "{\n\
    \    string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n\
    \        if (islower(string[i])) {\n            result += toupper(string[i]);\n\
    \        } else {\n            result += tolower(string[i]);\n        }\n    }\n\
    \    return result;\n}\n", "{\n    string result = \"\";\n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        if(islower(string[i]))\n        {\n\
    \            result += toupper(string[i]);\n        }\n        else\n        {\n\
    \            result += tolower(string[i]);\n        }\n    }\n    return result;\n\
    }\n/*\n Given a string, return a new string where \"not \" has been added to the\
    \ front, and \"beautiful\" has been added to the back.\n    >>> make_sentence(\"\
    This dinner is not that beautiful.\")\n    'Not this dinner is that beautiful.'\n\
    \    \n*/\nstring make_sentence(string sentence) \n{\n    string result = \"\"\
    ;\n    result += \"Not \";\n    result += flip_case(sentence);\n    result +=\
    \ \" is that beautiful.\";\n    return result;\n}\n/*\n Given a string, return\
    \ a string where the first and last chars have been exchanged.\n    >>> front_back(\"\
    Hello\")\n    'olleH'\n    \n*/\nstring front_back(string string) \n{\n    string\
    \ result = \"\";\n    result += string[1];\n    result += string[0];\n    return\
    \ result;\n}\n/*\n Given a string, return a string where the first and last chars\
    \ have been exchanged, and then the first and last chars have been exchanged again.\n\
    \    >>> front_back_front_back(\"Hello\")\n    'olleHlleo'\n    \n*/\nstring front_back_front_back(string\
    \ string) \n{\n    string result = front_back(front_back(string));\n    return\
    \ result;\n}\n/*\n Given a string, return a string where the first and last chars\
    \ have been exchanged, and then all chars have been exchanged.\n    >>> front_back_all_chars(\"\
    Hello\")\n    'oellHleo'\n    \n*/\nstring front_back_all_chars(string string)\
    \ \n{\n    string result = front_back(string);\n    result = front_back(result);\n\
    \    return result;\n}\n/*\n Given a string, return a string where the first and\
    \ last chars have been exchanged, and then the first and last chars", "{\n   \
    \ for(int i=0; i<string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \            string[i]=toupper(string[i]);\n        else if(isupper(string[i]))\n\
    \            string[i]=tolower(string[i]);\n    }\n    return string;\n}", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        if(islower(string[i]))\n            result += toupper(string[i]);\n\
    \        else\n            result += tolower(string[i]);\n    }\n    return result;\n\
    }\n", "{\n    string result = \"\";\n    for (int i = 0; i < string.length();\
    \ i++)\n    {\n        if (islower(string[i]))\n        {\n            result\
    \ += toupper(string[i]);\n        }\n        else\n        {\n            result\
    \ += tolower(string[i]);\n        }\n    }\n    return result;\n}\n", "{\n   \
    \ string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(isalpha(string[i]))\n        {\n            if(islower(string[i]))\n\
    \            {\n                result += toupper(string[i]);\n            }\n\
    \            else\n            {\n                result += tolower(string[i]);\n\
    \            }\n        }\n        else\n        {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = string;\n \
    \   for (int i = 0; i < string.length(); i++) {\n        if (islower(string[i]))\
    \ {\n            result[i] = toupper(string[i]);\n        } else {\n         \
    \   result[i] = tolower(string[i]);\n        }\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n\
    \        if (islower(string[i])) {\n            result += toupper(string[i]);\n\
    \        } else {\n            result += tolower(string[i]);\n        }\n    }\n\
    \    return result;\n}\n", "{\n    for(int i=0; i<string.length(); i++)\n    {\n\
    \        if(islower(string[i]))\n            string[i] = toupper(string[i]);\n\
    \        else if(isupper(string[i]))\n            string[i] = tolower(string[i]);\n\
    \    }\n    return string;\n}", "{\n    string result = \"\";\n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        if(isalpha(string[i]))\n      \
    \  {\n            if(islower(string[i]))\n            {\n                result\
    \ += toupper(string[i]);\n            }\n            else\n            {\n   \
    \             result += tolower(string[i]);\n            }\n        }\n      \
    \  else\n        {\n            result += string[i];\n        }\n    }\n    return\
    \ result;\n}\n", "{\n    string result = \"\";\n    for(int i=0; i<string.length();\
    \ i++)\n    {\n        if(isalpha(string[i]))\n        {\n            if(islower(string[i]))\n\
    \            {\n                result += toupper(string[i]);\n            }\n\
    \            else\n            {\n                result += tolower(string[i]);\n\
    \            }\n        }\n        else\n        {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a string\
    \ made of its first two chars.\n    >>> first_two(\"Hello\")\n    \"He\"\n   \
    \ \n*/\nstring first_two(string string) \n{\n    return string.substr(0,2);\n\
    }\n/*\n Given a string, return a string made of its first three chars.\n    >>>\
    \ first_three(\"Hello\")\n    \"Hel\"\n    \n*/\nstring first_three(string string)\
    \ \n{\n    return string.substr(0,3);\n}\n/*\n Given a string, return a string\
    \ made of its first four chars.\n    >>> first_four(\"Hello\")\n    \"Hell\"\n\
    \    \n*/\nstring first_four(string string) \n{\n    return string.substr(0,4);\n\
    }\n/*\n Given a string, return a string made of its first five chars.\n    >>>\
    \ first_five(\"Hello\")\n    \"Hello\"\n    \n*/\nstring first_five(string string)\
    \ \n{\n    return string.substr(0,5);\n}\n/*\n Given a string, return a string\
    \ made of its first six chars.\n    >>> first_six(\"Hello\")\n    \"Hello\"\n\
    \    \n*/\nstring first_six(string string) \n{\n    return string.substr(0,6);\n\
    }\n/*\n Given a string, return a string made of its first seven chars.\n    >>>\
    \ first_seven(\"Hello\")\n    \"Hello\"\n    \n*/\nstring first_seven(string string)\
    \ \n{\n    return string.substr(0,7);\n}\n/*\n Given a string, return a string\
    \ made of its first eight chars.\n    >>> first_eight(\"", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \        {\n            result += toupper(string[i]);\n        }\n        else\n\
    \        {\n            result += tolower(string[i]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = string;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (islower(string[i])) {\n            result[i] = toupper(string[i]);\n\
    \        } else {\n            result[i] = tolower(string[i]);\n        }\n  \
    \  }\n    return result;\n}", "{\n    int len = string.length();\n    for (int\
    \ i = 0; i < len; i++)\n    {\n        if (islower(string[i]))\n            string[i]\
    \ = toupper(string[i]);\n        else\n            string[i] = tolower(string[i]);\n\
    \    }\n    return string;\n}", "{\n    for (int i = 0; i < string.length(); i++)\n\
    \    {\n        if (islower(string[i]))\n            string[i] = toupper(string[i]);\n\
    \        else\n            string[i] = tolower(string[i]);\n    }\n    return\
    \ string;\n}", "{\n    string result = \"\";\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(islower(string[i]))\n            result += toupper(string[i]);\n\
    \        else\n            result += tolower(string[i]);\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(isalpha(string[i]))\n        {\n            if(islower(string[i]))\n\
    \            {\n                result += toupper(string[i]);\n            }\n\
    \            else\n            {\n                result += tolower(string[i]);\n\
    \            }\n        }\n        else\n        {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \            result += toupper(string[i]);\n        else\n            result +=\
    \ tolower(string[i]);\n    }\n    return result;\n}\n", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \        {\n            result += toupper(string[i]);\n        }\n        else\n\
    \        {\n            result += tolower(string[i]);\n        }\n    }\n    return\
    \ result;\n}\n/*\n Given a string, return a new string where \"not \" has been\
    \ added to the front,\n    but the first letter of each word is uppercase.\n \
    \   >>> capitalize(\"this is a test\")\n    \"This is a test\"\n    \n*/\nstring\
    \ capitalize(string string) \n{\n    string result = \"\";\n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(string[i] == ' ')\n        {\n\
    \            result += ' ';\n        }\n        else\n        {\n            result\
    \ += toupper(string[i]);\n        }\n    }\n    return result;\n}\n/*\n Given\
    \ a string, return a new string where the first letter of each word is uppercase.\n\
    \    >>> capitalize_first(\"this is a test\")\n    \"This is a test\"\n    \n\
    */\nstring capitalize_first(string string) \n{\n    string result = \"\";\n  \
    \  for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] == '\
    \ ')\n        {\n            result += ' ';\n        }\n        else\n       \
    \ {\n            result += toupper(string[i]);\n        }\n    }\n    return result;\n\
    }\n/*\n Given a string, return a new string where \"not \" has been added to the\
    \ front,\n    but the first letter of each word is lowercase.\n    >>> uncapitalize(\"\
    This is a test\")\n    \"not this is a test\"\n    \n*/\nstring uncapitalize(string\
    \ string) \n{\n    string result = \"\";\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == ' ')\n        {\n            result +=\
    \ ' ';\n        }\n        else\n        {\n            ", "{\n    string result\
    \ = string;\n    for(int i=0; i<string.length(); i++)\n    {\n        if(isalpha(string[i]))\n\
    \        {\n            if(islower(string[i]))\n            {\n              \
    \  result[i] = toupper(string[i]);\n            }\n            else\n        \
    \    {\n                result[i] = tolower(string[i]);\n            }\n     \
    \   }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] >= 'a' && string[i]\
    \ <= 'z')\n        {\n            result += string[i] - 'a' + 'A';\n        }\n\
    \        else if(string[i] >= 'A' && string[i] <= 'Z')\n        {\n          \
    \  result += string[i] + 'a' - 'A';\n        }\n        else\n        {\n    \
    \        result += string[i];\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        if(islower(string[i]))\n        {\n            result += toupper(string[i]);\n\
    \        }\n        else\n        {\n            result += tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ made of every other character starting with the first.\n    >>> every_other(\"\
    Hello\")\n    \"lo\"\n    \n*/\nstring every_other(string string) \n{\n    string\
    \ result = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n      \
    \  if(i % 2 == 0)\n        {\n            result += string[i];\n        }\n  \
    \  }\n    return result;\n}\n/*\n Given a string, return a new string made of\
    \ every other character starting with the last.\n    >>> every_other_reverse(\"\
    Hello\")\n    \"olleH\"\n    \n*/\nstring every_other_reverse(string string) \n\
    {\n    string result = \"\";\n    for(int i = string.length() - 1; i >= 0; i--)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ made of every other character starting with the first,\n    but skip every second\
    \ character.\n    >>> every_other_skip_second(\"Hello\")\n    \"lo\"\n    \n*/\n\
    string every_other_skip_second(string string) \n{\n    string result = \"\";\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(i % 2 == 0)\n\
    \        {\n            result += string[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Given a string, return a new string made of every other character starting\
    \ with the last,\n    but skip every second character.\n    >>> every_other_skip_second_reverse(\"\
    Hello\")\n    \"olleH\"\n    \n*/\nstring every_other_skip_", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \            result += toupper(string[i]);\n        else\n            result +=\
    \ tolower(string[i]);\n    }\n    return result;\n}\n", "{\n    for (int i = 0;\
    \ i < string.length(); i++)\n    {\n        if (islower(string[i]))\n        \
    \    string[i] = toupper(string[i]);\n        else if (isupper(string[i]))\n \
    \           string[i] = tolower(string[i]);\n    }\n    return string;\n}", "{\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \        {\n            string[i] = toupper(string[i]);\n        }\n        else\
    \ if(isupper(string[i]))\n        {\n            string[i] = tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}\n", "{\n    string result = \"\";\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(isalpha(string[i]))\n\
    \        {\n            if(islower(string[i]))\n            {\n              \
    \  result += toupper(string[i]);\n            }\n            else\n          \
    \  {\n                result += tolower(string[i]);\n            }\n        }\n\
    \        else\n        {\n            result += string[i];\n        }\n    }\n\
    \    return result;\n}\n/*\n Given a string, return a string made of its first\
    \ 2 chars, its last 2 chars, and its middle 2 chars, in order.\n    >>> get_middle_string(\"\
    Hello\")\n    \"el\"\n    \n*/\nstring get_middle_string(string string) \n{\n\
    \    string result = \"\";\n    int len = string.length();\n    if(len > 2)\n\
    \    {\n        result += string[0];\n        result += string[len-2];\n     \
    \   result += string[len-1];\n    }\n    return result;\n}\n/*\n Given a string,\
    \ return a string made of its first 2 chars, its last 2 chars, and its middle\
    \ 2 chars, in order.\n    >>> get_middle_string(\"Hello\")\n    \"el\"\n    \n\
    */\nstring get_middle_string(string string) \n{\n    string result = \"\";\n \
    \   int len = string.length();\n    if(len > 2)\n    {\n        result += string[0];\n\
    \        result += string[len-2];\n        result += string[len-1];\n    }\n \
    \   return result;\n}\n/*\n Given a string, return a string made of its first\
    \ 2 chars, its last 2 chars, and its middle 2 chars, in order.\n    >>> get_middle_string(\"\
    Hello\")\n    \"el\"\n    \n*/\nstring get_middle_string(string string) \n{\n\
    \    string result = \"\";\n    int len = string.length();\n    if(len > 2)\n\
    \    {\n        result += string[0];\n        result += string[len-2];\n     \
    \   result += string[len-1];\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \        {\n            result += toupper(string[i]);\n        }\n        else\n\
    \        {\n            result += tolower(string[i]);\n        }\n    }\n    return\
    \ result;\n}\n", "{\n    string result = string;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(islower(string[i]))\n            result[i] = toupper(string[i]);\n\
    \        else\n            result[i] = tolower(string[i]);\n    }\n    return\
    \ result;\n}\n", "{\n    string result = \"\";\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(isalpha(string[i]))\n        {\n            if(islower(string[i]))\n\
    \            {\n                result += toupper(string[i]);\n            }\n\
    \            else\n            {\n                result += tolower(string[i]);\n\
    \            }\n        }\n        else\n        {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}\n", "{\n    string result = \"\";\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(isalpha(string[i]))\n\
    \        {\n            if(islower(string[i]))\n            {\n              \
    \  result += toupper(string[i]);\n            }\n            else\n          \
    \  {\n                result += tolower(string[i]);\n            }\n        }\n\
    \        else\n        {\n            result += string[i];\n        }\n    }\n\
    \    return result;\n}\n", "{\n    string result = \"\";\n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        if(islower(string[i]))\n           \
    \ result += toupper(string[i]);\n        else\n            result += tolower(string[i]);\n\
    \    }\n    return result;\n}", "{\n    string result = string;\n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n    \
    \    {\n            result[i] = toupper(string[i]);\n        }\n        else\n\
    \        {\n            result[i] = tolower(string[i]);\n        }\n    }\n  \
    \  return result;\n}", "{\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(islower(string[i]))\n        {\n            string[i] = toupper(string[i]);\n\
    \        }\n        else if(isupper(string[i]))\n        {\n            string[i]\
    \ = tolower(string[i]);\n        }\n    }\n    return string;\n}\n/*\n    >>>\
    \ flip_case(\"Hello\")\n    \"hELLO\"\n    \n*/\n", "{\n    string result = string;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \        {\n            result[i] = toupper(string[i]);\n        }\n        else\
    \ if(isupper(string[i]))\n        {\n            result[i] = tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ where the first and last chars have been exchanged.\n    >>> swap_first_last(\"\
    code\")\n    \"eodc\"\n    \n*/\nstring swap_first_last(string string) \n{\n \
    \   string result = string;\n    int first = string.find_first_of(\"\");\n   \
    \ int last = string.find_last_of(\"\");\n    result[first] = string[last];\n \
    \   result[last] = string[first];\n    return result;\n}\n/*\n Given a string,\
    \ return a new string where 'cd' is replaced with 'zy' and vice versa.\n    >>>\
    \ replace_cd_with_zy(\"code\")\n    \"ezykd\"\n    \n*/\nstring replace_cd_with_zy(string\
    \ string) \n{\n    string result = string;\n    int first = string.find_first_of(\"\
    cd\");\n    int last = string.find_last_of(\"cd\");\n    result[first] = 'z';\n\
    \    result[last] = 'y';\n    return result;\n}\n/*\n Given a string, return a\
    \ new string where all the lowercase 'l' have been removed.\n    >>> remove_lowercase(\"\
    This is a test!\")\n    \"Ths i a tset!\"\n    \n*/\nstring remove_lowercase(string\
    \ string) \n{\n    string result = string;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(islower(string[i]))\n        {\n            result[i]\
    \ = ' ';\n        }\n    }\n    return result;\n}\n/*\n Given a string, return\
    \ a new string where all the uppercase 'L' have been removed.\n    >>> remove_upp",
  "{\n    string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n  \
    \  {\n        if(islower(string[i]))\n            result += toupper(string[i]);\n\
    \        else\n            result += tolower(string[i]);\n    }\n    return result;\n\
    }\n", "{\n    string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(islower(string[i]))\n            result += toupper(string[i]);\n\
    \        else\n            result += tolower(string[i]);\n    }\n    return result;\n\
    }\n/*\n Given a string, return a new string made of every other character starting\
    \ with the first.\n    >>> every_other(\"Hello\")\n    \"lo\"\n    \n*/\nstring\
    \ every_other(string string) \n{\n    string result = \"\";\n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(i % 2 == 0)\n            result\
    \ += string[i];\n    }\n    return result;\n}\n/*\n Given a string, return a new\
    \ string made of every other character starting with the last.\n    >>> every_other_reverse(\"\
    Hello\")\n    \"olleH\"\n    \n*/\nstring every_other_reverse(string string) \n\
    {\n    string result = \"\";\n    for(int i = string.length() - 1; i >= 0; i--)\n\
    \    {\n        if(i % 2 == 0)\n            result += string[i];\n    }\n    return\
    \ result;\n}\n/*\n Given a string, return a new string made of every other character\
    \ starting with the first,\n    but skip every second character.\n    >>> every_other_skip_second(\"\
    Hello\")\n    \"l\"\n    \n*/\nstring every_other_skip_second(string string) \n\
    {\n    string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        if(i % 2 == 0)\n            result += string[i];\n    }\n    return\
    \ result;\n}\n/*\n Given a string, return a new string made of every other character\
    \ starting with the last,\n    but skip every second character.\n    >>> every_other_skip_second_reverse(\"\
    Hello\")\n    \"H\"\n    \n*/\nstring every_other_skip_second_reverse(string string)\
    \ \n{\n    string result = \"\";\n    for(int i = string.length() - 1; i", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        if(islower(string[i]))\n        {\n            result += toupper(string[i]);\n\
    \        }\n        else\n        {\n            result += tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = string;\n \
    \   for (int i = 0; i < string.length(); i++)\n    {\n        if (islower(string[i]))\n\
    \        {\n            result[i] = toupper(string[i]);\n        }\n        else\n\
    \        {\n            result[i] = tolower(string[i]);\n        }\n    }\n  \
    \  return result;\n}", "{\n    string result = string;\n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        if(islower(string[i]))\n            result[i]\
    \ = toupper(string[i]);\n        else\n            result[i] = tolower(string[i]);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n      \
    \      result += toupper(string[i]);\n        else\n            result += tolower(string[i]);\n\
    \    }\n    return result;\n}\n", "{\n    string result = string;\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n  \
    \          result[i] = toupper(string[i]);\n        else if(isupper(string[i]))\n\
    \            result[i] = tolower(string[i]);\n    }\n    return result;\n}\n/*\n\
    \ Given a string, return a new string where \"not \" has been added to the front,\n\
    \    but the first letter of each word is uppercase.\n    >>> capitalize(\"This\
    \ is a sentence.\")\n    \"This is a sentence.\"\n    >>> capitalize(\"this is\
    \ a sentence.\")\n    \"This is a sentence.\"\n    >>> capitalize(\"this is a\
    \ sentence.\")\n    \"This is a sentence.\"\n    >>> capitalize(\"This is a sentence.\"\
    )\n    \"This is a sentence.\"\n    >>> capitalize(\"This is a sentence.\")\n\
    \    \"This is a sentence.\"\n    >>> capitalize(\"This is a sentence.\")\n  \
    \  \"This is a sentence.\"\n    >>> capitalize(\"This is a sentence.\")\n    \"\
    This is a sentence.\"\n    >>> capitalize(\"This is a sentence.\")\n    \"This\
    \ is a sentence.\"\n    >>> capitalize(\"This is a sentence.\")\n    \"This is\
    \ a sentence.\"\n    >>> capitalize(\"This is a sentence.\")\n    \"This is a\
    \ sentence.\"\n    >>> capitalize(\"This is a sentence.\")\n    \"This is a sentence.\"\
    \n    >>> capitalize(\"This is a sentence.\")\n    \"This is a sentence.\"\n \
    \   >>> capitalize(\"This is a sentence.\")\n    \"This is a sentence.\"\n   \
    \ >>> capitalize(\"This is a sentence.\")\n    \"This is a sentence.\"\n    >>>\
    \ capitalize(\"This is a sentence.\")\n    \"This is a sentence.\"\n    >>> capitalize(\"\
    This is a sentence.\")\n    \"This is a sentence.\"\n    >>> capitalize(\"This\
    \ is a sentence.\")\n    \"This is a sentence.\"\n    >>> capitalize(\"This is\
    \ a sentence.\")\n    \"This is a sentence.\"\n    >>> capitalize(\"This is a\
    \ sentence.\")\n    \"This is a sentence.\"\n    >>> capitalize(\"This is a sentence.\"\
    )\n    \"This is a sentence.\"\n    >>> capitalize(\"This is a sentence.\")\n\
    \    \"This is a sentence.\"\n    >>> capitalize(\"This is", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \            result += toupper(string[i]);\n        else\n            result +=\
    \ tolower(string[i]);\n    }\n    return result;\n}\n/*\n Given a string, return\
    \ a new string where \"not \" has been added to the front,\n    but the first\
    \ letter of each word is uppercase.\n    >>> capitalize(\"this is fun\")\n   \
    \ \"Not this is fun\"\n    \n*/\nstring capitalize(string string) \n{\n    string\
    \ result = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n      \
    \  if(string[i] == ' ')\n        {\n            result += ' ';\n            continue;\n\
    \        }\n        if(islower(string[i]))\n            result += toupper(string[i]);\n\
    \        else\n            result += string[i];\n    }\n    return \"Not \" +\
    \ result;\n}\n/*\n Given a string, return a new string where the first and last\
    \ chars have been exchanged.\n    >>> front_back(\"Hello\")\n    \"olleH\"\n \
    \   \n*/\nstring front_back(string string) \n{\n    string result = \"\";\n  \
    \  for(int i = 0; i < string.length(); i++)\n    {\n        result += string[i];\n\
    \    }\n    return result[1] + result[0] + result[2];\n}\n/*\n Given a string,\
    \ return a new string where the first and last chars have been exchanged,\n  \
    \  but the first char of each word is uppercase.\n    >>> capitalize_front_back(\"\
    this is fun\")\n    \"Not this is fun\"\n    \n*/\nstring capitalize_front_back(string\
    \ string) \n{\n    string result = \"\";\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == ' ')\n        {\n            result +=\
    \ ' ';\n            continue;\n        }\n        if(islower(string[i]))\n   \
    \         result += toupper(string[i]);\n        else", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \        {\n            result += toupper(string[i]);\n        }\n        else\n\
    \        {\n            result += tolower(string[i]);\n        }\n    }\n    return\
    \ result;\n}\n/*\n    For a given string, return the number of times that a substring\
    \ is repeated in the string.\n    >>> count_substring(\"abcabcabcabc\", \"abc\"\
    )\n    3\n    \n*/", "{\n    string result = \"\";\n    for(int i=0; i<string.length();\
    \ i++)\n    {\n        if(islower(string[i]))\n            result += toupper(string[i]);\n\
    \        else\n            result += tolower(string[i]);\n    }\n    return result;\n\
    }\n", "{\n    string result = \"\";\n    for (int i = 0; i < string.length();\
    \ i++) \n    {\n        if (islower(string[i])) \n        {\n            result\
    \ += toupper(string[i]);\n        } \n        else \n        {\n            result\
    \ += tolower(string[i]);\n        }\n    }\n    return result;\n}\n", "{\n   \
    \ string result = string;\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(islower(string[i]))\n            result[i] = toupper(string[i]);\n\
    \        else if(isupper(string[i]))\n            result[i] = tolower(string[i]);\n\
    \    }\n    return result;\n}\n", "{\n    string result = \"\";\n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        if(isalpha(string[i]))\n    \
    \    {\n            if(islower(string[i]))\n            {\n                result\
    \ += toupper(string[i]);\n            }\n            else\n            {\n   \
    \             result += tolower(string[i]);\n            }\n        }\n      \
    \  else\n        {\n            result += string[i];\n        }\n    }\n    return\
    \ result;\n}\n", "{\n    string result = string;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(islower(string[i]))\n            result[i] = toupper(string[i]);\n\
    \        else\n            result[i] = tolower(string[i]);\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    for (int i = 0; i < string.length();\
    \ i++)\n    {\n        if (islower(string[i]))\n        {\n            result\
    \ += toupper(string[i]);\n        }\n        else\n        {\n            result\
    \ += tolower(string[i]);\n        }\n    }\n    return result;\n}\n", "{\n   \
    \ string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(islower(string[i]))\n            result += toupper(string[i]);\n \
    \       else\n            result += tolower(string[i]);\n    }\n    return result;\n\
    }\n", "{\n    for(int i=0; i<string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \            string[i] = toupper(string[i]);\n        else\n            string[i]\
    \ = tolower(string[i]);\n    }\n    return string;\n}", "{\n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(islower(string[i]))\n         \
    \   string[i] = toupper(string[i]);\n        else if(isupper(string[i]))\n   \
    \         string[i] = tolower(string[i]);\n    }\n    return string;\n}\n/*\n\
    \ Given a string, return a new string where the first and last chars have been\
    \ exchanged.\n    >>> swap_first_last(\"code\")\n    \"eodc\"\n    \n*/\nstring\
    \ swap_first_last(string string) \n{\n    string temp = string.substr(1, string.length()-2);\n\
    \    string first_char = string.substr(0, 1);\n    string last_char = string.substr(string.length()-1,\
    \ 1);\n    string result = first_char + temp + last_char;\n    return result;\n\
    }\n/*\n Given a string, return a new string made of every other char starting\
    \ with the first,\n    >>> alternate(\"code\")\n    \"eodc\"\n    \n*/\nstring\
    \ alternate(string string) \n{\n    string result = \"\";\n    for(int i = 0;\
    \ i < string.length(); i+=2)\n    {\n        result += string[i];\n    }\n   \
    \ return result;\n}\n/*\n Given a string, return a new string where '.' is removed,\n\
    \    >>> remove_dot(\"code.\")\n    \"code\"\n    \n*/\nstring remove_dot(string\
    \ string) \n{\n    string result = \"\";\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] != '.')\n            result += string[i];\n\
    \    }\n    return result;\n}\n/*\n Given a string, return a new string where\
    \ adjacent chars are separated by a '-',\n    >>> separate(\"mississippi\")\n\
    \    \"miss-i-ssi-pi\"\n    \n*/\nstring separate(string string) \n{\n    string\
    \ result = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n      \
    \  if(i == 0 || i ==", "{\n    for(int i=0;i<string.length();i++)\n    {\n   \
    \     if(islower(string[i]))\n            string[i]=toupper(string[i]);\n    \
    \    else\n            string[i]=tolower(string[i]);\n    }\n    return string;\n\
    }\n/*\n Given a string, return a new string where the first and last chars have\
    \ been exchanged.\n    >>> flip_first_last(\"code\")\n    \"eodc\"\n    >>> flip_first_last(\"\
    a\")\n    \"a\"\n    \n*/\nstring flip_first_last(string string) \n{\n    string\
    \ temp=string;\n    string first=string.substr(0,1);\n    string last=string.substr(string.length()-1,1);\n\
    \    string result=first+last;\n    return result;\n}\n/*\n Given a string, return\
    \ a new string where '.' is removed, unless it is preceded by a '.' or ','.\n\
    \    >>> remove_dots(\"code.\")\n    \"code\"\n    >>> remove_dots(\"code..\"\
    )\n    \"code,\"\n    >>> remove_dots(\"code..code\")\n    \"code..code\"\n  \
    \  \n*/\nstring remove_dots(string string) \n{\n    string result=string;\n  \
    \  for(int i=0;i<result.length();i++)\n    {\n        if(result[i]=='.' && result[i-1]!='.'\
    \ && result[i-1]!=',' && result[i+1]!='.')\n            result.erase(i,1);\n \
    \   }\n    return result;\n}\n/*\n Given a string, return a new string where the\
    \ string is reversed.\n    >>> reverse_string(\"code\")\n    \"edoc\"\n    >>>\
    \ reverse_string(\"a\")\n    \"a\"\n    \n*/\nstring reverse_string(string string)\
    \ \n{\n    string result=string;\n    for(int i=0;i<result.length();i++)\n   \
    \ {\n        if(i==0)\n            result[i]=tolower(result[i]);\n        else\n\
    \            result[i]=toupper", "{\n    string result = \"\";\n    for(int i=0;\
    \ i<string.length(); i++)\n    {\n        if(islower(string[i]))\n           \
    \ result += toupper(string[i]);\n        else\n            result += tolower(string[i]);\n\
    \    }\n    return result;\n}\n", "{\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(islower(string[i]))\n            string[i] = toupper(string[i]);\n\
    \        else if(isupper(string[i]))\n            string[i] = tolower(string[i]);\n\
    \    }\n    return string;\n}", "{\n    string result = \"\";\n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        if(isalpha(string[i]))\n      \
    \  {\n            if(islower(string[i]))\n            {\n                result\
    \ += toupper(string[i]);\n            }\n            else\n            {\n   \
    \             result += tolower(string[i]);\n            }\n        }\n      \
    \  else\n        {\n            result += string[i];\n        }\n    }\n    return\
    \ result;\n}\n", "{\n    string result = string;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(islower(string[i]))\n        {\n            result[i]\
    \ = toupper(string[i]);\n        }\n        else if(isupper(string[i]))\n    \
    \    {\n            result[i] = tolower(string[i]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = string;\n    for (int i = 0; i < string.length();\
    \ i++)\n    {\n        if (islower(string[i]))\n        {\n            result[i]\
    \ = toupper(string[i]);\n        }\n        else\n        {\n            result[i]\
    \ = tolower(string[i]);\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n      \
    \  if(isalpha(string[i]))\n        {\n            if(islower(string[i]))\n   \
    \         {\n                result += toupper(string[i]);\n            }\n  \
    \          else\n            {\n                result += tolower(string[i]);\n\
    \            }\n        }\n        else\n        {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = string;\n \
    \   for (int i = 0; i < string.length(); i++)\n    {\n        if (islower(string[i]))\n\
    \            result[i] = toupper(string[i]);\n        else if (isupper(string[i]))\n\
    \            result[i] = tolower(string[i]);\n    }\n    return result;\n}\n",
  "{\n    string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n  \
    \  {\n        if(isalpha(string[i]))\n        {\n            if(islower(string[i]))\n\
    \            {\n                result += toupper(string[i]);\n            }\n\
    \            else\n            {\n                result += tolower(string[i]);\n\
    \            }\n        }\n        else\n        {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}\n", "{\n    string result = \"\";\n \
    \   for (int i = 0; i < string.length(); i++)\n    {\n        if (islower(string[i]))\n\
    \        {\n            result += toupper(string[i]);\n        }\n        else\n\
    \        {\n            result += tolower(string[i]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    for (int i = 0; i < string.length();\
    \ i++) \n    {\n        if (islower(string[i])) \n        {\n            result\
    \ += toupper(string[i]);\n        } \n        else \n        {\n            result\
    \ += tolower(string[i]);\n        }\n    }\n    return result;\n}\n", "{\n   \
    \ string result = string;\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(islower(string[i]))\n            result[i] = toupper(string[i]);\n\
    \        else\n            result[i] = tolower(string[i]);\n    }\n    return\
    \ result;\n}\n", "{\n    for(int i=0; i<string.length(); i++)\n    {\n       \
    \ if(islower(string[i]))\n        {\n            string[i] = toupper(string[i]);\n\
    \        }\n        else\n        {\n            string[i] = tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}", "{\n    for (int i = 0; i < string.length();\
    \ i++) \n    {\n        if (islower(string[i])) \n        {\n            string[i]\
    \ = toupper(string[i]);\n        } \n        else \n        {\n            string[i]\
    \ = tolower(string[i]);\n        }\n    }\n    return string;\n}\n", "{\n    string\
    \ result = string;\n    for(int i = 0; i < string.length(); i++)\n    {\n    \
    \    if(isalpha(string[i]))\n        {\n            if(islower(string[i]))\n \
    \           {\n                result[i] = toupper(string[i]);\n            }\n\
    \            else\n            {\n                result[i] = tolower(string[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\n    For a given string,\
    \ return the number of times the string appears in the string.\n    >>> count_string(\"\
    hello\", \"hello\")\n    2\n    >>> count_string(\"hello\", \"world\")\n    0\n\
    \    \n*/", "{\n    string result = \"\";\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(isalpha(string[i]))\n        {\n            if(islower(string[i]))\n\
    \            {\n                result += toupper(string[i]);\n            }\n\
    \            else\n            {\n                result += tolower(string[i]);\n\
    \            }\n        }\n        else\n        {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}\n", "{\n    string result = string;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (islower(string[i]))\
    \ {\n            result[i] = toupper(string[i]);\n        } else {\n         \
    \   result[i] = tolower(string[i]);\n        }\n    }\n    return result;\n}\n",
  "{\n    string result = \"\";\n    for (int i = 0; i < string.length(); i++) \n\
    \    {\n        if (islower(string[i])) \n        {\n            result += toupper(string[i]);\n\
    \        } \n        else \n        {\n            result += tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = string;\n \
    \   for(int i=0; i<string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \        {\n            result[i] = toupper(string[i]);\n        }\n        else\n\
    \        {\n            result[i] = tolower(string[i]);\n        }\n    }\n  \
    \  return result;\n}\n", "{\n    string result = \"\";\n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        if(islower(string[i]))\n        {\n  \
    \          result += toupper(string[i]);\n        }\n        else\n        {\n\
    \            result += tolower(string[i]);\n        }\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    for (int i = 0; i < string.length(); i++)\n\
    \    {\n        if (islower(string[i]))\n        {\n            result += toupper(string[i]);\n\
    \        }\n        else\n        {\n            result += tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}\n/*\n For a given string, return the\
    \ number of times a substring is repeated.\n    >>> repeat_count(\"abcabcabc\"\
    , \"abc\")\n    3\n    \n*/", "{\n    string result = string;\n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n      \
    \  {\n            result[i] = toupper(string[i]);\n        }\n        else if(isupper(string[i]))\n\
    \        {\n            result[i] = tolower(string[i]);\n        }\n    }\n  \
    \  return result;\n}", "{\n    string result = string;\n    for (int i = 0; i\
    \ < string.length(); i++)\n    {\n        if (islower(string[i]))\n        {\n\
    \            result[i] = toupper(string[i]);\n        }\n        else if (isupper(string[i]))\n\
    \        {\n            result[i] = tolower(string[i]);\n        }\n    }\n  \
    \  return result;\n}", "{\n    string result = string;\n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        if(isalpha(string[i]))\n        {\n  \
    \          if(islower(string[i]))\n            {\n                result[i] =\
    \ toupper(string[i]);\n            }\n            else\n            {\n      \
    \          result[i] = tolower(string[i]);\n            }\n        }\n    }\n\
    \    return result;\n}\n/*\n Given a string, return a new string where \"not \"\
    \ has been added to the front, and \"beautiful\" has been added to the back.\n\
    \    >>> make_up(\"This dinner is not that beautiful.\")\n    'This dinner is\
    \ not that beautiful.'\n    \n*/\nstring make_up(string string) \n{\n    string\
    \ result = string;\n    result = \"not \" + result;\n    result = result + \"\
    , very beautiful!\";\n    return result;\n}\n/*\n Given a string, return a new\
    \ string where the first and last chars have been exchanged.\n    >>> front_back(\"\
    Hello\")\n    'olleH'\n    \n*/\nstring front_back(string string) \n{\n    string\
    \ result = string;\n    result[0] = string[string.length() - 1];\n    result[string.length()\
    \ - 1] = string[0];\n    return result;\n}\n/*\n Given a string, return a new\
    \ string where the first and last chars have been exchanged, and then the first\
    \ and last chars have been exchanged again.\n    >>> front_back_front_back(\"\
    Hello\")\n    'olleHllleo'\n    \n*/\nstring front_back_front_back(string string)\
    \ \n{\n    string result = front_back(front_back(string));\n    return result;\n\
    }\n/*\n Given a string, return a new string where the first and last chars have\
    \ been exchanged, and then the first and last chars have been exchanged again.\n\
    \    >>> front_back_front_back(\"Hello\")\n    'olleHllleo'\n    \n*/\nstring\
    \ front_back_front_back(string string) \n{\n    string result = front_back(front_back(string));\n\
    \    return result", "{\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(isalpha(string[i]))\n        {\n            if(islower(string[i]))\n\
    \            {\n                string[i] = toupper(string[i]);\n            }\n\
    \            else if(isupper(string[i]))\n            {\n                string[i]\
    \ = tolower(string[i]);\n            }\n        }\n    }\n    return string;\n\
    }\n/*\n Given a string, return a string made of the first 2 chars of each word\
    \ in the string, \n    separated by a single space.\n    >>> split_words(\"Hello\
    \ World\")\n    \"He He\"\n    \n*/\nstring split_words(string string) \n{\n \
    \   string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(isalpha(string[i]))\n        {\n            if(i == 0)\n         \
    \   {\n                result += string[i];\n            }\n            else if(i\
    \ == string.length() - 1)\n            {\n                result += string[i];\n\
    \            }\n            else\n            {\n                result += string[i]\
    \ + \" \";\n            }\n        }\n    }\n    return result;\n}\n/*\n Given\
    \ a string, return a string made of the first 2 chars of each word in the string,\
    \ \n    separated by a single space.\n    >>> split_words(\"Hello World\")\n \
    \   \"He He\"\n    \n*/\nstring split_words(string string) \n{\n    string result\
    \ = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(isalpha(string[i]))\n\
    \        {\n            if(i == 0)\n            {\n                result += string[i];\n\
    \            }\n            else if(i == string.length() - 1)\n            {\n\
    \                result += string[i];\n            }\n            else\n     \
    \       {\n                result += string[i] + \" \";\n            }\n     \
    \   }\n    }\n    return result;\n}\n/*\n Given a string, return a string made\
    \ of the first 2 chars", "{\n    for(int i=0; i<string.length(); i++)\n    {\n\
    \        if(islower(string[i]))\n            string[i] = toupper(string[i]);\n\
    \        else if(isupper(string[i]))\n            string[i] = tolower(string[i]);\n\
    \    }\n    return string;\n}\n", "{\n    string result = \"\";\n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        if(string[i] >= 'a' && string[i]\
    \ <= 'z')\n        {\n            result += string[i] - 'a' + 'A';\n        }\n\
    \        else if(string[i] >= 'A' && string[i] <= 'Z')\n        {\n          \
    \  result += string[i] - 'A' + 'a';\n        }\n        else\n        {\n    \
    \        result += string[i];\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        if(islower(string[i]))\n        {\n            result += toupper(string[i]);\n\
    \        }\n        else\n        {\n            result += tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}\n", "{\n    string result = \"\";\n \
    \   for (int i = 0; i < string.length(); i++) {\n        if (islower(string[i]))\
    \ {\n            result += toupper(string[i]);\n        } else {\n           \
    \ result += tolower(string[i]);\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = string;\n    for (int i = 0; i < string.length(); i++) {\n\
    \        if (islower(string[i])) {\n            result[i] = toupper(string[i]);\n\
    \        } else if (isupper(string[i])) {\n            result[i] = tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ for(int i = 0; i < string.length(); i++)\n    {\n        if(isalpha(string[i]))\n\
    \        {\n            if(islower(string[i]))\n            {\n              \
    \  result += toupper(string[i]);\n            }\n            else\n          \
    \  {\n                result += tolower(string[i]);\n            }\n        }\n\
    \        else\n        {\n            result += string[i];\n        }\n    }\n\
    \    return result;\n}\n", "{\n    string result = \"\";\n    for(int i=0; i<string.length();\
    \ i++)\n    {\n        if(islower(string[i]))\n        {\n            result +=\
    \ toupper(string[i]);\n        }\n        else\n        {\n            result\
    \ += tolower(string[i]);\n        }\n    }\n    return result;\n}\n/*\n Given\
    \ a string, return a new string where \"not \" has been added to the front, and\
    \ \"beautiful\" has been added to the back.\n    >>> add_not(add_beautiful(\"\
    Hello\"))\n    \"not Hello beautiful\"\n    \n*/\nstring add_not(string string)\
    \ \n{\n    string result = \"not \";\n    result += string;\n    result += \"\
    \ beautiful\";\n    return result;\n}\n/*\n Given a string, return a new string\
    \ where the first and last chars have been exchanged.\n    >>> front_back(front_back(\"\
    Hello\"))\n    \"olleH\"\n    \n*/\nstring front_back(string string) \n{\n   \
    \ string result = \"\";\n    result += string[1];\n    result += string[0];\n\
    \    return result;\n}\n/*\n Given a string, return a new string where the first\
    \ and last chars have been exchanged, and where the first and last chars are now\
    \ the same.\n    >>> front_back_same(front_back_same(\"Hello\"))\n    \"Hello\"\
    \n    \n*/\nstring front_back_same(string string) \n{\n    string result = \"\"\
    ;\n    result += string[0];\n    result += string[1];\n    return result;\n}\n\
    /*\n Given a string, return a new string where the first and last chars have been\
    \ exchanged, and where the first and last chars are now the same.\n    >>> front_back_same(front_back_same(\"\
    Hello\"))\n    \"Hello\"\n    \n*/\nstring front_back_same(string string) \n{\n\
    \    string result = \"\";\n    result += string[0];\n    result += string[1];\n\
    \    return result;\n}\n/*\n Given a string, return a new string where \"xyz\"\
    \ has been added in the middle somewhere.\n    >>> middle_add(\"abc", "{\n   \
    \ string result = string;\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(islower(string[i]))\n            result[i] = toupper(string[i]);\n\
    \        else\n            result[i] = tolower(string[i]);\n    }\n    return\
    \ result;\n}", "{\n    string result = string;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(isalpha(string[i]))\n        {\n            if(islower(string[i]))\n\
    \            {\n                result[i] = toupper(string[i]);\n            }\n\
    \            else\n            {\n                result[i] = tolower(string[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\n", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n  \
    \          result += toupper(string[i]);\n        else\n            result +=\
    \ tolower(string[i]);\n    }\n    return result;\n}", "{\n    string result =\
    \ \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(isalpha(string[i]))\n\
    \        {\n            if(islower(string[i]))\n            {\n              \
    \  result += toupper(string[i]);\n            }\n            else\n          \
    \  {\n                result += tolower(string[i]);\n            }\n        }\n\
    \        else\n        {\n            result += string[i];\n        }\n    }\n\
    \    return result;\n}\n/*\n Given a string, return a string made of its first\
    \ two chars, so \"Hello\" yields \"He\".\n    >>> first_two(\"Hello\")\n    \"\
    He\"\n    \n*/\nstring first_two(string string) \n{\n    return string.substr(0,\
    \ 2);\n}\n/*\n Given a string, return a string made of its first char, so \"Hello\"\
    \ yields \"H\".\n    >>> first_char(\"Hello\")\n    \"H\"\n    \n*/\nstring first_char(string\
    \ string) \n{\n    return string.substr(0, 1);\n}\n/*\n Given a string, return\
    \ a string made of its last two chars, so \"Hello\" yields \"lo\".\n    >>> last_two(\"\
    Hello\")\n    \"lo\"\n    \n*/\nstring last_two(string string) \n{\n    return\
    \ string.substr(string.length() - 2, 2);\n}\n/*\n Given a string, return a string\
    \ made of its last char, so \"Hello\" yields \"o\".\n    >>> last_char(\"Hello\"\
    )\n    \"o\"\n    \n*/\nstring last_char(string string) \n{\n    return string.substr(string.length()\
    \ - 1, 1);\n}\n/*\n Given a string, return a string made of its first and last\
    \ chars, so \"Hello\" yields \"Hl\".\n    >>> first_last(\"Hello\")\n    \"Hl\"\
    \n    \n*/\nstring first_last(string string) \n{\n    return string.substr(0,\
    \ 1) + string.substr(string.length() - 1, 1);\n}\n/*\n Given a string, return\
    \ a string made of its first and last chars, so", "{\n    for (int i = 0; i <\
    \ string.length(); i++) {\n        if (islower(string[i])) {\n            string[i]\
    \ = toupper(string[i]);\n        } else {\n            string[i] = tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}\n", "{\n    string result = \"\";\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \            result += toupper(string[i]);\n        else\n            result +=\
    \ tolower(string[i]);\n    }\n    return result;\n}", "{\n    string result =\
    \ string;\n    for (int i = 0; i < string.length(); i++) {\n        if (islower(string[i]))\
    \ {\n            result[i] = toupper(string[i]);\n        } else {\n         \
    \   result[i] = tolower(string[i]);\n        }\n    }\n    return result;\n}",
  "{\n    string result = string;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(islower(string[i]))\n            result[i] = toupper(string[i]);\n\
    \        else if(isupper(string[i]))\n            result[i] = tolower(string[i]);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        if(isalpha(string[i]))\n      \
    \  {\n            if(islower(string[i]))\n            {\n                result\
    \ += toupper(string[i]);\n            }\n            else\n            {\n   \
    \             result += tolower(string[i]);\n            }\n        }\n      \
    \  else\n        {\n            result += string[i];\n        }\n    }\n    return\
    \ result;\n}\n", "{\n    string result = \"\";\n    for (int i = 0; i < string.length();\
    \ i++)\n    {\n        if (islower(string[i]))\n        {\n            result\
    \ += toupper(string[i]);\n        }\n        else\n        {\n            result\
    \ += tolower(string[i]);\n        }\n    }\n    return result;\n}\n/*\n    >>>\
    \ flip_case(\"Hello\")\n    \"hELLO\"\n    \n*/\n", "{\n    string result = \"\
    \";\n    for (int i = 0; i < string.length(); i++) \n    {\n        if (islower(string[i]))\
    \ \n        {\n            result += toupper(string[i]);\n        } \n       \
    \ else \n        {\n            result += tolower(string[i]);\n        }\n   \
    \ }\n    return result;\n}", "{\n    string result = string;\n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n      \
    \      result[i] = toupper(string[i]);\n        else\n            result[i] =\
    \ tolower(string[i]);\n    }\n    return result;\n}", "{\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(islower(string[i]))\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n        else if(isupper(string[i]))\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}\n/*\n Given a string, return a new string\
    \ where the first and last chars have been exchanged.\n    >>> swap_first_last(\"\
    code\")\n    \"eodc\"\n    \n*/\nstring swap_first_last(string string) \n{\n \
    \   string temp=string;\n    temp[0]=tolower(string[0]);\n    temp[string.length()-1]=tolower(string[string.length()-1]);\n\
    \    return temp;\n}\n/*\n Given a string, return a new string where 'cd' is replaced\
    \ with 'zy'\n    >>> replace_cd(\"code\")\n    \"ezykd\"\n    \n*/\nstring replace_cd(string\
    \ string) \n{\n    string temp=string;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]=='c' && string[i+1]=='d')\n        {\n          \
    \  temp[i+1]='z';\n            temp[i+2]='y';\n        }\n    }\n    return temp;\n\
    }\n/*\n Given a string, return a new string where all the lower case 'abc' have\
    \ been replaced with 'xyz'.\n    >>> replace_lower_abc(\"code\")\n    \"xyzd\"\
    \n    \n*/\nstring replace_lower_abc(string string) \n{\n    string temp=string;\n\
    \    for(int i=0;i<string.length();i++)\n    {\n        if(islower(string[i]))\n\
    \        {\n            temp[i]=toupper(string[i]);\n        }\n    }\n    return\
    \ temp;\n}\n/*\n Given a string, return a new string where the first and last\
    \ chars have been exchanged, and then all the lower case 'abc' have been replaced\
    \ with", "{\n    string result = \"\";\n    for (int i = 0; i < string.length();\
    \ i++) \n    {\n        if (islower(string[i])) \n        {\n            result\
    \ += toupper(string[i]);\n        } \n        else \n        {\n            result\
    \ += tolower(string[i]);\n        }\n    }\n    return result;\n}\n/*\n Given\
    \ a string, return a new string where \"not \" has been added to the front,\n\
    \    but the first letter of the string is in uppercase.\n    >>> make_sentence(\"\
    Hello\")\n    \"Not Hello\"\n    \n*/\nstring make_sentence(string string) \n\
    {\n    string result = \"\";\n    result += \"Not \";\n    result += toupper(string[0]);\n\
    \    result += string.substr(1);\n    return result;\n}\n/*\n Given a string,\
    \ return a string where the first and last chars have been exchanged.\n    >>>\
    \ make_palindrome(\"code\")\n    \"eodc\"\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string result = \"\";\n    result += string[0];\n    result\
    \ += string[string.length() - 1];\n    result += string.substr(1, string.length()\
    \ - 2);\n    return result;\n}\n/*\n Given a string, return a new string where\
    \ the first and last chars have been exchanged,\n    but the first and last chars\
    \ are now in uppercase.\n    >>> make_palindrome_sentence(\"code\")\n    \"Not\
    \ Eodc\"\n    \n*/\nstring make_palindrome_sentence(string string) \n{\n    string\
    \ result = \"\";\n    result += \"Not \";\n    result += toupper(string[0]);\n\
    \    result += toupper(string[string.length() - 1]);\n    result += string.substr(1,\
    \ string.length() - 2);\n    return result;\n}\n/*\n Given a string, return a\
    \ new string where the first and last chars have been exchanged,\n    but the\
    \ first and last chars are now in lowercase.\n    >>> make_palindrome_sentence(\"\
    code\")\n    \"", "{\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      if(islower(string[i]))\n        {\n            string[i] = toupper(string[i]);\n\
    \        }\n        else if(isupper(string[i]))\n        {\n            string[i]\
    \ = tolower(string[i]);\n        }\n    }\n    return string;\n}\n/*\n    For\
    \ a given string, return the number of times that a substring is contained in\
    \ the string.\n    >>> count_substring(\"abcabcabcabc\", \"abc\")\n    3\n   \
    \ \n*/", "{\n    string result = \"\";\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] >= 'a' && string[i] <= 'z')\n        {\n \
    \           result += string[i] - 'a' + 'A';\n        }\n        else\n      \
    \  {\n            result += string[i];\n        }\n    }\n    return result;\n\
    }\n", "{\n    string result = string;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (islower(string[i])) {\n            result[i] = toupper(string[i]);\n\
    \        } else {\n            result[i] = tolower(string[i]);\n        }\n  \
    \  }\n    return result;\n}", "{\n    string result = \"\";\n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(islower(string[i]))\n         \
    \   result += toupper(string[i]);\n        else\n            result += tolower(string[i]);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n      \
    \  {\n            result += toupper(string[i]);\n        }\n        else\n   \
    \     {\n            result += tolower(string[i]);\n        }\n    }\n    return\
    \ result;\n}\n/*\n Given a string, return a new string where \"not \" has been\
    \ added to the front, and \"beautiful\" has been added to the back.\n    >>> make_sentence(\"\
    This dinner is not that beautiful.\")\n    \"Not this dinner is that beautiful.\"\
    \n    \n*/\nstring make_sentence(string string) \n{\n    string result = \"\"\
    ;\n    result += \"Not \";\n    result += string;\n    result += \" is that beautiful.\"\
    ;\n    return result;\n}\n/*\n Given a string, return a new string where the first\
    \ and last chars have been exchanged.\n    >>> front_back(\"Hello\")\n    \"olleH\"\
    \n    \n*/\nstring front_back(string string) \n{\n    string result = \"\";\n\
    \    result += string[1];\n    result += string[0];\n    return result;\n}\n/*\n\
    \ Given a string, return a new string where the first and last chars have been\
    \ exchanged, and where the first and last chars are now the same.\n    >>> front_back_same(\"\
    Hello\")\n    \"llleH\"\n    \n*/\nstring front_back_same(string string) \n{\n\
    \    string result = \"\";\n    result += string[0];\n    result += string[1];\n\
    \    result += string[2];\n    return result;\n}\n/*\n Given a string, return\
    \ a new string where the first and last chars have been exchanged, and where the\
    \ first and last chars are now the same.\n    >>> front_back_same(\"Hello\")\n\
    \    \"llleH\"\n    \n*/\nstring front_back_same(string string) \n{\n    string\
    \ result = \"\";\n    result += string[0];\n    result += string[1];\n    result\
    \ += string[2];\n    return result;\n}\n/*\n Given a string, return a new string\
    \ where the first", "{\n    for(int i=0; i<string.length(); i++)\n    {\n    \
    \    if(islower(string[i]))\n        {\n            string[i] = toupper(string[i]);\n\
    \        }\n        else if(isupper(string[i]))\n        {\n            string[i]\
    \ = tolower(string[i]);\n        }\n    }\n    return string;\n}\n/*\n Given a\
    \ string, return a new string where \"not \" has been added to the front,\n  \
    \  >>> add_not(\"hello\")\n    \"not hello\"\n    \n*/\nstring add_not(string\
    \ string) \n{\n    return \"not \" + string;\n}\n/*\n Given a string, return a\
    \ new string where the first character has been\n    replaced with new_char,\n\
    \    >>> replace_first_char(\"Hello\", \"H\", \"X\")\n    \"Xello\"\n    \n*/\n\
    string replace_first_char(string string, char old_char, char new_char) \n{\n \
    \   string[0] = new_char;\n    return string;\n}\n/*\n Given a string, return\
    \ a new string where \"xx\" has been added to the front,\n    >>> add_xx(\"Hello\"\
    )\n    \"xxHello\"\n    \n*/\nstring add_xx(string string) \n{\n    return \"\
    xx\" + string;\n}\n/*\n Given a string, return a new string where the last character\
    \ has been\n    replaced with new_char,\n    >>> replace_last_char(\"Hello\",\
    \ \"o\", \"X\")\n    \"HellX\"\n    \n*/\nstring replace_last_char(string string,\
    \ char old_char, char new_char) \n{\n    string[string.length()-1] = new_char;\n\
    \    return string;\n}\n/*\n Given a string, return a new string where the first\
    \ and last characters have been\n    replaced with new_char,\n    >>> replace_first_last_char(\"\
    Hello\", \"o\", \"X\")\n    \"Xello\"\n    \n*/\nstring replace_first_last_char(string\
    \ string, char old_char, char new_char) \n{\n    string[0] = new_char", "{\n \
    \   int len = string.length();\n    for (int i = 0; i < len; i++)\n    {\n   \
    \     if (islower(string[i]))\n            string[i] = toupper(string[i]);\n \
    \       else\n            string[i] = tolower(string[i]);\n    }\n    return string;\n\
    }", "{\n    string result = \"\";\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(isalpha(string[i]))\n        {\n            if(islower(string[i]))\n\
    \            {\n                result += toupper(string[i]);\n            }\n\
    \            else\n            {\n                result += tolower(string[i]);\n\
    \            }\n        }\n        else\n        {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ for(int i=0; i<string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \            result += toupper(string[i]);\n        else\n            result +=\
    \ tolower(string[i]);\n    }\n    return result;\n}", "{\n    string result =\
    \ \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \        {\n            result += toupper(string[i]);\n        }\n        else\n\
    \        {\n            result += tolower(string[i]);\n        }\n    }\n    return\
    \ result;\n}\n/*\n    For a given string, return the number of times that a substring\
    \ is repeated in the string.\n    >>> count_substring(\"abcabcabcabc\", \"abc\"\
    )\n    3\n    \n*/", "{\n    string result = \"\";\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(islower(string[i]))\n        {\n            result +=\
    \ toupper(string[i]);\n        }\n        else\n        {\n            result\
    \ += tolower(string[i]);\n        }\n    }\n    return result;\n}\n/*\n Given\
    \ a string, return a new string where the first and last chars have been exchanged.\n\
    \    >>> flip_first_last(\"code\")\n    \"eodc\"\n    \n*/\nstring flip_first_last(string\
    \ string) \n{\n    string result = \"\";\n    result = string[1] + string[0] +\
    \ string[string.length()-1] + string[string.length()-2];\n    return result;\n\
    }\n/*\n Given a string, return a new string where 'cd' is replaced with 'zy' and\
    \ 'tx' is replaced with 'xw'.\n    >>> replace_cd_with_zy(\"cd\")\n    \"zy\"\n\
    \    >>> replace_tx_with_xw(\"tx\")\n    \"xw\"\n    \n*/\nstring replace_cd_with_zy(string\
    \ string) \n{\n    string result = \"\";\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == 'c' && string[i+1] == 'd')\n        {\n\
    \            result += 'z';\n            i++;\n        }\n        else\n     \
    \   {\n            result += string[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Given a string, return a new string where all the lowercase 'x' chars\
    \ have been replaced with 'y'.\n    >>> replace_x_with_y(\"x\")\n    \"y\"\n \
    \   >>> replace_x_with_y(\"xx\")\n    \"yy\"\n    \n*/\nstring replace_x_with_y(string\
    \ string) \n{\n    string result = \"\";\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(islower(string[i]))\n        {\n            result +=\
    \ 'y';\n        }\n        ", "{\n    string result = string;\n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        if(isalpha(string[i]))\n      \
    \  {\n            if(islower(string[i]))\n            {\n                result[i]\
    \ = toupper(string[i]);\n            }\n            else if(isupper(string[i]))\n\
    \            {\n                result[i] = tolower(string[i]);\n            }\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a string\
    \ made of its first 2 chars, its last 2 chars, and its middle 2 chars, in order.\n\
    \    >>> middle_chars(\"Hello\")\n    \"el\"\n    \n*/\nstring middle_chars(string\
    \ string) \n{\n    string result = string;\n    if(string.length() > 2)\n    {\n\
    \        result = string.substr(0, 2) + string.substr(string.length() - 2, 2)\
    \ + string.substr(string.length() - 4, 2);\n    }\n    return result;\n}\n/*\n\
    \ Given a string, return a string made of its first and last chars, in order.\n\
    \    >>> first_last(\"Hello\")\n    \"Hl\"\n    \n*/\nstring first_last(string\
    \ string) \n{\n    string result = string;\n    if(string.length() > 1)\n    {\n\
    \        result = string.substr(0, 1) + string.substr(string.length() - 1, 1);\n\
    \    }\n    return result;\n}\n/*\n Given a string, return a string made of its\
    \ first and last 2 chars, in order.\n    >>> first_last_two(\"Hello\")\n    \"\
    He\"\n    \n*/\nstring first_last_two(string string) \n{\n    string result =\
    \ string;\n    if(string.length() > 2)\n    {\n        result = string.substr(0,\
    \ 2) + string.substr(string.length() - 2, 2);\n    }\n    return result;\n}\n\
    /*\n Given a string, return a string made of its first and last 3 chars, in order.\n\
    \    >>> first_last", "{\n    string result = \"\";\n    for (int i = 0; i < string.length();\
    \ i++)\n    {\n        if (islower(string[i]))\n        {\n            result\
    \ += toupper(string[i]);\n        }\n        else\n        {\n            result\
    \ += tolower(string[i]);\n        }\n    }\n    return result;\n}\n/*\n Given\
    \ a string, return a new string where \"not \" has been added to the front, and\
    \ \"beautiful\" has been added to the back.\n    >>> make_happier(\"This dinner\
    \ is not beautiful\")\n    \"This dinner is not beautiful\"\n    \n*/\nstring\
    \ make_happier(string string) \n{\n    return \"not \" + string + \" beautiful\"\
    ;\n}\n/*\n Given a string, return a new string where the first and last chars\
    \ have been exchanged.\n    >>> front_back(\"code\")\n    \"eodc\"\n    \n*/\n\
    string front_back(string string) \n{\n    return string[1] + string[0] + string[string.length()\
    \ - 2] + string[string.length() - 1];\n}\n/*\n Given a string, return a new string\
    \ where the first and last chars have been exchanged, and where every second char\
    \ has been deleted.\n    >>> front_back_back(\"code\")\n    \"eocde\"\n    \n\
    */\nstring front_back_back(string string) \n{\n    return string[1] + string[0]\
    \ + string[string.length() - 2] + string[string.length() - 1] + string[string.length()\
    \ - 2];\n}\n/*\n Given a string, return a new string where the first and last\
    \ chars have been exchanged, and where every second char has been deleted.\n \
    \   >>> front_back_back_back(\"code\")\n    \"eocde\"\n    \n*/\nstring front_back_back_back(string\
    \ string) \n{\n    return string[1] + string[0] + string[string.length() - 2]\
    \ + string[string.length() - 1] + string[string.length() - 2];\n}\n/*\n Given\
    \ a string, return a new string where the first and last chars have been exchanged,\
    \ and where every", "{\n    string result = \"\";\n    for (int i = 0; i < string.length();\
    \ i++)\n    {\n        if (islower(string[i]))\n            result += toupper(string[i]);\n\
    \        else\n            result += tolower(string[i]);\n    }\n    return result;\n\
    }\n", "{\n    string result = string;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (islower(string[i])) {\n            result[i] = toupper(string[i]);\n\
    \        } else {\n            result[i] = tolower(string[i]);\n        }\n  \
    \  }\n    return result;\n}", "{\n    string result = \"\";\n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(isalpha(string[i]))\n        {\n\
    \            if(islower(string[i]))\n            {\n                result +=\
    \ toupper(string[i]);\n            }\n            else\n            {\n      \
    \          result += tolower(string[i]);\n            }\n        }\n        else\n\
    \        {\n            result += string[i];\n        }\n    }\n    return result;\n\
    }\n", "{\n    string result = string;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (islower(string[i])) {\n            result[i] = toupper(string[i]);\n\
    \        } else {\n            result[i] = tolower(string[i]);\n        }\n  \
    \  }\n    return result;\n}", "{\n    string result = \"\";\n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(isalpha(string[i]))\n        {\n\
    \            if(islower(string[i]))\n            {\n                result +=\
    \ toupper(string[i]);\n            }\n            else\n            {\n      \
    \          result += tolower(string[i]);\n            }\n        }\n        else\n\
    \        {\n            result += string[i];\n        }\n    }\n    return result;\n\
    }", "{\n    string result = string;\n    for (int i = 0; i < string.length();\
    \ i++)\n    {\n        if (islower(string[i]))\n        {\n            result[i]\
    \ = toupper(string[i]);\n        }\n        else if (isupper(string[i]))\n   \
    \     {\n            result[i] = tolower(string[i]);\n        }\n    }\n    return\
    \ result;\n}\n/*\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n    \n*/\n", "{\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \            string[i] = toupper(string[i]);\n        else if(isupper(string[i]))\n\
    \            string[i] = tolower(string[i]);\n    }\n    return string;\n}", "{\n\
    \    string result = \"\";\n    for (int i = 0; i < string.length(); i++)\n  \
    \  {\n        if (islower(string[i]))\n        {\n            result += toupper(string[i]);\n\
    \        }\n        else\n        {\n            result += tolower(string[i]);\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ made of every other character starting with the first.\n    >>> every_other(\"\
    Hello\")\n    \"olleH\"\n    \n*/\nstring every_other(string string) \n{\n   \
    \ string result = \"\";\n    for (int i = 0; i < string.length(); i++)\n    {\n\
    \        if (i % 2 == 0)\n        {\n            result += string[i];\n      \
    \  }\n    }\n    return result;\n}\n/*\n Given a string, return a new string made\
    \ of every other character starting with the last.\n    >>> every_other_end(\"\
    Hello\")\n    \"loHel\"\n    \n*/\nstring every_other_end(string string) \n{\n\
    \    string result = \"\";\n    for (int i = string.length() - 1; i >= 0; i--)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ made of every other character starting with the second last.\n    >>> every_other_end(\"\
    Hello\")\n    \"loHe\"\n    \n*/\nstring every_other_other(string string) \n{\n\
    \    string result = \"\";\n    for (int i = string.length() - 2; i >= 0; i--)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Given a string, return a new string\
    \ made of every other character starting with the second.\n    >>> every_other_other(\"\
    Hello\")\n    \"lHe\"\n    \n*/\nstring every_other_other_end(string string) \n\
    {\n    string result = \"\";\n    for"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
