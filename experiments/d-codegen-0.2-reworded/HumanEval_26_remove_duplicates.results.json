{
  "name": "HumanEval_26_remove_duplicates",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n",
  "tests": "unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpfiu34le9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: expression expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfiu34le9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tint len = numbers.length;\n\tlong[] result = new long[len];\n\tint j = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (j < i) {\n\t\t\tif (numbers[i] == numbers[j]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tresult[j] = numbers[i];\n\t\tj++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpndhisktx.d(12): Error: cannot implicitly convert expression `numbers.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpndhisktx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpasmkz0n9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: expression expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasmkz0n9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpsmgke8nc.d(14): Error: semicolon expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: expression expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmgke8nc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int i, j, count;\n    long[] result = new long[numbers.length];\n    for (i = 0, count = 0; i < numbers.length; i++) {\n        for (j = 0; j < count; j++) {\n            if (numbers[i] == result[j]) {\n                break;\n            }\n        }\n        if (j == count) {\n            result[count++] = numbers[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc_kdtldc.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42841d]\n??:? void tmpc_kdtldc.__unittest_L26_C1() [0x4280f1]\n??:? void tmpc_kdtldc.__modtest() [0x4281a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b36a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430aa4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430581]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b341]\n??:? runModuleUnitTests [0x42c2ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int len = numbers.length;\n    long[] result = new long[len];\n    int j = 0;\n    for (int i = 0; i < len; i++) {\n        if (j < i) {\n            if (numbers[i] == numbers[j]) {\n                continue;\n            }\n        }\n        result[j++] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmp_kgno7d0.d(12): Error: cannot implicitly convert expression `numbers.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_kgno7d0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int i, j, count;\n    long temp;\n    long[] result = new long[numbers.length];\n    for (i = 0, count = 0; i < numbers.length; i++) {\n        temp = numbers[i];\n        for (j = i + 1; j < numbers.length; j++) {\n            if (temp == numbers[j]) {\n                count++;\n                break;\n            }\n        }\n        if (count == 0) {\n            result[count] = temp;\n            count++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoqkujml7.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42840d]\n??:? void tmpoqkujml7.__unittest_L30_C1() [0x42802d]\n??:? void tmpoqkujml7.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b35a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a94]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430571]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b331]\n??:? runModuleUnitTests [0x42c29d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpsmgke8nc.d(14): Error: semicolon expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: expression expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmgke8nc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number: numbers)\n    {\n        if(i == 0 || number != result[i-1])\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpyrvzg8lr.d(14): Error: semicolon expected, not `:`\n/tmp/tmpyrvzg8lr.d(14): Error: expression expected, not `:`\n/tmp/tmpyrvzg8lr.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrvzg8lr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] output = new long[numbers.length];\n\tint index = 0;\n\tfor (int i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] != numbers[index]) {\n\t\t\toutput[index] = numbers[i];\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn072xd6h.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4283ed]\n??:? void tmpn072xd6h.__unittest_L22_C1() [0x42800d]\n??:? void tmpn072xd6h.__modtest() [0x42816c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a74]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430551]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]\n??:? runModuleUnitTests [0x42c27d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int i, j;\n    long[] result = new long[numbers.length];\n    for (i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n        for (j = i + 1; j < numbers.length; j++) {\n            if (numbers[i] == numbers[j]) {\n                result[i] = -1;\n                break;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length; i++) {\n        if (result[i] != -1) {\n            result[i] = numbers[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsx4htito.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x4284ed]\n??:? void tmpsx4htito.__unittest_L30_C1() [0x4281c1]\n??:? void tmpsx4htito.__modtest() [0x428270]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b43a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b74]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430651]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b411]\n??:? runModuleUnitTests [0x42c37d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int j = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (j < i && numbers[i] == numbers[j]) {\n            continue;\n        }\n        result[i] = numbers[i];\n        j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfrzfeoz6.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4283f5]\n??:? void tmpfrzfeoz6.__unittest_L23_C1() [0x4280c9]\n??:? void tmpfrzfeoz6.__modtest() [0x428178]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b342]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430559]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b319]\n??:? runModuleUnitTests [0x42c285]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != result[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg1zcaatr.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4283f5]\n??:? void tmpg1zcaatr.__unittest_L22_C1() [0x4280c5]\n??:? void tmpg1zcaatr.__modtest() [0x428174]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b342]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430559]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b319]\n??:? runModuleUnitTests [0x42c285]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor (long n : numbers) {\n\t\tif (i == 0 || n != result[i - 1]) {\n\t\t\tresult[i++] = n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpcdb02p6i.d(14): Error: semicolon expected, not `:`\n/tmp/tmpcdb02p6i.d(14): Error: expression expected, not `:`\n/tmp/tmpcdb02p6i.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcdb02p6i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (int j = 0; j < numbers.length; j++) {\n        if (i < j) {\n            while (i < j && numbers[i] == numbers[j]) {\n                i++;\n            }\n        }\n        result[i] = numbers[j];\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp87aasabb.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4283fd]\n??:? void tmp87aasabb.__unittest_L25_C1() [0x4280d1]\n??:? void tmp87aasabb.__modtest() [0x428180]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b34a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a84]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430561]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b321]\n??:? runModuleUnitTests [0x42c28d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tint i, j, k;\n\tlong[] result = new long[numbers.length];\n\tfor (i = 0; i < numbers.length; i++) {\n\t\tj = i;\n\t\tk = 0;\n\t\twhile (j < numbers.length && numbers[j] == numbers[i]) {\n\t\t\tj++;\n\t\t\tk++;\n\t\t}\n\t\tresult[i] = numbers[i];\n\t\tif (k > 0) {\n\t\t\tfor (int l = i + 1; l < i + k; l++) {\n\t\t\t\tresult[l] = numbers[l + k];\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf6max3a9.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmpf6max3a9.__unittest_L30_C1() [0x428161]\n??:? void tmpf6max3a9.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor(int j = 0; j < numbers.length; j++)\n\t{\n\t\tif(numbers[j] != result[i])\n\t\t{\n\t\t\tresult[i] = numbers[j];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg9sjvrse.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4283f5]\n??:? void tmpg9sjvrse.__unittest_L24_C1() [0x4280c5]\n??:? void tmpg9sjvrse.__modtest() [0x428174]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b342]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430559]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b319]\n??:? runModuleUnitTests [0x42c285]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i == 0 || number != result[i - 1]) {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpw22qrrvd.d(14): Error: semicolon expected, not `:`\n/tmp/tmpw22qrrvd.d(14): Error: expression expected, not `:`\n/tmp/tmpw22qrrvd.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw22qrrvd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpasmkz0n9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: expression expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasmkz0n9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpsmgke8nc.d(14): Error: semicolon expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: expression expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmgke8nc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int i, j;\n    long[] result = new long[numbers.length];\n    for (i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n        for (j = i + 1; j < numbers.length; j++) {\n            if (numbers[i] == numbers[j]) {\n                break;\n            }\n        }\n        if (j == numbers.length) {\n            result[i] = -1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps539t9mz.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42844d]\n??:? void tmps539t9mz.__unittest_L27_C1() [0x42806d]\n??:? void tmps539t9mz.__modtest() [0x4281cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c507]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b39a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430625]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b371]\n??:? runModuleUnitTests [0x42c2dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428910]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != result[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg1zcaatr.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4283f5]\n??:? void tmpg1zcaatr.__unittest_L22_C1() [0x4280c5]\n??:? void tmpg1zcaatr.__modtest() [0x428174]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b342]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430559]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b319]\n??:? runModuleUnitTests [0x42c285]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor(long number : numbers)\n\t{\n\t\tif(i < result.length && result[i] == number)\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = number;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmphuhw45fb.d(14): Error: semicolon expected, not `:`\n/tmp/tmphuhw45fb.d(14): Error: expression expected, not `:`\n/tmp/tmphuhw45fb.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphuhw45fb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i == 0 || n != result[i-1])\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpxn1ero8l.d(14): Error: semicolon expected, not `:`\n/tmp/tmpxn1ero8l.d(14): Error: expression expected, not `:`\n/tmp/tmpxn1ero8l.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxn1ero8l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long num : numbers) {\n        if(i < numbers.length && num == numbers[i]) {\n            i++;\n        } else {\n            result[i] = num;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmp60ns8mqo.d(14): Error: semicolon expected, not `:`\n/tmp/tmp60ns8mqo.d(14): Error: expression expected, not `:`\n/tmp/tmp60ns8mqo.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60ns8mqo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int len = numbers.length;\n    int i = 0;\n    long[] result = new long[len];\n    for (int j = 0; j < len; j++) {\n        if (i < j) {\n            if (numbers[i] == numbers[j]) {\n                i++;\n            }\n        }\n        result[i] = numbers[j];\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmp_peigwvv.d(12): Error: cannot implicitly convert expression `numbers.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_peigwvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpxbjgb94f.d(14): Error: semicolon expected, not `:`\n/tmp/tmpxbjgb94f.d(14): Error: expression expected, not `:`\n/tmp/tmpxbjgb94f.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbjgb94f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int i, j, k;\n    int len = numbers.length;\n    long[] result = new long[len];\n    for (i = 0; i < len; i++) {\n        result[i] = numbers[i];\n    }\n    for (i = 0; i < len - 1; i++) {\n        for (j = i + 1; j < len; j++) {\n            if (result[i] == result[j]) {\n                for (k = j; k < len - 1; k++) {\n                    result[k] = result[k + 1];\n                }\n                len--;\n                j--;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmp_nylvv_r.d(13): Error: cannot implicitly convert expression `numbers.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_nylvv_r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i++] = number;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmp38kjmivx.d(14): Error: semicolon expected, not `:`\n/tmp/tmp38kjmivx.d(14): Error: expression expected, not `:`\n/tmp/tmp38kjmivx.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38kjmivx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int i, j, count;\n    long[] result = new long[numbers.length];\n    for (i = 0, count = 0; i < numbers.length; i++) {\n        for (j = 0; j < count; j++) {\n            if (numbers[i] == result[j]) {\n                break;\n            }\n        }\n        if (j == count) {\n            result[count++] = numbers[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc_kdtldc.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42841d]\n??:? void tmpc_kdtldc.__unittest_L26_C1() [0x4280f1]\n??:? void tmpc_kdtldc.__modtest() [0x4281a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b36a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430aa4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430581]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b341]\n??:? runModuleUnitTests [0x42c2ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != result[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg1zcaatr.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4283f5]\n??:? void tmpg1zcaatr.__unittest_L22_C1() [0x4280c5]\n??:? void tmpg1zcaatr.__modtest() [0x428174]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b342]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430559]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b319]\n??:? runModuleUnitTests [0x42c285]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] output = new long[numbers.length];\n    int index = 0;\n    for(int i = 0; i < numbers.length; i++) {\n        if(numbers[i] != numbers[index]) {\n            output[index] = numbers[i];\n            index++;\n        }\n    }\n    return output;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpklvv4z2l.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4283ed]\n??:? void tmpklvv4z2l.__unittest_L22_C1() [0x42800d]\n??:? void tmpklvv4z2l.__modtest() [0x42816c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a74]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430551]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]\n??:? runModuleUnitTests [0x42c27d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != numbers[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    for (int i = index; i < result.length; i++) {\n        result[i] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppi7knllh.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmppi7knllh.__unittest_L25_C1() [0x428079]\n??:? void tmppi7knllh.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c50f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43062d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b379]\n??:? runModuleUnitTests [0x42c2e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int i, j;\n    long[] result = new long[numbers.length];\n    for (i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n    }\n    for (i = 0; i < numbers.length; i++) {\n        for (j = i + 1; j < numbers.length; j++) {\n            if (numbers[i] == numbers[j]) {\n                result[j] = 0;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length; i++) {\n        if (result[i] != 0) {\n            result[i] = numbers[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp93b2zjp8.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4284fd]\n??:? void tmp93b2zjp8.__unittest_L31_C1() [0x4281cd]\n??:? void tmp93b2zjp8.__modtest() [0x42827c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b44a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430661]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b421]\n??:? runModuleUnitTests [0x42c38d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != result[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    for (int i = index; i < result.length; i++) {\n        result[i] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0t8wpjuo.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428435]\n??:? void tmp0t8wpjuo.__unittest_L25_C1() [0x428109]\n??:? void tmp0t8wpjuo.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b382]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b359]\n??:? runModuleUnitTests [0x42c2c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int len = numbers.length;\n    int i = 0;\n    int j = 0;\n    long[] result = new long[len];\n    while (i < len) {\n        if (j < i) {\n            while (j < i && numbers[j] == numbers[i]) {\n                j++;\n            }\n        }\n        result[i] = numbers[i];\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpaovhq5u1.d(12): Error: cannot implicitly convert expression `numbers.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaovhq5u1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int i, j, n = numbers.length;\n    long[] result = new long[n];\n    for (i = 0; i < n; i++) {\n        result[i] = numbers[i];\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (numbers[i] == numbers[j]) {\n                result[j] = numbers[j];\n                n--;\n                j--;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmp4m9romd3.d(12): Error: cannot implicitly convert expression `numbers.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4m9romd3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < numbers.length && n == numbers[i]) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpwbo6vvgt.d(14): Error: semicolon expected, not `:`\n/tmp/tmpwbo6vvgt.d(14): Error: expression expected, not `:`\n/tmp/tmpwbo6vvgt.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwbo6vvgt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpfiu34le9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: expression expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfiu34le9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != numbers[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    for (int i = index; i < result.length; i++) {\n        result[i] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppi7knllh.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmppi7knllh.__unittest_L25_C1() [0x428079]\n??:? void tmppi7knllh.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c50f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43062d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b379]\n??:? runModuleUnitTests [0x42c2e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int i, j, k;\n    long[] new_numbers = new long[numbers.length];\n    for (i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i];\n    }\n    for (i = 0; i < numbers.length; i++) {\n        for (j = i + 1; j < numbers.length; j++) {\n            if (new_numbers[i] == new_numbers[j]) {\n                for (k = j; k < numbers.length - 1; k++) {\n                    new_numbers[k] = numbers[k + 1];\n                }\n                numbers.length--;\n                j--;\n            }\n        }\n    }\n    return new_numbers;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxkxmgv6n.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x4284bd]\n??:? void tmpxkxmgv6n.__unittest_L30_C1() [0x428191]\n??:? void tmpxkxmgv6n.__modtest() [0x428240]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d647]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c4da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431a11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431ec0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43199d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c4b1]\n??:? runModuleUnitTests [0x42d41d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428980]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpxbjgb94f.d(14): Error: semicolon expected, not `:`\n/tmp/tmpxbjgb94f.d(14): Error: expression expected, not `:`\n/tmp/tmpxbjgb94f.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbjgb94f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpxbjgb94f.d(14): Error: semicolon expected, not `:`\n/tmp/tmpxbjgb94f.d(14): Error: expression expected, not `:`\n/tmp/tmpxbjgb94f.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbjgb94f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i == 0 || n != result[i - 1]) {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpfy79xdgp.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfy79xdgp.d(14): Error: expression expected, not `:`\n/tmp/tmpfy79xdgp.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfy79xdgp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (int j = 0; j < numbers.length; j++) {\n        if (i < j) {\n            if (numbers[i] == numbers[j]) {\n                i++;\n            }\n        }\n        result[i] = numbers[j];\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ixqpqdb.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4283f5]\n??:? void tmp3ixqpqdb.__unittest_L25_C1() [0x4280c9]\n??:? void tmp3ixqpqdb.__modtest() [0x428178]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b342]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430559]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b319]\n??:? runModuleUnitTests [0x42c285]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpsmgke8nc.d(14): Error: semicolon expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: expression expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmgke8nc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers)\n    {\n        if (i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpfwkardhb.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfwkardhb.d(14): Error: expression expected, not `:`\n/tmp/tmpfwkardhb.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfwkardhb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int j = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (j < i && numbers[i] == numbers[j]) {\n            continue;\n        }\n        result[j++] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppkhftdkd.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4283f5]\n??:? void tmppkhftdkd.__unittest_L22_C1() [0x4280c5]\n??:? void tmppkhftdkd.__modtest() [0x428174]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b342]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430559]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b319]\n??:? runModuleUnitTests [0x42c285]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length)\n        {\n            if(result[i] == n)\n                i++;\n            else\n                result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmptg3fte21.d(14): Error: semicolon expected, not `:`\n/tmp/tmptg3fte21.d(14): Error: expression expected, not `:`\n/tmp/tmptg3fte21.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptg3fte21.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor(long n : numbers)\n\t{\n\t\tif(i < result.length)\n\t\t{\n\t\t\tif(result[i] == n)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[i] = n;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpn69gvrjm.d(14): Error: semicolon expected, not `:`\n/tmp/tmpn69gvrjm.d(14): Error: expression expected, not `:`\n/tmp/tmpn69gvrjm.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn69gvrjm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int i, j, count;\n    long temp;\n    \n    for (i = 0; i < numbers.length; i++) {\n        count = 0;\n        for (j = 0; j < numbers.length; j++) {\n            if (numbers[i] == numbers[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            for (j = i; j < numbers.length - 1; j++) {\n                temp = numbers[j + 1];\n                numbers[j + 1] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    return numbers;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyeclfy1b.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpyeclfy1b.__unittest_L32_C1() [0x428079]\n??:? void tmpyeclfy1b.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b346]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430988]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430465]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b31d]\n??:? runModuleUnitTests [0x42c289]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tint i, j, n = numbers.length;\n\tlong[] result = new long[n];\n\tfor (i = 0; i < n; i++) {\n\t\tresult[i] = numbers[i];\n\t}\n\tfor (i = 0; i < n; i++) {\n\t\tfor (j = i + 1; j < n; j++) {\n\t\t\tif (result[i] == result[j]) {\n\t\t\t\tresult[j] = -1;\n\t\t\t}\n\t\t}\n\t}\n\tfor (i = 0; i < n; i++) {\n\t\tif (result[i] > 0) {\n\t\t\tresult[i] = result[i] - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpv4ljiega.d(12): Error: cannot implicitly convert expression `numbers.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv4ljiega.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers) {\n        if(i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i++] = number;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpl7nkcrj6.d(14): Error: semicolon expected, not `:`\n/tmp/tmpl7nkcrj6.d(14): Error: expression expected, not `:`\n/tmp/tmpl7nkcrj6.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl7nkcrj6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor (long n : numbers) {\n\t\tif (i < result.length && result[i] == n) {\n\t\t\ti++;\n\t\t} else {\n\t\t\tresult[i] = n;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpnopzmnrd.d(14): Error: semicolon expected, not `:`\n/tmp/tmpnopzmnrd.d(14): Error: expression expected, not `:`\n/tmp/tmpnopzmnrd.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnopzmnrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i == 0 || n != result[i-1]) {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmppgpqx1uq.d(14): Error: semicolon expected, not `:`\n/tmp/tmppgpqx1uq.d(14): Error: expression expected, not `:`\n/tmp/tmppgpqx1uq.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppgpqx1uq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length) {\n            if (result[i] != n) {\n                result[i] = n;\n                i++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmp31fhm28h.d(14): Error: semicolon expected, not `:`\n/tmp/tmp31fhm28h.d(14): Error: expression expected, not `:`\n/tmp/tmp31fhm28h.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp31fhm28h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpsmgke8nc.d(14): Error: semicolon expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: expression expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmgke8nc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i] != numbers[index])\n        {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    for(int i = index; i < result.length; i++)\n    {\n        result[i] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwbttdf24.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpwbttdf24.__unittest_L28_C1() [0x428079]\n??:? void tmpwbttdf24.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c50f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43062d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b379]\n??:? runModuleUnitTests [0x42c2e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpxbjgb94f.d(14): Error: semicolon expected, not `:`\n/tmp/tmpxbjgb94f.d(14): Error: expression expected, not `:`\n/tmp/tmpxbjgb94f.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbjgb94f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length) {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpz1g83_44.d(14): Error: semicolon expected, not `:`\n/tmp/tmpz1g83_44.d(14): Error: expression expected, not `:`\n/tmp/tmpz1g83_44.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1g83_44.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int len = numbers.length;\n    long[] new_numbers = new long[len];\n    int j = 0;\n    for (int i = 0; i < len; i++) {\n        if (j < i) {\n            if (numbers[i] == numbers[j]) {\n                continue;\n            }\n        }\n        new_numbers[j] = numbers[i];\n        j++;\n    }\n    return new_numbers;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpit9b5504.d(12): Error: cannot implicitly convert expression `numbers.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpit9b5504.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < numbers.length && n == numbers[i]) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpabbcrgnp.d(14): Error: semicolon expected, not `:`\n/tmp/tmpabbcrgnp.d(14): Error: expression expected, not `:`\n/tmp/tmpabbcrgnp.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpabbcrgnp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && number == result[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpgoefhy98.d(14): Error: semicolon expected, not `:`\n/tmp/tmpgoefhy98.d(14): Error: expression expected, not `:`\n/tmp/tmpgoefhy98.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgoefhy98.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < numbers.length && n == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpnywbl52h.d(14): Error: semicolon expected, not `:`\n/tmp/tmpnywbl52h.d(14): Error: expression expected, not `:`\n/tmp/tmpnywbl52h.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnywbl52h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor (int j = 0; j < numbers.length; j++) {\n\t\tif (i < j) {\n\t\t\tif (numbers[i] == numbers[j]) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tresult[i] = numbers[j];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpixi1nwyi.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283f5]\n??:? void tmpixi1nwyi.__unittest_L27_C1() [0x4280c9]\n??:? void tmpixi1nwyi.__modtest() [0x428178]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b342]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430559]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b319]\n??:? runModuleUnitTests [0x42c285]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpfiu34le9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: expression expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfiu34le9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor (long n : numbers) {\n\t\tif (i == 0 || n != result[i - 1]) {\n\t\t\tresult[i++] = n;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpcdb02p6i.d(14): Error: semicolon expected, not `:`\n/tmp/tmpcdb02p6i.d(14): Error: expression expected, not `:`\n/tmp/tmpcdb02p6i.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcdb02p6i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpasmkz0n9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: expression expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasmkz0n9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpfiu34le9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: expression expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfiu34le9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number: numbers)\n    {\n        if(i < numbers.length && number == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpjy150_lm.d(14): Error: semicolon expected, not `:`\n/tmp/tmpjy150_lm.d(14): Error: expression expected, not `:`\n/tmp/tmpjy150_lm.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjy150_lm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpsmgke8nc.d(14): Error: semicolon expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: expression expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmgke8nc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i == 0 || n != result[i-1])\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpxn1ero8l.d(14): Error: semicolon expected, not `:`\n/tmp/tmpxn1ero8l.d(14): Error: expression expected, not `:`\n/tmp/tmpxn1ero8l.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxn1ero8l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpsmgke8nc.d(14): Error: semicolon expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: expression expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmgke8nc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tint i, j, n = numbers.length;\n\tlong[] result = new long[n];\n\tfor (i = 0; i < n; i++) {\n\t\tresult[i] = numbers[i];\n\t}\n\tfor (i = 1; i < n; i++) {\n\t\tif (result[i] == result[i - 1]) {\n\t\t\tfor (j = i; j < n - 1; j++) {\n\t\t\t\tresult[j] = result[j + 1];\n\t\t\t}\n\t\t\tn--;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp7pje29x3.d(12): Error: cannot implicitly convert expression `numbers.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pje29x3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i < numbers.length && number == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp7dy5k5qk.d(14): Error: semicolon expected, not `:`\n/tmp/tmp7dy5k5qk.d(14): Error: expression expected, not `:`\n/tmp/tmp7dy5k5qk.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dy5k5qk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers) {\n        if(i < result.length) {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpymfrh7r9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpymfrh7r9.d(14): Error: expression expected, not `:`\n/tmp/tmpymfrh7r9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpymfrh7r9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor(long number : numbers)\n\t{\n\t\tif(i < numbers.length && number == numbers[i])\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = number;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpa5wlas0n.d(14): Error: semicolon expected, not `:`\n/tmp/tmpa5wlas0n.d(14): Error: expression expected, not `:`\n/tmp/tmpa5wlas0n.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5wlas0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i] != numbers[index])\n        {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    for(int i = index; i < result.length; i++)\n    {\n        result[i] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwbttdf24.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpwbttdf24.__unittest_L28_C1() [0x428079]\n??:? void tmpwbttdf24.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c50f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43062d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b379]\n??:? runModuleUnitTests [0x42c2e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpfiu34le9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: expression expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfiu34le9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i == 0 || n != result[i-1]) {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmppgpqx1uq.d(14): Error: semicolon expected, not `:`\n/tmp/tmppgpqx1uq.d(14): Error: expression expected, not `:`\n/tmp/tmppgpqx1uq.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppgpqx1uq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < numbers.length && n == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpnywbl52h.d(14): Error: semicolon expected, not `:`\n/tmp/tmpnywbl52h.d(14): Error: expression expected, not `:`\n/tmp/tmpnywbl52h.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnywbl52h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != numbers[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    for (int i = index; i < result.length; i++) {\n        result[i] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppi7knllh.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmppi7knllh.__unittest_L25_C1() [0x428079]\n??:? void tmppi7knllh.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c50f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43062d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b379]\n??:? runModuleUnitTests [0x42c2e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != numbers[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpysocvt_3.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4283ed]\n??:? void tmpysocvt_3.__unittest_L22_C1() [0x42800d]\n??:? void tmpysocvt_3.__modtest() [0x42816c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a74]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430551]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]\n??:? runModuleUnitTests [0x42c27d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < numbers.length && n == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpnywbl52h.d(14): Error: semicolon expected, not `:`\n/tmp/tmpnywbl52h.d(14): Error: expression expected, not `:`\n/tmp/tmpnywbl52h.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnywbl52h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i] != numbers[index])\n        {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuu1gx3xs.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4283ed]\n??:? void tmpuu1gx3xs.__unittest_L24_C1() [0x42800d]\n??:? void tmpuu1gx3xs.__modtest() [0x42816c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a74]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430551]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]\n??:? runModuleUnitTests [0x42c27d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int len = numbers.length;\n    int i = 0;\n    int j = 0;\n    while (i < len) {\n        if (numbers[i] != numbers[j]) {\n            numbers[++j] = numbers[i];\n        }\n        i++;\n    }\n    return numbers;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpr257dr6m.d(12): Error: cannot implicitly convert expression `numbers.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr257dr6m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int i, j, n = numbers.length;\n    long[] result = new long[n];\n    for (i = 0; i < n; i++) {\n        result[i] = numbers[i];\n        for (j = i + 1; j < n; j++) {\n            if (numbers[i] == numbers[j]) {\n                numbers[j] = -1;\n            }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        if (numbers[i] > 0) {\n            result[i] = numbers[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmps6ezatp9.d(12): Error: cannot implicitly convert expression `numbers.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps6ezatp9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tint i, j, k;\n\tint len = numbers.length;\n\tint[] count = new int[len];\n\tfor (i = 0; i < len; i++)\n\t\tcount[i] = 0;\n\tfor (i = 0; i < len; i++)\n\t\tcount[numbers[i] - 1]++;\n\tfor (i = 0, j = 0; i < len; i++)\n\t\tif (count[i] == 1)\n\t\t\tnumbers[j++] = numbers[i];\n\treturn numbers;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpgc7jrehg.d(13): Error: cannot implicitly convert expression `numbers.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgc7jrehg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int len = numbers.length;\n    long[] result = new long[len];\n    int j = 0;\n    for (int i = 0; i < len; i++) {\n        if (j < i) {\n            if (numbers[i] == numbers[j]) {\n                continue;\n            }\n        }\n        result[j] = numbers[i];\n        j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp8a5zpn2r.d(12): Error: cannot implicitly convert expression `numbers.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8a5zpn2r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && numbers[i] == number) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpzkbe8qo_.d(14): Error: semicolon expected, not `:`\n/tmp/tmpzkbe8qo_.d(14): Error: expression expected, not `:`\n/tmp/tmpzkbe8qo_.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkbe8qo_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i++] = number;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmp38kjmivx.d(14): Error: semicolon expected, not `:`\n/tmp/tmp38kjmivx.d(14): Error: expression expected, not `:`\n/tmp/tmp38kjmivx.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38kjmivx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i == 0 || n != result[i - 1]) {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpfy79xdgp.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfy79xdgp.d(14): Error: expression expected, not `:`\n/tmp/tmpfy79xdgp.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfy79xdgp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i == 0 || n != result[i - 1]) {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpfy79xdgp.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfy79xdgp.d(14): Error: expression expected, not `:`\n/tmp/tmpfy79xdgp.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfy79xdgp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] result = new long[numbers.length];\n\tint index = 0;\n\tfor(int i = 0; i < numbers.length; i++)\n\t{\n\t\tif(numbers[i] != numbers[index])\n\t\t{\n\t\t\tresult[index] = numbers[i];\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6kpro6ec.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4283ed]\n??:? void tmp6kpro6ec.__unittest_L24_C1() [0x42800d]\n??:? void tmp6kpro6ec.__modtest() [0x42816c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b33a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a74]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430551]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]\n??:? runModuleUnitTests [0x42c27d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpsmgke8nc.d(14): Error: semicolon expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: expression expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmgke8nc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int len = numbers.length;\n    int i = 0;\n    int j = 0;\n    long[] result = new long[len];\n    while (i < len) {\n        if (j < i) {\n            while (j < i && numbers[i] == numbers[j]) {\n                i++;\n            }\n        }\n        result[i] = numbers[i];\n        i++;\n        j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpzbb8v594.d(12): Error: cannot implicitly convert expression `numbers.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbb8v594.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < numbers.length && n == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpnywbl52h.d(14): Error: semicolon expected, not `:`\n/tmp/tmpnywbl52h.d(14): Error: expression expected, not `:`\n/tmp/tmpnywbl52h.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnywbl52h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpfiu34le9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: expression expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfiu34le9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] result = new long[numbers.length];\n\tint index = 0;\n\tfor (int i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] != numbers[index]) {\n\t\t\tresult[index] = numbers[i];\n\t\t\tindex++;\n\t\t}\n\t}\n\tfor (int i = index; i < numbers.length; i++) {\n\t\tresult[i] = numbers[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6kqb66f4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmp6kqb66f4.__unittest_L25_C1() [0x428079]\n??:? void tmp6kqb66f4.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c50f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43062d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b379]\n??:? runModuleUnitTests [0x42c2e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor (long n : numbers)\n\t{\n\t\tif (i < result.length && result[i] == n)\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = n;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpj6ygr4qc.d(14): Error: semicolon expected, not `:`\n/tmp/tmpj6ygr4qc.d(14): Error: expression expected, not `:`\n/tmp/tmpj6ygr4qc.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6ygr4qc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpsmgke8nc.d(14): Error: semicolon expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: expression expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmgke8nc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length) {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpxr5el5gc.d(14): Error: semicolon expected, not `:`\n/tmp/tmpxr5el5gc.d(14): Error: expression expected, not `:`\n/tmp/tmpxr5el5gc.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxr5el5gc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpasmkz0n9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: expression expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasmkz0n9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i == 0 || n != result[i-1])\n            result[i++] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp3p3y7vlh.d(14): Error: semicolon expected, not `:`\n/tmp/tmp3p3y7vlh.d(14): Error: expression expected, not `:`\n/tmp/tmp3p3y7vlh.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3p3y7vlh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpasmkz0n9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: expression expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasmkz0n9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < numbers.length && n == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpnywbl52h.d(14): Error: semicolon expected, not `:`\n/tmp/tmpnywbl52h.d(14): Error: expression expected, not `:`\n/tmp/tmpnywbl52h.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnywbl52h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i < numbers.length && number == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp7dy5k5qk.d(14): Error: semicolon expected, not `:`\n/tmp/tmp7dy5k5qk.d(14): Error: expression expected, not `:`\n/tmp/tmp7dy5k5qk.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dy5k5qk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != result[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg1zcaatr.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4283f5]\n??:? void tmpg1zcaatr.__unittest_L22_C1() [0x4280c5]\n??:? void tmpg1zcaatr.__modtest() [0x428174]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b342]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430559]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b319]\n??:? runModuleUnitTests [0x42c285]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpfiu34le9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: expression expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfiu34le9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpfiu34le9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: expression expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfiu34le9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i == 0 || number != result[i-1])\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmppacpgg48.d(14): Error: semicolon expected, not `:`\n/tmp/tmppacpgg48.d(14): Error: expression expected, not `:`\n/tmp/tmppacpgg48.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppacpgg48.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long num : numbers)\n    {\n        if(i < numbers.length && num == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = num;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpmu9jccj6.d(14): Error: semicolon expected, not `:`\n/tmp/tmpmu9jccj6.d(14): Error: expression expected, not `:`\n/tmp/tmpmu9jccj6.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmu9jccj6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpfiu34le9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: expression expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfiu34le9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < numbers.length && n == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpnywbl52h.d(14): Error: semicolon expected, not `:`\n/tmp/tmpnywbl52h.d(14): Error: expression expected, not `:`\n/tmp/tmpnywbl52h.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnywbl52h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i == 0 || number != result[i - 1]) {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpw22qrrvd.d(14): Error: semicolon expected, not `:`\n/tmp/tmpw22qrrvd.d(14): Error: expression expected, not `:`\n/tmp/tmpw22qrrvd.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw22qrrvd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i == 0)\n        {\n            result[i] = n;\n            i++;\n        }\n        else if(n != result[i-1])\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpfho2zh2x.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfho2zh2x.d(14): Error: expression expected, not `:`\n/tmp/tmpfho2zh2x.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfho2zh2x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i == 0 || n != result[i - 1]) {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp0lrx_1tl.d(14): Error: semicolon expected, not `:`\n/tmp/tmp0lrx_1tl.d(14): Error: expression expected, not `:`\n/tmp/tmp0lrx_1tl.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lrx_1tl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < numbers.length && n == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpnywbl52h.d(14): Error: semicolon expected, not `:`\n/tmp/tmpnywbl52h.d(14): Error: expression expected, not `:`\n/tmp/tmpnywbl52h.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnywbl52h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tint i, j;\n\tint len = numbers.length;\n\tlong[] result = new long[len];\n\tfor (i = 0; i < len; i++) {\n\t\tresult[i] = numbers[i];\n\t}\n\tfor (i = 0; i < len; i++) {\n\t\tfor (j = i + 1; j < len; j++) {\n\t\t\tif (result[i] == result[j]) {\n\t\t\t\tresult[j] = -1;\n\t\t\t}\n\t\t}\n\t}\n\tfor (i = 0; i < len; i++) {\n\t\tif (result[i] > 0) {\n\t\t\tresult[i] = result[i] - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmptucf16aa.d(13): Error: cannot implicitly convert expression `numbers.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptucf16aa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpasmkz0n9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: expression expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasmkz0n9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i == 0 || n != result[i - 1]) {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp0lrx_1tl.d(14): Error: semicolon expected, not `:`\n/tmp/tmp0lrx_1tl.d(14): Error: expression expected, not `:`\n/tmp/tmp0lrx_1tl.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lrx_1tl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpfiu34le9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: expression expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfiu34le9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long num : numbers)\n    {\n        if(i == 0)\n        {\n            result[i] = num;\n            i++;\n        }\n        else if(num != result[i-1])\n        {\n            result[i] = num;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpngcm8o39.d(14): Error: semicolon expected, not `:`\n/tmp/tmpngcm8o39.d(14): Error: expression expected, not `:`\n/tmp/tmpngcm8o39.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpngcm8o39.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor (long n : numbers)\n\t{\n\t\tif (i < result.length && result[i] == n)\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = n;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpj6ygr4qc.d(14): Error: semicolon expected, not `:`\n/tmp/tmpj6ygr4qc.d(14): Error: expression expected, not `:`\n/tmp/tmpj6ygr4qc.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6ygr4qc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] result = new long[numbers.length];\n\tint index = 0;\n\tfor (int i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] != numbers[index]) {\n\t\t\tresult[index] = numbers[i];\n\t\t\tindex++;\n\t\t}\n\t}\n\tfor (int i = index; i < result.length; i++) {\n\t\tresult[i] = numbers[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpshefb875.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpshefb875.__unittest_L25_C1() [0x428079]\n??:? void tmpshefb875.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c50f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43062d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b379]\n??:? runModuleUnitTests [0x42c2e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] output = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i < numbers.length && numbers[i] == number)\n        {\n            i++;\n        }\n        else\n        {\n            output[i] = number;\n            i++;\n        }\n    }\n    return output;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmprwa_gb6w.d(14): Error: semicolon expected, not `:`\n/tmp/tmprwa_gb6w.d(14): Error: expression expected, not `:`\n/tmp/tmprwa_gb6w.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprwa_gb6w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpxbjgb94f.d(14): Error: semicolon expected, not `:`\n/tmp/tmpxbjgb94f.d(14): Error: expression expected, not `:`\n/tmp/tmpxbjgb94f.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbjgb94f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != result[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg1zcaatr.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4283f5]\n??:? void tmpg1zcaatr.__unittest_L22_C1() [0x4280c5]\n??:? void tmpg1zcaatr.__modtest() [0x428174]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b342]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430559]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b319]\n??:? runModuleUnitTests [0x42c285]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i == 0 || number != result[i - 1]) {\n            result[i++] = number;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpceyu0owi.d(14): Error: semicolon expected, not `:`\n/tmp/tmpceyu0owi.d(14): Error: expression expected, not `:`\n/tmp/tmpceyu0owi.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpceyu0owi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpxbjgb94f.d(14): Error: semicolon expected, not `:`\n/tmp/tmpxbjgb94f.d(14): Error: expression expected, not `:`\n/tmp/tmpxbjgb94f.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbjgb94f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i == 0 || n != result[i - 1]) {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpfy79xdgp.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfy79xdgp.d(14): Error: expression expected, not `:`\n/tmp/tmpfy79xdgp.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfy79xdgp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length)\n        {\n            if(result[i] == n)\n            {\n                i++;\n            }\n            else\n            {\n                result[i] = n;\n                i++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpodm_9dp5.d(14): Error: semicolon expected, not `:`\n/tmp/tmpodm_9dp5.d(14): Error: expression expected, not `:`\n/tmp/tmpodm_9dp5.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpodm_9dp5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length)\n        {\n            if(n != result[i])\n            {\n                result[i] = n;\n                i++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpnjrft4hp.d(14): Error: semicolon expected, not `:`\n/tmp/tmpnjrft4hp.d(14): Error: expression expected, not `:`\n/tmp/tmpnjrft4hp.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnjrft4hp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long num : numbers) {\n        if (i == 0 || num != result[i-1]) {\n            result[i++] = num;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpf1qjx6kh.d(14): Error: semicolon expected, not `:`\n/tmp/tmpf1qjx6kh.d(14): Error: expression expected, not `:`\n/tmp/tmpf1qjx6kh.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1qjx6kh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i] != result[index])\n        {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpanbgfb2p.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4283f5]\n??:? void tmpanbgfb2p.__unittest_L24_C1() [0x4280c5]\n??:? void tmpanbgfb2p.__modtest() [0x428174]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b342]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430559]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b319]\n??:? runModuleUnitTests [0x42c285]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i < numbers.length && number == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp7dy5k5qk.d(14): Error: semicolon expected, not `:`\n/tmp/tmp7dy5k5qk.d(14): Error: expression expected, not `:`\n/tmp/tmp7dy5k5qk.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dy5k5qk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long num : numbers) {\n        if (i < result.length && result[i] == num) {\n            i++;\n        } else {\n            result[i] = num;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpil02m_pq.d(14): Error: semicolon expected, not `:`\n/tmp/tmpil02m_pq.d(14): Error: expression expected, not `:`\n/tmp/tmpil02m_pq.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpil02m_pq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor(long n : numbers)\n\t{\n\t\tif(i < result.length)\n\t\t{\n\t\t\tif(n != result[i])\n\t\t\t{\n\t\t\t\tresult[i] = n;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmphys7qfmh.d(14): Error: semicolon expected, not `:`\n/tmp/tmphys7qfmh.d(14): Error: expression expected, not `:`\n/tmp/tmphys7qfmh.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphys7qfmh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int len = numbers.length;\n    int i = 0;\n    int j = 0;\n    long[] result = new long[len];\n    while (i < len) {\n        if (j < i) {\n            if (numbers[i] == numbers[j]) {\n                i++;\n            } else {\n                result[result.length - 1] = numbers[j];\n                j++;\n            }\n        } else {\n            result[result.length - 1] = numbers[i];\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp53lbgtno.d(12): Error: cannot implicitly convert expression `numbers.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp53lbgtno.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i < numbers.length)\n        {\n            if(number != result[i])\n            {\n                result[i] = number;\n                i++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpml5xx78_.d(14): Error: semicolon expected, not `:`\n/tmp/tmpml5xx78_.d(14): Error: expression expected, not `:`\n/tmp/tmpml5xx78_.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpml5xx78_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor(long number : numbers)\n\t{\n\t\tif(i == 0 || number != result[i-1])\n\t\t{\n\t\t\tresult[i] = number;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpsmi1z7_u.d(14): Error: semicolon expected, not `:`\n/tmp/tmpsmi1z7_u.d(14): Error: expression expected, not `:`\n/tmp/tmpsmi1z7_u.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmi1z7_u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && numbers[i] == number) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpzkbe8qo_.d(14): Error: semicolon expected, not `:`\n/tmp/tmpzkbe8qo_.d(14): Error: expression expected, not `:`\n/tmp/tmpzkbe8qo_.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkbe8qo_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i < numbers.length && number == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp7dy5k5qk.d(14): Error: semicolon expected, not `:`\n/tmp/tmp7dy5k5qk.d(14): Error: expression expected, not `:`\n/tmp/tmp7dy5k5qk.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dy5k5qk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpasmkz0n9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: expression expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasmkz0n9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i == 0 || number != result[i-1]) {\n            result[i++] = number;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp943dnj3k.d(14): Error: semicolon expected, not `:`\n/tmp/tmp943dnj3k.d(14): Error: expression expected, not `:`\n/tmp/tmp943dnj3k.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp943dnj3k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] result = new long[numbers.length];\n\tint index = 0;\n\tfor(int i = 0; i < numbers.length; i++)\n\t{\n\t\tif(numbers[i] != numbers[index])\n\t\t{\n\t\t\tresult[index] = numbers[i];\n\t\t\tindex++;\n\t\t}\n\t}\n\tfor(int i = index; i < result.length; i++)\n\t{\n\t\tresult[i] = numbers[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl4xg6809.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpl4xg6809.__unittest_L28_C1() [0x428079]\n??:? void tmpl4xg6809.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c50f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43062d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b379]\n??:? runModuleUnitTests [0x42c2e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length) {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpz1g83_44.d(14): Error: semicolon expected, not `:`\n/tmp/tmpz1g83_44.d(14): Error: expression expected, not `:`\n/tmp/tmpz1g83_44.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1g83_44.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i < numbers.length && number == numbers[i])\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp7dy5k5qk.d(14): Error: semicolon expected, not `:`\n/tmp/tmp7dy5k5qk.d(14): Error: expression expected, not `:`\n/tmp/tmp7dy5k5qk.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dy5k5qk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i == 0 || number != result[i-1])\n            result[i++] = number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp8f2y552y.d(14): Error: semicolon expected, not `:`\n/tmp/tmp8f2y552y.d(14): Error: expression expected, not `:`\n/tmp/tmp8f2y552y.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8f2y552y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && number == result[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpgoefhy98.d(14): Error: semicolon expected, not `:`\n/tmp/tmpgoefhy98.d(14): Error: expression expected, not `:`\n/tmp/tmpgoefhy98.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgoefhy98.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int i, j;\n    long[] result = new long[numbers.length];\n    for (i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n    }\n    for (i = 0; i < numbers.length - 1; i++) {\n        for (j = i + 1; j < numbers.length; j++) {\n            if (numbers[i] == numbers[j]) {\n                result[j] = -1;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length; i++) {\n        if (result[i] > 0) {\n            result[i] = -1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292923,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0tb1ri8a.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmp0tb1ri8a.__unittest_L31_C1() [0x4280f5]\n??:? void tmp0tb1ri8a.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c58f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b422]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430639]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3f9]\n??:? runModuleUnitTests [0x42c365]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428998]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long num : numbers) {\n        if (i < result.length && result[i] == num) {\n            i++;\n        } else {\n            result[i++] = num;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp7ky4zfwf.d(14): Error: semicolon expected, not `:`\n/tmp/tmp7ky4zfwf.d(14): Error: expression expected, not `:`\n/tmp/tmp7ky4zfwf.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ky4zfwf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int i = 0;\n    int j = 0;\n    int len = numbers.length;\n    long[] result = new long[len];\n    for (i = 0; i < len; i++) {\n        if (j < i) {\n            if (numbers[i] == numbers[j]) {\n                continue;\n            }\n        }\n        result[i] = numbers[i];\n        j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpvj0omucb.d(14): Error: cannot implicitly convert expression `numbers.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvj0omucb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpasmkz0n9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: expression expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasmkz0n9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpfiu34le9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: expression expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfiu34le9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpsmgke8nc.d(14): Error: semicolon expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: expression expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmgke8nc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i == 0 || n != result[i-1])\n            result[i++] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp3p3y7vlh.d(14): Error: semicolon expected, not `:`\n/tmp/tmp3p3y7vlh.d(14): Error: expression expected, not `:`\n/tmp/tmp3p3y7vlh.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3p3y7vlh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length) {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpz1g83_44.d(14): Error: semicolon expected, not `:`\n/tmp/tmpz1g83_44.d(14): Error: expression expected, not `:`\n/tmp/tmpz1g83_44.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1g83_44.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    int i, j;\n    long[] result = new long[numbers.length];\n    for (i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i];\n    }\n    for (i = 0; i < numbers.length - 1; i++) {\n        for (j = i + 1; j < numbers.length; j++) {\n            if (numbers[i] == numbers[j]) {\n                result[j] = -1;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length; i++) {\n        if (result[i] > 0) {\n            result[i] = -1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292923,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0tb1ri8a.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmp0tb1ri8a.__unittest_L31_C1() [0x4280f5]\n??:? void tmp0tb1ri8a.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c58f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b422]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430639]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3f9]\n??:? runModuleUnitTests [0x42c365]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428998]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpasmkz0n9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: expression expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasmkz0n9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length) {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpxr5el5gc.d(14): Error: semicolon expected, not `:`\n/tmp/tmpxr5el5gc.d(14): Error: expression expected, not `:`\n/tmp/tmpxr5el5gc.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxr5el5gc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i < numbers.length && numbers[i] == number)\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp5ugfkl39.d(14): Error: semicolon expected, not `:`\n/tmp/tmp5ugfkl39.d(14): Error: expression expected, not `:`\n/tmp/tmp5ugfkl39.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ugfkl39.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpfiu34le9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: expression expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfiu34le9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpfiu34le9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: expression expected, not `:`\n/tmp/tmpfiu34le9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfiu34le9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i < result.length && result[i] == n) {\n            i++;\n        } else {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpt43dqhzz.d(14): Error: semicolon expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: expression expected, not `:`\n/tmp/tmpt43dqhzz.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt43dqhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != result[index]) {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg1zcaatr.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4283f5]\n??:? void tmpg1zcaatr.__unittest_L22_C1() [0x4280c5]\n??:? void tmpg1zcaatr.__modtest() [0x428174]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b342]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430559]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b319]\n??:? runModuleUnitTests [0x42c285]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpsmgke8nc.d(14): Error: semicolon expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: expression expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmgke8nc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers) {\n        if(i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpmvfrilem.d(14): Error: semicolon expected, not `:`\n/tmp/tmpmvfrilem.d(14): Error: expression expected, not `:`\n/tmp/tmpmvfrilem.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvfrilem.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor(long number : numbers)\n\t{\n\t\tif(i < numbers.length && numbers[i] == number)\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = number;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp385gyc09.d(14): Error: semicolon expected, not `:`\n/tmp/tmp385gyc09.d(14): Error: expression expected, not `:`\n/tmp/tmp385gyc09.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp385gyc09.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int index = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i] != numbers[index])\n        {\n            result[index] = numbers[i];\n            index++;\n        }\n    }\n    for(int i = index; i < result.length; i++)\n    {\n        result[i] = numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwbttdf24.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpwbttdf24.__unittest_L28_C1() [0x428079]\n??:? void tmpwbttdf24.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c50f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43062d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b379]\n??:? runModuleUnitTests [0x42c2e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long n : numbers) {\n        if (i == 0 || n != result[i - 1]) {\n            result[i++] = n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp0lrx_1tl.d(14): Error: semicolon expected, not `:`\n/tmp/tmp0lrx_1tl.d(14): Error: expression expected, not `:`\n/tmp/tmp0lrx_1tl.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lrx_1tl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpsmgke8nc.d(14): Error: semicolon expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: expression expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmgke8nc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < numbers.length && number == numbers[i]) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpsmgke8nc.d(14): Error: semicolon expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: expression expected, not `:`\n/tmp/tmpsmgke8nc.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmgke8nc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length && result[i] == n)\n            i++;\n        else\n            result[i++] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpasmkz0n9.d(14): Error: semicolon expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: expression expected, not `:`\n/tmp/tmpasmkz0n9.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasmkz0n9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\tlong[] result = new long[numbers.length];\n\tint i = 0;\n\tfor (long n : numbers) {\n\t\tif (i < numbers.length && n == numbers[i]) {\n\t\t\ti++;\n\t\t} else {\n\t\t\tresult[i] = n;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpl37xhp5a.d(14): Error: semicolon expected, not `:`\n/tmp/tmpl37xhp5a.d(14): Error: expression expected, not `:`\n/tmp/tmpl37xhp5a.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl37xhp5a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i < result.length)\n        {\n            result[i] = n;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmpm0wt7wv4.d(14): Error: semicolon expected, not `:`\n/tmp/tmpm0wt7wv4.d(14): Error: expression expected, not `:`\n/tmp/tmpm0wt7wv4.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm0wt7wv4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long n : numbers)\n    {\n        if(i == 0 || n != result[i-1])\n            result[i++] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp3p3y7vlh.d(14): Error: semicolon expected, not `:`\n/tmp/tmp3p3y7vlh.d(14): Error: expression expected, not `:`\n/tmp/tmp3p3y7vlh.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3p3y7vlh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for (long number : numbers) {\n        if (i < result.length && result[i] == number) {\n            i++;\n        } else {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292913,
      "stdout": "",
      "stderr": "/tmp/tmpxbjgb94f.d(14): Error: semicolon expected, not `:`\n/tmp/tmpxbjgb94f.d(14): Error: expression expected, not `:`\n/tmp/tmpxbjgb94f.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbjgb94f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] output = new long[numbers.length];\n    int index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != numbers[index]) {\n            output[index] = numbers[i];\n            index++;\n        }\n    }\n    for (int i = index; i < output.length; i++) {\n        output[i] = numbers[i];\n    }\n    return output;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6ejmfza.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428455]\n??:? void tmpc6ejmfza.__unittest_L25_C1() [0x428079]\n??:? void tmpc6ejmfza.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c50f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43062d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b379]\n??:? runModuleUnitTests [0x42c2e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428918]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] output = new long[numbers.length];\n    int j = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        if (j < i && numbers[i] == numbers[j]) {\n            continue;\n        }\n        output[j] = numbers[i];\n        j++;\n    }\n    return output;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyj911mvm.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4283f5]\n??:? void tmpyj911mvm.__unittest_L23_C1() [0x4280c5]\n??:? void tmpyj911mvm.__modtest() [0x428174]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b342]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430559]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b319]\n??:? runModuleUnitTests [0x42c285]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i == 0)\n        {\n            result[i] = number;\n            i++;\n        }\n        else if(number != result[i-1])\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp4ygz2rnh.d(14): Error: semicolon expected, not `:`\n/tmp/tmp4ygz2rnh.d(14): Error: expression expected, not `:`\n/tmp/tmp4ygz2rnh.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ygz2rnh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n From an array of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n    long[] result = new long[numbers.length];\n    int i = 0;\n    for(long number : numbers)\n    {\n        if(i < numbers.length && numbers[i] == number)\n        {\n            i++;\n        }\n        else\n        {\n            result[i] = number;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1664292914,
      "stdout": "",
      "stderr": "/tmp/tmp5ugfkl39.d(14): Error: semicolon expected, not `:`\n/tmp/tmp5ugfkl39.d(14): Error: expression expected, not `:`\n/tmp/tmp5ugfkl39.d(14): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ugfkl39.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}