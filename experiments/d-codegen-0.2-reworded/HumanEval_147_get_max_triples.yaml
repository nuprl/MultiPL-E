name: HumanEval_147_get_max_triples
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive\
  \ integer n. You have to create an integer array a of length n.\n        For each\
  \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the\
  \ number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j]\
  \ + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n   \
  \ 1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid\
  \ triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n"
tests: "unittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
  \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
  \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
completions: ["{\n    long max_triples = 0;\n    long i, j, k;\n    for(i = 1; i <=\
    \ n; i++)\n    {\n        for(j = i + 1; j <= n; j++)\n        {\n           \
    \ for(k = j + 1; k <= n; k++)\n            {\n                if(i * i - i + 1\
    \ == j * j - j + 1 && j * j - j + 1 == k * k - k + 1)\n                {\n   \
    \                 max_triples += 1;\n                }\n            }\n      \
    \  }\n    }\n    return max_triples;\n}", "{\n    long a[n];\n    long i, j, k,\
    \ count = 0;\n    for (i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n   \
    \ for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n            for\
    \ (k = j + 1; k < n; k++)\n                if (a[i] + a[j] + a[k] == 3 * (a[i]\
    \ + a[j] + a[k]))\n                    count++;\n    return count;\n}", "{\n \
    \   long a[n];\n    long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n  \
    \      a[i-1] = i*i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i +\
    \ 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i]\
    \ + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n \
    \   return count;\n}", "{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i\
    \ = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n\
    \        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n\
    \                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j]\
    \ + a[k] > 0)\n                    count++;\n    return count;\n}", "{\n    long\
    \ a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i]\
    \ = i * i - i + 1;\n    for(i = 0; i < n - 1; i++)\n        for(j = i + 1; j <\
    \ n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j]\
    \ + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n            \
    \        count++;\n    return count;\n}", "{\n    long max_triples = 0;\n    long\
    \ i, j, k;\n    long sum;\n    for (i = 1; i <= n; i++) {\n        for (j = i\
    \ + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n          \
    \      sum = i * i - i + 1;\n                sum += j * j - j + 1;\n         \
    \       sum += k * k - k + 1;\n                if (sum % 3 == 0) {\n         \
    \           max_triples++;\n                }\n            }\n        }\n    }\n\
    \    return max_triples;\n}", "{\n    long max_triples = 0;\n    long i, j, k;\n\
    \    for(i = 1; i < n; i++) {\n        for(j = i + 1; j < n; j++) {\n        \
    \    for(k = j + 1; k < n; k++) {\n                if(i * i - i + 1 == j * j -\
    \ j + 1 && j * j - j + 1 == k * k - k + 1) {\n                    max_triples\
    \ += 1;\n                }\n            }\n        }\n    }\n    return max_triples;\n\
    }", "{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n\
    \        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i\
    \ + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i]\
    \ + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n     \
    \               count++;\n    return count;\n}", "{\n    long a[n];\n    long\
    \ i, j, k, count = 0;\n    for (i = 1; i <= n; i++) {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <=\
    \ n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if (a[i]\
    \ + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0) {\n   \
    \                 count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}", "{\n    long a[n];\n    long max_triples = 0;\n    for\
    \ (long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long\
    \ i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n         \
    \   for (long k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k]\
    \ == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0) {\n            \
    \        max_triples++;\n                }\n            }\n        }\n    }\n\
    \    return max_triples;\n}", "{\n    long a[n];\n    long sum[n];\n    long max\
    \ = 0;\n    long i, j, k;\n    for(i = 0; i < n; i++)\n        a[i] = i * i -\
    \ i + 1;\n    for(i = 0; i < n; i++)\n        sum[i] = a[i];\n    for(i = 0; i\
    \ < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n          \
    \  for(k = j + 1; k < n; k++)\n            {\n                if(sum[i] + sum[j]\
    \ + sum[k] == 3 * n)\n                    max = max > 3 ? max : 3;\n         \
    \   }\n        }\n    }\n    return max;\n}", "{\n    long a[n];\n    long sum\
    \ = 0;\n    long max = 0;\n    for(long i = 1; i <= n; i++)\n    {\n        a[i-1]\
    \ = i*i - i + 1;\n        sum += a[i-1];\n    }\n    for(long i = 0; i < n; i++)\n\
    \    {\n        for(long j = i+1; j < n; j++)\n        {\n            for(long\
    \ k = j+1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] ==\
    \ sum)\n                {\n                    max = max > a[i] + a[j] + a[k]\
    \ ? max : a[i] + a[j] + a[k];\n                }\n            }\n        }\n \
    \   }\n    return max;\n}", "{\n    long a[n];\n    long sum = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n\
    \    }\n    long result = 0;\n    for (long i = 0; i < n - 1; i++) {\n       \
    \ for (long j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n;\
    \ k++) {\n                if (a[i] + a[j] + a[k] == sum * 3) {\n             \
    \       result++;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long a[n];\n    long i, j, k;\n    long max = 0;\n    for(i\
    \ = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j +\
    \ 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 *\
    \ (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max =\
    \ a[i] + a[j] + a[k];\n            }\n        }\n    }\n    return max;\n}", "{\n\
    \    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n\
    \        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++)\
    \ {\n                if (i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k\
    \ * k - k + 1) {\n                    max_triples += 1;\n                }\n \
    \           }\n        }\n    }\n    return max_triples;\n}", "{\n    long max_triples\
    \ = 0;\n    long i, j, k;\n    for(i = 1; i <= n; i++)\n    {\n        for(j =\
    \ i + 1; j <= n; j++)\n        {\n            for(k = j + 1; k <= n; k++)\n  \
    \          {\n                if(i * i - i + 1 == j * j - j + 1 && j * j - j +\
    \ 1 == k * k - k + 1)\n                {\n                    max_triples++;\n\
    \                }\n            }\n        }\n    }\n    return max_triples;\n\
    }", "{\n    long a[n];\n    long i, j, k, sum, max_triples = 0;\n    for(i = 0;\
    \ i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n   \
    \ {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1;\
    \ k < n; k++)\n            {\n                sum = a[i] + a[j] + a[k];\n    \
    \            if(sum % 3 == 0)\n                    max_triples++;\n          \
    \  }\n        }\n    }\n    return max_triples;\n}", "{\n    long a[n];\n    long\
    \ i, j, k;\n    long count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] =\
    \ i*i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i+1; j < n;\
    \ j++)\n        {\n            for(k = j+1; k < n; k++)\n            {\n     \
    \           if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]) && a[i] + a[j] + a[k]\
    \ > 0)\n                    count++;\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long a[n];\n    long sum = 0;\n    long max = 0;\n    long\
    \ i, j, k;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n   \
    \     sum += a[i];\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i +\
    \ 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n              \
    \  if (a[i] + a[j] + a[k] == sum * 3) {\n                    max = max > (i -\
    \ j) * (j - k) * (k - i) ? max : (i - j) * (j - k) * (k - i);\n              \
    \  }\n            }\n        }\n    }\n    return max;\n}", "{\n    long a[n];\n\
    \    long i, j, k, count = 0;\n    for (i = 1; i <= n; i++) {\n        a[i-1]\
    \ = i*i - i + 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if\
    \ (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}", "{\n    long a[n];\n    long count = 0;\n    for(long\
    \ i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n;\
    \ i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j +\
    \ 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] +\
    \ a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n\
    }", "{\n    long a[n];\n    long sum = 0;\n    for(long i = 0; i < n; i++)\n \
    \       a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long\
    \ j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n      \
    \          if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] +\
    \ a[k] > sum)\n                    sum = a[i] + a[j] + a[k];\n    return sum;\n\
    }", "{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++)\
    \ {\n        a[i] = i * i - i + 1;\n    }\n    for (i = 0; i < n; i++) {\n   \
    \     for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n\
    \                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] +\
    \ a[j] + a[k] > 0) {\n                    count++;\n                }\n      \
    \      }\n        }\n    }\n    return count;\n}", "{\n    long a[n];\n    long\
    \ i, j, k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i\
    \ * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j <\
    \ n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n\
    \                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j]\
    \ + a[k] % 3 == 0)\n                    count++;\n            }\n        }\n \
    \   }\n    return count;\n}", "{\n    long a[n];\n    long max = 0;\n    for(long\
    \ i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n;\
    \ i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j +\
    \ 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] +\
    \ a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] +\
    \ a[k];\n    return max;\n}", "{\n    long a[n];\n    long max = 0;\n    for(long\
    \ i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n;\
    \ i++)\n    {\n        for(long j = i + 1; j < n; j++)\n        {\n          \
    \  for(long k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j]\
    \ + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n          \
    \          max = a[i] + a[j] + a[k];\n            }\n        }\n    }\n    return\
    \ max;\n}", "{\n    long a[n];\n    long sum[n];\n    long max = 0;\n    long\
    \ i, j, k;\n    for(i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n\
    \        sum[i] = a[i];\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n  \
    \          {\n                if(a[i] + a[j] + a[k] == 3 * sum[i] + 3 * sum[j]\
    \ + 3 * sum[k])\n                {\n                    max = max > 3 ? max :\
    \ 3;\n                }\n            }\n        }\n    }\n    return max;\n}",
  "{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n\
    \        a[i-1] = i*i - i + 1;\n    for(i = 1; i <= n-1; i++)\n        for(j =\
    \ i+1; j <= n; j++)\n            for(k = j+1; k <= n; k++)\n                if(a[i-1]\
    \ + a[j-1] + a[k-1] == 3*(a[i-1] + a[j-1] + a[k-1]))\n                    count++;\n\
    \    return count;\n}", "{\n    long a[n];\n    long sum = 0;\n    for (int i\
    \ = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n  \
    \  }\n    \n    long result = 0;\n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n\
    \                if (a[i] + a[j] + a[k] == sum * 3) {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    long a[n];\n    long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n \
    \       a[i-1] = i*i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i +\
    \ 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i]\
    \ + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n \
    \   return count;\n}", "{\n    long max_triples = 0;\n    long i, j, k;\n    for\
    \ (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n           \
    \ for (k = j + 1; k <= n; k++) {\n                if (i * i + j * j == k * k +\
    \ i * i + j * j) {\n                    max_triples += 1;\n                }\n\
    \            }\n        }\n    }\n    return max_triples;\n}", "{\n    long a[n];\n\
    \    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i *\
    \ i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n\
    \            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k]\
    \ == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0)\n              \
    \      count++;\n    return count;\n}", "{\n    long a[n];\n    long i, j, k;\n\
    \    long count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i +\
    \ 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i+1; j < n; j++)\n  \
    \      {\n            for(k = j+1; k < n; k++)\n            {\n              \
    \  if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n\
    \                    count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long max = 0;\n    long a[n];\n    for(long i = 0; i < n; i++)\n \
    \       a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long\
    \ j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n      \
    \          if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] +\
    \ a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n\
    }", "{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n\
    \        a[i] = i * i - i + 1;\n    for(i = 0; i < n - 1; i++)\n        for(j\
    \ = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n             \
    \   if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n\
    \    return count;\n}", "{\n    long a[n];\n    long count = 0;\n    for(long\
    \ i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n;\
    \ i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j +\
    \ 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] +\
    \ a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n\
    }", "{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n\
    \        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n  \
    \          {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k])\
    \ && a[i] + a[j] + a[k] > 0)\n                    count++;\n            }\n  \
    \      }\n    }\n    return count;\n}", "{\n    long max_triples = 0;\n    long\
    \ i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++)\
    \ {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i - i\
    \ + 1 == j * j - j + 1 && i * i - i + 1 == k * k - k + 1) {\n                \
    \    max_triples += 1;\n                }\n            }\n        }\n    }\n \
    \   return max_triples;\n}", "{\n    long a[n];\n    long i, j, k;\n    long count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n\
    \    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n  \
    \          for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k]\
    \ == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0) {\n            \
    \        count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long max = 0;\n    long i, j, k;\n    for (i = 1; i <= n;\
    \ i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1;\
    \ k <= n; k++) {\n                if (i * i - i + 1 == j * j - j + 1 && j * j\
    \ - j + 1 == k * k - k + 1) {\n                    max++;\n                }\n\
    \            }\n        }\n    }\n    return max;\n}", "{\n    long a[n];\n  \
    \  long i, j, k, sum, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i\
    \ * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j <\
    \ n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n\
    \                sum = a[i] + a[j] + a[k];\n                if(sum % 3 == 0)\n\
    \                    count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n\
    \        a[i-1] = i*i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n  \
    \          {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k])\
    \ && a[i] + a[j] + a[k] % 3 == 0)\n                    count++;\n            }\n\
    \        }\n    }\n    return count;\n}", "{\n    long a[n];\n    long i, j, k;\n\
    \    long count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n\
    \    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k\
    \ = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j]\
    \ + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return\
    \ count;\n}", "{\n    long a[n];\n    long max_triples = 0;\n    for (long i =\
    \ 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0;\
    \ i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i]\
    \ + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0) {\n                    max_triples++;\n\
    \                }\n            }\n        }\n    }\n    return max_triples;\n\
    }", "{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for (i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (i = 0; i < n;\
    \ i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k\
    \ < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k])\
    \ && a[i] + a[j] + a[k] % 3 == 0) {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}", "{\n    long\
    \ max_triples = 0;\n    long i, j, k;\n    long a[n];\n    for(i = 0; i < n; i++)\n\
    \        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n  \
    \          {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k])\
    \ && a[i] + a[j] + a[k] % 3 == 0)\n                {\n                    max_triples++;\n\
    \                }\n            }\n        }\n    }\n    return max_triples;\n\
    }", "{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n;\
    \ i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1;\
    \ k <= n; k++) {\n                if (i * i + j * j + k * k == 3 * i * j * k)\
    \ {\n                    max_triples++;\n                }\n            }\n  \
    \      }\n    }\n    return max_triples;\n}", "{\n    long a[n];\n    long max\
    \ = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long\
    \ i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long\
    \ k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] +\
    \ a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] +\
    \ a[j] + a[k];\n    return max;\n}", "{\n    long max = 0;\n    long i, j, k;\n\
    \    for(i = 1; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n     \
    \   {\n            for(k = j + 1; k < n; k++)\n            {\n               \
    \ if(i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k * k - k + 1)\n     \
    \           {\n                    if(i + j + k == 3 * n)\n                  \
    \  {\n                        max++;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i, j, k;\n    long sum;\n    for (i = 1; i <= n; i++) {\n        for\
    \ (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n   \
    \             sum = i * i - i + 1;\n                sum += j * j - j + 1;\n  \
    \              sum += k * k - k + 1;\n                if (sum % 3 == 0) {\n  \
    \                  max = std.math.max(max, 1);\n                }\n          \
    \  }\n        }\n    }\n    return max;\n}", "{\n    long a[n];\n    long i, j,\
    \ k, count = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n\
    \    }\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++)\
    \ {\n            for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j]\
    \ + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0) {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long a[n];\n    long max_triples = 0;\n    for(long i =\
    \ 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n\
    \        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k <\
    \ n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) &&\
    \ a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] +\
    \ a[j] + a[k];\n    return max_triples;\n}", "{\n    long max = 0;\n    long i,\
    \ j, k;\n    for (i = 1; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n\
    \            for (k = j + 1; k < n; k++) {\n                if (i * i + j * j\
    \ + k * k == 3 * n) {\n                    max++;\n                }\n       \
    \     }\n        }\n    }\n    return max;\n}", "{\n    long a[n];\n    long max_triples\
    \ = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long\
    \ i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n            for(long\
    \ k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] +\
    \ a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n                    max_triples\
    \ = a[i] + a[j] + a[k];\n    return max_triples;\n}", "{\n    long a[n];\n   \
    \ long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n\
    \    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n  \
    \          for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k]\
    \ == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                 \
    \   max = a[i] + a[j] + a[k];\n    return max;\n}", "{\n    long a[n];\n    long\
    \ max_triples = 0;\n    for (long i = 0; i < n; i++)\n        a[i] = i * i - i\
    \ + 1;\n    for (long i = 0; i < n; i++)\n        for (long j = i + 1; j < n;\
    \ j++)\n            for (long k = j + 1; k < n; k++)\n                if (a[i]\
    \ + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n\
    \                    max_triples = a[i] + a[j] + a[k];\n    return max_triples;\n\
    }", "{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n\
    \        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i\
    \ + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i]\
    \ + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n     \
    \               count++;\n    return count;\n}", "{\n    long a[n];\n    long\
    \ i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i\
    \ + 1;\n    }\n    for (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j <\
    \ n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (a[i]\
    \ + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0) {\n   \
    \                 count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}", "{\n    long a[n];\n    long sum[n];\n    long count =\
    \ 0;\n    for(long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n\
    \        sum[i] = 0;\n    }\n    for(long i = 0; i < n; i++)\n    {\n        for(long\
    \ j = i + 1; j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n\
    \            {\n                if(a[i] + a[j] + a[k] == 3 * sum[i] + 3 * sum[j]\
    \ + 3 * sum[k])\n                {\n                    count++;\n           \
    \     }\n            }\n        }\n    }\n    return count;\n}", "{\n    long\
    \ max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n      \
    \  for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n\
    \                if (i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k * k\
    \ - k + 1) {\n                    max_triples++;\n                }\n        \
    \    }\n        }\n    }\n    return max_triples;\n}", "{\n    long max = 0;\n\
    \    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j\
    \ <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                if\
    \ (i * i + j * j + k * k == 3 * (i + j + k)) {\n                    max++;\n \
    \               }\n            }\n        }\n    }\n    return max;\n}", "{\n\
    \    long max_triples = 0;\n    long i, j, k;\n    for(i = 1; i <= n; i++)\n \
    \   {\n        for(j = i + 1; j <= n; j++)\n        {\n            for(k = j +\
    \ 1; k <= n; k++)\n            {\n                if(i * i - i + 1 == j * j -\
    \ j + 1 && j * j - j + 1 == k * k - k + 1)\n                {\n              \
    \      max_triples += 1;\n                }\n            }\n        }\n    }\n\
    \    return max_triples;\n}", "{\n    long a[n];\n    long i, j, k, count = 0;\n\
    \    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i <\
    \ n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k\
    \ = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] ==\
    \ 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0)\n                 \
    \   count++;\n            }\n        }\n    }\n    return count;\n}", "{\n   \
    \ long a[n];\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n      \
    \  a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++) {\n        for\
    \ (long j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n; k++)\
    \ {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i]\
    \ + a[j] + a[k] > 0) {\n                    count++;\n                }\n    \
    \        }\n        }\n    }\n    return count;\n}", "{\n    long a[n];\n    long\
    \ sum = 0;\n    long count = 0;\n    for(long i = 0; i < n; i++)\n        a[i]\
    \ = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n    {\n        for(long j\
    \ = i + 1; j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n\
    \            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k])\
    \ && a[i] + a[j] + a[k] > 0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++)\n \
    \       a[i] = i * i - i + 1;\n    for (i = 0; i < n; i++)\n        for (j = i\
    \ + 1; j < n; j++)\n            for (k = j + 1; k < n; k++)\n                if\
    \ (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n\
    \    return count;\n}", "{\n    long a[n];\n    long i, j, k, count = 0;\n   \
    \ for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n;\
    \ i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k\
    \ = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] ==\
    \ 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0)\n                 \
    \   count++;\n            }\n        }\n    }\n    return count;\n}", "{\n   \
    \ long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i]\
    \ = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n    {\n        for(long j\
    \ = i + 1; j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n\
    \            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k])\
    \ && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n\
    \            }\n        }\n    }\n    return max;\n}", "{\n    long a[n];\n  \
    \  long max_triples = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i *\
    \ i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j <\
    \ n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i]\
    \ + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n\
    \                    max_triples = a[i] + a[j] + a[k];\n    return max_triples;\n\
    }", "{\n    long a[n];\n    long count = 0;\n    for(long i = 1; i <= n; i++)\n\
    \        a[i-1] = i*i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long\
    \ j = i+1; j < n; j++)\n            for(long k = j+1; k < n; k++)\n          \
    \      if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] >\
    \ 0)\n                    count++;\n    return count;\n}", "{\n    long a[n];\n\
    \    long max_triples = 0;\n    long i, j, k;\n    for(i = 0; i < n; i++)\n  \
    \      a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n  \
    \          {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k])\
    \ && a[i] + a[j] + a[k] % 3 == 0)\n                {\n                    max_triples++;\n\
    \                }\n            }\n        }\n    }\n    return max_triples;\n\
    }", "{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n;\
    \ i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1;\
    \ k <= n; k++) {\n                if (i * i + j * j + k * k == 3 * (i + j + k))\
    \ {\n                    max_triples++;\n                }\n            }\n  \
    \      }\n    }\n    return max_triples;\n}", "{\n    long a[n];\n    long i,\
    \ j, k, count = 0;\n    for (i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n\
    \    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n; j++)\n          \
    \  for (k = j + 1; k < n; k++)\n                if (a[i] + a[j] + a[k] == 3 *\
    \ (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n\
    \    return count;\n}", "{\n    long a[n];\n    long i, j, k, count = 0;\n   \
    \ for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n;\
    \ i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k\
    \ = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] ==\
    \ 3 * (a[i] + a[j] + a[k]))\n                    count++;\n            }\n   \
    \     }\n    }\n    return count;\n}", "{\n    long a[n];\n    long i, j, k, count\
    \ = 0;\n    for (i = 1; i <= n; i++) {\n        a[i-1] = i * i - i + 1;\n    }\n\
    \    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n      \
    \      for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] ==\
    \ 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0) {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n  \
    \      a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i +\
    \ 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i]\
    \ + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n     \
    \               count++;\n    return count;\n}", "{\n    long a[n];\n    long\
    \ i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i * i - i\
    \ + 1;\n    for(i = 1; i <= n - 2; i++)\n        for(j = i + 1; j <= n - 1; j++)\n\
    \            for(k = j + 1; k <= n; k++)\n                if(a[i-1] + a[j-1] +\
    \ a[k-1] == 3 * (a[i-1] + a[j-1] + a[k-1]))\n                    count++;\n  \
    \  return count;\n}", "{\n    long a[n];\n    long count = 0;\n    for(long i\
    \ = 1; i <= n; i++)\n    {\n        a[i-1] = i*i - i + 1;\n    }\n    for(long\
    \ i = 0; i < n; i++)\n    {\n        for(long j = i+1; j < n; j++)\n        {\n\
    \            for(long k = j+1; k < n; k++)\n            {\n                if(a[i]\
    \ + a[j] + a[k] == 3*(a[i] + a[j] + a[k]))\n                {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long a[n];\n    long max_triples = 0;\n    for(long i =\
    \ 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n\
    \        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k <\
    \ n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) &&\
    \ a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] +\
    \ a[j] + a[k];\n    return max_triples;\n}", "{\n    long a[n];\n    long i, j,\
    \ k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i -\
    \ i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n   \
    \         for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] ==\
    \ 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n\
    \    return count;\n}", "{\n    long a[n];\n    long sum = 0;\n    for(long i\
    \ = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n;\
    \ i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j +\
    \ 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] +\
    \ a[k]) && i < j && j < k)\n                    sum++;\n    return sum;\n}", "{\n\
    \    long a[n];\n    long max = 0;\n    for(long i = 1; i <= n; i++)\n       \
    \ a[i-1] = i*i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j =\
    \ i+1; j < n; j++)\n            for(long k = j+1; k < n; k++)\n              \
    \  if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]))\n                    max++;\n\
    \    return max;\n}", "{\n    long a[n];\n    long max_triples = 0;\n    for(long\
    \ i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n;\
    \ i++)\n    {\n        for(long j = i + 1; j < n; j++)\n        {\n          \
    \  for(long k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j]\
    \ + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0)\n       \
    \         {\n                    max_triples++;\n                }\n         \
    \   }\n        }\n    }\n    return max_triples;\n}", "{\n    long a[n];\n   \
    \ long sum = 0;\n    long max = 0;\n    for(long i = 1; i <= n; i++)\n       \
    \ a[i-1] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n    {\n        for(long\
    \ j = i + 1; j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n\
    \            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k])\
    \ && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n\
    \            }\n        }\n    }\n    return max;\n}", "{\n    long a[n];\n  \
    \  long i, j, k;\n    long max = 0;\n    for (i = 0; i < n; i++)\n        a[i]\
    \ = i * i - i + 1;\n    for (i = 0; i < n; i++)\n        for (j = i + 1; j < n;\
    \ j++)\n            for (k = j + 1; k < n; k++)\n                if (a[i] + a[j]\
    \ + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    max++;\n    return\
    \ max;\n}", "{\n    long a[n];\n    long sum[n];\n    long max_triples = 0;\n\
    \    long i, j, k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n    {\n \
    \       a[i] = i * i - i + 1;\n        sum[i] = 0;\n    }\n    for(i = 0; i <\
    \ n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k\
    \ = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] ==\
    \ 3 * sum[i] + 3 * sum[j] + 3 * sum[k])\n                {\n                 \
    \   count++;\n                }\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n \
    \       a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long\
    \ j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n      \
    \          if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] +\
    \ a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n\
    }", "{\n    long max_triples = 0;\n    long i, j, k;\n    long a[n];\n    for(i\
    \ = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j +\
    \ 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 *\
    \ (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n                \
    \    max_triples = a[i] + a[j] + a[k];\n            }\n        }\n    }\n    return\
    \ max_triples;\n}", "{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i\
    \ = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n - 1; i++)\n\
    \        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n\
    \                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n        \
    \            count++;\n    return count;\n}", "{\n    long a[n];\n    long i,\
    \ j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n\
    \    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k\
    \ = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j]\
    \ + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return\
    \ count;\n}", "{\n    long a[n];\n    long max = 0;\n    for(long i = 1; i <=\
    \ n; i++)\n        a[i-1] = i*i - i + 1;\n    for(long i = 0; i < n; i++)\n  \
    \      for(long j = i+1; j < n; j++)\n            for(long k = j+1; k < n; k++)\n\
    \                if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]) && a[i] + a[j]\
    \ + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n\
    }", "{\n    long a[n];\n    long max_triples = 0;\n    for(long i = 0; i < n;\
    \ i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n     \
    \   for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n\
    \                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j]\
    \ + a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n\
    \    return max_triples;\n}", "{\n    long a[n];\n    long i, j, k;\n    long\
    \ result = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i * i - i + 1;\n\
    \    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n     \
    \   {\n            for(k = j + 1; k < n; k++)\n            {\n               \
    \ if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n\
    \                {\n                    result++;\n                }\n       \
    \     }\n        }\n    }\n    return result;\n}", "{\n    long a[n];\n    long\
    \ i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i +\
    \ 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n       \
    \     for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 *\
    \ (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}",
  "{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++)\n\
    \        a[i] = i * i - i + 1;\n    for (i = 0; i < n - 1; i++)\n        for (j\
    \ = i + 1; j < n; j++)\n            for (k = j + 1; k < n; k++)\n            \
    \    if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                   \
    \ count++;\n    return count;\n}", "{\n    long a[n];\n    long i, j, k, count\
    \ = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i =\
    \ 0; i < n - 1; i++)\n        for(j = i + 1; j < n; j++)\n            for(k =\
    \ j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j]\
    \ + a[k]))\n                    count++;\n    return count;\n}", "{\n    long\
    \ a[n];\n    long i, j, k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n\
    \        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n  \
    \          {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k])\
    \ && a[i] + a[j] + a[k] > 0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    long a[n];\n    long i, j, k;\n    long count = 0;\n    for (i = 0; i < n;\
    \ i++)\n        a[i] = i * i - i + 1;\n    for (i = 0; i < n; i++)\n        for\
    \ (j = i + 1; j < n; j++)\n            for (k = j + 1; k < n; k++)\n         \
    \       if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k]\
    \ > 0)\n                    count++;\n    return count;\n}", "{\n    long a[n];\n\
    \    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i *\
    \ i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n\
    \            for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k]\
    \ == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n\
    }", "{\n    long max_triples = 0;\n    long i, j, k;\n    for(i = 1; i <= n; i++)\n\
    \    {\n        for(j = i + 1; j <= n; j++)\n        {\n            for(k = j\
    \ + 1; k <= n; k++)\n            {\n                if(i * i - i + 1 == j * j\
    \ - j + 1 && i * i - i + 1 == k * k - k + 1)\n                {\n            \
    \        max_triples += 1;\n                }\n            }\n        }\n    }\n\
    \    return max_triples;\n}", "{\n    long a[n];\n    long i, j, k, count = 0;\n\
    \    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i <\
    \ n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k <\
    \ n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) &&\
    \ a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n}",
  "{\n    long a[n];\n    long sum = 0;\n    long max = 0;\n    for (int i = 0; i\
    \ < n; i++) {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n  \
    \  for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n\
    \            for (int k = j + 1; k < n; k++) {\n                if (a[i] + a[j]\
    \ + a[k] == sum * 3) {\n                    max = std.math.max(max, a[i] * a[j]\
    \ * a[k]);\n                }\n            }\n        }\n    }\n    return max;\n\
    }", "{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for(i = 0;\
    \ i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n   \
    \ {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1;\
    \ k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3 * (a[i]\
    \ + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                {\n             \
    \       count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n   \
    \ for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n;\
    \ i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k\
    \ = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] ==\
    \ 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long max = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long sum = 0;\n    long\
    \ count = 0;\n    while(i < n)\n    {\n        j = i + 1;\n        while(j < n)\n\
    \        {\n            k = j + 1;\n            while(k < n)\n            {\n\
    \                sum = i * i - i + 1;\n                sum += j * j - j + 1;\n\
    \                sum += k * k - k + 1;\n                if(sum % 3 == 0)\n   \
    \             {\n                    count++;\n                }\n           \
    \     k++;\n            }\n            j++;\n        }\n        i++;\n    }\n\
    \    return count;\n}", "{\n    long a[n];\n    long max_triples = 0;\n    for(long\
    \ i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n;\
    \ i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j +\
    \ 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] +\
    \ a[k]) && a[i] + a[j] + a[k] > max_triples)\n                    max_triples\
    \ = a[i] + a[j] + a[k];\n    return max_triples;\n}", "{\n    long a[n];\n   \
    \ long i, j, k;\n    long count = 0;\n    for(i = 1; i <= n; i++)\n        a[i]\
    \ = i * i - i + 1;\n    for(i = 1; i <= n; i++)\n        for(j = i + 1; j <= n;\
    \ j++)\n            for(k = j + 1; k <= n; k++)\n                if(a[i] + a[j]\
    \ + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n            \
    \        count++;\n    return count;\n}", "{\n    long max_triples = 0;\n    long\
    \ i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++)\
    \ {\n            for (k = j + 1; k <= n; k++) {\n                if (i * i + j\
    \ * j + k * k == 3 * i * j * k) {\n                    max_triples++;\n      \
    \          }\n            }\n        }\n    }\n    return max_triples;\n}", "{\n\
    \    long a[n];\n    long i, j, k, count = 0;\n    for (i = 1; i <= n; i++) {\n\
    \        a[i-1] = i*i - i + 1;\n    }\n    for (i = 1; i <= n-2; i++) {\n    \
    \    for (j = i+1; j <= n-1; j++) {\n            for (k = j+1; k <= n; k++) {\n\
    \                if (a[i-1] + a[j-1] + a[k-1] == 3 * (a[i-1] + a[j-1] + a[k-1]))\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}", "{\n    long a[n];\n    long max = 0;\n    for(long\
    \ i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n;\
    \ i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j +\
    \ 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] +\
    \ a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] +\
    \ a[k];\n    return max;\n}", "{\n    long a[n];\n    long sum = 0;\n    long\
    \ max = 0;\n    for (long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n\
    \        sum += a[i];\n    }\n    for (long i = 0; i < n; i++) {\n        for\
    \ (long j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n; k++)\
    \ {\n                if (a[i] + a[j] + a[k] == sum * 3) {\n                  \
    \  max = std.math.max(max, a[i] * a[j] * a[k]);\n                }\n         \
    \   }\n        }\n    }\n    return max;\n}", "{\n    long a[n];\n    long max\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n  \
    \  }\n    for (long i = 0; i < n - 2; i++) {\n        for (long j = i + 1; j <\
    \ n - 1; j++) {\n            for (long k = j + 1; k < n; k++) {\n            \
    \    if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k]\
    \ > max) {\n                    max = a[i] + a[j] + a[k];\n                }\n\
    \            }\n        }\n    }\n    return max;\n}", "{\n    long max_triples\
    \ = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i\
    \ + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n          \
    \      if (i * i + j * j + k * k == 3 * i * j * k) {\n                    max_triples++;\n\
    \                }\n            }\n        }\n    }\n    return max_triples;\n\
    }", "{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n\
    \        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i\
    \ + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i]\
    \ + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n \
    \   return count;\n}", "{\n    long a[n];\n    long i, j, k;\n    long result\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n\
    \    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n      \
    \      for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] ==\
    \ 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0) {\n               \
    \     result++;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i =\
    \ 1; i <= n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (i = 1; i <=\
    \ n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j +\
    \ 1; k <= n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j]\
    \ + a[k]) && a[i] + a[j] + a[k] > 0) {\n                    count++;\n       \
    \         }\n            }\n        }\n    }\n    return count;\n}", "{\n    long\
    \ max_triples = 0;\n    long i, j, k;\n    long a[n];\n    for(i = 0; i < n; i++)\n\
    \        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = i + 1; j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n  \
    \          {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k])\
    \ && a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i]\
    \ + a[j] + a[k];\n            }\n        }\n    }\n    return max_triples;\n}",
  "{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n\
    \        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++)\
    \ {\n                if (i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k\
    \ * k - k + 1) {\n                    max_triples++;\n                }\n    \
    \        }\n        }\n    }\n    return max_triples;\n}", "{\n    long a[n];\n\
    \    long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i\
    \ - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i+1; j < n; j++)\n   \
    \         for(k = j+1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3*(a[i]\
    \ + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n  \
    \  return count;\n}", "{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i\
    \ = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n\
    \        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n\
    \                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j]\
    \ + a[k] > 0)\n                    count++;\n    return count;\n}", "{\n    long\
    \ a[n];\n    long max_triples = 0;\n    for (long i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++) {\n       \
    \ for (long j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n;\
    \ k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) &&\
    \ a[i] + a[j] + a[k] % 3 == 0) {\n                    max_triples++;\n       \
    \         }\n            }\n        }\n    }\n    return max_triples;\n}", "{\n\
    \    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for (i = 0; i < n; i++) {\n       \
    \ for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n \
    \               if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j]\
    \ + a[k] % 3 == 0) {\n                    count++;\n                }\n      \
    \      }\n        }\n    }\n    return count;\n}", "{\n    long a[n];\n    long\
    \ max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n \
    \   for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n   \
    \         for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k]\
    \ == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                 \
    \   max = a[i] + a[j] + a[k];\n    return max;\n}", "{\n    long max_triples =\
    \ 0;\n    long a[n];\n    for(long i = 0; i < n; i++)\n        a[i] = i * i -\
    \ i + 1;\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i + 1;\
    \ j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n      \
    \      {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) &&\
    \ a[i] + a[j] + a[k] > max_triples)\n                    max_triples = a[i] +\
    \ a[j] + a[k];\n            }\n        }\n    }\n    return max_triples;\n}",
  "{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 1; i <= n; i++)\n\
    \        a[i-1] = i * i - i + 1;\n    for (i = 1; i <= n - 2; i++)\n        for\
    \ (j = i + 1; j <= n - 1; j++)\n            for (k = j + 1; k <= n; k++)\n   \
    \             if (a[i-1] + a[j-1] + a[k-1] == 3 * (a[i-1] + a[j-1] + a[k-1]))\n\
    \                    count++;\n    return count;\n}", "{\n    long a[n];\n   \
    \ long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n\
    \    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n  \
    \          for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k]\
    \ == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                 \
    \   max = a[i] + a[j] + a[k];\n    return max;\n}", "{\n    long a[n];\n    long\
    \ i, j, k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i\
    \ * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j <\
    \ n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n\
    \                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j]\
    \ + a[k] % 3 == 0)\n                    count++;\n            }\n        }\n \
    \   }\n    return count;\n}", "{\n    long a[n];\n    long max_triples = 0;\n\
    \    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long\
    \ i = 0; i < n; i++)\n    {\n        for(long j = i + 1; j < n; j++)\n       \
    \ {\n            for(long k = j + 1; k < n; k++)\n            {\n            \
    \    if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] >\
    \ max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n      \
    \      }\n        }\n    }\n    return max_triples;\n}", "{\n    long max_triples\
    \ = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i\
    \ + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n          \
    \      if (i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k * k - k + 1) {\n\
    \                    max_triples += 1;\n                }\n            }\n   \
    \     }\n    }\n    return max_triples;\n}", "{\n    long max_triples = 0;\n \
    \   long i, j, k;\n    for(i = 1; i < n; i++)\n    {\n        for(j = i + 1; j\
    \ < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n\
    \                if(i * i - i + 1 == j * j - j + 1 && i * i - i + 1 == k * k -\
    \ k + 1)\n                {\n                    max_triples++;\n            \
    \    }\n            }\n        }\n    }\n    return max_triples;\n}", "{\n   \
    \ long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n     \
    \   a[i] = i * i - i + 1;\n    for(i = 0; i < n - 1; i++)\n        for(j = i +\
    \ 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i]\
    \ + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n     \
    \               count++;\n    return count;\n}", "{\n    long a[n];\n    long\
    \ i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i +\
    \ 1;\n    for(i = 1; i <= n; i++)\n    {\n        for(j = i+1; j <= n; j++)\n\
    \        {\n            for(k = j+1; k <= n; k++)\n            {\n           \
    \     if(a[i-1] + a[j-1] + a[k-1] == 3*(a[i-1] + a[j-1] + a[k-1]))\n         \
    \           count++;\n            }\n        }\n    }\n    return count;\n}",
  "{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++)\n\
    \        a[i] = i * i - i + 1;\n    for (i = 0; i < n - 1; i++)\n        for (j\
    \ = i + 1; j < n; j++)\n            for (k = j + 1; k < n; k++)\n            \
    \    if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k]\
    \ % 3 == 0)\n                    count++;\n    return count;\n}", "{\n    long\
    \ max_triples = 0;\n    long i, j, k;\n    for (i = 1; i < n; i++) {\n       \
    \ for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n \
    \               if (i * i - i + 1 == j * j - j + 1 && j * j - j + 1 == k * k -\
    \ k + 1) {\n                    max_triples += 1;\n                }\n       \
    \     }\n        }\n    }\n    return max_triples;\n}", "{\n    long a[n];\n \
    \   long i, j, k, count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i\
    \ - i + 1;\n    for(i = 1; i <= n-2; i++)\n        for(j = i+1; j <= n-1; j++)\n\
    \            for(k = j+1; k <= n; k++)\n                if(a[i-1] + a[j-1] + a[k-1]\
    \ == 3*(a[i-1] + a[j-1] + a[k-1]))\n                    count++;\n    return count;\n\
    }", "{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n;\
    \ i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1;\
    \ k <= n; k++) {\n                if (i * i - i + 1 == j * j - j + 1 && j * j\
    \ - j + 1 == k * k - k + 1) {\n                    max_triples += 1;\n       \
    \         }\n            }\n        }\n    }\n    return max_triples;\n}", "{\n\
    \    long a[n];\n    long max_triples = 0;\n    for(long i = 0; i < n; i++)\n\
    \        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long\
    \ j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n      \
    \          if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] +\
    \ a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n\
    \    return max_triples;\n}", "{\n    long a[n];\n    long max = 0;\n    for(long\
    \ i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n;\
    \ i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j +\
    \ 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] +\
    \ a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] +\
    \ a[k];\n    return max;\n}", "{\n    long a[n];\n    long max = 0;\n    for(long\
    \ i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n;\
    \ i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j +\
    \ 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] +\
    \ a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] +\
    \ a[k];\n    return max;\n}", "{\n    long a[n];\n    long i, j, k, count = 0;\n\
    \    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(i = 0; i\
    \ < n; i++)\n        for(j = i+1; j < n; j++)\n            for(k = j+1; k < n;\
    \ k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n \
    \                   count++;\n    return count;\n}", "{\n    long a[n];\n    long\
    \ count = 0;\n    for(long i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n\
    \    for(long i = 0; i < n; i++)\n        for(long j = i+1; j < n; j++)\n    \
    \        for(long k = j+1; k < n; k++)\n                if(a[i] + a[j] + a[k]\
    \ == 3*(a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n\
    \    return count;\n}", "{\n    long max_triples = 0;\n    long i, j, k;\n   \
    \ long a[n];\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i\
    \ = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n   \
    \         for(k = j + 1; k < n; k++)\n            {\n                if(a[i] +\
    \ a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\n\
    \                    max_triples = a[i] + a[j] + a[k];\n            }\n      \
    \  }\n    }\n    return max_triples;\n}", "{\n    long a[n];\n    long i, j, k,\
    \ count = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n   \
    \ for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k\
    \ = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j]\
    \ + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return\
    \ count;\n}", "{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 1;\
    \ i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(i = 0; i < n; i++)\n  \
    \  {\n        for(j = i+1; j < n; j++)\n        {\n            for(k = j+1; k\
    \ < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 3*(a[i] +\
    \ a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    \
    \        }\n        }\n    }\n    return count;\n}", "{\n    long max_triples\
    \ = 0;\n    long i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i\
    \ + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n          \
    \      if (i * i + j * j + k * k == 3 * (i + j + k)) {\n                    max_triples++;\n\
    \                }\n            }\n        }\n    }\n    return max_triples;\n\
    }", "{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i <= n;\
    \ i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1;\
    \ k <= n; k++) {\n                if (i * i + j * j + k * k == 3 * (i + j + k))\
    \ {\n                    max_triples++;\n                }\n            }\n  \
    \      }\n    }\n    return max_triples;\n}", "{\n    long a[n];\n    long sum\
    \ = 0;\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        a[i]\
    \ = i * i - i + 1;\n        sum += a[i];\n    }\n    for(long i = 0; i < n; i++)\n\
    \    {\n        for(long j = i + 1; j < n; j++)\n        {\n            for(long\
    \ k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k]\
    \ == sum * 3)\n                {\n                    count++;\n             \
    \   }\n            }\n        }\n    }\n    return count;\n}", "{\n    long a[n];\n\
    \    long i, j, k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n        a[i]\
    \ = i * i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1;\
    \ j < n; j++)\n        {\n            for(k = j + 1; k < n; k++)\n           \
    \ {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i]\
    \ + a[j] + a[k] % 3 == 0)\n                    count++;\n            }\n     \
    \   }\n    }\n    return count;\n}", "{\n    long a[n];\n    long i, j, k, count\
    \ = 0;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i - i + 1;\n    for(i\
    \ = 0; i < n; i++)\n        for(j = i+1; j < n; j++)\n            for(k = j+1;\
    \ k < n; k++)\n                if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]))\n\
    \                    count++;\n    return count;\n}", "{\n    long a[n];\n   \
    \ long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i -\
    \ i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n   \
    \         for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] ==\
    \ 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n\
    \    return count;\n}", "{\n    long a[n];\n    long sum[n];\n    long max = 0;\n\
    \    long i, j, k;\n    long count = 0;\n    for(i = 0; i < n; i++)\n    {\n \
    \       a[i] = i * i - i + 1;\n        sum[i] = 0;\n    }\n    for(i = 0; i <\
    \ n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k\
    \ = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] ==\
    \ 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                {\n \
    \                   max = a[i] + a[j] + a[k];\n                    count = 1;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    long max_triples = 0;\n    long i, j, k;\n    for(i = 1; i < n; i++)\n  \
    \  {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = j + 1;\
    \ k < n; k++)\n            {\n                if(i * i - i + 1 == j * j - j +\
    \ 1 && j * j - j + 1 == k * k - k + 1)\n                {\n                  \
    \  max_triples++;\n                }\n            }\n        }\n    }\n    return\
    \ max_triples;\n}", "{\n    long a[n];\n    long sum[n];\n    long max = 0;\n\
    \    long i, j, k;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n\
    \    for(i = 0; i < n; i++)\n        sum[i] = a[i];\n    for(i = 0; i < n; i++)\n\
    \        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n\
    \                if(sum[i] + sum[j] + sum[k] == 3 * (sum[i] + sum[j] + sum[k]))\n\
    \                    max++;\n    return max;\n}", "{\n    long a[n];\n    long\
    \ i, j, k;\n    long count = 0;\n    for (i = 0; i < n; i++) {\n        a[i] =\
    \ i * i - i + 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if\
    \ (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 ==\
    \ 0) {\n                    count++;\n                }\n            }\n     \
    \   }\n    }\n    return count;\n}", "{\n    long a[n];\n    long i, j, k, count\
    \ = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i =\
    \ 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n     \
    \       for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j]\
    \ + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n        \
    \    }\n        }\n    }\n    return count;\n}", "{\n    long a[n];\n    long\
    \ max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n \
    \   for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n   \
    \         for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k]\
    \ == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                 \
    \   max = a[i] + a[j] + a[k];\n    return max;\n}", "{\n    long a[n];\n    long\
    \ max = 0;\n    long i, j, k;\n    for(i = 1; i <= n; i++)\n        a[i-1] = i*i\
    \ - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i+1; j < n; j++)\n\
    \        {\n            for(k = j+1; k < n; k++)\n            {\n            \
    \    if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n\
    \                    max = a[i] + a[j] + a[k];\n            }\n        }\n   \
    \ }\n    return max;\n}", "{\n    long max_triples = 0;\n    long i, j, k;\n \
    \   for(i = 1; i < n; i++) {\n        for(j = i + 1; j < n; j++) {\n         \
    \   for(k = j + 1; k < n; k++) {\n                if(i * i + j * j + k * k ==\
    \ 3 * (i + j + k)) {\n                    max_triples++;\n                }\n\
    \            }\n        }\n    }\n    return max_triples;\n}", "{\n    long a[n];\n\
    \    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i\
    \ + 1;\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i + 1; j\
    \ < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n        \
    \    {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i]\
    \ + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n      \
    \      }\n        }\n    }\n    return max;\n}", "{\n    long a[n];\n    long\
    \ i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i +\
    \ 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n       \
    \     for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 *\
    \ (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n}",
  "{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for (i = 0; i <\
    \ n; i++)\n        a[i] = i * i - i + 1;\n    for (i = 0; i < n; i++)\n      \
    \  for (j = i + 1; j < n; j++)\n            for (k = j + 1; k < n; k++)\n    \
    \            if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j]\
    \ + a[k] > 0)\n                    count++;\n    return count;\n}", "{\n    long\
    \ a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i\
    \ * i - i + 1;\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i\
    \ + 1; j < n; j++)\n        {\n            for(long k = j + 1; k < n; k++)\n \
    \           {\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k])\
    \ && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] + a[k];\n\
    \            }\n        }\n    }\n    return max;\n}", "{\n    long a[n];\n  \
    \  long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i\
    \ - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n \
    \           for(k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k]\
    \ == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n\
    }", "{\n    long a[n];\n    long max = 0;\n    for(long i = 0; i < n; i++)\n \
    \       a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long\
    \ j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n      \
    \          if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] +\
    \ a[k] > max)\n                    max = a[i] + a[j] + a[k];\n    return max;\n\
    }", "{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n\
    \        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i\
    \ + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i]\
    \ + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n \
    \   return count;\n}", "{\n    long a[n];\n    long i, j, k;\n    long count =\
    \ 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n        \
    \    for(k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j]\
    \ + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n            \
    \    {\n                    count++;\n                }\n            }\n     \
    \   }\n    }\n    return count;\n}", "{\n    long a[n];\n    long max_triples\
    \ = 0;\n    long i, j, k;\n    for(i = 0; i < n; i++)\n        a[i] = i * i -\
    \ i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n\
    \        {\n            for(k = j + 1; k < n; k++)\n            {\n          \
    \      if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k]\
    \ > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n    \
    \        }\n        }\n    }\n    return max_triples;\n}", "{\n    long a[n];\n\
    \    long i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i\
    \ * i - i + 1;\n    }\n    for (i = 0; i < n - 1; i++) {\n        for (j = i +\
    \ 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n              \
    \  if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] %\
    \ 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}", "{\n    long a[n];\n    long max_triples\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n  \
    \  }\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n;\
    \ j++) {\n            for (long k = j + 1; k < n; k++) {\n                if (a[i]\
    \ + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max_triples)\
    \ {\n                    max_triples = a[i] + a[j] + a[k];\n                }\n\
    \            }\n        }\n    }\n    return max_triples;\n}", "{\n    long max_triples\
    \ = 0;\n    long i, j, k;\n    for(i = 1; i <= n; i++)\n    {\n        for(j =\
    \ i + 1; j <= n; j++)\n        {\n            for(k = j + 1; k <= n; k++)\n  \
    \          {\n                if(i * i - i + 1 == j * j - j + 1 && i * i - i +\
    \ 1 == k * k - k + 1)\n                {\n                    max_triples++;\n\
    \                }\n            }\n        }\n    }\n    return max_triples;\n\
    }", "{\n    long a[n];\n    long max_triples = 0;\n    for(long i = 0; i < n;\
    \ i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n     \
    \   for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n\
    \                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j]\
    \ + a[k] > max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n\
    \    return max_triples;\n}", "{\n    long a[n];\n    long i, j, k, count = 0;\n\
    \    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for\
    \ (i = 0; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n         \
    \   for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3\
    \ * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0) {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    long a[n];\n    long max_triples = 0;\n    for(long i = 1; i <= n; i++)\n\
    \        a[i-1] = i*i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long\
    \ j = i+1; j < n; j++)\n            for(long k = j+1; k < n; k++)\n          \
    \      if(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] >\
    \ max_triples)\n                    max_triples = a[i] + a[j] + a[k];\n    return\
    \ max_triples;\n}", "{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i\
    \ = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n\
    \        for(j = i + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n\
    \                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j]\
    \ + a[k] > 0)\n                    count++;\n    return count;\n}", "{\n    long\
    \ max = 0;\n    long a[n];\n    for(long i = 0; i < n; i++)\n        a[i] = i\
    \ * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j\
    \ < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i]\
    \ + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n   \
    \                 max = a[i] + a[j] + a[k];\n    return max;\n}", "{\n    long\
    \ max_triples = 0;\n    long i, j, k;\n    for(i = 1; i <= n; i++)\n    {\n  \
    \      for(j = i + 1; j <= n; j++)\n        {\n            for(k = j + 1; k <=\
    \ n; k++)\n            {\n                if(i * i - i + 1 == j * j - j + 1 &&\
    \ j * j - j + 1 == k * k - k + 1)\n                {\n                    max_triples++;\n\
    \                }\n            }\n        }\n    }\n    return max_triples;\n\
    }", "{\n    long a[n];\n    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n\
    \        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\n        for(j = i\
    \ + 1; j < n; j++)\n            for(k = j + 1; k < n; k++)\n                if(a[i]\
    \ + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n     \
    \               count++;\n    return count;\n}", "{\n    long a[n];\n    long\
    \ max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n \
    \   for(long i = 0; i < n; i++)\n    {\n        for(long j = i + 1; j < n; j++)\n\
    \        {\n            for(long k = j + 1; k < n; k++)\n            {\n     \
    \           if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] +\
    \ a[k] > max)\n                    max = a[i] + a[j] + a[k];\n            }\n\
    \        }\n    }\n    return max;\n}", "{\n    long a[n];\n    long i, j, k,\
    \ count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i\
    \ = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j\
    \ + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j]\
    \ + a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return\
    \ count;\n}", "{\n    long max_triples = 0;\n    long i, j, k;\n    for (i = 1;\
    \ i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k =\
    \ j + 1; k <= n; k++) {\n                if (i * i - i + 1 == j * j - j + 1 &&\
    \ i * i - i + 1 == k * k - k + 1) {\n                    max_triples += 1;\n \
    \               }\n            }\n        }\n    }\n    return max_triples;\n}",
  "{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 1; i <= n; i++)\n\
    \        a[i-1] = i * i - i + 1;\n    for (i = 0; i < n; i++)\n        for (j\
    \ = i + 1; j < n; j++)\n            for (k = j + 1; k < n; k++)\n            \
    \    if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n                   \
    \ count++;\n    return count;\n}", "{\n    long a[n];\n    long i, j, k, count\
    \ = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i =\
    \ 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j +\
    \ 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] +\
    \ a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n\
    }", "{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for(i = 1;\
    \ i <= n; i++)\n    {\n        a[i-1] = i*i - i + 1;\n    }\n    for(i = 1; i\
    \ <= n; i++)\n    {\n        for(j = i+1; j <= n; j++)\n        {\n          \
    \  for(k = j+1; k <= n; k++)\n            {\n                if(a[i-1] + a[j-1]\
    \ + a[k-1] == 3*(i+j+k))\n                {\n                    count++;\n  \
    \              }\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    long max_triples = 0;\n    long i, j, k;\n    for (i = 1; i < n; i++) {\n\
    \        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++)\
    \ {\n                if (i * i + j * j + k * k == 3 * (i + j + k)) {\n       \
    \             max_triples++;\n                }\n            }\n        }\n  \
    \  }\n    return max_triples;\n}", "{\n    long a[n];\n    long i, j, k, count\
    \ = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i =\
    \ 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k = j +\
    \ 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] +\
    \ a[k]) && a[i] + a[j] + a[k] > 0)\n                    count++;\n    return count;\n\
    }", "{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 1; i <= n;\
    \ i++) {\n        a[i-1] = i*i - i + 1;\n    }\n    for (i = 1; i <= n; i++) {\n\
    \        for (j = i+1; j <= n; j++) {\n            for (k = j+1; k <= n; k++)\
    \ {\n                if (a[i-1] + a[j-1] + a[k-1] == 3*(a[i-1] + a[j-1] + a[k-1]))\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}", "{\n    long max_triples = 0;\n    long i, j, k;\n\
    \    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n    \
    \        for (k = j + 1; k <= n; k++) {\n                if (i * i + j * j ==\
    \ k * k + i * i + j * j) {\n                    max_triples += 1;\n          \
    \      }\n            }\n        }\n    }\n    return max_triples;\n}", "{\n \
    \   long a[n];\n    long count = 0;\n    for(long i = 1; i <= n; i++)\n    {\n\
    \        a[i-1] = i*i - i + 1;\n    }\n    for(long i = 0; i < n; i++)\n    {\n\
    \        for(long j = i + 1; j < n; j++)\n        {\n            for(long k =\
    \ j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] ==\
    \ 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] % 3 == 0)\n                {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}", "{\n    long a[n];\n    long max = 0;\n    for(long\
    \ i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(long i = 0; i < n;\
    \ i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j +\
    \ 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] +\
    \ a[k]) && a[i] + a[j] + a[k] > max)\n                    max = a[i] + a[j] +\
    \ a[k];\n    return max;\n}", "{\n    long a[n];\n    long i, j, k, count = 0;\n\
    \    for (i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for (i = 0; i\
    \ < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j +\
    \ 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j]\
    \ + a[k]) && a[i] + a[j] + a[k] % 3 == 0) {\n                    count++;\n  \
    \              }\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    long a[n];\n    long sum[n];\n    long count = 0;\n    long max = 0;\n  \
    \  long i, j, k;\n    for (i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n\
    \        sum[i] = 0;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i\
    \ + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n            \
    \    if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k]\
    \ > max) {\n                    max = a[i] + a[j] + a[k];\n                  \
    \  count = 1;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (i = 0; i < n -\
    \ 2; i++) {\n        for (j = i + 1; j < n - 1; j++) {\n            for (k = j\
    \ + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j]\
    \ + a[k]) && a[i] + a[j] + a[k] % 3 == 0) {\n                    count++;\n  \
    \              }\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    long a[n];\n    long sum = 0;\n    for(long i = 0; i < n; i++)\n        a[i]\
    \ = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i +\
    \ 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n              \
    \  if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > sum)\n\
    \                    sum = a[i] + a[j] + a[k];\n    return sum;\n}", "{\n    long\
    \ a[n];\n    long count = 0;\n    for(long i = 0; i < n; i++)\n        a[i] =\
    \ i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1;\
    \ j < n; j++)\n            for(long k = j + 1; k < n; k++)\n                if(a[i]\
    \ + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > 0)\n     \
    \               count++;\n    return count;\n}", "{\n    long a[n];\n    long\
    \ max = 0;\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n \
    \   for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n   \
    \         for(long k = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k]\
    \ == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j] + a[k] > max)\n                 \
    \   max = a[i] + a[j] + a[k];\n    return max;\n}", "{\n    long a[n];\n    long\
    \ i, j, k, count = 0;\n    for (i = 0; i < n; i++)\n        a[i] = i * i - i +\
    \ 1;\n    for (i = 0; i < n - 1; i++)\n        for (j = i + 1; j < n; j++)\n \
    \           for (k = j + 1; k < n; k++)\n                if (a[i] + a[j] + a[k]\
    \ == 3 * (a[i] + a[j] + a[k]))\n                    count++;\n    return count;\n\
    }", "{\n    long a[n];\n    long i, j, k, count = 0;\n    for (i = 0; i < n; i++)\n\
    \        a[i] = i * i - i + 1;\n    for (i = 0; i < n; i++)\n    {\n        for\
    \ (j = i + 1; j < n; j++)\n        {\n            for (k = j + 1; k < n; k++)\n\
    \            {\n                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k])\
    \ && a[i] + a[j] + a[k] % 3 == 0)\n                    count++;\n            }\n\
    \        }\n    }\n    return count;\n}", "{\n    long a[n];\n    long i, j, k;\n\
    \    long count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n\
    \    for(i = 0; i < n; i++)\n        for(j = i + 1; j < n; j++)\n            for(k\
    \ = j + 1; k < n; k++)\n                if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j]\
    \ + a[k]))\n                    count++;\n    return count;\n}", "{\n    long\
    \ a[n];\n    long max = 0;\n    for (long i = 0; i < n; i++) {\n        a[i] =\
    \ i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n; k++) {\n \
    \               if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) && a[i] + a[j]\
    \ + a[k] > max) {\n                    max = a[i] + a[j] + a[k];\n           \
    \     }\n            }\n        }\n    }\n    return max;\n}", "{\n    long a[n];\n\
    \    long i, j, k, count = 0;\n    for(i = 0; i < n; i++)\n        a[i] = i *\
    \ i - i + 1;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n;\
    \ j++)\n        {\n            for(k = j + 1; k < n; k++)\n            {\n   \
    \             if(a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\n           \
    \         count++;\n            }\n        }\n    }\n    return count;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
