{
  "name": "HumanEval_49_modp",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n",
  "tests": "unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (n < 0) return modp(-n, p);\n    if (p == 0) return 0;\n    if (p == 1) return 1;\n    if (p == 2) return 2;\n    if (p == 3) return 3;\n    if (p == 4) return 4;\n    if (p == 5) return 5;\n    if (p == 6) return 6;\n    if (p == 7) return 7;\n    if (p == 8) return 8;\n    if (p == 9) return 9;\n    if (p == 10) return 10;\n    if (p == 11) return 11;\n    if (p == 12) return 12;\n    if (p == 13) return 13;\n    if (p == 14) return 14;\n    if (p == 15) return 15;\n    if (p == 16) return 16;\n    if (p == 17) return 17;\n    if (p == 18) return 18;\n    if (p == 19) return 19;\n    if (p == 20) return 20;\n    if (p == 21) return 21;\n    if (p == 22) return 22;\n    if (p == 23) return 23;\n    if (p == 24) return 24;\n    if (p == 25) return 25;\n    if (p == 26) return 26;\n    if (p == 27) return 27;\n    if (p == 28) return 28;\n    if (p == 29) return 29;\n    if (p == 30) return 30;\n    if (p == 31) return 31;\n    if (p == 32) return 32;\n    if (p == 33) return 33;\n    if (p == 34) return 34;\n    if (p == 35) return 35;\n    if (p == 36) return 36;\n    if (p == 37) return 37;\n    if (p == 38) return 38;\n    if (p == 39) return 39;\n    if (p == 40) return 40;\n    if (p == 41) return 41;\n    if (p == 42) return 42;\n    if (p == 43) return 43;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "/tmp/tmpderdt_qh.d(65): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpderdt_qh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        n = -n;\n    if (p < 0)\n        p = -p;\n    if (p == 0)\n        return 0;\n    if (n == 0)\n        return 1;\n    if (n == 1)\n        return p;\n    if (n == 2)\n        return p*p;\n    if (n == 3)\n        return p*p*p;\n    if (n == 4)\n        return p*p*p*p;\n    if (n == 5)\n        return p*p*p*p*p;\n    if (n == 6)\n        return p*p*p*p*p*p;\n    if (n == 7)\n        return p*p*p*p*p*p*p;\n    if (n == 8)\n        return p*p*p*p*p*p*p*p;\n    if (n == 9)\n        return p*p*p*p*p*p*p*p*p;\n    if (n == 10)\n        return p*p*p*p*p*p*p*p*p*p;\n    if (n == 11)\n        return p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 12)\n        return p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 13)\n        return p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 14)\n        return p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 15)\n        return p*p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 16)\n        return p*p*p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 17\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "/tmp/tmp06wcqq1x.d(60): Error: found `unittest` when expecting `)`\n/tmp/tmp06wcqq1x.d(72): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06wcqq1x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0L)\n        n = -n;\n    if (p < 0L)\n        p = -p;\n    if (n == 0L)\n        return 0L;\n    if (p == 0L)\n        return 1L;\n    if (p == 1L)\n        return 0L;\n    if (p == 2L)\n        return 1L;\n    if (p == 3L)\n        return 2L;\n    if (p == 4L)\n        return 3L;\n    if (p == 5L)\n        return 4L;\n    if (p == 6L)\n        return 5L;\n    if (p == 7L)\n        return 6L;\n    if (p == 8L)\n        return 7L;\n    if (p == 9L)\n        return 8L;\n    if (p == 10L)\n        return 9L;\n    if (p == 11L)\n        return 10L;\n    if (p == 12L)\n        return 11L;\n    if (p == 13L)\n        return 12L;\n    if (p == 14L)\n        return 13L;\n    if (p == 15L)\n        return 14L;\n    if (p == 16L)\n        return 15L;\n    if (p == 17L)\n        return 16L;\n    if (p == 18L)\n        return 17L;\n    if (p == 19L)\n        return 18L;\n    if (p == 20L)\n        return 19L;\n    if (p == 21L)\n        return 20L;\n    if (p == 22L)\n        return 21L;\n    if (p == 23L)\n        return 22L;\n    if (p == 24L)\n        return 23L;\n    if (p == 25L)\n        return 24L;\n    if (p == 26L)\n        return 25L;\n    if (p == 27L)\n        return 26L;\n    if (p == 28L)\n        return 27L;\n    if (p == 29L)\n        return 28L;\n    if (p == 30L)\n        return 29L\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "/tmp/tmpifk9j4bw.d(87): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmpifk9j4bw.d(99): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpifk9j4bw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r == 0)\n        return r;\n    else\n        return p + r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpil_8e53x.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpil_8e53x.__unittest_L25_C1() [0x427a4d]\n??:? void tmpil_8e53x.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0) return 1;\n    if (n == 0) return 0;\n    if (n < 0) return modp(-n, p);\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 4;\n    if (n == 4) return 8;\n    if (n == 5) return 16;\n    if (n == 6) return 32;\n    if (n == 7) return 64;\n    if (n == 8) return 128;\n    if (n == 9) return 256;\n    if (n == 10) return 512;\n    if (n == 11) return 1024;\n    if (n == 12) return 2048;\n    if (n == 13) return 4096;\n    if (n == 14) return 8192;\n    if (n == 15) return 16384;\n    if (n == 16) return 32768;\n    if (n == 17) return 65536;\n    if (n == 18) return 131072;\n    if (n == 19) return 262144;\n    if (n == 20) return 524288;\n    if (n == 21) return 1048576;\n    if (n == 22) return 2097152;\n    if (n == 23) return 4194304;\n    if (n == 24) return 8388608;\n    if (n == 25) return 16777216;\n    if (n == 26) return 33554432;\n    if (n == 27) return 67108864;\n    if (n == 28) return 134217728;\n    if (n == 29) return 268435456;\n    if (n == 30) return 536870912;\n    if (n == 31) return 1073741824;\n    if (n == 32) return 2147483648L;\n    if (n == 33) return 4294967296L;\n    if (n == 34) return 8589934592L;\n    if (n == 35) return 17179869184L;\n    if (n == 36) return 34359738368L;\n    if (n == 37) return 68719476736\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "/tmp/tmpr_g0zazs.d(59): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmpr_g0zazs.d(71): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr_g0zazs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(n + p, p);\n    if (n >= p)\n        return n % p;\n    return n;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp9eaashn.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpp9eaashn.__unittest_L25_C1() [0x427a7b]\n??:? void tmpp9eaashn.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1)\n            r = (r * p) % p;\n        n /= 2;\n        p = (p * p) % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "",
      "exit_code": -8,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        n = -n;\n    if (p < 0)\n        p = -p;\n    if (n == 0)\n        return 0;\n    if (p == 0)\n        return 1;\n    if (n == 1)\n        return p;\n    if (p == 1)\n        return 1;\n    if (n == p)\n        return 0;\n    if (n == 2)\n        return p;\n    if (p == 2)\n        return 2;\n    if (n % p == 0)\n        return 0;\n    if (p % n == 0)\n        return p;\n    if (p == 3)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (p == 4)\n        return 2;\n    if (n == 4)\n        return 4;\n    if (p == 5)\n        return 4;\n    if (n == 5)\n        return 5;\n    if (p == 6)\n        return 2;\n    if (n == 6)\n        return 6;\n    if (p == 7)\n        return 4;\n    if (n == 7)\n        return 7;\n    if (p == 8)\n        return 2;\n    if (n == 8)\n        return 8;\n    if (p == 9)\n        return 4;\n    if (n == 9)\n        return 9;\n    if (p == 10)\n        return 2;\n    if (n == 10)\n        return 10;\n    if (p == 11)\n        return 4;\n    if (n == 11)\n        return 11;\n    if (p == 12)\n        return 2;\n    if (n == 12)\n        return 12;\n    if (p == 13)\n        return 4;\n    if (n == 13)\n        return 13;\n    if (p == 14)\n        return 2;\n    if (n == 14)\n        return 14;\n    if (p == 15)\n        return 4;\n    if (n == 15)\n        return 15;\n    if (p == 16)\n        return 2;\n    if (n == 16)\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "/tmp/tmptniqe8mn.d(97): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptniqe8mn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0L)\n        return modp(-n, p);\n    if (p < 0L)\n        return modp(n, -p);\n    if (p == 0L)\n        return 0L;\n    if (n == 0L)\n        return 1L;\n    if (n == 1L)\n        return p;\n    if (n == p)\n        return 0L;\n    if (n == 2L)\n        return p;\n    if (n == 3L)\n        return p * p;\n    if (n == 4L)\n        return p * p * p;\n    if (n == 5L)\n        return p * p * p * p;\n    if (n == 6L)\n        return p * p * p * p * p;\n    if (n == 7L)\n        return p * p * p * p * p * p;\n    if (n == 8L)\n        return p * p * p * p * p * p * p;\n    if (n == 9L)\n        return p * p * p * p * p * p * p * p;\n    if (n == 10L)\n        return p * p * p * p * p * p * p * p * p;\n    if (n == 11L)\n        return p * p * p * p * p * p * p * p * p * p;\n    if (n == 12L)\n        return p * p * p * p * p * p * p * p * p * p * p;\n    if (n == 13L)\n        return p * p * p * p * p * p * p * p * p * p * p * p;\n    if (n == 14L)\n        return p * p * p * p * p * p * p * p * p * p * p * p * p;\n    if (n == 15L)\n        return p * p * p * p * p * p * p * p * p * p * p * p * p * p;\n    if (n == 16L)\n        return p * p * p * p * p * p * p * p * p * p * p * p *\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "/tmp/tmpj900_8xy.d(61): Error: expression expected, not `unittest`\n/tmp/tmpj900_8xy.d(62): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj900_8xy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0)\n        r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx0d25uc1.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpx0d25uc1.__unittest_L24_C1() [0x427a6f]\n??:? void tmpx0d25uc1.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0) \n        n = -n;\n    if (p < 0) \n        p = -p;\n    if (n >= p) \n        return n % p;\n    return n;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2dv50214.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp2dv50214.__unittest_L27_C1() [0x427a8b]\n??:? void tmp2dv50214.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r == 0)\n        return n;\n    else\n        return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnwvje5wy.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpnwvje5wy.__unittest_L25_C1() [0x427a6f]\n??:? void tmpnwvje5wy.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(-n, p);\n    if (p == 0)\n        return 0;\n    if (p == 1)\n        return 1;\n    if (p == 2)\n        return n % 2;\n    if (p == 3)\n        return (n % 3) + 1;\n    if (p == 4)\n        return (n % 4) + 2;\n    if (p == 5)\n        return (n % 5) + 3;\n    if (p == 6)\n        return (n % 6) + 4;\n    if (p == 7)\n        return (n % 7) + 5;\n    if (p == 8)\n        return (n % 8) + 6;\n    if (p == 9)\n        return (n % 9) + 7;\n    if (p == 10)\n        return (n % 10) + 8;\n    if (p == 11)\n        return (n % 11) + 9;\n    if (p == 12)\n        return (n % 12) + 10;\n    if (p == 13)\n        return (n % 13) + 11;\n    if (p == 14)\n        return (n % 14) + 12;\n    if (p == 15)\n        return (n % 15) + 13;\n    if (p == 16)\n        return (n % 16) + 14;\n    if (p == 17)\n        return (n % 17) + 15;\n    if (p == 18)\n        return (n % 18) + 16;\n    if (p == 19)\n        return (n % 19) + 17;\n    if (p == 20)\n        return (n % 20) + 18;\n    if (p == 21)\n        return (n % 21) + 19;\n    if (p == 22)\n        return (n % 22) + 20;\n    if (p == 23)\n        return (n % 23) + 21;\n    if (p == 24)\n        return (n % 24) + 22;\n    if (p == 25)\n        return (n % 25) + 23;\n    if (p == 26)\n        return (n % 26\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "/tmp/tmp2x08ry3z.d(74): Error: found `unittest` when expecting `)`\n/tmp/tmp2x08ry3z.d(76): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2x08ry3z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            r = (r * p) % p;\n        }\n        n = n >> 1;\n        p = (p * p) % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "",
      "exit_code": -8,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 5;\n    if (n == 5) return 8;\n    if (n == 6) return 9;\n    if (n == 7) return 11;\n    if (n == 8) return 14;\n    if (n == 9) return 17;\n    if (n == 10) return 20;\n    if (n == 11) return 23;\n    if (n == 12) return 26;\n    if (n == 13) return 29;\n    if (n == 14) return 32;\n    if (n == 15) return 35;\n    if (n == 16) return 38;\n    if (n == 17) return 41;\n    if (n == 18) return 44;\n    if (n == 19) return 47;\n    if (n == 20) return 50;\n    if (n == 21) return 53;\n    if (n == 22) return 56;\n    if (n == 23) return 59;\n    if (n == 24) return 62;\n    if (n == 25) return 65;\n    if (n == 26) return 68;\n    if (n == 27) return 71;\n    if (n == 28) return 74;\n    if (n == 29) return 77;\n    if (n == 30) return 80;\n    if (n == 31) return 83;\n    if (n == 32) return 86;\n    if (n == 33) return 89;\n    if (n == 34) return 92;\n    if (n == 35) return 95;\n    if (n == 36) return 98;\n    if (n == 37) return 101;\n    if (n == 38) return 104;\n    if (n == 39) return 107;\n    if (n == 40) return 110;\n    if (n == 41) return 113;\n    if (n == 42) return 116;\n    if (n == 43) return 119;\n    if (n == 44) return 122;\n    if (n == 45) return 125;\n    if (n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "/tmp/tmpm12yv2k5.d(66): Error: found `unittest` when expecting `)`\n/tmp/tmpm12yv2k5.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm12yv2k5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(n + p, p);\n    if (n >= p)\n        return n % p;\n    return n;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp9eaashn.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpp9eaashn.__unittest_L25_C1() [0x427a7b]\n??:? void tmpp9eaashn.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0)\n        return 1;\n    if (n == 0)\n        return 0;\n    if (n < 0)\n        n = -n;\n    if (p < 0)\n        p = -p;\n    if (n == 1)\n        return p;\n    if (n == 2)\n        return p * p;\n    if (n % 2 == 0)\n        return modp(n / 2, p) * modp(n / 2, p);\n    return modp(n / 2, p) * modp(n / 2, p) * modp(n / 2, p);\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu64k4kpq.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427ead]\n??:? void tmpu64k4kpq.__unittest_L35_C1() [0x427b35]\n??:? void tmpu64k4kpq.__modtest() [0x427c30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbd3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]\n??:? runModuleUnitTests [0x42b9a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (n < 0) return modp(-n, p);\n    if (n == p) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 4;\n    if (n == 5) return 5;\n    if (n == 6) return 6;\n    if (n == 7) return 7;\n    if (n == 8) return 8;\n    if (n == 9) return 9;\n    if (n == 10) return 10;\n    if (n == 11) return 11;\n    if (n == 12) return 12;\n    if (n == 13) return 13;\n    if (n == 14) return 14;\n    if (n == 15) return 15;\n    if (n == 16) return 16;\n    if (n == 17) return 17;\n    if (n == 18) return 18;\n    if (n == 19) return 19;\n    if (n == 20) return 20;\n    if (n == 21) return 21;\n    if (n == 22) return 22;\n    if (n == 23) return 23;\n    if (n == 24) return 24;\n    if (n == 25) return 25;\n    if (n == 26) return 26;\n    if (n == 27) return 27;\n    if (n == 28) return 28;\n    if (n == 29) return 29;\n    if (n == 30) return 30;\n    if (n == 31) return 31;\n    if (n == 32) return 32;\n    if (n == 33) return 33;\n    if (n == 34) return 34;\n    if (n == 35) return 35;\n    if (n == 36) return 36;\n    if (n == 37) return 37;\n    if (n == 38) return 38;\n    if (n == 39) return 39;\n    if (n == 40) return 40;\n    if (n == 41) return 41;\n    if (n == 42) return 42;\n    if (n == 43) return 43;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "/tmp/tmp_hwgjpl0.d(65): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_hwgjpl0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0)\n        r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx0d25uc1.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpx0d25uc1.__unittest_L24_C1() [0x427a6f]\n??:? void tmpx0d25uc1.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0) return 1;\n    if (n == 0) return 0;\n    if (n < 0) return modp(-n, p);\n    if (n >= p) return n % p;\n    long r = modp(n, p / 2);\n    r = (r * r) % p;\n    if (n & 1) r = (r * n) % p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcvq8y78r.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmpcvq8y78r.__unittest_L28_C1() [0x427aef]\n??:? void tmpcvq8y78r.__modtest() [0x427bc4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0L)\n        return modp(-n, p);\n    if (p == 0L)\n        return 0L;\n    if (p == 1L)\n        return 1L;\n    if (p == 2L)\n        return 2L;\n    if (p == 3L)\n        return 3L;\n    if (p == 4L)\n        return 4L;\n    if (p == 5L)\n        return 5L;\n    if (p == 6L)\n        return 6L;\n    if (p == 7L)\n        return 7L;\n    if (p == 8L)\n        return 8L;\n    if (p == 9L)\n        return 9L;\n    if (p == 10L)\n        return 10L;\n    if (p == 11L)\n        return 11L;\n    if (p == 12L)\n        return 12L;\n    if (p == 13L)\n        return 13L;\n    if (p == 14L)\n        return 14L;\n    if (p == 15L)\n        return 15L;\n    if (p == 16L)\n        return 16L;\n    if (p == 17L)\n        return 17L;\n    if (p == 18L)\n        return 18L;\n    if (p == 19L)\n        return 19L;\n    if (p == 20L)\n        return 20L;\n    if (p == 21L)\n        return 21L;\n    if (p == 22L)\n        return 22L;\n    if (p == 23L)\n        return 23L;\n    if (p == 24L)\n        return 24L;\n    if (p == 25L)\n        return 25L;\n    if (p == 26L)\n        return 26L;\n    if (p == 27L)\n        return 27L;\n    if (p == 28L)\n        return 28L;\n    if (p == 29L)\n        return 29L;\n    if (p == 30L)\n        return 30L;\n    if (p == 31L)\n        return 31L;\n    if (p == 32L)\n        return\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "/tmp/tmp4yci0o_x.d(87): Error: expression expected, not `unittest`\n/tmp/tmp4yci0o_x.d(88): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4yci0o_x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0L)\n        return modp(-n, p);\n    if (p == 0L)\n        return 0L;\n    if (p == 1L)\n        return 1L;\n    if (n == 0L)\n        return 1L;\n    if (n == 1L)\n        return p;\n    if (p == 2L)\n        return 1L;\n    if (p == 3L)\n        return 2L;\n    if (p == 4L)\n        return 2L;\n    if (p == 5L)\n        return 4L;\n    if (p == 6L)\n        return 4L;\n    if (p == 7L)\n        return 8L;\n    if (p == 8L)\n        return 8L;\n    if (p == 9L)\n        return 16L;\n    if (p == 10L)\n        return 16L;\n    if (p == 11L)\n        return 32L;\n    if (p == 12L)\n        return 32L;\n    if (p == 13L)\n        return 64L;\n    if (p == 14L)\n        return 64L;\n    if (p == 15L)\n        return 128L;\n    if (p == 16L)\n        return 128L;\n    if (p == 17L)\n        return 256L;\n    if (p == 18L)\n        return 256L;\n    if (p == 19L)\n        return 512L;\n    if (p == 20L)\n        return 512L;\n    if (p == 21L)\n        return 1024L;\n    if (p == 22L)\n        return 1024L;\n    if (p == 23L)\n        return 2048L;\n    if (p == 24L)\n        return 2048L;\n    if (p == 25L)\n        return 4096L;\n    if (p == 26L)\n        return 4096L;\n    if (p == 27L)\n        return 8192L;\n    if (p == 28L)\n        return 8192L;\n    if (p == 29L)\n        return 16384L;\n    if (p == 30L)\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "/tmp/tmp9esffpqb.d(87): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9esffpqb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        n = -n;\n    if (p < 0)\n        p = -p;\n    if (n == 0)\n        return 0;\n    if (p == 0)\n        return 1;\n    if (p == 1)\n        return n;\n    if (n == 1)\n        return p;\n    if (n == 2)\n        return p * p;\n    if (p == 2)\n        return n * n;\n    if (p == 3)\n        return n * n * n;\n    if (p == 4)\n        return n * n * n * n;\n    if (p == 5)\n        return n * n * n * n * n;\n    if (p == 6)\n        return n * n * n * n * n * n;\n    if (p == 7)\n        return n * n * n * n * n * n * n;\n    if (p == 8)\n        return n * n * n * n * n * n * n * n;\n    if (p == 9)\n        return n * n * n * n * n * n * n * n * n;\n    if (p == 10)\n        return n * n * n * n * n * n * n * n * n * n;\n    if (p == 11)\n        return n * n * n * n * n * n * n * n * n * n * n;\n    if (p == 12)\n        return n * n * n * n * n * n * n * n * n * n * n * n;\n    if (p == 13)\n        return n * n * n * n * n * n * n * n * n * n * n * n * n;\n    if (p == 14)\n        return n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n    if (p == 15)\n        return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n    if (p == 16)\n        return n * n * n * n * n * n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "/tmp/tmpupl6df96.d(63): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmpupl6df96.d(75): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpupl6df96.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (p == 0) return 0;\n    if (p == 1) return 1;\n    if (n == p) return 0;\n    if (n < 0) return modp(-n, p);\n    if (n < p) return modp(n, p);\n    if (n % p == 0) return 0;\n    if (p % 2 == 0) return modp(n, p / 2);\n    return modp(n, p - 1);\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293312,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(-n, p);\n    if (p == 0)\n        return 0;\n    if (p == 1)\n        return 1;\n    if (n == 0)\n        return 1;\n    if (n == 1)\n        return p;\n    if (n == p)\n        return 0;\n    if (n % p == 0)\n        return 0;\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6q6oilx2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmp6q6oilx2.__unittest_L35_C1() [0x427ad3]\n??:? void tmp6q6oilx2.__modtest() [0x427ba8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0)\n        r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx0d25uc1.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpx0d25uc1.__unittest_L24_C1() [0x427a6f]\n??:? void tmpx0d25uc1.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 4;\n    if (n == 5) return 5;\n    if (n == 6) return 6;\n    if (n == 7) return 7;\n    if (n == 8) return 8;\n    if (n == 9) return 9;\n    if (n == 10) return 10;\n    if (n == 11) return 11;\n    if (n == 12) return 12;\n    if (n == 13) return 13;\n    if (n == 14) return 14;\n    if (n == 15) return 15;\n    if (n == 16) return 16;\n    if (n == 17) return 17;\n    if (n == 18) return 18;\n    if (n == 19) return 19;\n    if (n == 20) return 20;\n    if (n == 21) return 21;\n    if (n == 22) return 22;\n    if (n == 23) return 23;\n    if (n == 24) return 24;\n    if (n == 25) return 25;\n    if (n == 26) return 26;\n    if (n == 27) return 27;\n    if (n == 28) return 28;\n    if (n == 29) return 29;\n    if (n == 30) return 30;\n    if (n == 31) return 31;\n    if (n == 32) return 32;\n    if (n == 33) return 33;\n    if (n == 34) return 34;\n    if (n == 35) return 35;\n    if (n == 36) return 36;\n    if (n == 37) return 37;\n    if (n == 38) return 38;\n    if (n == 39) return 39;\n    if (n == 40) return 40;\n    if (n == 41) return 41;\n    if (n == 42) return 42;\n    if (n == 43) return 43;\n    if (n == 44) return 44;\n    if (n == 45) return 45;\n    if (n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "/tmp/tmppb941kzo.d(66): Error: found `unittest` when expecting `)`\n/tmp/tmppb941kzo.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppb941kzo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0) return 1;\n    long r = n % p;\n    if (r == 0) return r;\n    return r + p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd58229ac.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpd58229ac.__unittest_L24_C1() [0x427a59]\n??:? void tmpd58229ac.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0)\n        return 1;\n    if (n == 0)\n        return 0;\n    if (n < 0)\n        return modp(p - n, p);\n    if (n >= p)\n        return modp(n % p, p);\n    return modp(n, p) * modp(p, n);\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293312,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0) return 1;\n    if (n == 0) return 0;\n    if (n < 0) return modp(-n, p);\n    if (n >= p) return (n % p);\n    long r = modp(n, p / 2);\n    r = (r * r) % p;\n    if (n & 1) r = (r * n) % p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7mzdqa6r.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmp7mzdqa6r.__unittest_L28_C1() [0x427aef]\n??:? void tmp7mzdqa6r.__modtest() [0x427bc4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 4;\n    if (n == 5) return 5;\n    if (n == 6) return 6;\n    if (n == 7) return 7;\n    if (n == 8) return 8;\n    if (n == 9) return 9;\n    if (n == 10) return 10;\n    if (n == 11) return 11;\n    if (n == 12) return 12;\n    if (n == 13) return 13;\n    if (n == 14) return 14;\n    if (n == 15) return 15;\n    if (n == 16) return 16;\n    if (n == 17) return 17;\n    if (n == 18) return 18;\n    if (n == 19) return 19;\n    if (n == 20) return 20;\n    if (n == 21) return 21;\n    if (n == 22) return 22;\n    if (n == 23) return 23;\n    if (n == 24) return 24;\n    if (n == 25) return 25;\n    if (n == 26) return 26;\n    if (n == 27) return 27;\n    if (n == 28) return 28;\n    if (n == 29) return 29;\n    if (n == 30) return 30;\n    if (n == 31) return 31;\n    if (n == 32) return 32;\n    if (n == 33) return 33;\n    if (n == 34) return 34;\n    if (n == 35) return 35;\n    if (n == 36) return 36;\n    if (n == 37) return 37;\n    if (n == 38) return 38;\n    if (n == 39) return 39;\n    if (n == 40) return 40;\n    if (n == 41) return 41;\n    if (n == 42) return 42;\n    if (n == 43) return 43;\n    if (n == 44) return 44;\n    if (n == 45) return 45;\n    if (n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "/tmp/tmppb941kzo.d(66): Error: found `unittest` when expecting `)`\n/tmp/tmppb941kzo.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppb941kzo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (n < 0) return modp(p - n, p);\n    if (p == 0) return 0;\n    if (p == 1) return 1;\n    if (p == 2) return 2;\n    if (p == 3) return 3;\n    if (p == 4) return 4;\n    if (p == 5) return 5;\n    if (p == 6) return 6;\n    if (p == 7) return 7;\n    if (p == 8) return 8;\n    if (p == 9) return 9;\n    if (p == 10) return 10;\n    if (p == 11) return 11;\n    if (p == 12) return 12;\n    if (p == 13) return 13;\n    if (p == 14) return 14;\n    if (p == 15) return 15;\n    if (p == 16) return 16;\n    if (p == 17) return 17;\n    if (p == 18) return 18;\n    if (p == 19) return 19;\n    if (p == 20) return 20;\n    if (p == 21) return 21;\n    if (p == 22) return 22;\n    if (p == 23) return 23;\n    if (p == 24) return 24;\n    if (p == 25) return 25;\n    if (p == 26) return 26;\n    if (p == 27) return 27;\n    if (p == 28) return 28;\n    if (p == 29) return 29;\n    if (p == 30) return 30;\n    if (p == 31) return 31;\n    if (p == 32) return 32;\n    if (p == 33) return 33;\n    if (p == 34) return 34;\n    if (p == 35) return 35;\n    if (p == 36) return 36;\n    if (p == 37) return 37;\n    if (p == 38) return 38;\n    if (p == 39) return 39;\n    if (p == 40) return 40;\n    if (p == 41) return 41;\n    if (p == 42) return 42;\n    if (p == 43) return\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "/tmp/tmpo51pj5nu.d(65): Error: expression expected, not `unittest`\n/tmp/tmpo51pj5nu.d(66): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo51pj5nu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (p == 0) return 0;\n    if (p == 1) return 1;\n    if (n == 1) return p;\n    if (n == 2) return (p * p) % p;\n    if (n == 3) return (p * p * p) % p;\n    if (n == 4) return (p * p * p * p) % p;\n    if (n == 5) return (p * p * p * p * p) % p;\n    if (n == 6) return (p * p * p * p * p * p) % p;\n    if (n == 7) return (p * p * p * p * p * p * p) % p;\n    if (n == 8) return (p * p * p * p * p * p * p * p) % p;\n    if (n == 9) return (p * p * p * p * p * p * p * p * p) % p;\n    if (n == 10) return (p * p * p * p * p * p * p * p * p * p) % p;\n    if (n == 11) return (p * p * p * p * p * p * p * p * p * p * p) % p;\n    if (n == 12) return (p * p * p * p * p * p * p * p * p * p * p * p) % p;\n    if (n == 13) return (p * p * p * p * p * p * p * p * p * p * p * p * p) % p;\n    if (n == 14) return (p * p * p * p * p * p * p * p * p * p * p * p * p * p) % p;\n    if (n == 15) return (p * p * p * p * p * p * p * p * p * p * p * p * p * p * p) % p;\n    if (n == 16) return (p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p) % p;\n    \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "/tmp/tmpxn91380m.d(39): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxn91380m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long ret = n % p;\n    if (ret < 0)\n        ret += p;\n    return ret;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm9_oq4i5.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpm9_oq4i5.__unittest_L24_C1() [0x427a6f]\n??:? void tmpm9_oq4i5.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0L)\n        return modp(n + p, p);\n    if (n >= p)\n        return n % p;\n    return n;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbrmb3hz.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpvbrmb3hz.__unittest_L25_C1() [0x427a7b]\n??:? void tmpvbrmb3hz.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    long r = n % p;\n    if (r == 0) return r;\n    return r + p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpak22b2tv.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpak22b2tv.__unittest_L24_C1() [0x427a61]\n??:? void tmpak22b2tv.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1) r = (r * p) % p;\n        n /= 2;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2thx8qms.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmp2thx8qms.__unittest_L27_C1() [0x427a91]\n??:? void tmp2thx8qms.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        n = -n;\n    if (p < 0)\n        p = -p;\n    if (n == 0)\n        return 0;\n    if (p == 0)\n        return 1;\n    if (n == 1)\n        return p;\n    if (p == 1)\n        return 0;\n    if (n == 2)\n        return p;\n    if (p == 2)\n        return 0;\n    if (n == 3)\n        return p;\n    if (p == 3)\n        return 0;\n    if (n == 4)\n        return p;\n    if (p == 4)\n        return 0;\n    if (n == 5)\n        return p;\n    if (p == 5)\n        return 0;\n    if (n == 6)\n        return p;\n    if (p == 6)\n        return 0;\n    if (n == 7)\n        return p;\n    if (p == 7)\n        return 0;\n    if (n == 8)\n        return p;\n    if (p == 8)\n        return 0;\n    if (n == 9)\n        return p;\n    if (p == 9)\n        return 0;\n    if (n == 10)\n        return p;\n    if (p == 10)\n        return 0;\n    if (n == 11)\n        return p;\n    if (p == 11)\n        return 0;\n    if (n == 12)\n        return p;\n    if (p == 12)\n        return 0;\n    if (n == 13)\n        return p;\n    if (p == 13)\n        return 0;\n    if (n == 14)\n        return p;\n    if (p == 14)\n        return 0;\n    if (n == 15)\n        return p;\n    if (p == 15)\n        return 0;\n    if (n == 16)\n        return p;\n    if (p == 16)\n        return 0;\n    if (n == 17)\n        return p;\n    if (p == 17)\n        return 0;\n    if (n == 18)\n        return p;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpmheum558.d(97): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmheum558.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        n = -n;\n    if (p < 0)\n        p = -p;\n    if (n == 0)\n        return 0;\n    if (p == 0)\n        return 1;\n    if (n == 1)\n        return p;\n    if (p == 1)\n        return 1;\n    if (p == 2)\n        return n % 2;\n    if (p == 3)\n        return n % 3;\n    if (p == 4)\n        return n % 4;\n    if (p == 5)\n        return n % 5;\n    if (p == 6)\n        return n % 6;\n    if (p == 7)\n        return n % 7;\n    if (p == 8)\n        return n % 8;\n    if (p == 9)\n        return n % 9;\n    if (p == 10)\n        return n % 10;\n    if (p == 11)\n        return n % 11;\n    if (p == 12)\n        return n % 12;\n    if (p == 13)\n        return n % 13;\n    if (p == 14)\n        return n % 14;\n    if (p == 15)\n        return n % 15;\n    if (p == 16)\n        return n % 16;\n    if (p == 17)\n        return n % 17;\n    if (p == 18)\n        return n % 18;\n    if (p == 19)\n        return n % 19;\n    if (p == 20)\n        return n % 20;\n    if (p == 21)\n        return n % 21;\n    if (p == 22)\n        return n % 22;\n    if (p == 23)\n        return n % 23;\n    if (p == 24)\n        return n % 24;\n    if (p == 25)\n        return n % 25;\n    if (p == 26)\n        return n % 26;\n    if (p == 27)\n        return n % 27;\n    if (p == 28)\n        return n % 28;\n    if (p == 29)\n        return n % 29;\n    if (p == 30)\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpxjq8yz1z.d(89): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjq8yz1z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0)\n        r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx0d25uc1.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpx0d25uc1.__unittest_L24_C1() [0x427a6f]\n??:? void tmpx0d25uc1.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        n = -n;\n    if (p < 0)\n        p = -p;\n    if (p == 0)\n        return 0;\n    if (n == 0)\n        return 1;\n    if (n == 1)\n        return p;\n    if (n == 2)\n        return p*p;\n    if (n == 3)\n        return p*p*p;\n    if (n == 4)\n        return p*p*p*p;\n    if (n == 5)\n        return p*p*p*p*p;\n    if (n == 6)\n        return p*p*p*p*p*p;\n    if (n == 7)\n        return p*p*p*p*p*p*p;\n    if (n == 8)\n        return p*p*p*p*p*p*p*p;\n    if (n == 9)\n        return p*p*p*p*p*p*p*p*p;\n    if (n == 10)\n        return p*p*p*p*p*p*p*p*p*p;\n    if (n == 11)\n        return p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 12)\n        return p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 13)\n        return p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 14)\n        return p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 15)\n        return p*p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 16)\n        return p*p*p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 17\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "/tmp/tmp06wcqq1x.d(60): Error: found `unittest` when expecting `)`\n/tmp/tmp06wcqq1x.d(72): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06wcqq1x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0)\n        return 1;\n    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1)\n            r = (r * p) % p;\n        n = n >> 1;\n        p = (p * p) % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "",
      "exit_code": -8,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (p == 0) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 4;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 9;\n    if (n == 10) return 2;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 15;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 21;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 25;\n    if (n == 26) return 2;\n    if (n == 27) return 27;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (n == 33) return 33;\n    if (n == 34) return 2;\n    if (n == 35) return 35;\n    if (n == 36) return 2;\n    if (n == 37) return 37;\n    if (n == 38) return 2;\n    if (n == 39) return 39;\n    if (n == 40) return 2;\n    if (n == 41) return 41;\n    if (n == 42) return 2;\n    if (n == 43) return 43;\n    if (n == 44) return 2;\n    if (n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp5b7sutkq.d(66): Error: found `unittest` when expecting `)`\n/tmp/tmp5b7sutkq.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5b7sutkq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            r = (r * p) % p;\n        }\n        n = n >> 1;\n        p = (p * p) % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "",
      "exit_code": -8,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0)\n        throw new std.exception(\"modp: p == 0\");\n    if (n == 0)\n        return 1;\n    long r = n % p;\n    if (r == 0)\n        return r;\n    return r + modp(p, r);\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp7boqm37z.d(20): Error: module `std.exception` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7boqm37z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0L) \n        n = -n;\n    if (p < 0L) \n        p = -p;\n    if (p == 0L) \n        return 0L;\n    if (n == 0L) \n        return 1L;\n    if (p == 1L) \n        return 0L;\n    if (p == 2L) \n        return 1L;\n    if (p == 3L) \n        return 2L;\n    if (p == 4L) \n        return 3L;\n    if (p == 5L) \n        return 4L;\n    if (p == 6L) \n        return 5L;\n    if (p == 7L) \n        return 6L;\n    if (p == 8L) \n        return 7L;\n    if (p == 9L) \n        return 8L;\n    if (p == 10L) \n        return 9L;\n    if (p == 11L) \n        return 10L;\n    if (p == 12L) \n        return 11L;\n    if (p == 13L) \n        return 12L;\n    if (p == 14L) \n        return 13L;\n    if (p == 15L) \n        return 14L;\n    if (p == 16L) \n        return 15L;\n    if (p == 17L) \n        return 16L;\n    if (p == 18L) \n        return 17L;\n    if (p == 19L) \n        return 18L;\n    if (p == 20L) \n        return 19L;\n    if (p == 21L) \n        return 20L;\n    if (p == 22L) \n        return 21L;\n    if (p == 23L) \n        return 22L;\n    if (p == 24L) \n        return 23L;\n    if (p == 25L) \n        return 24L;\n    if (p == 26L) \n        return 25L;\n    if (p == 27L) \n        return 26L;\n    if (p == 28L) \n        return\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp_20p80vr.d(83): Error: expression expected, not `unittest`\n/tmp/tmp_20p80vr.d(84): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_20p80vr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0L)\n        n = -n;\n    if (p < 0L)\n        p = -p;\n    if (n == 0L)\n        return 1L;\n    if (p == 0L)\n        return 0L;\n    if (p == 1L)\n        return 1L;\n    if (n == 1L)\n        return p;\n    if (n == 2L)\n        return (p * p) % p;\n    if (n == 3L)\n        return (p * p * p) % p;\n    if (n == 4L)\n        return (p * p * p * p) % p;\n    if (n == 5L)\n        return (p * p * p * p * p) % p;\n    if (n == 6L)\n        return (p * p * p * p * p * p) % p;\n    if (n == 7L)\n        return (p * p * p * p * p * p * p) % p;\n    if (n == 8L)\n        return (p * p * p * p * p * p * p * p) % p;\n    if (n == 9L)\n        return (p * p * p * p * p * p * p * p * p) % p;\n    if (n == 10L)\n        return (p * p * p * p * p * p * p * p * p * p) % p;\n    if (n == 11L)\n        return (p * p * p * p * p * p * p * p * p * p * p) % p;\n    if (n == 12L)\n        return (p * p * p * p * p * p * p * p * p * p * p * p) % p;\n    if (n == 13L)\n        return (p * p * p * p * p * p * p * p * p * p * p * p * p) % p;\n    if (n == 14L)\n        return (p * p * p * p * p * p * p * p * p * p * p * p * p * p) % p;\n    if (\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpnpux8h_2.d(58): Error: expression expected, not `unittest`\n/tmp/tmpnpux8h_2.d(59): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnpux8h_2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0) return 1;\n    if (n == 0) return 0;\n    if (n < 0) return modp(-n, p);\n    if (n == p) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 4;\n    if (n == 4) return 8;\n    if (n == 5) return 16;\n    if (n == 6) return 32;\n    if (n == 7) return 64;\n    if (n == 8) return 128;\n    if (n == 9) return 256;\n    if (n == 10) return 512;\n    if (n == 11) return 1024;\n    if (n == 12) return 2048;\n    if (n == 13) return 4096;\n    if (n == 14) return 8192;\n    if (n == 15) return 16384;\n    if (n == 16) return 32768;\n    if (n == 17) return 65536;\n    if (n == 18) return 131072;\n    if (n == 19) return 262144;\n    if (n == 20) return 524288;\n    if (n == 21) return 1048576;\n    if (n == 22) return 2097152;\n    if (n == 23) return 4194304;\n    if (n == 24) return 8388608;\n    if (n == 25) return 16777216;\n    if (n == 26) return 33554432;\n    if (n == 27) return 67108864;\n    if (n == 28) return 134217728;\n    if (n == 29) return 268435456;\n    if (n == 30) return 536870912;\n    if (n == 31) return 1073741824;\n    if (n == 32) return 2147483648L;\n    if (n == 33) return 4294967296L;\n    if (n == 34) return 8589934592L;\n    if (n == 35) return 17179869184L;\n    if (n == 36) return 34359738368L;\n    if (\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpth7ppwt8.d(60): Error: expression expected, not `unittest`\n/tmp/tmpth7ppwt8.d(61): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpth7ppwt8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(n, p) * p + p;\n    if (n == 0)\n        return 1;\n    if (p == 1)\n        return n;\n    if (p == 0)\n        return 0;\n    if (p == 2)\n        return (n & 1) == 0 ? 1 : 2;\n    if (p == 3)\n        return (n & 1) == 0 ? 1 : 3;\n    if (p == 4)\n        return (n & 1) == 0 ? 1 : 4;\n    if (p == 5)\n        return (n & 1) == 0 ? 1 : 5;\n    if (p == 6)\n        return (n & 1) == 0 ? 1 : 6;\n    if (p == 7)\n        return (n & 1) == 0 ? 1 : 7;\n    if (p == 8)\n        return (n & 1) == 0 ? 1 : 8;\n    if (p == 9)\n        return (n & 1) == 0 ? 1 : 9;\n    if (p == 10)\n        return (n & 1) == 0 ? 1 : 10;\n    if (p == 11)\n        return (n & 1) == 0 ? 1 : 11;\n    if (p == 12)\n        return (n & 1) == 0 ? 1 : 12;\n    if (p == 13)\n        return (n & 1) == 0 ? 1 : 13;\n    if (p == 14)\n        return (n & 1) == 0 ? 1 : 14;\n    if (p == 15)\n        return (n & 1) == 0 ? 1 : 15;\n    if (p == 16)\n        return (n & 1) == 0 ? 1 : 16;\n    if (p == 17)\n        return (n & 1) == 0 ? 1 : 17;\n    if (p == 18)\n        return (n & 1) == 0 ? 1 : 18;\n    if (p == 19)\n        return (n & 1) == 0 ? 1 : 19;\n    if (p == 20)\n        return (n & 1) == 0 ? 1 : 20;\n    if (p == 21)\n        return (\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpt6jou0m3.d(67): Error: expression expected, not `unittest`\n/tmp/tmpt6jou0m3.d(66): Error: found `{` when expecting `)`\n/tmp/tmpt6jou0m3.d(69): Error: found `alias` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6jou0m3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0) return 1;\n    if (n == 0) return 0;\n    if (n < 0) return modp(p - n, p);\n    if (n >= p) return modp(n % p, p);\n    return modp(n, p) * modp(p, n);\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293313,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        n = -n;\n    if (p < 0)\n        p = -p;\n    if (n == 0)\n        return 1;\n    if (p == 0)\n        return 0;\n    if (n == 1)\n        return p;\n    if (p == 1)\n        return 1;\n    if (n == p)\n        return 0;\n    if (n == 2)\n        return p;\n    if (p == 2)\n        return 2;\n    if (n == 3)\n        return p;\n    if (p == 3)\n        return 4;\n    if (n == 4)\n        return p;\n    if (p == 4)\n        return 8;\n    if (n == 5)\n        return p;\n    if (p == 5)\n        return 16;\n    if (n == 6)\n        return p;\n    if (p == 6)\n        return 32;\n    if (n == 7)\n        return p;\n    if (p == 7)\n        return 64;\n    if (n == 8)\n        return p;\n    if (p == 8)\n        return 128;\n    if (n == 9)\n        return p;\n    if (p == 9)\n        return 256;\n    if (n == 10)\n        return p;\n    if (p == 10)\n        return 512;\n    if (n == 11)\n        return p;\n    if (p == 11)\n        return 1024;\n    if (n == 12)\n        return p;\n    if (p == 12)\n        return 2048;\n    if (n == 13)\n        return p;\n    if (p == 13)\n        return 4096;\n    if (n == 14)\n        return p;\n    if (p == 14)\n        return 8192;\n    if (n == 15)\n        return p;\n    if (p == 15)\n        return 16384;\n    if (n == 16)\n        return p;\n    if (p == 16)\n        return 32768;\n    if (n == 17)\n        return p;\n    if (p == 17)\n        \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpg_hmnqgb.d(97): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg_hmnqgb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        n = -n;\n    if (p < 0)\n        p = -p;\n    if (n == 0)\n        return 1;\n    if (p == 0)\n        return 0;\n    if (p == 1)\n        return n;\n    if (n == 1)\n        return p;\n    if (n == 2)\n        return (p % 2 == 0) ? p : p + 1;\n    if (p == 2)\n        return (n % 2 == 0) ? 2 : 1;\n    if (p == 3)\n        return (n % 3 == 0) ? 3 : 4;\n    if (p == 4)\n        return (n % 4 == 0) ? 4 : 5;\n    if (p == 5)\n        return (n % 5 == 0) ? 5 : 6;\n    if (p == 6)\n        return (n % 6 == 0) ? 6 : 7;\n    if (p == 7)\n        return (n % 7 == 0) ? 7 : 8;\n    if (p == 8)\n        return (n % 8 == 0) ? 8 : 9;\n    if (p == 9)\n        return (n % 9 == 0) ? 9 : 10;\n    if (p == 10)\n        return (n % 10 == 0) ? 10 : 11;\n    if (p == 11)\n        return (n % 11 == 0) ? 11 : 12;\n    if (p == 12)\n        return (n % 12 == 0) ? 12 : 13;\n    if (p == 13)\n        return (n % 13 == 0) ? 13 : 14;\n    if (p == 14)\n        return (n % 14 == 0) ? 14 : 15;\n    if (p == 15)\n        return (n % 15 == 0) ? 15 : 16;\n    if (p == 16)\n        return (n % 16 == 0) ? 16 : 17;\n    if (p == 17)\n        return (n % 17 == 0) ? 17 : 18;\n    if (p == 18)\n        return (n % 18 == 0) ? 18 : 19;\n    if (p == 19)\n        return (n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp69437zxp.d(68): Error: found `unittest` when expecting `)`\n/tmp/tmp69437zxp.d(70): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp69437zxp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0L)\n        return modp(n + p, p);\n    if (n >= p)\n        return n % p;\n    return n;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbrmb3hz.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpvbrmb3hz.__unittest_L25_C1() [0x427a7b]\n??:? void tmpvbrmb3hz.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0)\n        r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx0d25uc1.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpx0d25uc1.__unittest_L24_C1() [0x427a6f]\n??:? void tmpx0d25uc1.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1) r = (r * p) % p;\n        n = n >> 1;\n        p = (p * p) % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "",
      "exit_code": -8,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return n % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqwuh1nw8.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmpqwuh1nw8.__unittest_L21_C1() [0x427a5f]\n??:? void tmpqwuh1nw8.__modtest() [0x427b34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (n < 0) return modp(-n, p);\n    if (p == 0) return 0;\n    if (p == 1) return 1;\n    if (p == 2) return n & 1;\n    if (p == 3) return (n * n) & 1;\n    if (p == 4) return (n * n * n) & 1;\n    if (p == 5) return (n * n * n * n) & 1;\n    if (p == 6) return (n * n * n * n * n) & 1;\n    if (p == 7) return (n * n * n * n * n * n) & 1;\n    if (p == 8) return (n * n * n * n * n * n * n) & 1;\n    if (p == 9) return (n * n * n * n * n * n * n * n) & 1;\n    if (p == 10) return (n * n * n * n * n * n * n * n * n) & 1;\n    if (p == 11) return (n * n * n * n * n * n * n * n * n * n) & 1;\n    if (p == 12) return (n * n * n * n * n * n * n * n * n * n * n) & 1;\n    if (p == 13) return (n * n * n * n * n * n * n * n * n * n * n * n) & 1;\n    if (p == 14) return (n * n * n * n * n * n * n * n * n * n * n * n * n) & 1;\n    if (p == 15) return (n * n * n * n * n * n * n * n * n * n * n * n * n * n) & 1;\n    if (p == 16) return (n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) & 1;\n    if (p == 17) return (n * n * n * n * n * n * n * n * n * n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmppax7as7z.d(38): Error: found `unittest` when expecting `)`\n/tmp/tmppax7as7z.d(40): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppax7as7z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0)\n        r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx0d25uc1.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpx0d25uc1.__unittest_L24_C1() [0x427a6f]\n??:? void tmpx0d25uc1.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0)\n        r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx0d25uc1.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpx0d25uc1.__unittest_L24_C1() [0x427a6f]\n??:? void tmpx0d25uc1.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1)\n            r = (r * p) % p;\n        n /= 2;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkdszjql6.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427dfd]\n??:? void tmpkdszjql6.__unittest_L27_C1() [0x427a81]\n??:? void tmpkdszjql6.__modtest() [0x427b7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]\n??:? runModuleUnitTests [0x42b8f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42824c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0)\n        return 1;\n    if (n == 0)\n        return 0;\n    long r = n % p;\n    if (r == 0)\n        return r;\n    return r + modp(p, r);\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6s638uvl.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmp6s638uvl.__unittest_L28_C1() [0x427a7d]\n??:? void tmp6s638uvl.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (p == 0) return 0;\n    if (n < 0) return modp(-n, p);\n    if (p < 0) return modp(n, -p);\n    if (n == 1) return p;\n    if (p == 1) return 0;\n    if (p == 2) return 1;\n    if (p == 3) return 2;\n    if (p == 4) return 3;\n    if (p == 5) return 4;\n    if (p == 6) return 5;\n    if (p == 7) return 6;\n    if (p == 8) return 7;\n    if (p == 9) return 8;\n    if (p == 10) return 9;\n    if (p == 11) return 10;\n    if (p == 12) return 11;\n    if (p == 13) return 12;\n    if (p == 14) return 13;\n    if (p == 15) return 14;\n    if (p == 16) return 15;\n    if (p == 17) return 16;\n    if (p == 18) return 17;\n    if (p == 19) return 18;\n    if (p == 20) return 19;\n    if (p == 21) return 20;\n    if (p == 22) return 21;\n    if (p == 23) return 22;\n    if (p == 24) return 23;\n    if (p == 25) return 24;\n    if (p == 26) return 25;\n    if (p == 27) return 26;\n    if (p == 28) return 27;\n    if (p == 29) return 28;\n    if (p == 30) return 29;\n    if (p == 31) return 30;\n    if (p == 32) return 31;\n    if (p == 33) return 32;\n    if (p == 34) return 33;\n    if (p == 35) return 34;\n    if (p == 36) return 35;\n    if (p == 37) return 36;\n    if (p == 38) return 37;\n    if (p == 39) return 38;\n    if (p == 40) return 39;\n    if (p\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpuduhlt5g.d(65): Error: found `unittest` when expecting `)`\n/tmp/tmpuduhlt5g.d(77): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuduhlt5g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 3;\n    if (n == 6) return 2;\n    if (n == 7) return 5;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 2;\n    if (n == 11) return 5;\n    if (n == 12) return 2;\n    if (n == 13) return 3;\n    if (n == 14) return 2;\n    if (n == 15) return 7;\n    if (n == 16) return 2;\n    if (n == 17) return 3;\n    if (n == 18) return 2;\n    if (n == 19) return 5;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 7;\n    if (n == 24) return 2;\n    if (n == 25) return 3;\n    if (n == 26) return 2;\n    if (n == 27) return 5;\n    if (n == 28) return 2;\n    if (n == 29) return 3;\n    if (n == 30) return 2;\n    if (n == 31) return 7;\n    if (n == 32) return 2;\n    if (n == 33) return 3;\n    if (n == 34) return 2;\n    if (n == 35) return 5;\n    if (n == 36) return 2;\n    if (n == 37) return 3;\n    if (n == 38) return 2;\n    if (n == 39) return 7;\n    if (n == 40) return 2;\n    if (n == 41) return 3;\n    if (n == 42) return 2;\n    if (n == 43) return 5;\n    if (n == 44) return 2;\n    if (n == 45) return 3;\n    if (n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp9zx32eio.d(66): Error: found `unittest` when expecting `)`\n/tmp/tmp9zx32eio.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9zx32eio.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (p == 0) return 0;\n    if (n == 1) return n;\n    if (n == 2) return (p % 2 == 0) ? 2 : 1;\n    if (n == 3) return (p % 3 == 0) ? 3 : 1;\n    if (n == 4) return (p % 4 == 0) ? 4 : 1;\n    if (n == 5) return (p % 5 == 0) ? 5 : 1;\n    if (n == 6) return (p % 6 == 0) ? 6 : 1;\n    if (n == 7) return (p % 7 == 0) ? 7 : 1;\n    if (n == 8) return (p % 8 == 0) ? 8 : 1;\n    if (n == 9) return (p % 9 == 0) ? 9 : 1;\n    if (n == 10) return (p % 10 == 0) ? 10 : 1;\n    if (n == 11) return (p % 11 == 0) ? 11 : 1;\n    if (n == 12) return (p % 12 == 0) ? 12 : 1;\n    if (n == 13) return (p % 13 == 0) ? 13 : 1;\n    if (n == 14) return (p % 14 == 0) ? 14 : 1;\n    if (n == 15) return (p % 15 == 0) ? 15 : 1;\n    if (n == 16) return (p % 16 == 0) ? 16 : 1;\n    if (n == 17) return (p % 17 == 0) ? 17 : 1;\n    if (n == 18) return (p % 18 == 0) ? 18 : 1;\n    if (n == 19) return (p % 19 == 0) ? 19 : 1;\n    if (n == 20) return (p % 20 == 0) ? 20 : 1;\n    if (n == 21) return (p % 21 == 0) ? 21 : 1;\n    if (n == 22) return (p % 22 == 0) ? 22 : 1;\n    if (n == 23) return (p % 23 == 0) ? 23 : 1;\n    if (n == 24) return (p % 24 == 0)\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpr9e0rg15.d(45): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmpr9e0rg15.d(57): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr9e0rg15.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(-n, p);\n    if (p == 0)\n        return 0;\n    if (p == 1)\n        return 1;\n    if (p == 2)\n        return 2;\n    if (p == 3)\n        return 3;\n    if (p == 4)\n        return 4;\n    if (p == 5)\n        return 5;\n    if (p == 6)\n        return 6;\n    if (p == 7)\n        return 7;\n    if (p == 8)\n        return 8;\n    if (p == 9)\n        return 9;\n    if (p == 10)\n        return 10;\n    if (p == 11)\n        return 11;\n    if (p == 12)\n        return 12;\n    if (p == 13)\n        return 13;\n    if (p == 14)\n        return 14;\n    if (p == 15)\n        return 15;\n    if (p == 16)\n        return 16;\n    if (p == 17)\n        return 17;\n    if (p == 18)\n        return 18;\n    if (p == 19)\n        return 19;\n    if (p == 20)\n        return 20;\n    if (p == 21)\n        return 21;\n    if (p == 22)\n        return 22;\n    if (p == 23)\n        return 23;\n    if (p == 24)\n        return 24;\n    if (p == 25)\n        return 25;\n    if (p == 26)\n        return 26;\n    if (p == 27)\n        return 27;\n    if (p == 28)\n        return 28;\n    if (p == 29)\n        return 29;\n    if (p == 30)\n        return 30;\n    if (p == 31)\n        return 31;\n    if (p == 32)\n        return 32;\n    if (p == 33)\n        return 33;\n    if (p == 34)\n        return 34;\n    if (p == 35)\n        return 35;\n    if (p == 36)\n        return 36;\n    if (p == 37)\n        return 37\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp68d_ug50.d(97): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmp68d_ug50.d(109): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp68d_ug50.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1)\n            r = (r * p) % p;\n        n /= 2;\n        p = (p * p) % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "",
      "exit_code": -8,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(-n, p);\n    if (p == 0)\n        return 0;\n    if (p == 1)\n        return 1;\n    if (n == 0)\n        return 1;\n    if (n == 1)\n        return p;\n    if (p == 2)\n        return n;\n    if (p == 3)\n        return (n * 2) % 3;\n    if (p == 4)\n        return (n * 2) % 4;\n    if (p == 5)\n        return (n * 2) % 5;\n    if (p == 6)\n        return (n * 2) % 6;\n    if (p == 7)\n        return (n * 2) % 7;\n    if (p == 8)\n        return (n * 2) % 8;\n    if (p == 9)\n        return (n * 2) % 9;\n    if (p == 10)\n        return (n * 2) % 10;\n    if (p == 11)\n        return (n * 2) % 11;\n    if (p == 12)\n        return (n * 2) % 12;\n    if (p == 13)\n        return (n * 2) % 13;\n    if (p == 14)\n        return (n * 2) % 14;\n    if (p == 15)\n        return (n * 2) % 15;\n    if (p == 16)\n        return (n * 2) % 16;\n    if (p == 17)\n        return (n * 2) % 17;\n    if (p == 18)\n        return (n * 2) % 18;\n    if (p == 19)\n        return (n * 2) % 19;\n    if (p == 20)\n        return (n * 2) % 20;\n    if (p == 21)\n        return (n * 2) % 21;\n    if (p == 22)\n        return (n * 2) % 22;\n    if (p == 23)\n        return (n * 2) % 23;\n    if (p == 24)\n        return (n * 2) % 24;\n    if (p == 25)\n        \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpatwmj0ra.d(77): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatwmj0ra.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(n + p, p);\n    if (n == 0)\n        return 1;\n    if (p == 0)\n        return 0;\n    if (p == 1)\n        return n;\n    if (p == 2)\n        return n & 1;\n    if (p == 3)\n        return (n * 2) & 3;\n    if (p == 4)\n        return (n * 2) & 7;\n    if (p == 5)\n        return (n * 2) & 15;\n    if (p == 6)\n        return (n * 2) & 31;\n    if (p == 7)\n        return (n * 2) & 63;\n    if (p == 8)\n        return (n * 2) & 127;\n    if (p == 9)\n        return (n * 2) & 255;\n    if (p == 10)\n        return (n * 2) & 511;\n    if (p == 11)\n        return (n * 2) & 1023;\n    if (p == 12)\n        return (n * 2) & 2047;\n    if (p == 13)\n        return (n * 2) & 4095;\n    if (p == 14)\n        return (n * 2) & 8191;\n    if (p == 15)\n        return (n * 2) & 16383;\n    if (p == 16)\n        return (n * 2) & 32767;\n    if (p == 17)\n        return (n * 2) & 65535;\n    if (p == 18)\n        return (n * 2) & 131071;\n    if (p == 19)\n        return (n * 2) & 262143;\n    if (p == 20)\n        return (n * 2) & 524287;\n    if (p == 21)\n        return (n * 2) & 1048575;\n    if (p == 22)\n        return (n * 2) & 2097151;\n    if (p == 23)\n        return (n * 2) & 4194303;\n    if (p == 24)\n        return (n * 2) & 8388\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpv707_e71.d(73): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmpv707_e71.d(85): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv707_e71.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (p == 0) return 0;\n    if (n < 0) return modp(-n, p);\n    if (p < 0) return modp(n, -p);\n    if (n == p) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 4;\n    if (n == 4) return 8;\n    if (n == 5) return 16;\n    if (n == 6) return 32;\n    if (n == 7) return 64;\n    if (n == 8) return 128;\n    if (n == 9) return 256;\n    if (n == 10) return 512;\n    if (n == 11) return 1024;\n    if (n == 12) return 2048;\n    if (n == 13) return 4096;\n    if (n == 14) return 8192;\n    if (n == 15) return 16384;\n    if (n == 16) return 32768;\n    if (n == 17) return 65536;\n    if (n == 18) return 131072;\n    if (n == 19) return 262144;\n    if (n == 20) return 524288;\n    if (n == 21) return 1048576;\n    if (n == 22) return 2097152;\n    if (n == 23) return 4194304;\n    if (n == 24) return 8388608;\n    if (n == 25) return 16777216;\n    if (n == 26) return 33554432;\n    if (n == 27) return 67108864;\n    if (n == 28) return 134217728;\n    if (n == 29) return 268435456;\n    if (n == 30) return 536870912;\n    if (n == 31) return 1073741824;\n    if (n == 32) return 2147483648L;\n    if (n == 33) return 4294967296L;\n    if (n == 34) return 8589934592L;\n    if (n == 35) return 17179869184L;\n    if\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp80u9645c.d(60): Error: found `unittest` when expecting `(`\n/tmp/tmp80u9645c.d(72): Error: found `void` when expecting `)`\n/tmp/tmp80u9645c.d(72): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80u9645c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(n, p) * p + p;\n    if (n == 0)\n        return 1;\n    if (p == 0)\n        return 0;\n    if (p == 1)\n        return n;\n    long r = modp(n, p / 2);\n    r = r * r % p;\n    if (p % 2 == 0)\n        return r;\n    else\n        return r * p + p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgzed7uvn.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpgzed7uvn.__unittest_L34_C1() [0x427ac1]\n??:? void tmpgzed7uvn.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0) \n        return modp(-n, p);\n    if (n == 0) \n        return 0;\n    if (p == 0) \n        return 1;\n    if (p == 1) \n        return n;\n    if (p == 2) \n        return (n & 1) == 0 ? 0 : 1;\n    if (p == 3) \n        return (n & 1) == 0 ? 1 : 2;\n    if (p == 4) \n        return (n & 3) == 0 ? 0 : 1;\n    if (p == 5) \n        return (n & 1) == 0 ? 1 : 2;\n    if (p == 6) \n        return (n & 3) == 0 ? 1 : 2;\n    if (p == 7) \n        return (n & 7) == 0 ? 0 : 1;\n    if (p == 8) \n        return (n & 1) == 0 ? 0 : 1;\n    if (p == 9) \n        return (n & 1) == 0 ? 1 : 2;\n    if (p == 10) \n        return (n & 3) == 0 ? 1 : 2;\n    if (p == 11) \n        return (n & 7) == 0 ? 1 : 2;\n    if (p == 12) \n        return (n & 3) == 0 ? 1 : 2;\n    if (p == 13) \n        return (n & 7) == 0 ? 1 : 2;\n    if (p == 14) \n        return (n & 7) == 0 ? 0 : 1;\n    if (p == 15) \n        return (n & 15) == 0 ? 0 : 1;\n    if (p == 16) \n        return (n & 1) == 0 ? 0 : 1;\n    if (p == 17) \n        return (n & 1) == 0 ? 1 : 2;\n    if (p == 18) \n        return (n & 3) == 0 ? 1 : 2;\n    if (p == 19) \n        return (n & 7) == 0 ? 1 : 2;\n    if (p == 20) \n        return (n & 15) ==\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpr_kwk9eg.d(65): Error: expression expected, not `unittest`\n/tmp/tmpr_kwk9eg.d(66): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr_kwk9eg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (p == 0) return 0;\n    if (n == 1) return 1;\n    if (p == 1) return 0;\n    if (n == p) return 0;\n    if (n < 0) return modp(-n, p);\n    if (p < 0) return modp(n, -p);\n    if (n < p) return modp(n, p);\n    if (n % p == 0) return 0;\n    if (p % n == 0) return 0;\n    if (n % p == 0) return 0;\n    if (p % n == 0) return 0;\n    if (n % p == 0) return 0;\n    if (p % n == 0) return 0;\n    if (n % p == 0) return 0;\n    if (p % n == 0) return 0;\n    if (n % p == 0) return 0;\n    if (p % n == 0) return 0;\n    if (n % p == 0) return 0;\n    if (p % n == 0) return 0;\n    if (n % p == 0) return 0;\n    if (p % n == 0) return 0;\n    if (n % p == 0) return 0;\n    if (p % n == 0) return 0;\n    if (n % p == 0) return 0;\n    if (p % n == 0) return 0;\n    if (n % p == 0) return 0;\n    if (p % n == 0) return 0;\n    if (n % p == 0) return 0;\n    if (p % n == 0) return 0;\n    if (n % p == 0) return 0;\n    if (p % n == 0) return 0;\n    if (n % p == 0) return 0;\n    if (p % n == 0) return 0;\n    if (n % p == 0) return 0;\n    if (p % n == 0) return 0;\n    if (n % p == 0) return 0;\n    if (p % n == 0) return 0;\n    if (n % p == 0) return 0;\n    if (\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp373u5uu5.d(59): Error: expression expected, not `unittest`\n/tmp/tmp373u5uu5.d(60): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp373u5uu5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1)\n            r = (r * p) % p;\n        n /= 2;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkdszjql6.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427dfd]\n??:? void tmpkdszjql6.__unittest_L27_C1() [0x427a81]\n??:? void tmpkdszjql6.__modtest() [0x427b7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]\n??:? runModuleUnitTests [0x42b8f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42824c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = 1;\n    while (n > 0) {\n        if (n & 1) {\n            r = (r * p) % p;\n        }\n        n >>= 1;\n        p = (p * p) % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "",
      "exit_code": -8,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1)\n            r = (r * p) % p;\n        n /= 2;\n        p = (p * p) % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "",
      "exit_code": -8,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0)\n        return 1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return p;\n    if (n == -1)\n        return p - 1;\n    if (n < 0)\n        n = -n;\n    if (n < p)\n        return n;\n    return n % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyfb__zvt.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpyfb__zvt.__unittest_L33_C1() [0x427abb]\n??:? void tmpyfb__zvt.__modtest() [0x427b90]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (p == 0) return 0;\n    if (p == 1) return 1;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 4;\n    if (n == 4) return 8;\n    if (n == 5) return 16;\n    if (n == 6) return 32;\n    if (n == 7) return 64;\n    if (n == 8) return 128;\n    if (n == 9) return 256;\n    if (n == 10) return 512;\n    if (n == 11) return 1024;\n    if (n == 12) return 2048;\n    if (n == 13) return 4096;\n    if (n == 14) return 8192;\n    if (n == 15) return 16384;\n    if (n == 16) return 32768;\n    if (n == 17) return 65536;\n    if (n == 18) return 131072;\n    if (n == 19) return 262144;\n    if (n == 20) return 524288;\n    if (n == 21) return 1048576;\n    if (n == 22) return 2097152;\n    if (n == 23) return 4194304;\n    if (n == 24) return 8388608;\n    if (n == 25) return 16777216;\n    if (n == 26) return 33554432;\n    if (n == 27) return 67108864;\n    if (n == 28) return 134217728;\n    if (n == 29) return 268435456;\n    if (n == 30) return 536870912;\n    if (n == 31) return 1073741824;\n    if (n == 32) return 2147483648L;\n    if (n == 33) return 4294967296L;\n    if (n == 34) return 8589934592L;\n    if (n == 35) return 17179869184L;\n    if (n == 36) return 34359738368L;\n    if (n == 37) return 68719476736L;\n    if\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp6eaa59he.d(60): Error: found `unittest` when expecting `(`\n/tmp/tmp6eaa59he.d(72): Error: found `void` when expecting `)`\n/tmp/tmp6eaa59he.d(72): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6eaa59he.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0) return 1;\n    if (n == 0) return 0;\n    if (n < 0) return modp(p - n, p);\n    if (n >= p) return modp(n % p, p);\n    return modp(n, p) * modp(p, n);\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293313,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (p == 0) return 0;\n    if (n < 0) return modp(-n, p);\n    if (p < 0) return modp(n, -p);\n    if (n == p) return 0;\n    if (n == 1) return p;\n    if (n == 2) return p*p;\n    if (n == 3) return p*p*p;\n    if (n == 4) return p*p*p*p;\n    if (n == 5) return p*p*p*p*p;\n    if (n == 6) return p*p*p*p*p*p;\n    if (n == 7) return p*p*p*p*p*p*p;\n    if (n == 8) return p*p*p*p*p*p*p*p;\n    if (n == 9) return p*p*p*p*p*p*p*p*p;\n    if (n == 10) return p*p*p*p*p*p*p*p*p*p;\n    if (n == 11) return p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 12) return p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 13) return p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 14) return p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 15) return p*p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 16) return p*p*p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 17) return p*p*p*p*p*p*p*p*p*p*\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpxjgpbx7m.d(41): Error: expression expected, not `unittest`\n/tmp/tmpxjgpbx7m.d(42): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjgpbx7m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        n = -n;\n    if (p < 0)\n        p = -p;\n    if (n == 0)\n        return 0;\n    if (p == 0)\n        return 1;\n    if (n == 1)\n        return p;\n    if (p == 1)\n        return 0;\n    if (p == 2)\n        return 1;\n    if (p == 3)\n        return 2;\n    if (p == 4)\n        return 3;\n    if (p == 5)\n        return 4;\n    if (p == 6)\n        return 5;\n    if (p == 7)\n        return 6;\n    if (p == 8)\n        return 7;\n    if (p == 9)\n        return 8;\n    if (p == 10)\n        return 9;\n    if (p == 11)\n        return 10;\n    if (p == 12)\n        return 11;\n    if (p == 13)\n        return 12;\n    if (p == 14)\n        return 13;\n    if (p == 15)\n        return 14;\n    if (p == 16)\n        return 15;\n    if (p == 17)\n        return 16;\n    if (p == 18)\n        return 17;\n    if (p == 19)\n        return 18;\n    if (p == 20)\n        return 19;\n    if (p == 21)\n        return 20;\n    if (p == 22)\n        return 21;\n    if (p == 23)\n        return 22;\n    if (p == 24)\n        return 23;\n    if (p == 25)\n        return 24;\n    if (p == 26)\n        return 25;\n    if (p == 27)\n        return 26;\n    if (p == 28)\n        return 27;\n    if (p == 29)\n        return 28;\n    if (p == 30)\n        return 29;\n    if (p == 31)\n        return 30;\n    if (p == 32)\n        return 31;\n    if (p == 33)\n        return 32;\n    if (p == 34)\n        return 33;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpbin0wfug.d(97): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbin0wfug.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (p == 0) return 0;\n    if (p == 1) return 1;\n    if (p == 2) return 2;\n    if (p == 3) return 3;\n    if (p == 4) return 4;\n    if (p == 5) return 5;\n    if (p == 6) return 6;\n    if (p == 7) return 7;\n    if (p == 8) return 8;\n    if (p == 9) return 9;\n    if (p == 10) return 10;\n    if (p == 11) return 11;\n    if (p == 12) return 12;\n    if (p == 13) return 13;\n    if (p == 14) return 14;\n    if (p == 15) return 15;\n    if (p == 16) return 16;\n    if (p == 17) return 17;\n    if (p == 18) return 18;\n    if (p == 19) return 19;\n    if (p == 20) return 20;\n    if (p == 21) return 21;\n    if (p == 22) return 22;\n    if (p == 23) return 23;\n    if (p == 24) return 24;\n    if (p == 25) return 25;\n    if (p == 26) return 26;\n    if (p == 27) return 27;\n    if (p == 28) return 28;\n    if (p == 29) return 29;\n    if (p == 30) return 30;\n    if (p == 31) return 31;\n    if (p == 32) return 32;\n    if (p == 33) return 33;\n    if (p == 34) return 34;\n    if (p == 35) return 35;\n    if (p == 36) return 36;\n    if (p == 37) return 37;\n    if (p == 38) return 38;\n    if (p == 39) return 39;\n    if (p == 40) return 40;\n    if (p == 41) return 41;\n    if (p == 42) return 42;\n    if (p == 43) return 43;\n    if (p == 44) return 44;\n    if (p\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp0w_1pl3x.d(66): Error: found `unittest` when expecting `)`\n/tmp/tmp0w_1pl3x.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0w_1pl3x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long m = n % p;\n    if (m < 0) m += p;\n    return m;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp53lwpwsd.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmp53lwpwsd.__unittest_L23_C1() [0x427a6f]\n??:? void tmp53lwpwsd.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            r = (r * p) % p;\n        }\n        n = n >> 1;\n        p = (p * p) % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "",
      "exit_code": -8,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r == 0)\n        return r;\n    return r + p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7m1p0k8b.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmp7m1p0k8b.__unittest_L24_C1() [0x427a4d]\n??:? void tmp7m1p0k8b.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(n, p) * p + p;\n    if (n == 0)\n        return 1;\n    if (n == 1)\n        return 0;\n    if (n == p)\n        return 1;\n    if (p == 0)\n        return 0;\n    if (p == 1)\n        return 1;\n    if (p == 2)\n        return 2;\n    if (p == 3)\n        return 3;\n    if (p == 4)\n        return 4;\n    if (p == 5)\n        return 5;\n    if (p == 6)\n        return 6;\n    if (p == 7)\n        return 7;\n    if (p == 8)\n        return 8;\n    if (p == 9)\n        return 9;\n    if (p == 10)\n        return 10;\n    if (p == 11)\n        return 11;\n    if (p == 12)\n        return 12;\n    if (p == 13)\n        return 13;\n    if (p == 14)\n        return 14;\n    if (p == 15)\n        return 15;\n    if (p == 16)\n        return 16;\n    if (p == 17)\n        return 17;\n    if (p == 18)\n        return 18;\n    if (p == 19)\n        return 19;\n    if (p == 20)\n        return 20;\n    if (p == 21)\n        return 21;\n    if (p == 22)\n        return 22;\n    if (p == 23)\n        return 23;\n    if (p == 24)\n        return 24;\n    if (p == 25)\n        return 25;\n    if (p == 26)\n        return 26;\n    if (p == 27)\n        return 27;\n    if (p == 28)\n        return 28;\n    if (p == 29)\n        return 29;\n    if (p == 30)\n        return 30;\n    if (p == 31)\n        return 31;\n    if (p == 32)\n        return 32;\n    if (p == 33)\n        return 33;\n    if (p == 34\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpybyl56tx.d(96): Error: found `unittest` when expecting `)`\n/tmp/tmpybyl56tx.d(108): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpybyl56tx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 4;\n    if (n == 5) return 5;\n    if (n == 6) return 6;\n    if (n == 7) return 7;\n    if (n == 8) return 8;\n    if (n == 9) return 9;\n    if (n == 10) return 10;\n    if (n == 11) return 11;\n    if (n == 12) return 12;\n    if (n == 13) return 13;\n    if (n == 14) return 14;\n    if (n == 15) return 15;\n    if (n == 16) return 16;\n    if (n == 17) return 17;\n    if (n == 18) return 18;\n    if (n == 19) return 19;\n    if (n == 20) return 20;\n    if (n == 21) return 21;\n    if (n == 22) return 22;\n    if (n == 23) return 23;\n    if (n == 24) return 24;\n    if (n == 25) return 25;\n    if (n == 26) return 26;\n    if (n == 27) return 27;\n    if (n == 28) return 28;\n    if (n == 29) return 29;\n    if (n == 30) return 30;\n    if (n == 31) return 31;\n    if (n == 32) return 32;\n    if (n == 33) return 33;\n    if (n == 34) return 34;\n    if (n == 35) return 35;\n    if (n == 36) return 36;\n    if (n == 37) return 37;\n    if (n == 38) return 38;\n    if (n == 39) return 39;\n    if (n == 40) return 40;\n    if (n == 41) return 41;\n    if (n == 42) return 42;\n    if (n == 43) return 43;\n    if (n == 44) return 44;\n    if (n == 45) return 45;\n    if (n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "/tmp/tmppb941kzo.d(66): Error: found `unittest` when expecting `)`\n/tmp/tmppb941kzo.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppb941kzo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0) return 1;\n    if (n == 0) return 0;\n    if (n < 0) return modp(p-n, p);\n    if (n >= p) return modp(n % p, p);\n    return modp(n, p) * modp(p, n);\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293313,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(n + p, p);\n    if (n == 0)\n        return 0;\n    if (n == p)\n        return 1;\n    if (p == 0)\n        return 0;\n    if (p == 1)\n        return 1;\n    if (p == 2)\n        return 2;\n    if (p == 3)\n        return 3;\n    if (p == 4)\n        return 4;\n    if (p == 5)\n        return 5;\n    if (p == 6)\n        return 6;\n    if (p == 7)\n        return 7;\n    if (p == 8)\n        return 8;\n    if (p == 9)\n        return 9;\n    if (p == 10)\n        return 10;\n    if (p == 11)\n        return 11;\n    if (p == 12)\n        return 12;\n    if (p == 13)\n        return 13;\n    if (p == 14)\n        return 14;\n    if (p == 15)\n        return 15;\n    if (p == 16)\n        return 16;\n    if (p == 17)\n        return 17;\n    if (p == 18)\n        return 18;\n    if (p == 19)\n        return 19;\n    if (p == 20)\n        return 20;\n    if (p == 21)\n        return 21;\n    if (p == 22)\n        return 22;\n    if (p == 23)\n        return 23;\n    if (p == 24)\n        return 24;\n    if (p == 25)\n        return 25;\n    if (p == 26)\n        return 26;\n    if (p == 27)\n        return 27;\n    if (p == 28)\n        return 28;\n    if (p == 29)\n        return 29;\n    if (p == 30)\n        return 30;\n    if (p == 31)\n        return 31;\n    if (p == 32)\n        return 32;\n    if (p == 33)\n        return 33;\n    if (p == 34)\n        return 34;\n    if (p == 35)\n        \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp_urq3mi7.d(97): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_urq3mi7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (n < 0) n = -n;\n    if (p < 0) p = -p;\n    if (n == 1) return p;\n    if (p == 1) return 0;\n    if (p == 2) return 1;\n    if (p == 3) return 2;\n    if (p == 4) return 3;\n    if (p == 5) return 4;\n    if (p == 6) return 5;\n    if (p == 7) return 6;\n    if (p == 8) return 7;\n    if (p == 9) return 8;\n    if (p == 10) return 9;\n    if (p == 11) return 10;\n    if (p == 12) return 11;\n    if (p == 13) return 12;\n    if (p == 14) return 13;\n    if (p == 15) return 14;\n    if (p == 16) return 15;\n    if (p == 17) return 16;\n    if (p == 18) return 17;\n    if (p == 19) return 18;\n    if (p == 20) return 19;\n    if (p == 21) return 20;\n    if (p == 22) return 21;\n    if (p == 23) return 22;\n    if (p == 24) return 23;\n    if (p == 25) return 24;\n    if (p == 26) return 25;\n    if (p == 27) return 26;\n    if (p == 28) return 27;\n    if (p == 29) return 28;\n    if (p == 30) return 29;\n    if (p == 31) return 30;\n    if (p == 32) return 31;\n    if (p == 33) return 32;\n    if (p == 34) return 33;\n    if (p == 35) return 34;\n    if (p == 36) return 35;\n    if (p == 37) return 36;\n    if (p == 38) return 37;\n    if (p == 39) return 38;\n    if (p == 40) return 39;\n    if (p == 41) return 40;\n    if (p == 42) return 41;\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpvbon0hxz.d(66): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvbon0hxz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0L)\n        n = n % p;\n    if (n < 0L)\n        n += p;\n    return n;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3jq56dpj.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp3jq56dpj.__unittest_L25_C1() [0x427a7b]\n??:? void tmp3jq56dpj.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (p == 0) return 0;\n    if (n < 0) return modp(-n, p);\n    if (p < 0) return modp(n, -p);\n    if (n == 1) return p;\n    if (n == 2) return p*p;\n    if (n == 3) return p*p*p;\n    if (n == 4) return p*p*p*p;\n    if (n == 5) return p*p*p*p*p;\n    if (n == 6) return p*p*p*p*p*p;\n    if (n == 7) return p*p*p*p*p*p*p;\n    if (n == 8) return p*p*p*p*p*p*p*p;\n    if (n == 9) return p*p*p*p*p*p*p*p*p;\n    if (n == 10) return p*p*p*p*p*p*p*p*p*p;\n    if (n == 11) return p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 12) return p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 13) return p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 14) return p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 15) return p*p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 16) return p*p*p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 17) return p*p*p*p*p*p*p*p*p*p*p*p*p*p*p*p\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp1g11vj3e.d(40): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmp1g11vj3e.d(52): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1g11vj3e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            r = (r * p) % p;\n        }\n        n = n / 2;\n        p = (p * p) % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "",
      "exit_code": -8,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        n = -n;\n    if (p < 0)\n        p = -p;\n    if (n == 0)\n        return 0;\n    if (p == 0)\n        return 1;\n    if (p == 1)\n        return n;\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return p;\n    if (p == 2)\n        return n;\n    if (p == 3)\n        return 2;\n    if (n == 3)\n        return 2;\n    if (p == 4)\n        return 3;\n    if (n == 4)\n        return 3;\n    if (p == 5)\n        return 4;\n    if (n == 5)\n        return 4;\n    if (p == 6)\n        return 5;\n    if (n == 6)\n        return 5;\n    if (p == 7)\n        return 6;\n    if (n == 7)\n        return 6;\n    if (p == 8)\n        return 7;\n    if (n == 8)\n        return 7;\n    if (p == 9)\n        return 8;\n    if (n == 9)\n        return 8;\n    if (p == 10)\n        return 9;\n    if (n == 10)\n        return 9;\n    if (p == 11)\n        return 10;\n    if (n == 11)\n        return 10;\n    if (p == 12)\n        return 11;\n    if (n == 12)\n        return 11;\n    if (p == 13)\n        return 12;\n    if (n == 13)\n        return 12;\n    if (p == 14)\n        return 13;\n    if (n == 14)\n        return 13;\n    if (p == 15)\n        return 14;\n    if (n == 15)\n        return 14;\n    if (p == 16)\n        return 15;\n    if (n == 16)\n        return 15;\n    if (p == 17)\n        return 16;\n    if (n == 17)\n        return 16;\n    if (p == 18)\n        return 17;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmprt9p2gs4.d(97): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprt9p2gs4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(-n, p);\n    if (p == 0)\n        return 0;\n    if (p == 1)\n        return 1;\n    if (p == 2)\n        return 2;\n    if (p == 3)\n        return 3;\n    if (p == 4)\n        return 4;\n    if (p == 5)\n        return 5;\n    if (p == 6)\n        return 6;\n    if (p == 7)\n        return 7;\n    if (p == 8)\n        return 8;\n    if (p == 9)\n        return 9;\n    if (p == 10)\n        return 10;\n    if (p == 11)\n        return 11;\n    if (p == 12)\n        return 12;\n    if (p == 13)\n        return 13;\n    if (p == 14)\n        return 14;\n    if (p == 15)\n        return 15;\n    if (p == 16)\n        return 16;\n    if (p == 17)\n        return 17;\n    if (p == 18)\n        return 18;\n    if (p == 19)\n        return 19;\n    if (p == 20)\n        return 20;\n    if (p == 21)\n        return 21;\n    if (p == 22)\n        return 22;\n    if (p == 23)\n        return 23;\n    if (p == 24)\n        return 24;\n    if (p == 25)\n        return 25;\n    if (p == 26)\n        return 26;\n    if (p == 27)\n        return 27;\n    if (p == 28)\n        return 28;\n    if (p == 29)\n        return 29;\n    if (p == 30)\n        return 30;\n    if (p == 31)\n        return 31;\n    if (p == 32)\n        return 32;\n    if (p == 33)\n        return 33;\n    if (p == 34)\n        return 34;\n    if (p == 35)\n        return 35;\n    if (p == 36)\n        return 36;\n    if (p == 37)\n        return 37\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp68d_ug50.d(97): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmp68d_ug50.d(109): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp68d_ug50.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (p == 0) return 0;\n    if (p == 1) return 1;\n    if (p == 2) return 2;\n    if (p == 3) return 3;\n    if (p == 4) return 4;\n    if (p == 5) return 5;\n    if (p == 6) return 6;\n    if (p == 7) return 7;\n    if (p == 8) return 8;\n    if (p == 9) return 9;\n    if (p == 10) return 10;\n    if (p == 11) return 11;\n    if (p == 12) return 12;\n    if (p == 13) return 13;\n    if (p == 14) return 14;\n    if (p == 15) return 15;\n    if (p == 16) return 16;\n    if (p == 17) return 17;\n    if (p == 18) return 18;\n    if (p == 19) return 19;\n    if (p == 20) return 20;\n    if (p == 21) return 21;\n    if (p == 22) return 22;\n    if (p == 23) return 23;\n    if (p == 24) return 24;\n    if (p == 25) return 25;\n    if (p == 26) return 26;\n    if (p == 27) return 27;\n    if (p == 28) return 28;\n    if (p == 29) return 29;\n    if (p == 30) return 30;\n    if (p == 31) return 31;\n    if (p == 32) return 32;\n    if (p == 33) return 33;\n    if (p == 34) return 34;\n    if (p == 35) return 35;\n    if (p == 36) return 36;\n    if (p == 37) return 37;\n    if (p == 38) return 38;\n    if (p == 39) return 39;\n    if (p == 40) return 40;\n    if (p == 41) return 41;\n    if (p == 42) return 42;\n    if (p == 43) return 43;\n    if (p == 44) return 44;\n    if (p\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp0w_1pl3x.d(66): Error: found `unittest` when expecting `)`\n/tmp/tmp0w_1pl3x.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0w_1pl3x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0)\n        return 1;\n    if (n == 0)\n        return 0;\n    if (n < 0)\n        return modp(-n, p);\n    if (n == 1)\n        return p;\n    if (n == 2)\n        return p * p;\n    if (n % 2 == 0)\n        return modp(n / 2, p) * modp(n / 2, p);\n    return modp(n - 1, p) * p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp14kfpaq5.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp14kfpaq5.__unittest_L33_C1() [0x427ae9]\n??:? void tmp14kfpaq5.__modtest() [0x427be4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = 1L;\n    while (n > 0) {\n        if (n % 2 == 1)\n            r = (r * p) % p;\n        n /= 2;\n        p = (p * p) % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "",
      "exit_code": -8,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0) return 1;\n    if (n == 0) return 0;\n    if (n < 0) return modp(-n, p);\n    if (p < 0) return modp(n, -p);\n    if (n < p) return modp(n, p);\n    if (n % p == 0) return 0;\n    if (n % p == 1) return p;\n    long q = n / p;\n    long r = n % p;\n    return modp(q, p) * (p + r);\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293313,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        n = -n;\n    if (p < 0)\n        p = -p;\n    if (n == 0)\n        return 0;\n    if (p == 0)\n        return 1;\n    if (n == 1)\n        return p;\n    if (p == 1)\n        return 1;\n    if (n == 2)\n        return p;\n    if (p == 2)\n        return 2;\n    if (n == 3)\n        return p;\n    if (p == 3)\n        return 3;\n    if (n == 4)\n        return p;\n    if (p == 4)\n        return 4;\n    if (n == 5)\n        return p;\n    if (p == 5)\n        return 5;\n    if (n == 6)\n        return p;\n    if (p == 6)\n        return 6;\n    if (n == 7)\n        return p;\n    if (p == 7)\n        return 7;\n    if (n == 8)\n        return p;\n    if (p == 8)\n        return 8;\n    if (n == 9)\n        return p;\n    if (p == 9)\n        return 9;\n    if (n == 10)\n        return p;\n    if (p == 10)\n        return 10;\n    if (n == 11)\n        return p;\n    if (p == 11)\n        return 11;\n    if (n == 12)\n        return p;\n    if (p == 12)\n        return 12;\n    if (n == 13)\n        return p;\n    if (p == 13)\n        return 13;\n    if (n == 14)\n        return p;\n    if (p == 14)\n        return 14;\n    if (n == 15)\n        return p;\n    if (p == 15)\n        return 15;\n    if (n == 16)\n        return p;\n    if (p == 16)\n        return 16;\n    if (n == 17)\n        return p;\n    if (p == 17)\n        return 17;\n    if (n == 18)\n        return p;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmphyuytj41.d(97): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphyuytj41.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(-n, p);\n    if (p == 0)\n        return 0;\n    if (p == 1)\n        return 1;\n    if (p == 2)\n        return n & 1;\n    if (p == 3)\n        return (n * 2) & 3;\n    if (p == 4)\n        return (n * 2) & 3;\n    if (p == 5)\n        return (n * 2) & 3;\n    if (p == 6)\n        return (n * 2) & 3;\n    if (p == 7)\n        return (n * 2) & 3;\n    if (p == 8)\n        return (n * 2) & 3;\n    if (p == 9)\n        return (n * 2) & 3;\n    if (p == 10)\n        return (n * 2) & 3;\n    if (p == 11)\n        return (n * 2) & 3;\n    if (p == 12)\n        return (n * 2) & 3;\n    if (p == 13)\n        return (n * 2) & 3;\n    if (p == 14)\n        return (n * 2) & 3;\n    if (p == 15)\n        return (n * 2) & 3;\n    if (p == 16)\n        return (n * 2) & 3;\n    if (p == 17)\n        return (n * 2) & 3;\n    if (p == 18)\n        return (n * 2) & 3;\n    if (p == 19)\n        return (n * 2) & 3;\n    if (p == 20)\n        return (n * 2) & 3;\n    if (p == 21)\n        return (n * 2) & 3;\n    if (p == 22)\n        return (n * 2) & 3;\n    if (p == 23)\n        return (n * 2) & 3;\n    if (p == 24)\n        return (n * 2) & 3;\n    if (p == 25)\n        return (n * 2) & 3;\n    if (p == 26)\n        return (n * 2\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpwottvwtx.d(74): Error: found `unittest` when expecting `)`\n/tmp/tmpwottvwtx.d(76): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwottvwtx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        n = -n;\n    if (p < 0)\n        p = -p;\n    if (n == 0)\n        return 0;\n    if (p == 0)\n        return 1;\n    if (n == 1)\n        return p;\n    if (p == 1)\n        return 1;\n    if (n == p)\n        return 0;\n    if (n == 2)\n        return p;\n    if (p == 2)\n        return 2;\n    if (n == 3)\n        return p;\n    if (p == 3)\n        return 3;\n    if (n == 4)\n        return p;\n    if (p == 4)\n        return 4;\n    if (n == 5)\n        return p;\n    if (p == 5)\n        return 5;\n    if (n == 6)\n        return p;\n    if (p == 6)\n        return 6;\n    if (n == 7)\n        return p;\n    if (p == 7)\n        return 7;\n    if (n == 8)\n        return p;\n    if (p == 8)\n        return 8;\n    if (n == 9)\n        return p;\n    if (p == 9)\n        return 9;\n    if (n == 10)\n        return p;\n    if (p == 10)\n        return 10;\n    if (n == 11)\n        return p;\n    if (p == 11)\n        return 11;\n    if (n == 12)\n        return p;\n    if (p == 12)\n        return 12;\n    if (n == 13)\n        return p;\n    if (p == 13)\n        return 13;\n    if (n == 14)\n        return p;\n    if (p == 14)\n        return 14;\n    if (n == 15)\n        return p;\n    if (p == 15)\n        return 15;\n    if (n == 16)\n        return p;\n    if (p == 16)\n        return 16;\n    if (n == 17)\n        return p;\n    if (p == 17)\n        return 17;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp13m73gle.d(97): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp13m73gle.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (p == 0) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 4;\n    if (n == 5) return 5;\n    if (n == 6) return 6;\n    if (n == 7) return 7;\n    if (n == 8) return 8;\n    if (n == 9) return 9;\n    if (n == 10) return 10;\n    if (n == 11) return 11;\n    if (n == 12) return 12;\n    if (n == 13) return 13;\n    if (n == 14) return 14;\n    if (n == 15) return 15;\n    if (n == 16) return 16;\n    if (n == 17) return 17;\n    if (n == 18) return 18;\n    if (n == 19) return 19;\n    if (n == 20) return 20;\n    if (n == 21) return 21;\n    if (n == 22) return 22;\n    if (n == 23) return 23;\n    if (n == 24) return 24;\n    if (n == 25) return 25;\n    if (n == 26) return 26;\n    if (n == 27) return 27;\n    if (n == 28) return 28;\n    if (n == 29) return 29;\n    if (n == 30) return 30;\n    if (n == 31) return 31;\n    if (n == 32) return 32;\n    if (n == 33) return 33;\n    if (n == 34) return 34;\n    if (n == 35) return 35;\n    if (n == 36) return 36;\n    if (n == 37) return 37;\n    if (n == 38) return 38;\n    if (n == 39) return 39;\n    if (n == 40) return 40;\n    if (n == 41) return 41;\n    if (n == 42) return 42;\n    if (n == 43) return 43;\n    if (n == 44) return 44;\n    if (n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpssbc71mx.d(66): Error: found `unittest` when expecting `)`\n/tmp/tmpssbc71mx.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpssbc71mx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0L)\n        n = -n;\n    if (p < 0L)\n        p = -p;\n    if (n == 0L)\n        return 0L;\n    if (p == 0L)\n        return 1L;\n    if (p == 1L)\n        return 0L;\n    if (n == 1L)\n        return p;\n    if (n == 2L)\n        return p * p;\n    if (n == 3L)\n        return p * p * p;\n    if (n == 4L)\n        return p * p * p * p;\n    if (n == 5L)\n        return p * p * p * p * p;\n    if (n == 6L)\n        return p * p * p * p * p * p;\n    if (n == 7L)\n        return p * p * p * p * p * p * p;\n    if (n == 8L)\n        return p * p * p * p * p * p * p * p;\n    if (n == 9L)\n        return p * p * p * p * p * p * p * p * p;\n    if (n == 10L)\n        return p * p * p * p * p * p * p * p * p * p;\n    if (n == 11L)\n        return p * p * p * p * p * p * p * p * p * p * p;\n    if (n == 12L)\n        return p * p * p * p * p * p * p * p * p * p * p * p;\n    if (n == 13L)\n        return p * p * p * p * p * p * p * p * p * p * p * p * p;\n    if (n == 14L)\n        return p * p * p * p * p * p * p * p * p * p * p * p * p * p;\n    if (n == 15L)\n        return p * p * p * p * p * p * p * p * p * p * p * p * p * p * p;\n    if (n == 16L)\n        return p *\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp_q7_vfzd.d(61): Error: expression expected, not `unittest`\n/tmp/tmp_q7_vfzd.d(62): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_q7_vfzd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (p == 0) return 0;\n    if (n == 1) return p;\n    if (p == 1) return 1;\n    if (p == 2) return n % 2;\n    if (p == 3) return (n % 3) + 1;\n    if (p == 4) return (n % 4) + 2;\n    if (p == 5) return (n % 5) + 3;\n    if (p == 6) return (n % 6) + 4;\n    if (p == 7) return (n % 7) + 5;\n    if (p == 8) return (n % 8) + 6;\n    if (p == 9) return (n % 9) + 7;\n    if (p == 10) return (n % 10) + 8;\n    if (p == 11) return (n % 11) + 9;\n    if (p == 12) return (n % 12) + 10;\n    if (p == 13) return (n % 13) + 11;\n    if (p == 14) return (n % 14) + 12;\n    if (p == 15) return (n % 15) + 13;\n    if (p == 16) return (n % 16) + 14;\n    if (p == 17) return (n % 17) + 15;\n    if (p == 18) return (n % 18) + 16;\n    if (p == 19) return (n % 19) + 17;\n    if (p == 20) return (n % 20) + 18;\n    if (p == 21) return (n % 21) + 19;\n    if (p == 22) return (n % 22) + 20;\n    if (p == 23) return (n % 23) + 21;\n    if (p == 24) return (n % 24) + 22;\n    if (p == 25) return (n % 25) + 23;\n    if (p == 26) return (n % 26) + 24;\n    if (p == 27) return (n % 27) + 25;\n    if (p == 28) return (n % 28) + 26;\n    if (p == 29) return (n %\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp64sxtdsp.d(51): Error: expression expected, not `unittest`\n/tmp/tmp64sxtdsp.d(50): Error: found `{` when expecting `)`\n/tmp/tmp64sxtdsp.d(53): Error: found `alias` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp64sxtdsp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(-n, p);\n    if (p == 0)\n        return 0;\n    if (p == 1)\n        return 1;\n    if (p == 2)\n        return n & 1;\n    if (p == 3)\n        return (n * 2) & 3;\n    if (p == 4)\n        return (n * 2) & 7;\n    if (p == 5)\n        return (n * 2) & 15;\n    if (p == 6)\n        return (n * 2) & 31;\n    if (p == 7)\n        return (n * 2) & 63;\n    if (p == 8)\n        return (n * 2) & 127;\n    if (p == 9)\n        return (n * 2) & 255;\n    if (p == 10)\n        return (n * 2) & 511;\n    if (p == 11)\n        return (n * 2) & 1023;\n    if (p == 12)\n        return (n * 2) & 2047;\n    if (p == 13)\n        return (n * 2) & 4095;\n    if (p == 14)\n        return (n * 2) & 8191;\n    if (p == 15)\n        return (n * 2) & 16383;\n    if (p == 16)\n        return (n * 2) & 32767;\n    if (p == 17)\n        return (n * 2) & 65535;\n    if (p == 18)\n        return (n * 2) & 131071;\n    if (p == 19)\n        return (n * 2) & 262143;\n    if (p == 20)\n        return (n * 2) & 524287;\n    if (p == 21)\n        return (n * 2) & 1048575;\n    if (p == 22)\n        return (n * 2) & 2097151;\n    if (p == 23)\n        return (n * 2) & 4194303;\n    if (p == 24)\n        return (n * 2) & 8388607;\n    if (p == 25)\n        return (n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp88i4p4rd.d(72): Error: found `unittest` when expecting `)`\n/tmp/tmp88i4p4rd.d(74): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp88i4p4rd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0)\n        return 1;\n    else\n        return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3r3fopsm.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmp3r3fopsm.__unittest_L24_C1() [0x427a7f]\n??:? void tmp3r3fopsm.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0L)\n        n = -n;\n    if (p < 0L)\n        p = -p;\n    if (n == 0L)\n        return 1L;\n    if (p == 0L)\n        return 0L;\n    if (p == 1L)\n        return 1L;\n    if (p == 2L)\n        return 2L;\n    if (p == 3L)\n        return 2L;\n    if (p == 4L)\n        return 2L;\n    if (p == 5L)\n        return 4L;\n    if (p == 6L)\n        return 4L;\n    if (p == 7L)\n        return 4L;\n    if (p == 8L)\n        return 4L;\n    if (p == 9L)\n        return 8L;\n    if (p == 10L)\n        return 8L;\n    if (p == 11L)\n        return 8L;\n    if (p == 12L)\n        return 8L;\n    if (p == 13L)\n        return 8L;\n    if (p == 14L)\n        return 8L;\n    if (p == 15L)\n        return 8L;\n    if (p == 16L)\n        return 8L;\n    if (p == 17L)\n        return 16L;\n    if (p == 18L)\n        return 16L;\n    if (p == 19L)\n        return 16L;\n    if (p == 20L)\n        return 16L;\n    if (p == 21L)\n        return 16L;\n    if (p == 22L)\n        return 16L;\n    if (p == 23L)\n        return 16L;\n    if (p == 24L)\n        return 16L;\n    if (p == 25L)\n        return 16L;\n    if (p == 26L)\n        return 16L;\n    if (p == 27L)\n        return 16L;\n    if (p == 28L)\n        return 16L;\n    if (p == 29L)\n        return 16L;\n    if (p == 30L)\n        return 16L\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpgam9eofe.d(87): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmpgam9eofe.d(99): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgam9eofe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0)\n        r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx0d25uc1.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpx0d25uc1.__unittest_L24_C1() [0x427a6f]\n??:? void tmpx0d25uc1.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0) return 1;\n    if (n == 0) return 0;\n    if (n == 1) return p;\n    if (n == 2) return p*p;\n    if (n == 3) return p*p*p;\n    if (n == 4) return p*p*p*p;\n    if (n == 5) return p*p*p*p*p;\n    if (n == 6) return p*p*p*p*p*p;\n    if (n == 7) return p*p*p*p*p*p*p;\n    if (n == 8) return p*p*p*p*p*p*p*p;\n    if (n == 9) return p*p*p*p*p*p*p*p*p;\n    if (n == 10) return p*p*p*p*p*p*p*p*p*p;\n    if (n == 11) return p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 12) return p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 13) return p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 14) return p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 15) return p*p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 16) return p*p*p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 17) return p*p*p*p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 18) return p*p*p*p*p*p*p*p*p*p*p\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmprd2ff4u_.d(39): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmprd2ff4u_.d(51): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprd2ff4u_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0) \n        n = -n;\n    if (p < 0) \n        p = -p;\n    if (n == 0) \n        return 0;\n    if (p == 0) \n        return 1;\n    if (p == 1) \n        return n;\n    if (n == 1) \n        return p;\n    if (n == 2) \n        return p;\n    if (p == 2) \n        return n;\n    if (p == 3) \n        return n;\n    if (n == 3) \n        return p;\n    if (p == 4) \n        return n;\n    if (n == 4) \n        return p;\n    if (p == 5) \n        return n;\n    if (n == 5) \n        return p;\n    if (p == 6) \n        return n;\n    if (n == 6) \n        return p;\n    if (p == 7) \n        return n;\n    if (n == 7) \n        return p;\n    if (p == 8) \n        return n;\n    if (n == 8) \n        return p;\n    if (p == 9) \n        return n;\n    if (n == 9) \n        return p;\n    if (p == 10) \n        return n;\n    if (n == 10) \n        return p;\n    if (p == 11) \n        return n;\n    if (n == 11) \n        return p;\n    if (p == 12) \n        return n;\n    if (n == 12) \n        return p;\n    if (p == 13) \n        return n;\n    if (n == 13) \n        return p;\n    if (p == 14) \n        return n;\n    if (n == 14) \n        return p;\n    if (p == 15) \n        return n;\n    if (n == 15) \n        return p;\n    if (p == 16) \n        return n;\n    if (n == 16) \n        return p;\n    if\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmphr5ge231.d(92): Error: found `unittest` when expecting `(`\n/tmp/tmphr5ge231.d(104): Error: found `void` when expecting `)`\n/tmp/tmphr5ge231.d(104): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphr5ge231.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1)\n            r = (r * p) % p;\n        n /= 2;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkdszjql6.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427dfd]\n??:? void tmpkdszjql6.__unittest_L27_C1() [0x427a81]\n??:? void tmpkdszjql6.__modtest() [0x427b7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]\n??:? runModuleUnitTests [0x42b8f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42824c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0) return 1;\n    if (n == 0) return 0;\n    if (n < 0) return modp(-n, p);\n    if (p < 0) return modp(n, -p);\n    if (n == 1) return p;\n    if (n == 2) return p*p;\n    if (n == 3) return p*p*p;\n    if (n == 4) return p*p*p*p;\n    if (n == 5) return p*p*p*p*p;\n    if (n == 6) return p*p*p*p*p*p;\n    if (n == 7) return p*p*p*p*p*p*p;\n    if (n == 8) return p*p*p*p*p*p*p*p;\n    if (n == 9) return p*p*p*p*p*p*p*p*p;\n    if (n == 10) return p*p*p*p*p*p*p*p*p*p;\n    if (n == 11) return p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 12) return p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 13) return p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 14) return p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 15) return p*p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 16) return p*p*p*p*p*p*p*p*p*p*p*p*p*p*p*p;\n    if (n == 17) return p*p*p*p*p*p*p*p*p*p*p*p*p*p*p*p\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpl2hv0yl8.d(40): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmpl2hv0yl8.d(52): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2hv0yl8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(n, p) * p + p;\n    return n % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpre24ias2.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpre24ias2.__unittest_L23_C1() [0x427a73]\n??:? void tmpre24ias2.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(-n, p);\n    if (n == 0)\n        return 1;\n    if (p == 0)\n        throw new ArithmeticException(\"modp: p == 0\");\n    if (p == 1)\n        return 0;\n    if (p == 2)\n        return n % 2;\n    if (p == 3)\n        return (n % 3) + 1;\n    if (p == 4)\n        return (n % 4) + 2;\n    if (p == 5)\n        return (n % 5) + 3;\n    if (p == 6)\n        return (n % 6) + 4;\n    if (p == 7)\n        return (n % 7) + 5;\n    if (p == 8)\n        return (n % 8) + 6;\n    if (p == 9)\n        return (n % 9) + 7;\n    if (p == 10)\n        return (n % 10) + 8;\n    if (p == 11)\n        return (n % 11) + 9;\n    if (p == 12)\n        return (n % 12) + 10;\n    if (p == 13)\n        return (n % 13) + 11;\n    if (p == 14)\n        return (n % 14) + 12;\n    if (p == 15)\n        return (n % 15) + 13;\n    if (p == 16)\n        return (n % 16) + 14;\n    if (p == 17)\n        return (n % 17) + 15;\n    if (p == 18)\n        return (n % 18) + 16;\n    if (p == 19)\n        return (n % 19) + 17;\n    if (p == 20)\n        return (n % 20) + 18;\n    if (p == 21)\n        return (n % 21) + 19;\n    if (p == 22)\n        return (n % 22) + 20;\n    if (p == 23)\n        return (n % 23) + 21;\n    if (p == 24)\n        return (n % 24) + 22;\n    if (p == 25)\n        return\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmprhyhs3zl.d(75): Error: expression expected, not `unittest`\n/tmp/tmprhyhs3zl.d(76): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprhyhs3zl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(-n, p);\n    if (p == 0)\n        return 0;\n    if (p == 1)\n        return 1;\n    if (n == 0)\n        return 1;\n    if (n == 1)\n        return p;\n    if (p == 2)\n        return n & 1;\n    if (p == 3)\n        return (n * 2) & 1;\n    if (p == 4)\n        return (n * 3) & 1;\n    if (p == 5)\n        return (n * 4) & 1;\n    if (p == 6)\n        return (n * 5) & 1;\n    if (p == 7)\n        return (n * 6) & 1;\n    if (p == 8)\n        return (n * 7) & 1;\n    if (p == 9)\n        return (n * 8) & 1;\n    if (p == 10)\n        return (n * 9) & 1;\n    if (p == 11)\n        return (n * 10) & 1;\n    if (p == 12)\n        return (n * 11) & 1;\n    if (p == 13)\n        return (n * 12) & 1;\n    if (p == 14)\n        return (n * 13) & 1;\n    if (p == 15)\n        return (n * 14) & 1;\n    if (p == 16)\n        return (n * 15) & 1;\n    if (p == 17)\n        return (n * 16) & 1;\n    if (p == 18)\n        return (n * 17) & 1;\n    if (p == 19)\n        return (n * 18) & 1;\n    if (p == 20)\n        return (n * 19) & 1;\n    if (p == 21)\n        return (n * 20) & 1;\n    if (p == 22)\n        return (n * 21) & 1;\n    if (p == 23)\n        return (n * 22) & 1;\n    if (p == 24)\n        return (n * 23) & 1;\n    if (p == 25)\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp_sg441e5.d(76): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_sg441e5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (p == 0) return 0;\n    if (n == 1) return n;\n    if (p == 1) return 1;\n    if (p == 2) return n;\n    if (p == 3) return 2*n;\n    if (p == 4) return 2*n;\n    if (p == 5) return 4*n;\n    if (p == 6) return 4*n;\n    if (p == 7) return 8*n;\n    if (p == 8) return 8*n;\n    if (p == 9) return 16*n;\n    if (p == 10) return 16*n;\n    if (p == 11) return 32*n;\n    if (p == 12) return 32*n;\n    if (p == 13) return 64*n;\n    if (p == 14) return 64*n;\n    if (p == 15) return 128*n;\n    if (p == 16) return 128*n;\n    if (p == 17) return 256*n;\n    if (p == 18) return 256*n;\n    if (p == 19) return 512*n;\n    if (p == 20) return 512*n;\n    if (p == 21) return 1024*n;\n    if (p == 22) return 1024*n;\n    if (p == 23) return 2048*n;\n    if (p == 24) return 2048*n;\n    if (p == 25) return 4096*n;\n    if (p == 26) return 4096*n;\n    if (p == 27) return 8192*n;\n    if (p == 28) return 8192*n;\n    if (p == 29) return 16384*n;\n    if (p == 30) return 16384*n;\n    if (p == 31) return 32768*n;\n    if (p == 32) return 32768*n;\n    if (p == 33) return 65536*n;\n    if (p == 34) return 65536*n;\n    if (p == 35) return 131072*n;\n    if (p == 36) return 131072*n;\n    \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpbav84cir.d(59): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbav84cir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        n = -n;\n    if (p < 0)\n        p = -p;\n    if (n == 0)\n        return 1;\n    if (p == 0)\n        return 0;\n    if (p == 1)\n        return 1;\n    if (n == 1)\n        return p;\n    if (n == 2)\n        return p * p;\n    if (n == 3)\n        return p * p * p;\n    if (n == 4)\n        return p * p * p * p;\n    if (n == 5)\n        return p * p * p * p * p;\n    if (n == 6)\n        return p * p * p * p * p * p;\n    if (n == 7)\n        return p * p * p * p * p * p * p;\n    if (n == 8)\n        return p * p * p * p * p * p * p * p;\n    if (n == 9)\n        return p * p * p * p * p * p * p * p * p;\n    if (n == 10)\n        return p * p * p * p * p * p * p * p * p * p;\n    if (n == 11)\n        return p * p * p * p * p * p * p * p * p * p * p;\n    if (n == 12)\n        return p * p * p * p * p * p * p * p * p * p * p * p;\n    if (n == 13)\n        return p * p * p * p * p * p * p * p * p * p * p * p * p;\n    if (n == 14)\n        return p * p * p * p * p * p * p * p * p * p * p * p * p * p;\n    if (n == 15)\n        return p * p * p * p * p * p * p * p * p * p * p * p * p * p * p;\n    if (n == 16)\n        return p * p * p * p * p * p * p * p * p * p * p * p * p *\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp08i_an80.d(61): Error: expression expected, not `unittest`\n/tmp/tmp08i_an80.d(62): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp08i_an80.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0L)\n        n = -n;\n    if (p < 0L)\n        p = -p;\n    if (n >= p)\n        return n % p;\n    return n;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpicx0zbzo.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpicx0zbzo.__unittest_L27_C1() [0x427a8b]\n??:? void tmpicx0zbzo.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0)\n        return 1;\n    if (n == 0)\n        return 0;\n    if (n < 0)\n        n = -n;\n    if (p < 0)\n        p = -p;\n    if (n == 1)\n        return p;\n    if (n == 2)\n        return p*p;\n    if (n % 2 == 0)\n        return modp(n/2, p)*modp(n/2, p);\n    else\n        return modp(n/2, p)*modp(n/2, p)*p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2uv4z1_b.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmp2uv4z1_b.__unittest_L36_C1() [0x427b1d]\n??:? void tmp2uv4z1_b.__modtest() [0x427c18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(n, p) * p + p;\n    if (n == 0)\n        return 1;\n    return modp(n, p) * modp(n, p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293313,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 1;\n    if (n == 6) return 4;\n    if (n == 7) return 3;\n    if (n == 8) return 2;\n    if (n == 9) return 5;\n    if (n == 10) return 2;\n    if (n == 11) return 1;\n    if (n == 12) return 4;\n    if (n == 13) return 3;\n    if (n == 14) return 2;\n    if (n == 15) return 5;\n    if (n == 16) return 2;\n    if (n == 17) return 1;\n    if (n == 18) return 4;\n    if (n == 19) return 3;\n    if (n == 20) return 2;\n    if (n == 21) return 5;\n    if (n == 22) return 2;\n    if (n == 23) return 1;\n    if (n == 24) return 4;\n    if (n == 25) return 3;\n    if (n == 26) return 2;\n    if (n == 27) return 5;\n    if (n == 28) return 2;\n    if (n == 29) return 1;\n    if (n == 30) return 4;\n    if (n == 31) return 3;\n    if (n == 32) return 2;\n    if (n == 33) return 5;\n    if (n == 34) return 2;\n    if (n == 35) return 1;\n    if (n == 36) return 4;\n    if (n == 37) return 3;\n    if (n == 38) return 2;\n    if (n == 39) return 5;\n    if (n == 40) return 2;\n    if (n == 41) return 1;\n    if (n == 42) return 4;\n    if (n == 43) return 3;\n    if (n == 44) return 2;\n    if (n == 45) return 5;\n    if (n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpp7yx6pd6.d(66): Error: found `unittest` when expecting `)`\n/tmp/tmpp7yx6pd6.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp7yx6pd6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (p == 0) return 1;\n    if (n == 0) return 0;\n    if (n == 1) return p;\n    if (n == -1) return p - 1;\n    if (n < 0) return modp(-n, p);\n    if (n > p) return modp(n % p, p);\n    long ret = 1;\n    while (n > 0) {\n        if (n % 2 == 1) ret = (ret * p) % p;\n        n /= 2;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe0xifb2_.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpe0xifb2_.__unittest_L32_C1() [0x427af5]\n??:? void tmpe0xifb2_.__modtest() [0x427bf0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1)\n            r = (r * p) % p;\n        n /= 2;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkdszjql6.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427dfd]\n??:? void tmpkdszjql6.__unittest_L27_C1() [0x427a81]\n??:? void tmpkdszjql6.__modtest() [0x427b7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]\n??:? runModuleUnitTests [0x42b8f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42824c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0L)\n        return modp(n + p, p);\n    if (n >= p)\n        return n % p;\n    return n;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbrmb3hz.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpvbrmb3hz.__unittest_L25_C1() [0x427a7b]\n??:? void tmpvbrmb3hz.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long r = n % p;\n    if (r < 0) r += p;\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppyh_nsmn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmppyh_nsmn.__unittest_L23_C1() [0x427a6f]\n??:? void tmppyh_nsmn.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (n < 0) return modp(-n, p);\n    if (p == 0) return 0;\n    if (p == 1) return 1;\n    if (p == 2) return n % 2;\n    if (p == 3) return (n % 3) + 1;\n    if (p == 4) return (n % 4) + 2;\n    if (p == 5) return (n % 5) + 3;\n    if (p == 6) return (n % 6) + 4;\n    if (p == 7) return (n % 7) + 5;\n    if (p == 8) return (n % 8) + 6;\n    if (p == 9) return (n % 9) + 7;\n    if (p == 10) return (n % 10) + 8;\n    if (p == 11) return (n % 11) + 9;\n    if (p == 12) return (n % 12) + 10;\n    if (p == 13) return (n % 13) + 11;\n    if (p == 14) return (n % 14) + 12;\n    if (p == 15) return (n % 15) + 13;\n    if (p == 16) return (n % 16) + 14;\n    if (p == 17) return (n % 17) + 15;\n    if (p == 18) return (n % 18) + 16;\n    if (p == 19) return (n % 19) + 17;\n    if (p == 20) return (n % 20) + 18;\n    if (p == 21) return (n % 21) + 19;\n    if (p == 22) return (n % 22) + 20;\n    if (p == 23) return (n % 23) + 21;\n    if (p == 24) return (n % 24) + 22;\n    if (p == 25) return (n % 25) + 23;\n    if (p == 26) return (n % 26) + 24;\n    if (p == 27) return (n % 27) + 25;\n    if (p == 28) return (n % 28) + 26;\n    if (p == 29\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpzr5l8oo_.d(51): Error: found `unittest` when expecting `)`\n/tmp/tmpzr5l8oo_.d(63): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzr5l8oo_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(-n, p);\n    if (p == 0)\n        return 0;\n    if (p == 1)\n        return 1;\n    if (p == 2)\n        return n % 2;\n    if (p == 3)\n        return n % 3;\n    if (p == 4)\n        return n % 4;\n    if (p == 5)\n        return n % 5;\n    if (p == 6)\n        return n % 6;\n    if (p == 7)\n        return n % 7;\n    if (p == 8)\n        return n % 8;\n    if (p == 9)\n        return n % 9;\n    if (p == 10)\n        return n % 10;\n    if (p == 11)\n        return n % 11;\n    if (p == 12)\n        return n % 12;\n    if (p == 13)\n        return n % 13;\n    if (p == 14)\n        return n % 14;\n    if (p == 15)\n        return n % 15;\n    if (p == 16)\n        return n % 16;\n    if (p == 17)\n        return n % 17;\n    if (p == 18)\n        return n % 18;\n    if (p == 19)\n        return n % 19;\n    if (p == 20)\n        return n % 20;\n    if (p == 21)\n        return n % 21;\n    if (p == 22)\n        return n % 22;\n    if (p == 23)\n        return n % 23;\n    if (p == 24)\n        return n % 24;\n    if (p == 25)\n        return n % 25;\n    if (p == 26)\n        return n % 26;\n    if (p == 27)\n        return n % 27;\n    if (p == 28)\n        return n % 28;\n    if (p == 29)\n        return n % 29;\n    if (p == 30)\n        return n % 30;\n    if (p == 31)\n        return n % 31;\n    if (p == 32)\n        return n % 32;\n    \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpii7pmk62.d(88): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpii7pmk62.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 5;\n    if (n == 5) return 8;\n    if (n == 6) return 9;\n    if (n == 7) return 11;\n    if (n == 8) return 14;\n    if (n == 9) return 17;\n    if (n == 10) return 19;\n    if (n == 11) return 23;\n    if (n == 12) return 26;\n    if (n == 13) return 28;\n    if (n == 14) return 31;\n    if (n == 15) return 35;\n    if (n == 16) return 37;\n    if (n == 17) return 40;\n    if (n == 18) return 43;\n    if (n == 19) return 47;\n    if (n == 20) return 51;\n    if (n == 21) return 55;\n    if (n == 22) return 58;\n    if (n == 23) return 62;\n    if (n == 24) return 65;\n    if (n == 25) return 69;\n    if (n == 26) return 73;\n    if (n == 27) return 77;\n    if (n == 28) return 81;\n    if (n == 29) return 85;\n    if (n == 30) return 89;\n    if (n == 31) return 93;\n    if (n == 32) return 97;\n    if (n == 33) return 101;\n    if (n == 34) return 105;\n    if (n == 35) return 109;\n    if (n == 36) return 113;\n    if (n == 37) return 117;\n    if (n == 38) return 121;\n    if (n == 39) return 125;\n    if (n == 40) return 128;\n    if (n == 41) return 132;\n    if (n == 42) return 136;\n    if (n == 43) return 140;\n    if (n == 44) return 144;\n    if (n == 45) return 148;\n    if (n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpay_usujq.d(66): Error: found `unittest` when expecting `)`\n/tmp/tmpay_usujq.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpay_usujq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        n = -n;\n    if (p < 0)\n        p = -p;\n    if (n == 0)\n        return 1;\n    if (p == 0)\n        return 0;\n    if (p == 1)\n        return 1;\n    if (p == 2)\n        return 2;\n    if (p == 3)\n        return 3;\n    if (p == 4)\n        return 4;\n    if (p == 5)\n        return 5;\n    if (p == 6)\n        return 6;\n    if (p == 7)\n        return 7;\n    if (p == 8)\n        return 8;\n    if (p == 9)\n        return 9;\n    if (p == 10)\n        return 10;\n    if (p == 11)\n        return 11;\n    if (p == 12)\n        return 12;\n    if (p == 13)\n        return 13;\n    if (p == 14)\n        return 14;\n    if (p == 15)\n        return 15;\n    if (p == 16)\n        return 16;\n    if (p == 17)\n        return 17;\n    if (p == 18)\n        return 18;\n    if (p == 19)\n        return 19;\n    if (p == 20)\n        return 20;\n    if (p == 21)\n        return 21;\n    if (p == 22)\n        return 22;\n    if (p == 23)\n        return 23;\n    if (p == 24)\n        return 24;\n    if (p == 25)\n        return 25;\n    if (p == 26)\n        return 26;\n    if (p == 27)\n        return 27;\n    if (p == 28)\n        return 28;\n    if (p == 29)\n        return 29;\n    if (p == 30)\n        return 30;\n    if (p == 31)\n        return 31;\n    if (p == 32)\n        return 32;\n    if (p == 33)\n        return 33;\n    if (p == 34)\n        return 34;\n    if (p == 35)\n        return 35;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmpj6xinle0.d(97): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6xinle0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n < 0)\n        return modp(-n, p);\n    if (p == 0)\n        return 0;\n    if (p == 1)\n        return 1;\n    if (p == 2)\n        return n & 1;\n    if (p == 3)\n        return n % 3;\n    if (p == 4)\n        return n % 4;\n    if (p == 5)\n        return n % 5;\n    if (p == 6)\n        return n % 6;\n    if (p == 7)\n        return n % 7;\n    if (p == 8)\n        return n % 8;\n    if (p == 9)\n        return n % 9;\n    if (p == 10)\n        return n % 10;\n    if (p == 11)\n        return n % 11;\n    if (p == 12)\n        return n % 12;\n    if (p == 13)\n        return n % 13;\n    if (p == 14)\n        return n % 14;\n    if (p == 15)\n        return n % 15;\n    if (p == 16)\n        return n % 16;\n    if (p == 17)\n        return n % 17;\n    if (p == 18)\n        return n % 18;\n    if (p == 19)\n        return n % 19;\n    if (p == 20)\n        return n % 20;\n    if (p == 21)\n        return n % 21;\n    if (p == 22)\n        return n % 22;\n    if (p == 23)\n        return n % 23;\n    if (p == 24)\n        return n % 24;\n    if (p == 25)\n        return n % 25;\n    if (p == 26)\n        return n % 26;\n    if (p == 27)\n        return n % 27;\n    if (p == 28)\n        return n % 28;\n    if (p == 29)\n        return n % 29;\n    if (p == 30)\n        return n % 30;\n    if (p == 31)\n        return n % 31;\n    if (p == 32)\n        return n % 32;\n    \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmp0zhkbqnj.d(88): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0zhkbqnj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    if (n == 0) return 1;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 5;\n    if (n == 5) return 8;\n    if (n == 6) return 11;\n    if (n == 7) return 14;\n    if (n == 8) return 17;\n    if (n == 9) return 20;\n    if (n == 10) return 23;\n    if (n == 11) return 26;\n    if (n == 12) return 29;\n    if (n == 13) return 32;\n    if (n == 14) return 35;\n    if (n == 15) return 38;\n    if (n == 16) return 41;\n    if (n == 17) return 44;\n    if (n == 18) return 47;\n    if (n == 19) return 50;\n    if (n == 20) return 53;\n    if (n == 21) return 56;\n    if (n == 22) return 59;\n    if (n == 23) return 62;\n    if (n == 24) return 65;\n    if (n == 25) return 68;\n    if (n == 26) return 71;\n    if (n == 27) return 74;\n    if (n == 28) return 77;\n    if (n == 29) return 80;\n    if (n == 30) return 83;\n    if (n == 31) return 86;\n    if (n == 32) return 89;\n    if (n == 33) return 92;\n    if (n == 34) return 95;\n    if (n == 35) return 98;\n    if (n == 36) return 101;\n    if (n == 37) return 104;\n    if (n == 38) return 107;\n    if (n == 39) return 110;\n    if (n == 40) return 113;\n    if (n == 41) return 116;\n    if (n == 42) return 119;\n    if (n == 43) return 122;\n    if (n == 44) return 125;\n    if (n == 45) return 128;\n    if (n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "/tmp/tmphx_ecocn.d(66): Error: found `unittest` when expecting `)`\n/tmp/tmphx_ecocn.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphx_ecocn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    return (n % p + p) % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiahhhgtt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpiahhhgtt.__unittest_L21_C1() [0x427a6b]\n??:? void tmpiahhhgtt.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}