name: HumanEval_159_eat
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You're a hungry rabbit,\
  \ and you already have eaten a certain number of carrots,\n    but now you need\
  \ to eat more carrots to complete the day's meals.\n    you should return an array\
  \ of [ total number of eaten carrots after your meals,\n                       \
  \             the number of carrots left after your meals ]\n    if there are not\
  \ enough remaining carrots, you will eat all remaining carrots, but will still be\
  \ hungry.\n    \n    Example:\n    >>> eat(5L, 6L, 10L)\n    [11L, 4L]\n    >>>\
  \ eat(4L, 8L, 9L)\n    [12L, 1L]\n    >>> eat(1L, 10L, 10L)\n    [11L, 0L]\n   \
  \ >>> eat(2L, 11L, 5L)\n    [7L, 0L]\n    \n    Variables:\n    @number : integer\n\
  \        the number of carrots that you have eaten.\n    @need : integer\n     \
  \   the number of carrots that you need to eat.\n    @remaining : integer\n    \
  \    the number of remaining carrots thet exist in stock\n    \n    Constrain:\n\
  \    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\
  \n    Have fun :)\n    \n*/\nlong[] eat(long number, long need, long remaining)\
  \ \n"
tests: "unittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L)\
  \ == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L,\
  \ 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n  \
  \  assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L)\
  \ == [5L, 0L]);\n}\nvoid main(){}"
completions: ["{\n    long[] result = new long[2];\n    result[0] = number + need;\n\
    \    result[1] = remaining - need;\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] ans = new long[2];\n    long eaten = 0;\n    long\
    \ eaten_now = 0;\n    long left = 0;\n    long left_now = 0;\n    \n    if (number\
    \ >= need) {\n        eaten = number - need;\n        left = remaining - eaten;\n\
    \        ans[0] = eaten + left;\n        ans[1] = left;\n        return ans;\n\
    \    }\n    \n    if (number < need) {\n        eaten = number;\n        left\
    \ = need - eaten;\n        ans[0] = eaten + left;\n        ans[1] = left;\n  \
    \      return ans;\n    }\n    \n    if (number == need) {\n        eaten = number;\n\
    \        left = remaining - eaten;\n        ans[0] = eaten + left;\n        ans[1]\
    \ = left;\n        return ans;\n    }\n    \n    if (number > need) {\n      \
    \  eaten = number - need;\n        left = remaining - eaten;\n        ans[0] =\
    \ eaten + left;\n        ans[1] = left;\n        return ans;\n    }\n    \n  \
    \  return ans;\n}", "{\n    long[] result = new long[2];\n    result[0] = number\
    \ + need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n   \
    \ long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number +\
    \ need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number +\
    \ need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    if (result[1] < 0)\n\
    \        result[1] = 0;\n    return result;\n}", "{\n    long[] ans = new long[2];\n\
    \    long eaten = 0;\n    long eaten_remaining = 0;\n    if (number >= need) {\n\
    \        eaten = number - need;\n        eaten_remaining = remaining - eaten;\n\
    \        ans[0] = eaten + eaten_remaining;\n        ans[1] = eaten_remaining;\n\
    \    } else {\n        ans[0] = number;\n        ans[1] = remaining;\n    }\n\
    \    return ans;\n}", "{\n    long[] result = new long[2];\n    result[0] = number\
    \ + need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n   \
    \ long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number +\
    \ need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] ans = new long[2];\n    long eaten = 0;\n    long eaten_need = 0;\n\
    \    long eaten_remaining = 0;\n    \n    if (number >= need) {\n        ans[0]\
    \ = number - need;\n        ans[1] = 0;\n        return ans;\n    }\n    \n  \
    \  if (number < need) {\n        ans[0] = 0;\n        ans[1] = need - number;\n\
    \        return ans;\n    }\n    \n    if (number == need) {\n        ans[0] =\
    \ 0;\n        ans[1] = 0;\n        return ans;\n    }\n    \n    if (number >\
    \ need) {\n        if (remaining >= need) {\n            ans[0] = number - need;\n\
    \            ans[1] = 0;\n            return ans;\n        }\n        \n     \
    \   if (remaining < need) {\n            ans[0] = number - need;\n           \
    \ ans[1] = 0;\n            return ans;\n        }\n        \n        if (remaining\
    \ == need) {\n            ans[0] = number - need;\n            ans[1] = 0;\n \
    \           return ans;\n        }\n    }\n    \n    if (number == need) {\n \
    \       if (remaining == need) {\n            ans[0] = 0;\n            ans[1]\
    \ = 0;\n            return ans;\n        }\n        \n        if (remaining >\
    \ need) {\n            ans[0] = 0;\n            ans[1] = need - remaining;\n \
    \           return ans;\n        }\n        \n        if (remaining < need) {\n\
    \            ans[0] = 0;\n            ans[1] = need - remaining;\n           \
    \ return ans;\n        }\n    }\n    \n    if (number < need) {\n        if (remaining\
    \ == need) {\n            ans[0] = 0;\n            ans[1] = 0;\n            return\
    \ ans;\n        }\n        \n        if (remaining > need) {\n            ans[0]\
    \ = 0;\n            ans[1] = need - remaining;\n            return ans;\n    \
    \    }\n        \n        if (remaining < need", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] ans = new long[2];\n    long eaten = 0;\n    long\
    \ left = 0;\n    \n    if (number >= need) {\n        ans[0] = number - need;\n\
    \        ans[1] = 0;\n        return ans;\n    }\n    \n    if (need > remaining)\
    \ {\n        ans[0] = number;\n        ans[1] = 0;\n        return ans;\n    }\n\
    \    \n    while (need > 0) {\n        if (need > remaining) {\n            eaten\
    \ = remaining;\n            left = 0;\n        } else {\n            eaten = need;\n\
    \            left = need - eaten;\n        }\n        \n        number += eaten;\n\
    \        need -= eaten;\n        remaining -= eaten;\n    }\n    \n    ans[0]\
    \ = number;\n    ans[1] = left;\n    return ans;\n}", "{\n    long[] ans = new\
    \ long[2];\n    ans[0] = number + need;\n    ans[1] = remaining - need;\n    return\
    \ ans;\n}", "{\n    long[] result = new long[2];\n    result[0] = number + need;\n\
    \    result[1] = remaining - need;\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] ans = new long[2];\n\
    \    if (number >= need) {\n        ans[0] = number - need;\n        ans[1] =\
    \ 0;\n    } else {\n        ans[0] = 0;\n        ans[1] = need - number;\n   \
    \ }\n    return ans;\n}", "{\n    long[] ans = new long[2];\n    long eaten =\
    \ 0;\n    long left = 0;\n    \n    if (number >= need) {\n        eaten = need;\n\
    \        left = 0;\n    } else if (number < need) {\n        eaten = number;\n\
    \        left = need - number;\n    } else {\n        eaten = number;\n      \
    \  left = 0;\n    }\n    \n    ans[0] = eaten;\n    ans[1] = left;\n    \n   \
    \ return ans;\n}", "{\n    long[] result = new long[2];\n    result[0] = number\
    \ + need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n   \
    \ long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] ans = new long[2];\n    long eaten = 0;\n    long\
    \ left = 0;\n    \n    if (number >= need) {\n        eaten = number - need;\n\
    \        left = 0;\n    } else {\n        eaten = number;\n        left = need\
    \ - number;\n    }\n    \n    if (eaten > remaining) {\n        eaten = remaining;\n\
    \        left = 0;\n    } else {\n        left = remaining - eaten;\n    }\n \
    \   \n    ans[0] = eaten;\n    ans[1] = left;\n    \n    return ans;\n}", "{\n\
    \    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] ans = new long[2];\n\
    \    long eaten = number;\n    long eat = need;\n    long left = remaining;\n\
    \    \n    while(eat > 0 && left > 0)\n    {\n        if(eat >= left)\n      \
    \  {\n            eat -= left;\n            left = 0;\n        }\n        else\n\
    \        {\n            left -= eat;\n            eat = 0;\n        }\n    }\n\
    \    \n    ans[0] = eaten;\n    ans[1] = left;\n    return ans;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] ans = new long[2];\n    ans[0] = number + need;\n    ans[1] = remaining\
    \ - need;\n    return ans;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] ans = new long[2];\n    ans[0] = number + need;\n    ans[1] = remaining\
    \ - need;\n    return ans;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] ans = new long[2];\n    ans[0] = number + need;\n    ans[1] = remaining\
    \ - need;\n    if (ans[1] < 0)\n        ans[1] = 0;\n    return ans;\n}", "{\n\
    \    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number +\
    \ need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] ans = new long[2];\n    long\
    \ eaten = number;\n    long eaten_need = 0;\n    long left = remaining;\n    \n\
    \    if (need > 0)\n    {\n        if (need <= remaining)\n        {\n       \
    \     eaten_need = need;\n            left -= need;\n        }\n        else\n\
    \        {\n            eaten_need = remaining;\n            left = 0;\n     \
    \   }\n        \n        if (eaten_need > 0)\n        {\n            eaten +=\
    \ eaten_need;\n        }\n    }\n    \n    ans[0] = eaten;\n    ans[1] = left;\n\
    \    \n    return ans;\n}", "{\n    long[] ans = new long[2];\n    if (number\
    \ >= need) {\n        ans[0] = number - need;\n        ans[1] = 0;\n    } else\
    \ {\n        ans[0] = 0;\n        ans[1] = need - number;\n    }\n    return ans;\n\
    }", "{\n    long[] result = new long[2];\n    result[0] = number + need;\n   \
    \ result[1] = remaining - need;\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if (result[1] < 0)\n    {\n        result[1] = 0;\n    }\n    return\
    \ result;\n}", "{\n    long[] ans = new long[2];\n    long eaten = 0;\n    long\
    \ eaten_need = 0;\n    long eaten_remaining = 0;\n    \n    if (number < need)\
    \ {\n        ans[0] = number;\n        ans[1] = need - number;\n        return\
    \ ans;\n    }\n    \n    while (need > 0) {\n        if (remaining > 0) {\n  \
    \          if (need > remaining) {\n                eaten_need = remaining;\n\
    \                eaten_remaining = need - eaten_need;\n                eaten =\
    \ eaten_need + eaten_remaining;\n                need = 0;\n            } else\
    \ {\n                eaten_need = need;\n                eaten_remaining = 0;\n\
    \                eaten = eaten_need;\n                need = need - eaten_need;\n\
    \            }\n        } else {\n            eaten_need = need;\n           \
    \ eaten_remaining = 0;\n            eaten = eaten_need;\n            need = 0;\n\
    \        }\n    }\n    \n    ans[0] = eaten;\n    ans[1] = eaten_remaining;\n\
    \    return ans;\n}", "{\n    long[] result = new long[2];\n    result[0] = number\
    \ + need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n   \
    \ long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] ans = new long[2];\n\
    \    long eaten = 0;\n    long left = 0;\n    if (number >= need) {\n        eaten\
    \ = number - need;\n        left = need;\n    } else {\n        eaten = number;\n\
    \        left = need - number;\n    }\n    ans[0] = eaten;\n    ans[1] = left;\n\
    \    return ans;\n}", "{\n    long[] result = new long[2];\n    result[0] = number\
    \ + need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n   \
    \ long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number +\
    \ need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    if (result[1] < 0)\n    {\n        result[1] = 0;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number +\
    \ need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] ans = new long[2];\n    if (number >= need) {\n        ans[0] = number;\n\
    \        ans[1] = 0;\n        return ans;\n    }\n    long[] ans1 = eat(number\
    \ + 1, need, remaining);\n    long[] ans2 = eat(number + 1, need - number, remaining\
    \ - number);\n    ans[0] = ans1[0] + ans2[0];\n    ans[1] = ans1[1] + ans2[1];\n\
    \    return ans;\n}", "{\n    long[] result = new long[2];\n    result[0] = number\
    \ + need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n   \
    \ long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] ans = new long[2];\n\
    \    long eaten = 0;\n    long eaten_need = 0;\n    long eaten_remaining = 0;\n\
    \    \n    if(number >= need)\n    {\n        ans[0] = number - need;\n      \
    \  ans[1] = 0;\n        return ans;\n    }\n    \n    if(number < need)\n    {\n\
    \        ans[0] = 0;\n        ans[1] = need - number;\n        return ans;\n \
    \   }\n    \n    if(number < remaining)\n    {\n        ans[0] = number;\n   \
    \     ans[1] = remaining - number;\n        return ans;\n    }\n    \n    if(number\
    \ == remaining)\n    {\n        ans[0] = number;\n        ans[1] = 0;\n      \
    \  return ans;\n    }\n    \n    if(number > remaining)\n    {\n        ans[0]\
    \ = remaining;\n        ans[1] = 0;\n        return ans;\n    }\n    \n    return\
    \ ans;\n}", "{\n    long[] result = new long[2];\n    result[0] = number + need;\n\
    \    result[1] = remaining - need;\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    if (number >= need) {\n        result[0]\
    \ = number - need;\n        result[1] = 0;\n    } else {\n        result[0] =\
    \ 0;\n        result[1] = need - number;\n    }\n    return result;\n}", "{\n\
    \    long[] ans = new long[2];\n    long eaten = 0;\n    long eaten_remaining\
    \ = 0;\n    long eaten_need = 0;\n    long eaten_remaining_need = 0;\n    \n \
    \   if (number >= need) {\n        ans[0] = number - need;\n        ans[1] = 0;\n\
    \        return ans;\n    }\n    \n    if (number < need) {\n        ans[0] =\
    \ 0;\n        ans[1] = need - number;\n        return ans;\n    }\n    \n    if\
    \ (remaining >= need) {\n        ans[0] = 0;\n        ans[1] = 0;\n        return\
    \ ans;\n    }\n    \n    if (remaining < need) {\n        ans[0] = 0;\n      \
    \  ans[1] = need - remaining;\n        return ans;\n    }\n    \n    if (number\
    \ >= remaining) {\n        ans[0] = number - remaining;\n        ans[1] = 0;\n\
    \        return ans;\n    }\n    \n    if (number < remaining) {\n        ans[0]\
    \ = 0;\n        ans[1] = remaining - number;\n        return ans;\n    }\n   \
    \ \n    if (number == remaining) {\n        ans[0] = 0;\n        ans[1] = 0;\n\
    \        return ans;\n    }\n    \n    if (number > remaining) {\n        ans[0]\
    \ = 0;\n        ans[1] = 0;\n        return ans;\n    }\n    \n    if (number\
    \ == remaining) {\n        ans[0] = 0;\n        ans[1] = 0;\n        return ans;\n\
    \    }\n    \n    if (number == remaining) {\n        ans[0] = 0;\n        ans[1]\
    \ = 0;\n        return ans;\n    }\n    \n    if (number == remaining) {\n   \
    \     ans[0] = 0;\n        ans[1] = 0;\n        return ans;\n    }\n    \n   \
    \ if (number == remaining) {\n        ans[0] = 0;\n        ans[1] = 0;\n     \
    \   return ans;\n    }\n    \n    if (", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number +\
    \ need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number +\
    \ need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number +\
    \ need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] ans = new long[2];\n\
    \    long eaten = 0;\n    long eaten_need = 0;\n    long left = 0;\n    if(number\
    \ >= need)\n    {\n        eaten = number - need;\n        left = number - eaten;\n\
    \        ans[0] = eaten + left;\n        ans[1] = 0;\n    }\n    else if(number\
    \ < need)\n    {\n        eaten = number;\n        left = need - number;\n   \
    \     ans[0] = eaten + left;\n        ans[1] = 0;\n    }\n    else\n    {\n  \
    \      eaten = number;\n        left = need;\n        ans[0] = eaten + left;\n\
    \        ans[1] = 0;\n    }\n    return ans;\n}", "{\n    long[] result = new\
    \ long[2];\n    result[0] = number + need;\n    result[1] = remaining - need;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    result[0] =\
    \ number + need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n\
    \    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] ans = new long[2];\n\
    \    long eaten = 0;\n    long left = 0;\n    if (number >= need) {\n        eaten\
    \ = need;\n        left = number - need;\n    } else {\n        eaten = number;\n\
    \        left = need - number;\n    }\n    if (left > remaining) {\n        eaten\
    \ = eaten + left;\n        left = 0;\n    }\n    ans[0] = eaten;\n    ans[1] =\
    \ left;\n    return ans;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    if (number >= need) {\n\
    \        result[0] = number - need;\n        result[1] = 0;\n    } else {\n  \
    \      result[0] = 0;\n        result[1] = need - number;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    result[0] = number + need;\n   \
    \ result[1] = remaining - need;\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] ans = new long[2];\n    long eaten = 0;\n    long\
    \ left = 0;\n    if (number >= need) {\n        eaten = number - need;\n     \
    \   left = need;\n    } else {\n        eaten = number;\n        left = need -\
    \ number;\n    }\n    ans[0] = eaten;\n    ans[1] = left;\n    return ans;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number +\
    \ need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] ans = new long[2];\n\
    \    long eaten = 0;\n    long eaten_need = 0;\n    long left = 0;\n    \n   \
    \ if(number >= need)\n    {\n        eaten = number - need;\n        left = number\
    \ - eaten;\n        ans[0] = eaten + left;\n        ans[1] = 0;\n    }\n    else\
    \ if(number < need)\n    {\n        eaten = number;\n        left = need - eaten;\n\
    \        ans[0] = eaten + left;\n        ans[1] = 0;\n    }\n    else if(number\
    \ == need)\n    {\n        eaten = need;\n        left = 0;\n        ans[0] =\
    \ need;\n        ans[1] = 0;\n    }\n    else if(number > need)\n    {\n     \
    \   eaten = need;\n        left = number - need;\n        ans[0] = need;\n   \
    \     ans[1] = left;\n    }\n    \n    return ans;\n}", "{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    return result;\n}", "{\n    long[] ans = new long[2];\n    long eaten\
    \ = 0;\n    long left = 0;\n    if(number >= need)\n    {\n        eaten = number\
    \ - need;\n        left = need;\n    }\n    else\n    {\n        eaten = number;\n\
    \        left = need - number;\n    }\n    ans[0] = eaten;\n    ans[1] = left;\n\
    \    return ans;\n}\n", "{\n    long[] result = new long[2];\n    result[0] =\
    \ number + need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n\
    \    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number +\
    \ need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] ans = new long[2];\n    long\
    \ eaten = 0;\n    long eat = 0;\n    long left = 0;\n    \n    if (number >= need)\
    \ {\n        eaten = number - need;\n        left = need;\n    } else {\n    \
    \    eaten = number;\n        left = need - number;\n    }\n    \n    if (eaten\
    \ > remaining) {\n        eaten = remaining;\n        left = remaining - eaten;\n\
    \    }\n    \n    ans[0] = eaten;\n    ans[1] = left;\n    \n    return ans;\n\
    }", "{\n    long[] ans = new long[2];\n    long eaten = 0;\n    long left = 0;\n\
    \    \n    if (number >= need) {\n        eaten = need;\n        left = number\
    \ - need;\n    } else if (number < need && number < remaining) {\n        eaten\
    \ = number;\n        left = need - number;\n    } else {\n        eaten = number;\n\
    \        left = 0;\n    }\n    \n    ans[0] = eaten;\n    ans[1] = left;\n   \
    \ \n    return ans;\n}", "{\n    long[] result = new long[2];\n    result[0] =\
    \ number + need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n\
    \    long[] ans = new long[2];\n    long eaten = 0;\n    long eaten_need = 0;\n\
    \    long eaten_remaining = 0;\n    \n    if (number < need)\n    {\n        ans[0]\
    \ = number;\n        ans[1] = need - number;\n        return ans;\n    }\n   \
    \ \n    while (need > 0)\n    {\n        if (need > remaining)\n        {\n  \
    \          eaten_need = remaining;\n            eaten_remaining = need - eaten_need;\n\
    \            eaten = eaten_need + eaten_remaining;\n            need = 0;\n  \
    \      }\n        else\n        {\n            eaten_need = need;\n          \
    \  eaten_remaining = 0;\n            eaten = eaten_need;\n            need = need\
    \ - eaten_need;\n        }\n    }\n    \n    ans[0] = eaten;\n    ans[1] = eaten_remaining;\n\
    \    return ans;\n}", "{\n    long[] result = new long[2];\n    result[0] = number\
    \ + need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n   \
    \ long[] ans = new long[2];\n    long eaten = 0;\n    long eaten_need = 0;\n \
    \   long eaten_remaining = 0;\n    \n    if(number >= need)\n    {\n        ans[0]\
    \ = number - need;\n        ans[1] = 0;\n        return ans;\n    }\n    \n  \
    \  if(number < need)\n    {\n        ans[0] = 0;\n        ans[1] = need - number;\n\
    \        return ans;\n    }\n    \n    if(number == need)\n    {\n        ans[0]\
    \ = 0;\n        ans[1] = 0;\n        return ans;\n    }\n    \n    if(number >\
    \ need)\n    {\n        if(remaining >= need)\n        {\n            ans[0] =\
    \ number - need;\n            ans[1] = 0;\n            return ans;\n        }\n\
    \        \n        if(remaining < need)\n        {\n            ans[0] = number\
    \ - need;\n            ans[1] = need - remaining;\n            return ans;\n \
    \       }\n    }\n    \n    if(number == need)\n    {\n        if(remaining ==\
    \ 0)\n        {\n            ans[0] = 0;\n            ans[1] = 0;\n          \
    \  return ans;\n        }\n        \n        if(remaining > 0)\n        {\n  \
    \          ans[0] = 0;\n            ans[1] = need - remaining;\n            return\
    \ ans;\n        }\n    }\n    \n    if(number > need)\n    {\n        if(remaining\
    \ == 0)\n        {\n            ans[0] = 0;\n            ans[1] = need - number;\n\
    \            return ans;\n        }\n        \n        if(remaining > 0)\n   \
    \     {\n            ans[0] = 0;\n            ans[1] = need - remaining;\n   \
    \         return ans;\n        }\n    }\n    \n    return ans;\n}", "{\n    long[]\
    \ ans = new long[2];\n    if (number >= need) {\n        ans[0] = number;\n  \
    \      ans[1] = 0;\n        return ans;\n    }\n    \n    if (number + remaining\
    \ >= need) {\n        ans[0] = number + remaining;\n        ans[1] = 0;\n    \
    \    return ans;\n    }\n    \n    ans[0] = number + remaining;\n    ans[1] =\
    \ need - (number + remaining);\n    return ans;\n}", "{\n    long[] ans = new\
    \ long[2];\n    long eaten = 0;\n    long eaten_now = 0;\n    long left = 0;\n\
    \    long left_now = 0;\n    \n    if (number < need) {\n        eaten = number;\n\
    \        left = need - number;\n    } else {\n        eaten = need;\n        left\
    \ = 0;\n    }\n    \n    if (remaining < left) {\n        left = remaining;\n\
    \        left_now = remaining;\n    } else {\n        left_now = left;\n    }\n\
    \    \n    eaten_now = eaten;\n    \n    ans[0] = eaten_now;\n    ans[1] = left_now;\n\
    \    \n    return ans;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    if (number >= need) {\n        result[0]\
    \ = number - need;\n        result[1] = 0;\n    } else {\n        result[0] =\
    \ 0;\n        result[1] = need - number;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] ans = new long[2];\n\
    \    if (number >= need) {\n        ans[0] = number - need;\n        ans[1] =\
    \ 0;\n        return ans;\n    }\n    if (number + remaining >= need) {\n    \
    \    ans[0] = number + remaining - need;\n        ans[1] = 0;\n        return\
    \ ans;\n    }\n    if (number + remaining == 0) {\n        ans[0] = 0;\n     \
    \   ans[1] = 0;\n        return ans;\n    }\n    ans[0] = 0;\n    ans[1] = remaining;\n\
    \    return ans;\n}", "{\n    long[] result = new long[2];\n    result[0] = number\
    \ + need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n   \
    \ long[] ans = new long[2];\n    if (number >= need) {\n        ans[0] = number\
    \ - need;\n        ans[1] = 0;\n    } else {\n        ans[0] = 0;\n        ans[1]\
    \ = need - number;\n    }\n    return ans;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number +\
    \ need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n    long[]\
    \ ans = new long[2];\n    long eaten = 0;\n    long left = 0;\n    \n    if (number\
    \ >= need) {\n        eaten = number - need;\n        left = 0;\n    } else {\n\
    \        eaten = number;\n        left = need - number;\n    }\n    \n    if (left\
    \ > remaining) {\n        left = remaining;\n    }\n    \n    ans[0] = eaten;\n\
    \    ans[1] = left;\n    \n    return ans;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number +\
    \ need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    if\
    \ (number >= need) {\n        result[0] = number;\n        result[1] = 0;\n  \
    \  } else {\n        result[0] = number + need - remaining;\n        result[1]\
    \ = remaining;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    if (number >= need) {\n        result[0] = number;\n        result[1] = 0;\n\
    \    } else {\n        result[0] = number + need - remaining;\n        result[1]\
    \ = remaining;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    if (result[1]\
    \ < 0) {\n        result[1] = 0;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    if (result[1]\
    \ < 0)\n        result[1] = 0;\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    return result;\n}", "{\n    long[] ans = new long[2];\n    long eaten\
    \ = 0;\n    long eaten_need = 0;\n    long eaten_remaining = 0;\n    \n    if\
    \ (number >= need) {\n        eaten = number - need;\n        eaten_need = need;\n\
    \        eaten_remaining = remaining;\n    } else {\n        eaten = number;\n\
    \        eaten_need = number;\n        eaten_remaining = remaining - number;\n\
    \    }\n    \n    ans[0] = eaten;\n    ans[1] = eaten_need;\n    \n    return\
    \ ans;\n}", "{\n    long[] result = new long[2];\n    result[0] = number + need;\n\
    \    result[1] = remaining - need;\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    if\
    \ (number >= need) {\n        result[0] = number;\n        result[1] = 0;\n  \
    \      return result;\n    }\n    \n    if (remaining < need) {\n        result[0]\
    \ = number + remaining;\n        result[1] = 0;\n        return result;\n    }\n\
    \    \n    result[0] = number + need;\n    result[1] = remaining - need;\n   \
    \ return result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number\
    \ + need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n   \
    \ long[] ans = new long[2];\n    if (number >= need) {\n        ans[0] = number\
    \ - need;\n        ans[1] = 0;\n    } else {\n        ans[0] = 0;\n        ans[1]\
    \ = need - number;\n    }\n    return ans;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number +\
    \ need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number +\
    \ need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    if (result[1] < 0) {\n        result[1] = 0;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    result[0] =\
    \ number + need;\n    result[1] = remaining - need;\n    if (result[1] < 0)\n\
    \    {\n        result[1] = 0;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] ans = new long[2];\n\
    \    if (number >= need) {\n        ans[0] = number - need;\n        ans[1] =\
    \ 0;\n        return ans;\n    }\n    if (number < need) {\n        ans[0] = number;\n\
    \        ans[1] = need - number;\n        return ans;\n    }\n    if (number ==\
    \ need) {\n        ans[0] = 0;\n        ans[1] = 0;\n        return ans;\n   \
    \ }\n    if (number > need) {\n        ans[0] = 0;\n        ans[1] = number -\
    \ need;\n        return ans;\n    }\n    return ans;\n}", "{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number +\
    \ need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number +\
    \ need;\n    result[1] = remaining - need;\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    result[0] = number + need;\n    result[1] = remaining\
    \ - need;\n    return result;\n}", "{\n    long[] ans = new long[2];\n    long\
    \ eaten = number;\n    long eat = need;\n    long left = remaining;\n    \n  \
    \  while(eat > 0 && left > 0)\n    {\n        if(eat >= left)\n        {\n   \
    \         eat -= left;\n            left = 0;\n        }\n        else\n     \
    \   {\n            left -= eat;\n            eat = 0;\n        }\n        \n \
    \       eaten += eat;\n    }\n    \n    ans[0] = eaten;\n    ans[1] = left;\n\
    \    \n    return ans;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] ans = new long[2];\n\
    \    long eaten = number;\n    long left = need;\n    long eaten_this_time = 0;\n\
    \    long left_this_time = 0;\n    \n    while (left > 0) {\n        if (left\
    \ >= remaining) {\n            left_this_time = remaining;\n            left -=\
    \ remaining;\n            eaten_this_time += remaining;\n        } else {\n  \
    \          left_this_time = left;\n            left = 0;\n            eaten_this_time\
    \ += left_this_time;\n        }\n        eaten += eaten_this_time;\n        left\
    \ -= left_this_time;\n        remaining -= eaten_this_time;\n    }\n    ans[0]\
    \ = eaten;\n    ans[1] = remaining;\n    return ans;\n}", "{\n    long[] result\
    \ = new long[2];\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    return result;\n}", "{\n    long[] ans = new long[2];\n    if (number\
    \ >= need) {\n        ans[0] = number - need;\n        ans[1] = 0;\n    } else\
    \ {\n        ans[0] = 0;\n        ans[1] = need - number;\n    }\n    return ans;\n\
    }", "{\n    long[] result = new long[2];\n    result[0] = number + need;\n   \
    \ result[1] = remaining - need;\n    return result;\n}", "{\n    long[] ans =\
    \ new long[2];\n    if (number >= need) {\n        ans[0] = number;\n        ans[1]\
    \ = 0;\n        return ans;\n    }\n    \n    long eaten = 0;\n    long left =\
    \ 0;\n    while (need > 0) {\n        if (need > remaining) {\n            eaten\
    \ += remaining;\n            left = 0;\n        } else {\n            eaten +=\
    \ need;\n            left = remaining - need;\n        }\n        need -= eaten;\n\
    \        remaining -= eaten;\n    }\n    \n    ans[0] = eaten + number;\n    ans[1]\
    \ = left;\n    return ans;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n    return result;\n}", "{\n    long[] ans = new long[2];\n\
    \    long eaten = number;\n    long eat = need;\n    long left = remaining;\n\
    \    \n    if (eat >= left) {\n        eat = left;\n        left = 0;\n    } else\
    \ {\n        left -= eat;\n    }\n    \n    ans[0] = eaten + eat;\n    ans[1]\
    \ = left;\n    return ans;\n}", "{\n    long[] result = new long[2];\n    result[0]\
    \ = number + need;\n    result[1] = remaining - need;\n    return result;\n}",
  "{\n    long[] ans = new long[2];\n    long eaten = 0;\n    long eaten_need = 0;\n\
    \    long left = 0;\n    \n    if (number >= need) {\n        eaten = number -\
    \ need;\n        left = number - eaten;\n    } else {\n        eaten = number;\n\
    \        left = need - eaten;\n    }\n    \n    if (left >= remaining) {\n   \
    \     eaten_need = left - remaining;\n        left = remaining;\n    } else {\n\
    \        eaten_need = 0;\n    }\n    \n    ans[0] = eaten + eaten_need;\n    ans[1]\
    \ = left;\n    \n    return ans;\n}", "{\n    long[] result = new long[2];\n \
    \   result[0] = number + need;\n    result[1] = remaining - need;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    result[0] = number +\
    \ need;\n    result[1] = remaining - need;\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
