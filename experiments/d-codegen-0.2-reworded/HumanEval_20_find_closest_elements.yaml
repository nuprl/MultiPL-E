name: HumanEval_20_find_closest_elements
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of numbers\
  \ (of length at least two) select and return two that are the closest to each\n\
  \    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float)\
  \ find_closest_elements(float[] numbers) \n"
tests: "unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
  \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) ==\
  \ tuple(2.2, 3.1));\n}\nvoid main(){}"
completions: ["{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"\
    find_closest_elements expects at least two elements\");\n    \n    float min_diff\
    \ = math.infinity;\n    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n\
    \    float max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff)\
    \ {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n\
    \        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least 2 numbers\");\n    \n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n    {\n   \
    \     if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    \n    float diff = max - min;\n\
    \    float closest = min + diff / 2.0f;\n    float closest2 = min + diff / 2.0f;\n\
    \    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        if (numbers[i]\
    \ < closest)\n        {\n            closest2 = closest;\n            closest\
    \ = numbers[i];\n        }\n        else if (numbers[i] > closest2)\n        {\n\
    \            closest2 = numbers[i];\n        }\n    }\n    \n    return tuple(closest,\
    \ closest2);\n}\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index\
    \ = 0;\n    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n\
    \    for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n}\n",
  "{\n    float min_diff = math.infinity;\n    float closest_1 = 0.0;\n    float closest_2\
    \ = 0.0;\n    for (float i : numbers)\n    {\n        float diff = i - closest_1;\n\
    \        if (diff < min_diff)\n        {\n            min_diff = diff;\n     \
    \       closest_1 = i;\n        }\n        diff = i - closest_2;\n        if (diff\
    \ < min_diff)\n        {\n            min_diff = diff;\n            closest_2\
    \ = i;\n        }\n    }\n    return tuple(closest_1, closest_2);\n}\n", "{\n\
    \    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements:\
    \ array must have at least two elements\");\n    \n    float min_diff = math.abs(numbers[0]\
    \ - numbers[1]);\n    float min_diff_index = 0;\n    float min_diff_value = min_diff;\n\
    \    \n    for (int i = 1; i < numbers.length; i++)\n    {\n        float diff\
    \ = math.abs(numbers[i] - numbers[i - 1]);\n        if (diff < min_diff)\n   \
    \     {\n            min_diff = diff;\n            min_diff_index = i;\n     \
    \       min_diff_value = diff;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index],\
    \ numbers[min_diff_index + 1]);\n}\n", "{\n    float min_diff = math.infinity;\n\
    \    float closest_a = 0.0;\n    float closest_b = 0.0;\n    for (float a : numbers)\
    \ {\n        for (float b : numbers) {\n            float diff = abs(a - b);\n\
    \            if (diff < min_diff) {\n                min_diff = diff;\n      \
    \          closest_a = a;\n                closest_b = b;\n            }\n   \
    \     }\n    }\n    return tuple(closest_a, closest_b);\n}\n", "{\n    float min_diff\
    \ = math.infinity;\n    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n\
    \    float max_diff_index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n\
    \        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n\
    \            min_diff = diff;\n            min_diff_index = i;\n        }\n  \
    \      if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements:\
    \ array too small\");\n    \n    float min_diff = math.inf;\n    float min_diff_index\
    \ = 0;\n    float min_diff_value = math.inf;\n    float max_diff = -math.inf;\n\
    \    float max_diff_index = 0;\n    float max_diff_value = -math.inf;\n    \n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min_diff_index = i;\n            min_diff_value = numbers[i];\n\
    \        }\n        if (diff > max_diff)\n        {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n            max_diff_value = numbers[i];\n \
    \       }\n    }\n    \n    return tuple(min_diff_value, max_diff_value);\n}\n",
  "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two numbers\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0)\n \
    \           diff = -diff;\n        if (diff < min_diff)\n        {\n         \
    \   min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff\
    \ > max_diff)\n        {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ requires at least two elements\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min_diff_index = i;\n  \
    \      }\n        if (diff > max_diff)\n        {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    if (numbers.length < 2)\n        throw\
    \ new RuntimeException(\"find_closest_elements expects at least two elements\"\
    );\n    \n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n\
    \    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    \n \
    \   for (int i = 0; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min_diff_index = i;\n        }\n        \n        diff\
    \ = numbers[i] - numbers[1];\n        if (diff < min_diff)\n        {\n      \
    \      min_diff = diff;\n            min_diff_index = i;\n        }\n        \n\
    \        diff = numbers[0] - numbers[i];\n        if (diff < min_diff)\n     \
    \   {\n            min_diff = diff;\n            min_diff_index = i;\n       \
    \ }\n        \n        diff = numbers[1] - numbers[i];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min_diff_index = i;\n  \
    \      }\n        \n        if (diff > max_diff)\n        {\n            max_diff\
    \ = diff;\n            max_diff_index = i;\n        }\n    }\n    \n    return\
    \ tuple(numbers[min_diff_index], numbers[max_diff_index]);\n}\n", "{\n    float\
    \ min_diff = math.infinity;\n    float min_diff_index = 0;\n    float max_diff\
    \ = -math.infinity;\n    float max_diff_index = 0;\n    \n    for (int i = 0;\
    \ i < numbers.length; i++) {\n        float diff = numbers[i] - numbers[0];\n\
    \        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    float min_diff = math.infinity;\n \
    \   float closest_a = numbers[0];\n    float closest_b = numbers[0];\n    for\
    \ (float a : numbers) {\n        float diff = abs(a - closest_a);\n        if\
    \ (diff < min_diff) {\n            min_diff = diff;\n            closest_a = a;\n\
    \            closest_b = a;\n        }\n        else if (diff == min_diff) {\n\
    \            closest_a = a;\n            closest_b = a;\n        }\n        else\
    \ {\n            closest_b = a;\n        }\n    }\n    return tuple(closest_a,\
    \ closest_b);\n}\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"\
    find_closest_elements requires at least two elements\");\n    \n    float min_diff\
    \ = math.infinity;\n    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n\
    \    float max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        float diff = numbers[i] - numbers[0];\n        if (diff\
    \ < min_diff)\n        {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        if (diff > max_diff)\n        {\n            max_diff\
    \ = diff;\n            max_diff_index = i;\n        }\n    }\n    \n    return\
    \ tuple(numbers[min_diff_index], numbers[max_diff_index]);\n}\n", "{\n    if (numbers.length\
    \ < 2)\n        throw new RuntimeException(\"find_closest_elements: array too\
    \ short\");\n    \n    float min_diff = math.infinity;\n    float min_diff_index\
    \ = 0;\n    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n\
    \    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        float diff\
    \ = numbers[i] - numbers[0];\n        if (diff < 0)\n            diff = -diff;\n\
    \        if (diff < min_diff)\n        {\n            min_diff = diff;\n     \
    \       min_diff_index = i;\n        }\n        if (diff > max_diff)\n       \
    \ {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n\
    \    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_a = 0.0;\n  \
    \  float closest_b = 0.0;\n    for (int i = 0; i < numbers.length - 1; i++) {\n\
    \        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff)\
    \ {\n            min_diff = diff;\n            closest_a = numbers[i];\n     \
    \       closest_b = numbers[i + 1];\n        }\n    }\n    return tuple(closest_a,\
    \ closest_b);\n}\n", "{\n    float min_diff = math.infinity;\n    float closest_num_1\
    \ = 0.0;\n    float closest_num_2 = 0.0;\n    for (float num : numbers) {\n  \
    \      float diff = abs(num - closest_num_1);\n        if (diff < min_diff) {\n\
    \            min_diff = diff;\n            closest_num_1 = num;\n        }\n \
    \       diff = abs(num - closest_num_2);\n        if (diff < min_diff) {\n   \
    \         min_diff = diff;\n            closest_num_2 = num;\n        }\n    }\n\
    \    return tuple(closest_num_1, closest_num_2);\n}\n", "{\n    if (numbers.length\
    \ < 2)\n        throw new RuntimeException(\"find_closest_elements expects at\
    \ least two elements\");\n    \n    float min_diff = math.inf;\n    float min_diff_index\
    \ = 0;\n    float max_diff = math.inf;\n    float max_diff_index = 0;\n    \n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min_diff_index = i;\n        }\n        \n        diff\
    \ = numbers[i] - numbers[1];\n        if (diff < max_diff)\n        {\n      \
    \      max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n \
    \   \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n}\n",
  "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two numbers\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min_diff_index = i;\n  \
    \      }\n        \n        diff = numbers[i] - numbers[1];\n        if (diff\
    \ < min_diff)\n        {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        \n        diff = numbers[i] - numbers[0];\n       \
    \ if (diff > max_diff)\n        {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n        \n        diff = numbers[i] - numbers[1];\n       \
    \ if (diff > max_diff)\n        {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_a = 0.0;\n  \
    \  float closest_b = 0.0;\n    for (int i = 0; i < numbers.length - 1; i++) {\n\
    \        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff)\
    \ {\n            min_diff = diff;\n            closest_a = numbers[i];\n     \
    \       closest_b = numbers[i + 1];\n        }\n    }\n    return tuple(closest_a,\
    \ closest_b);\n}\n", "{\n    float min_diff = math.infinity;\n    float closest_a\
    \ = 0.0;\n    float closest_b = 0.0;\n    for (float a : numbers)\n    {\n   \
    \     for (float b : numbers)\n        {\n            float diff = abs(a - b);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                closest_a = a;\n                closest_b = b;\n            }\n\
    \        }\n    }\n    return tuple(closest_a, closest_b);\n}\n", "{\n    if (numbers.length\
    \ < 2)\n        throw new RuntimeException(\"find_closest_elements expects at\
    \ least 2 elements\");\n    \n    float min_diff = math.inf;\n    float min_diff_index\
    \ = 0;\n    float max_diff = -math.inf;\n    float max_diff_index = 0;\n    \n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < 0)\n            diff = -diff;\n        if\
    \ (diff < min_diff)\n        {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        if (diff > max_diff)\n        {\n            max_diff\
    \ = diff;\n            max_diff_index = i;\n        }\n    }\n    \n    return\
    \ tuple(numbers[min_diff_index], numbers[max_diff_index]);\n}\n", "{\n    float\
    \ min_diff = math.inf;\n    float closest_a = 0.0;\n    float closest_b = 0.0;\n\
    \    for (float a : numbers)\n    {\n        for (float b : numbers)\n       \
    \ {\n            float diff = abs(a - b);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                closest_a =\
    \ a;\n                closest_b = b;\n            }\n        }\n    }\n    return\
    \ tuple(closest_a, closest_b);\n}\n", "{\n    if (numbers.length < 2)\n      \
    \  throw new RuntimeException(\"find_closest_elements expects at least two elements\"\
    );\n    \n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n         \
    \   min = numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    \n    float diff = max - min;\n    float closest = min + diff / 2;\n\
    \    \n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < closest) {\n            closest = numbers[i];\n        }\n    }\n    \n  \
    \  return tuple(closest, closest);\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (float number : numbers) {\n        if (number <\
    \ min) min = number;\n        if (number > max) max = number;\n    }\n    float\
    \ diff = max - min;\n    float closest = min + diff / 2;\n    float closest_diff\
    \ = diff / 2;\n    for (float number : numbers) {\n        if (number < closest)\
    \ {\n            closest = number;\n            closest_diff = diff;\n       \
    \ } else if (number > closest) {\n            closest = number;\n            closest_diff\
    \ = diff;\n        }\n    }\n    return tuple(closest, closest + closest_diff);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n\
    \    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    \n \
    \   for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ requires at least two elements\");\n    \n    float min_diff = math.inf;\n \
    \   float min_diff_index = 0;\n    float min_diff_value = math.inf;\n    float\
    \ max_diff = -math.inf;\n    float max_diff_index = 0;\n    float max_diff_value\
    \ = -math.inf;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n  \
    \      float diff = numbers[i] - numbers[0];\n        if (diff < 0)\n        \
    \    diff = -diff;\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min_diff_index = i;\n            min_diff_value = numbers[i];\n\
    \        }\n        if (diff > max_diff)\n        {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n            max_diff_value = numbers[i];\n \
    \       }\n    }\n    \n    return tuple(min_diff_value, max_diff_value);\n}\n",
  "{\n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n    float\
    \ max_diff = -math.infinity;\n    float max_diff_index = 0;\n    for (int i =\
    \ 0; i < numbers.length; i++) {\n        float diff = numbers[i] - numbers[0];\n\
    \        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    if (numbers.length < 2)\n        throw\
    \ new RuntimeException(\"find_closest_elements expects at least 2 elements\");\n\
    \    float min_diff = math.abs(numbers[0] - numbers[1]);\n    float min_num =\
    \ numbers[0];\n    float max_num = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++)\n    {\n        float diff = math.abs(numbers[i] - numbers[i - 1]);\n \
    \       if (diff < min_diff)\n        {\n            min_diff = diff;\n      \
    \      min_num = numbers[i];\n        }\n        if (diff > max_diff)\n      \
    \  {\n            max_diff = diff;\n            max_num = numbers[i];\n      \
    \  }\n    }\n    return tuple(min_num, max_num);\n}\n", "{\n    if (numbers.length\
    \ < 2)\n        throw new RuntimeException(\"find_closest_elements requires at\
    \ least two elements\");\n    \n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (float number : numbers)\n    {\n        if (number < min)\n        \
    \    min = number;\n        if (number > max)\n            max = number;\n   \
    \ }\n    \n    float diff = max - min;\n    float closest = min + diff / 2;\n\
    \    float closest2 = min + diff / 2;\n    \n    for (float number : numbers)\n\
    \    {\n        if (number < closest)\n        {\n            closest = number;\n\
    \            closest2 = number;\n        }\n        else if (number > closest2)\n\
    \        {\n            closest2 = number;\n        }\n    }\n    \n    return\
    \ tuple(closest, closest2);\n}\n", "{\n    if (numbers.length < 2)\n        throw\
    \ new RuntimeException(\"find_closest_elements requires at least two elements\"\
    );\n    \n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n\
    \    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    \n \
    \   for (int i = 0; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff)\n\
    \        {\n            max_diff = diff;\n            max_diff_index = i;\n  \
    \      }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements:\
    \ array must have at least two elements\");\n    \n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    \n    float diff = max - min;\n\
    \    float closest = min + diff / 2;\n    \n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < closest) {\n            closest = numbers[i];\n\
    \        }\n    }\n    \n    return tuple(closest, closest);\n}\n", "{\n    float\
    \ min_diff = math.infinity;\n    float min_diff_index = 0;\n    float max_diff\
    \ = -math.infinity;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0)\
    \ {\n            diff = -diff;\n        }\n        if (diff < min_diff) {\n  \
    \          min_diff = diff;\n            min_diff_index = i;\n        }\n    \
    \    if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n\
    \    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    \n \
    \   for(int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if(diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if(diff > max_diff) {\n \
    \           max_diff = diff;\n            max_diff_index = i;\n        }\n   \
    \ }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two numbers\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0)\n \
    \           diff = -diff;\n        if (diff < min_diff)\n        {\n         \
    \   min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff\
    \ > max_diff)\n        {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two elements\");\n    float min_diff = math.inf;\n    float\
    \ min_num = 0.0f;\n    float max_num = 0.0f;\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0)\n\
    \            diff = -diff;\n        if (diff < min_diff) {\n            min_diff\
    \ = diff;\n            min_num = numbers[i];\n        }\n        if (diff > max_diff)\
    \ {\n            max_diff = diff;\n            max_num = numbers[i];\n       \
    \ }\n    }\n    return tuple(min_num, max_num);\n}\n", "{\n    if (numbers.length\
    \ < 2)\n        throw new RuntimeException(\"find_closest_elements expects at\
    \ least 2 elements\");\n    \n    float min_diff = math.infinity;\n    float min_diff_index\
    \ = 0;\n    float min_diff_value = math.infinity;\n    float min_diff_value_index\
    \ = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        float\
    \ diff = numbers[i] - numbers[0];\n        if (diff < min_diff)\n        {\n \
    \           min_diff = diff;\n            min_diff_index = i;\n        }\n   \
    \     \n        diff = numbers[i] - numbers[1];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min_diff_value = numbers[i];\n\
    \            min_diff_value_index = i;\n        }\n    }\n    \n    return tuple(min_diff_value,\
    \ min_diff_value_index);\n}\n", "{\n    float min_diff = math.infinity;\n    float\
    \ min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float max_diff_index\
    \ = 0;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        float diff\
    \ = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff\
    \ = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff)\
    \ {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n\
    \    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements:\
    \ array must be at least two elements long\");\n    \n    float min_diff = math.abs(numbers[0]\
    \ - numbers[1]);\n    float min_value = numbers[0];\n    float max_value = numbers[0];\n\
    \    \n    for (int i = 1; i < numbers.length; i++)\n    {\n        float diff\
    \ = math.abs(numbers[i] - numbers[i-1]);\n        if (diff < min_diff)\n     \
    \   {\n            min_diff = diff;\n            min_value = numbers[i];\n   \
    \     }\n        if (diff > max_diff)\n        {\n            max_value = numbers[i];\n\
    \        }\n    }\n    \n    return tuple(min_value, max_value);\n}\n", "{\n \
    \   float min_diff = math.infinity;\n    float min_diff_index = 0;\n    float\
    \ max_diff = -math.infinity;\n    float max_diff_index = 0;\n    \n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        float diff = numbers[i] - numbers[0];\n\
    \        if(diff < min_diff)\n        {\n            min_diff = diff;\n      \
    \      min_diff_index = i;\n        }\n        if(diff > max_diff)\n        {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_a = 0.0;\n  \
    \  float closest_b = 0.0;\n    for (int i = 0; i < numbers.length - 1; i++) {\n\
    \        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff)\
    \ {\n            min_diff = diff;\n            closest_a = numbers[i];\n     \
    \       closest_b = numbers[i + 1];\n        }\n    }\n    return tuple(closest_a,\
    \ closest_b);\n}\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index\
    \ = 0;\n    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n\
    \    for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n}\n",
  "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements:\
    \ array too short\");\n    float min_diff = math.abs(numbers[0] - numbers[1]);\n\
    \    float min_diff_index = 0;\n    float min_diff_value = numbers[0];\n    for\
    \ (int i = 1; i < numbers.length; i++) {\n        float diff = math.abs(numbers[i]\
    \ - numbers[0]);\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n            min_diff_value = numbers[i];\n \
    \       }\n    }\n    return tuple(min_diff_value, numbers[min_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two numbers\");\n    \n    float min_diff = math.abs(numbers[0]\
    \ - numbers[1]);\n    float min_num = numbers[0];\n    float max_num = numbers[0];\n\
    \    \n    for (int i = 1; i < numbers.length; i++) {\n        float diff = math.abs(numbers[i]\
    \ - numbers[0]);\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_num = numbers[i];\n        }\n        if (diff > math.abs(numbers[i]\
    \ - numbers[1])) {\n            max_num = numbers[i];\n        }\n    }\n    \n\
    \    return tuple(min_num, max_num);\n}\n", "{\n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n      \
    \  float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n   \
    \         min_diff = diff;\n            min_diff_index = i;\n        }\n     \
    \   if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n\
    \    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    \n \
    \   for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_a = 0.0;\n  \
    \  float closest_b = 0.0;\n    for (float a : numbers)\n    {\n        for (float\
    \ b : numbers)\n        {\n            float diff = abs(a - b);\n            if\
    \ (diff < min_diff)\n            {\n                min_diff = diff;\n       \
    \         closest_a = a;\n                closest_b = b;\n            }\n    \
    \    }\n    }\n    return tuple(closest_a, closest_b);\n}\n", "{\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    float diff = max - min;\n    float closest = min + diff / 2;\n\
    \    float closest2 = min - diff / 2;\n    return tuple(closest, closest2);\n\
    }\n", "{\n    float min_diff = math.inf;\n    float min_diff_index = 0;\n    float\
    \ max_diff = math.inf;\n    float max_diff_index = 0;\n    \n    for (int i =\
    \ 0; i < numbers.length; i++) {\n        float diff = numbers[i] - numbers[0];\n\
    \        if (diff < 0) {\n            diff = -diff;\n        }\n        if (diff\
    \ < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n\
    \        }\n        if (diff > max_diff) {\n            max_diff = diff;\n   \
    \         max_diff_index = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    if (numbers.length < 2)\n        throw\
    \ new RuntimeException(\"find_closest_elements expects at least two numbers\"\
    );\n    \n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n\
    \    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    \n \
    \   for (int i = 0; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < 0)\n            diff = -diff;\n        if\
    \ (diff < min_diff)\n        {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        if (diff > max_diff)\n        {\n            max_diff\
    \ = diff;\n            max_diff_index = i;\n        }\n    }\n    \n    return\
    \ tuple(numbers[min_diff_index], numbers[max_diff_index]);\n}\n", "{\n    float\
    \ min_diff = math.inf;\n    float closest_a = 0.0;\n    float closest_b = 0.0;\n\
    \    for (float a : numbers) {\n        for (float b : numbers) {\n          \
    \  float diff = math.abs(a - b);\n            if (diff < min_diff) {\n       \
    \         min_diff = diff;\n                closest_a = a;\n                closest_b\
    \ = b;\n            }\n        }\n    }\n    return tuple(closest_a, closest_b);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n\
    \    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i] - numbers[0];\n\
    \        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    if (numbers.length < 2)\n        throw\
    \ new RuntimeException(\"Not enough numbers to find closest pair\");\n    \n \
    \   float min_diff = math.infinity;\n    float closest_a = 0.0;\n    float closest_b\
    \ = 0.0;\n    \n    for (int i = 0; i < numbers.length - 1; i++)\n    {\n    \
    \    float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            closest_a = numbers[i];\n\
    \            closest_b = numbers[i + 1];\n        }\n    }\n    \n    return tuple(closest_a,\
    \ closest_b);\n}\n", "{\n    return tuple(numbers[0], numbers[1]);\n}\n", "{\n\
    \    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements:\
    \ array must be at least 2 elements long\");\n    \n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        if (numbers[i] < min)\n            min = numbers[i];\n        if\
    \ (numbers[i] > max)\n            max = numbers[i];\n    }\n    \n    float diff\
    \ = max - min;\n    float closest = min + diff / 2.0f;\n    float closest2 = min\
    \ + diff / 2.0f;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        if (numbers[i] < closest)\n        {\n            closest2 = closest;\n\
    \            closest = numbers[i];\n        }\n        else if (numbers[i] > closest2)\n\
    \        {\n            closest2 = numbers[i];\n        }\n    }\n    \n    return\
    \ tuple(closest, closest2);\n}", "{\n    if (numbers.length < 2)\n        throw\
    \ new RuntimeException(\"find_closest_elements: array must be at least length\
    \ 2\");\n    \n    float min_diff = math.infinity;\n    float min_diff_index =\
    \ 0;\n    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n  \
    \  \n    for (int i = 0; i < numbers.length; i++)\n    {\n        float diff =\
    \ numbers[i] - numbers[0];\n        if (diff < min_diff)\n        {\n        \
    \    min_diff = diff;\n            min_diff_index = i;\n        }\n        if\
    \ (diff > max_diff)\n        {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n\
    \    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    \n \
    \   for(int i = 0; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if(diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min_diff_index = i;\n        }\n        if(diff > max_diff)\n\
    \        {\n            max_diff = diff;\n            max_diff_index = i;\n  \
    \      }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n\
    \    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i] - numbers[0];\n\
    \        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    if (numbers.length < 2)\n        throw\
    \ new RuntimeException(\"find_closest_elements: array must be at least length\
    \ 2\");\n    \n    float min_diff = math.infinity;\n    float min_diff_index =\
    \ 0;\n    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n  \
    \  \n    for (int i = 0; i < numbers.length; i++)\n    {\n        float diff =\
    \ numbers[i] - numbers[0];\n        if (diff < min_diff)\n        {\n        \
    \    min_diff = diff;\n            min_diff_index = i;\n        }\n        \n\
    \        diff = numbers[i] - numbers[1];\n        if (diff < min_diff)\n     \
    \   {\n            min_diff = diff;\n            min_diff_index = i;\n       \
    \ }\n        \n        diff = numbers[i] - numbers[0];\n        if (diff > max_diff)\n\
    \        {\n            max_diff = diff;\n            max_diff_index = i;\n  \
    \      }\n        \n        diff = numbers[i] - numbers[1];\n        if (diff\
    \ > max_diff)\n        {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_a = 0.0;\n  \
    \  float closest_b = 0.0;\n    for (float a : numbers)\n    {\n        for (float\
    \ b : numbers)\n        {\n            float diff = abs(a - b);\n            if\
    \ (diff < min_diff)\n            {\n                min_diff = diff;\n       \
    \         closest_a = a;\n                closest_b = b;\n            }\n    \
    \    }\n    }\n    return tuple(closest_a, closest_b);\n}\n", "{\n    if (numbers.length\
    \ < 2)\n        throw new RuntimeException(\"find_closest_elements: array too\
    \ short\");\n    \n    float min_diff = math.infinity;\n    float min_diff_index\
    \ = 0;\n    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n\
    \    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        float diff\
    \ = numbers[i] - numbers[0];\n        if (diff < 0)\n            diff = -diff;\n\
    \        if (diff < min_diff)\n        {\n            min_diff = diff;\n     \
    \       min_diff_index = i;\n        }\n        if (diff > max_diff)\n       \
    \ {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n\
    \    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements:\
    \ array must be at least length 2\");\n    \n    float min = numbers[0];\n   \
    \ float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n    {\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    \n    float diff = max - min;\n\
    \    float closest = min + diff / 2;\n    \n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        if (numbers[i] == closest)\n            return tuple(closest,\
    \ numbers[i]);\n        \n        float diff = numbers[i] - closest;\n       \
    \ if (diff < 0)\n            diff = -diff;\n        if (diff < diff)\n       \
    \ {\n            closest = numbers[i];\n        }\n    }\n    \n    return tuple(closest,\
    \ closest);\n}", "{\n    float min_diff = math.infinity;\n    float min_diff_index\
    \ = 0;\n    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n\
    \    \n    for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.inf;\n    float closest_a = numbers[0];\n\
    \    float closest_b = numbers[0];\n    for (float a : numbers) {\n        float\
    \ diff = abs(a - closest_a);\n        if (diff < min_diff) {\n            min_diff\
    \ = diff;\n            closest_a = a;\n            closest_b = a;\n        }\n\
    \        else if (diff == min_diff) {\n            closest_a = a;\n          \
    \  closest_b = a;\n        }\n        else {\n            closest_b = a;\n   \
    \     }\n    }\n    return tuple(closest_a, closest_b);\n}\n", "{\n    if (numbers.length\
    \ < 2)\n        throw new RuntimeException(\"find_closest_elements expects at\
    \ least two elements\");\n    \n    float min_diff = math.abs(numbers[0] - numbers[1]);\n\
    \    float min_val = numbers[0];\n    float max_val = numbers[0];\n    \n    for\
    \ (int i = 1; i < numbers.length; i++)\n    {\n        float diff = math.abs(numbers[i]\
    \ - numbers[i - 1]);\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min_val = numbers[i];\n        }\n        else if (diff\
    \ > min_diff)\n        {\n            max_val = numbers[i];\n        }\n    }\n\
    \    \n    return tuple(min_val, max_val);\n}\n", "{\n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++) {\n\
    \        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n\
    \            min_diff = diff;\n            min_diff_index = i;\n        }\n  \
    \      if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_a = 0.0;\n  \
    \  float closest_b = 0.0;\n    for (float a : numbers) {\n        for (float b\
    \ : numbers) {\n            float diff = math.abs(a - b);\n            if (diff\
    \ < min_diff) {\n                min_diff = diff;\n                closest_a =\
    \ a;\n                closest_b = b;\n            }\n        }\n    }\n    return\
    \ tuple(closest_a, closest_b);\n}\n", "{\n    if (numbers.length < 2)\n      \
    \  throw new RuntimeException(\"find_closest_elements: array too short\");\n \
    \   \n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n   \
    \ float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    \n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i] - numbers[0];\n\
    \        if (diff < 0)\n            diff = -diff;\n        if (diff < min_diff)\
    \ {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n\
    \        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two numbers\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_num = math.infinity;\n    float max_num = -math.infinity;\n   \
    \ \n    for (int i = 0; i < numbers.length; i++)\n    {\n        float diff =\
    \ numbers[i] - numbers[0];\n        if (diff < min_diff)\n        {\n        \
    \    min_diff = diff;\n            min_num = numbers[i];\n        }\n        if\
    \ (numbers[i] > max_num)\n            max_num = numbers[i];\n    }\n    \n   \
    \ float diff = numbers[0] - numbers[1];\n    if (diff < min_diff)\n    {\n   \
    \     min_diff = diff;\n        min_num = numbers[0];\n    }\n    \n    diff =\
    \ max_num - min_num;\n    if (diff < min_diff)\n    {\n        min_diff = diff;\n\
    \        min_num = max_num;\n    }\n    \n    return tuple(min_num, min_num);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least 2 elements\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0)\n \
    \           diff = -diff;\n        if (diff < min_diff)\n        {\n         \
    \   min_diff = diff;\n            min_diff_index = i;\n        }\n        \n \
    \       diff = numbers[i] - numbers[1];\n        if (diff < 0)\n            diff\
    \ = -diff;\n        if (diff < max_diff)\n        {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}", "{\n    float min_diff = math.infinity;\n   \
    \ float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float max_diff_index\
    \ = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n}\n",
  "{\n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n    float\
    \ max_diff = -math.infinity;\n    float max_diff_index = 0;\n    \n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        float diff = numbers[i] - numbers[0];\n\
    \        if(diff < 0)\n        {\n            diff = -diff;\n        }\n     \
    \   if(diff < min_diff)\n        {\n            min_diff = diff;\n           \
    \ min_diff_index = i;\n        }\n        if(diff > max_diff)\n        {\n   \
    \         max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n\
    \    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n}\n",
  "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements:\
    \ array too short\");\n    \n    float min_diff = math.inf;\n    float min_diff_index\
    \ = 0;\n    float max_diff = math.inf;\n    float max_diff_index = 0;\n    \n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < 0)\n            diff = -diff;\n        if\
    \ (diff < min_diff)\n        {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        \n        diff = numbers[i] - numbers[1];\n       \
    \ if (diff < 0)\n            diff = -diff;\n        if (diff < max_diff)\n   \
    \     {\n            max_diff = diff;\n            max_diff_index = i;\n     \
    \   }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ requires at least two elements\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0)\n \
    \           diff = -diff;\n        if (diff < min_diff)\n        {\n         \
    \   min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff\
    \ > max_diff)\n        {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ needs at least two elements\");\n    \n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (float number : numbers)\n    {\n        if (number\
    \ < min)\n            min = number;\n        if (number > max)\n            max\
    \ = number;\n    }\n    \n    float diff = max - min;\n    float closest = min\
    \ + diff / 2;\n    \n    for (float number : numbers)\n    {\n        if (number\
    \ < closest)\n            closest = number;\n    }\n    \n    return tuple(closest,\
    \ closest);\n}\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index\
    \ = 0;\n    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n\
    \    for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n}\n",
  "{\n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n    float\
    \ max_diff = -math.infinity;\n    float max_diff_index = 0;\n    \n    for (int\
    \ i = 0; i < numbers.length; i++) {\n        float diff = numbers[i] - numbers[0];\n\
    \        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    float min_diff = math.infinity;\n \
    \   float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++) {\n\
    \        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n\
    \            min_diff = diff;\n            min_diff_index = i;\n        }\n  \
    \      if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two numbers\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0)\n \
    \           diff = -diff;\n        if (diff < min_diff)\n        {\n         \
    \   min_diff = diff;\n            min_diff_index = i;\n        }\n        \n \
    \       diff = numbers[i] - numbers[1];\n        if (diff < 0)\n            diff\
    \ = -diff;\n        if (diff < max_diff)\n        {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    if (numbers.length < 2)\n        throw\
    \ new RuntimeException(\"find_closest_elements expects at least 2 numbers\");\n\
    \    \n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n  \
    \  float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    \n   \
    \ for (int i = 0; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff)\n\
    \        {\n            max_diff = diff;\n            max_diff_index = i;\n  \
    \      }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two elements\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++) {\n\
    \        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n\
    \            min_diff = diff;\n            min_diff_index = i;\n        }\n  \
    \      if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two numbers\");\n    \n    float min_diff = math.abs(numbers[0]\
    \ - numbers[1]);\n    float min_num = numbers[0];\n    float max_num = numbers[0];\n\
    \    \n    for (int i = 1; i < numbers.length; i++)\n    {\n        float diff\
    \ = math.abs(numbers[i] - numbers[i-1]);\n        if (diff < min_diff)\n     \
    \   {\n            min_diff = diff;\n            min_num = numbers[i];\n     \
    \   }\n        \n        if (diff > max_diff)\n        {\n            max_diff\
    \ = diff;\n            max_num = numbers[i];\n        }\n    }\n    \n    return\
    \ tuple(min_num, max_num);\n}\n", "{\n    if (numbers.length < 2)\n        throw\
    \ new RuntimeException(\"find_closest_elements expects at least two elements\"\
    );\n    \n    float min_diff = math.abs(numbers[0] - numbers[1]);\n    float min_value\
    \ = numbers[0];\n    float max_value = numbers[0];\n    \n    for (int i = 1;\
    \ i < numbers.length; i++)\n    {\n        float diff = math.abs(numbers[i] -\
    \ numbers[i-1]);\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min_value = numbers[i];\n        }\n        else if (diff\
    \ > min_diff)\n        {\n            max_value = numbers[i];\n        }\n   \
    \ }\n    \n    return tuple(min_value, max_value);\n}\n", "{\n    if (numbers.length\
    \ < 2)\n        throw new RuntimeException(\"find_closest_elements: array too\
    \ short\");\n    \n    float min_diff = math.infinity;\n    float min_diff_index\
    \ = 0;\n    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n\
    \    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        float diff\
    \ = numbers[i] - numbers[0];\n        if (diff < min_diff)\n        {\n      \
    \      min_diff = diff;\n            min_diff_index = i;\n        }\n        if\
    \ (diff > max_diff)\n        {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements:\
    \ array too short\");\n    \n    float min_diff = math.infinity;\n    float min_diff_index\
    \ = 0;\n    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n\
    \    \n    for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n\
    \    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i] - numbers[0];\n\
    \        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    float min_diff = math.infinity;\n \
    \   float closest_1 = numbers[0];\n    float closest_2 = numbers[0];\n    for(float\
    \ i : numbers)\n    {\n        float diff = i - closest_1;\n        if(diff <\
    \ 0)\n            diff = -diff;\n        if(diff < min_diff)\n        {\n    \
    \        min_diff = diff;\n            closest_1 = i;\n            closest_2 =\
    \ i;\n        }\n        else if(diff == min_diff)\n        {\n            closest_1\
    \ = i;\n            closest_2 = i;\n        }\n    }\n    return tuple(closest_1,\
    \ closest_2);\n}\n", "{\n    return Tuple(numbers[0], numbers[1]);\n}\n", "{\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (float number\
    \ : numbers) {\n        if (number < min) {\n            min = number;\n     \
    \   }\n        if (number > max) {\n            max = number;\n        }\n   \
    \ }\n    float diff = max - min;\n    float closest = min + diff / 2;\n    float\
    \ closest2 = min + diff / 2;\n    for (float number : numbers) {\n        if (number\
    \ < closest) {\n            closest = number;\n        }\n        if (number >\
    \ closest2) {\n            closest2 = number;\n        }\n    }\n    return tuple(closest,\
    \ closest2);\n}\n", "{\n    float min_diff = math.inf;\n    float min_diff_index\
    \ = 0;\n    float max_diff = math.inf;\n    float max_diff_index = 0;\n    \n\
    \    for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n\
    \    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    \n \
    \   for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n\
    \    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i] - numbers[0];\n\
    \        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    float min_diff = math.infinity;\n \
    \   float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for(int i = 0; i < numbers.length; i++) {\n \
    \       float diff = numbers[i] - numbers[0];\n        if(diff < min_diff) {\n\
    \            min_diff = diff;\n            min_diff_index = i;\n        }\n  \
    \      if(diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two elements\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++) {\n\
    \        float diff = numbers[i] - numbers[0];\n        if (diff < 0)\n      \
    \      diff = -diff;\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n\
    \    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i] - numbers[0];\n\
    \        if (diff < 0) {\n            diff = -diff;\n        }\n        if (diff\
    \ < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n\
    \        }\n        if (diff > max_diff) {\n            max_diff = diff;\n   \
    \         max_diff_index = i;\n        }\n    }\n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    if (numbers.length < 2)\n        throw\
    \ new RuntimeException(\"find_closest_elements requires at least two elements\"\
    );\n    \n    float min_diff = math.infinity;\n    float closest_a = numbers[0];\n\
    \    float closest_b = numbers[0];\n    \n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        float diff = numbers[i] - closest_a;\n        if (diff\
    \ < 0)\n            diff = -diff;\n        if (diff < min_diff)\n        {\n \
    \           min_diff = diff;\n            closest_a = numbers[i];\n        }\n\
    \        \n        diff = numbers[i] - closest_b;\n        if (diff < 0)\n   \
    \         diff = -diff;\n        if (diff < min_diff)\n        {\n           \
    \ min_diff = diff;\n            closest_b = numbers[i];\n        }\n    }\n  \
    \  \n    return tuple(closest_a, closest_b);\n}\n", "{\n    if (numbers.length\
    \ < 2)\n        throw new RuntimeException(\"find_closest_elements: array must\
    \ be at least two elements long\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0)\n \
    \           diff = -diff;\n        if (diff < min_diff)\n        {\n         \
    \   min_diff = diff;\n            min_diff_index = i;\n        }\n        \n \
    \       diff = numbers[i] - numbers[1];\n        if (diff < 0)\n            diff\
    \ = -diff;\n        if (diff < max_diff)\n        {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    if (numbers.length < 2)\n        throw\
    \ new RuntimeException(\"find_closest_elements expects at least two numbers\"\
    );\n    \n    float min_diff = math.inf;\n    float min_diff_index = 0;\n    float\
    \ max_diff = math.inf;\n    float max_diff_index = 0;\n    \n    for (int i =\
    \ 0; i < numbers.length; i++)\n    {\n        float diff = numbers[i] - numbers[0];\n\
    \        if (diff < 0)\n            diff = -diff;\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min_diff_index = i;\n  \
    \      }\n        \n        diff = numbers[i] - numbers[1];\n        if (diff\
    \ < 0)\n            diff = -diff;\n        if (diff < max_diff)\n        {\n \
    \           max_diff = diff;\n            max_diff_index = i;\n        }\n   \
    \ }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ requires at least two elements\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++) {\n\
    \        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n\
    \            min_diff = diff;\n            min_diff_index = i;\n        }\n  \
    \      if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_a = 0.0;\n  \
    \  float closest_b = 0.0;\n    for (int i = 0; i < numbers.length - 1; i++) {\n\
    \        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff)\
    \ {\n            min_diff = diff;\n            closest_a = numbers[i];\n     \
    \       closest_b = numbers[i + 1];\n        }\n    }\n    return tuple(closest_a,\
    \ closest_b);\n}\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index\
    \ = 0;\n    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n\
    \    for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n}\n",
  "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least 2 numbers\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min_diff_index = i;\n  \
    \      }\n        \n        diff = numbers[i] - numbers[1];\n        if (diff\
    \ < min_diff)\n        {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        \n        diff = numbers[i] - numbers[0];\n       \
    \ if (diff > max_diff)\n        {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n        \n        diff = numbers[i] - numbers[1];\n       \
    \ if (diff > max_diff)\n        {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"Not\
    \ enough numbers to find closest elements\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++) {\n\
    \        float diff = numbers[i] - numbers[0];\n        if (diff < 0)\n      \
    \      diff = -diff;\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ requires at least two elements\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min_diff_index = i;\n  \
    \      }\n        if (diff > max_diff)\n        {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    if (numbers.length < 2)\n        throw\
    \ new RuntimeException(\"find_closest_elements: array length must be at least\
    \ 2\");\n    \n    float min_diff = math.infinity;\n    float min_num = math.infinity;\n\
    \    float max_num = -math.infinity;\n    \n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        float diff = numbers[i] - numbers[0];\n        if (diff\
    \ < min_diff)\n        {\n            min_diff = diff;\n            min_num =\
    \ numbers[i];\n        }\n        if (numbers[i] > max_num)\n            max_num\
    \ = numbers[i];\n    }\n    \n    float diff = max_num - min_num;\n    if (diff\
    \ < 0.00001)\n        return tuple(min_num, max_num);\n    \n    float min_diff_2\
    \ = math.infinity;\n    float min_num_2 = math.infinity;\n    float max_num_2\
    \ = -math.infinity;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        float diff = numbers[i] - numbers[1];\n        if (diff < min_diff_2)\n\
    \        {\n            min_diff_2 = diff;\n            min_num_2 = numbers[i];\n\
    \        }\n        if (numbers[i] > max_num_2)\n            max_num_2 = numbers[i];\n\
    \    }\n    \n    diff = max_num_2 - min_num_2;\n    if (diff < 0.00001)\n   \
    \     return tuple(min_num_2, max_num_2);\n    \n    return tuple(min_num, min_num_2);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two numbers\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min_diff_index = i;\n  \
    \      }\n        if (diff > max_diff)\n        {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    float min_diff = math.infinity;\n \
    \   float closest_a = 0.0;\n    float closest_b = 0.0;\n    for (float a : numbers)\n\
    \    {\n        for (float b : numbers)\n        {\n            float diff = abs(a\
    \ - b);\n            if (diff < min_diff)\n            {\n                min_diff\
    \ = diff;\n                closest_a = a;\n                closest_b = b;\n  \
    \          }\n        }\n    }\n    return tuple(closest_a, closest_b);\n}\n",
  "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two numbers\");\n    \n    float min_diff = math.abs(numbers[0]\
    \ - numbers[1]);\n    float min_num = numbers[0];\n    float max_num = numbers[0];\n\
    \    \n    for (int i = 1; i < numbers.length; i++)\n    {\n        float diff\
    \ = math.abs(numbers[i] - numbers[i-1]);\n        if (diff < min_diff)\n     \
    \   {\n            min_diff = diff;\n            min_num = numbers[i];\n     \
    \   }\n        else if (diff > min_diff)\n        {\n            max_num = numbers[i];\n\
    \        }\n    }\n    \n    return tuple(min_num, max_num);\n}\n", "{\n    float\
    \ min_diff = math.inf;\n    float closest_a = 0.0;\n    float closest_b = 0.0;\n\
    \    for (float a : numbers) {\n        for (float b : numbers) {\n          \
    \  float diff = abs(a - b);\n            if (diff < min_diff) {\n            \
    \    min_diff = diff;\n                closest_a = a;\n                closest_b\
    \ = b;\n            }\n        }\n    }\n    return tuple(closest_a, closest_b);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements:\
    \ array too short\");\n    \n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n\
    \            min = numbers[i];\n        if (numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    \n    float diff = max - min;\n    float closest =\
    \ min + diff / 2.0;\n    \n    for (int i = 0; i < numbers.length; i++) {\n  \
    \      if (numbers[i] < closest) {\n            closest = numbers[i];\n      \
    \  }\n    }\n    \n    return tuple(closest, closest);\n}", "{\n    if (numbers.length\
    \ < 2)\n        throw new RuntimeException(\"find_closest_elements expects at\
    \ least 2 elements\");\n    \n    float min_diff = math.infinity;\n    float min_diff_index\
    \ = 0;\n    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n\
    \    \n    for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements:\
    \ array must have at least two elements\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0)\n \
    \           diff = -diff;\n        if (diff < min_diff)\n        {\n         \
    \   min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff\
    \ > max_diff)\n        {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_a = 0;\n    float\
    \ closest_b = 0;\n    for (int i = 0; i < numbers.length - 1; i++) {\n       \
    \ float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n\
    \            min_diff = diff;\n            closest_a = numbers[i];\n         \
    \   closest_b = numbers[i + 1];\n        }\n    }\n    return tuple(closest_a,\
    \ closest_b);\n}\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index\
    \ = 0;\n    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n\
    \    \n    for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two elements\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0)\n \
    \           diff = -diff;\n        if (diff < min_diff)\n        {\n         \
    \   min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff\
    \ > max_diff)\n        {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_1 = 0.0;\n  \
    \  float closest_2 = 0.0;\n    for (float i : numbers) {\n        float diff =\
    \ i - closest_1;\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            closest_1 = i;\n        }\n        diff = i - closest_2;\n      \
    \  if (diff < min_diff) {\n            min_diff = diff;\n            closest_2\
    \ = i;\n        }\n    }\n    return tuple(closest_1, closest_2);\n}\n", "{\n\
    \    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two numbers\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0)\n \
    \           diff = -diff;\n        if (diff < min_diff)\n        {\n         \
    \   min_diff = diff;\n            min_diff_index = i;\n        }\n        \n \
    \       diff = numbers[i] - numbers[1];\n        if (diff < 0)\n            diff\
    \ = -diff;\n        if (diff < max_diff)\n        {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    float min_diff = math.infinity;\n \
    \   float closest_a = 0.0;\n    float closest_b = 0.0;\n    for (float a : numbers)\n\
    \    {\n        for (float b : numbers)\n        {\n            float diff = math.abs(a\
    \ - b);\n            if (diff < min_diff)\n            {\n                min_diff\
    \ = diff;\n                closest_a = a;\n                closest_b = b;\n  \
    \          }\n        }\n    }\n    return tuple(closest_a, closest_b);\n}\n",
  "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements:\
    \ array too short\");\n    \n    float min_diff = math.infinity;\n    float min_diff_index\
    \ = 0;\n    float min_diff_value = math.infinity;\n    float max_diff = -math.infinity;\n\
    \    float max_diff_index = 0;\n    float max_diff_value = -math.infinity;\n \
    \   \n    for (int i = 0; i < numbers.length; i++)\n    {\n        float diff\
    \ = numbers[i] - numbers[0];\n        if (diff < min_diff)\n        {\n      \
    \      min_diff = diff;\n            min_diff_index = i;\n            min_diff_value\
    \ = numbers[i];\n        }\n        if (diff > max_diff)\n        {\n        \
    \    max_diff = diff;\n            max_diff_index = i;\n            max_diff_value\
    \ = numbers[i];\n        }\n    }\n    \n    return tuple(min_diff_value, max_diff_value);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_a = 0.0;\n  \
    \  float closest_b = 0.0;\n    for (int i = 0; i < numbers.length - 1; i++) {\n\
    \        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff)\
    \ {\n            min_diff = diff;\n            closest_a = numbers[i];\n     \
    \       closest_b = numbers[i + 1];\n        }\n    }\n    return tuple(closest_a,\
    \ closest_b);\n}\n", "{\n    float min_diff = math.infinity;\n    float closest_a\
    \ = 0;\n    float closest_b = 0;\n    for (int i = 0; i < numbers.length - 1;\
    \ i++) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff\
    \ < min_diff) {\n            min_diff = diff;\n            closest_a = numbers[i];\n\
    \            closest_b = numbers[i + 1];\n        }\n    }\n    return tuple(closest_a,\
    \ closest_b);\n}\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index\
    \ = 0;\n    float max_diff = math.infinity;\n    float max_diff_index = 0;\n \
    \   \n    for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"Not\
    \ enough numbers to find closest pair\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float min_diff_value = math.infinity;\n  \
    \  float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    float\
    \ max_diff_value = -math.infinity;\n    \n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        float diff = numbers[i] - numbers[0];\n        if (diff\
    \ < min_diff)\n        {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n            min_diff_value = numbers[i];\n        }\n        if (diff\
    \ > max_diff)\n        {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n            max_diff_value = numbers[i];\n        }\n    }\n    \n   \
    \ return tuple(min_diff_value, max_diff_value);\n}\n", "{\n    float min_diff\
    \ = math.infinity;\n    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n\
    \    float max_diff_index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n\
    \        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n\
    \            min_diff = diff;\n            min_diff_index = i;\n        }\n  \
    \      if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two elements\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min_diff_index = i;\n  \
    \      }\n        \n        diff = numbers[i] - numbers[1];\n        if (diff\
    \ < min_diff)\n        {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        \n        diff = numbers[i] - numbers[0];\n       \
    \ if (diff > max_diff)\n        {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n        \n        diff = numbers[i] - numbers[1];\n       \
    \ if (diff > max_diff)\n        {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ requires at least two elements\");\n    \n    float min_diff = math.inf;\n \
    \   float min_diff_index = 0;\n    float min_diff_value = math.inf;\n    float\
    \ max_diff = -math.inf;\n    float max_diff_index = 0;\n    float max_diff_value\
    \ = -math.inf;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n  \
    \      float diff = numbers[i] - numbers[0];\n        if (diff < min_diff)\n \
    \       {\n            min_diff = diff;\n            min_diff_index = i;\n   \
    \         min_diff_value = numbers[i];\n        }\n        \n        diff = numbers[i]\
    \ - numbers[1];\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min_diff_index = i;\n            min_diff_value = numbers[i];\n\
    \        }\n        \n        diff = numbers[i] - numbers[0];\n        if (diff\
    \ > max_diff)\n        {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n            max_diff_value = numbers[i];\n        }\n        \n      \
    \  diff = numbers[i] - numbers[1];\n        if (diff > max_diff)\n        {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n            max_diff_value\
    \ = numbers[i];\n        }\n    }\n    \n    return tuple(min_diff_value, max_diff_value);\n\
    }\n", "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float diff = max - min;\n    float\
    \ closest = min + diff / 2.0;\n    float closest2 = min - diff / 2.0;\n    return\
    \ tuple(closest, closest2);\n}\n", "{\n    float min_diff = math.infinity;\n \
    \   float closest_1 = 0.0;\n    float closest_2 = 0.0;\n    for (float i : numbers)\
    \ {\n        float diff = abs(i - closest_1);\n        if (diff < min_diff) {\n\
    \            min_diff = diff;\n            closest_1 = i;\n        }\n       \
    \ diff = abs(i - closest_2);\n        if (diff < min_diff) {\n            min_diff\
    \ = diff;\n            closest_2 = i;\n        }\n    }\n    return tuple(closest_1,\
    \ closest_2);\n}\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"\
    find_closest_elements expects at least two numbers\");\n    \n    float min_diff\
    \ = math.infinity;\n    float min_diff_index = 0;\n    float max_diff = math.infinity;\n\
    \    float max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        float diff = numbers[i] - numbers[0];\n        if (diff\
    \ < 0)\n            diff = -diff;\n        if (diff < min_diff)\n        {\n \
    \           min_diff = diff;\n            min_diff_index = i;\n        }\n   \
    \     if (diff > max_diff)\n        {\n            max_diff = diff;\n        \
    \    max_diff_index = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    if (numbers.length < 2)\n        throw\
    \ new RuntimeException(\"find_closest_elements requires at least two elements\"\
    );\n    \n    float min_diff = math.inf;\n    float min_diff_index = 0;\n    float\
    \ max_diff = math.inf;\n    float max_diff_index = 0;\n    \n    for (int i =\
    \ 0; i < numbers.length; i++)\n    {\n        float diff = numbers[i] - numbers[0];\n\
    \        if (diff < 0)\n            diff = -diff;\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min_diff_index = i;\n  \
    \      }\n        \n        diff = numbers[i] - numbers[1];\n        if (diff\
    \ < 0)\n            diff = -diff;\n        if (diff < max_diff)\n        {\n \
    \           max_diff = diff;\n            max_diff_index = i;\n        }\n   \
    \ }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two elements\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_val = math.infinity;\n    float max_val = -math.infinity;\n   \
    \ \n    for (int i = 0; i < numbers.length; i++)\n    {\n        float diff =\
    \ numbers[i] - numbers[0];\n        if (diff < min_diff)\n        {\n        \
    \    min_diff = diff;\n            min_val = numbers[i];\n        }\n        if\
    \ (diff > max_val)\n            max_val = diff;\n    }\n    \n    float diff =\
    \ numbers[1] - numbers[0];\n    if (diff < min_diff)\n    {\n        min_diff\
    \ = diff;\n        min_val = numbers[1];\n    }\n    if (diff > max_val)\n   \
    \     max_val = diff;\n    \n    float diff2 = numbers[numbers.length - 1] - numbers[numbers.length\
    \ - 2];\n    if (diff2 < min_diff)\n    {\n        min_diff = diff2;\n       \
    \ min_val = numbers[numbers.length - 1];\n    }\n    if (diff2 > max_val)\n  \
    \      max_val = diff2;\n    \n    return tuple(min_val, max_val);\n}\n", "{\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    float diff = max - min;\n    float closest\
    \ = min + diff / 2;\n    float closest2 = min + diff / 2;\n    for (int i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < closest) {\n          \
    \  closest = numbers[i];\n        }\n        if (numbers[i] > closest2) {\n  \
    \          closest2 = numbers[i];\n        }\n    }\n    return tuple(closest,\
    \ closest2);\n}\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index\
    \ = 0;\n    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n\
    \    \n    for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_a = 0.0;\n  \
    \  float closest_b = 0.0;\n    for (int i = 0; i < numbers.length; i++) {\n  \
    \      float diff = numbers[i] - numbers[0];\n        if (diff < 0)\n        \
    \    diff = -diff;\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            closest_a = numbers[i];\n            closest_b = numbers[0];\n  \
    \      }\n    }\n    return tuple(closest_a, closest_b);\n}\n", "{\n    float\
    \ min_diff = math.infinity;\n    float closest_a = 0.0;\n    float closest_b =\
    \ 0.0;\n    for (int i = 0; i < numbers.length - 1; i++) {\n        float diff\
    \ = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n           \
    \ min_diff = diff;\n            closest_a = numbers[i];\n            closest_b\
    \ = numbers[i + 1];\n        }\n    }\n    return tuple(closest_a, closest_b);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements:\
    \ array too short\");\n    \n    float min_diff = math.abs(numbers[0] - numbers[1]);\n\
    \    float min_num = numbers[0];\n    float max_num = numbers[0];\n    \n    for\
    \ (int i = 1; i < numbers.length; i++) {\n        float diff = math.abs(numbers[i]\
    \ - numbers[i-1]);\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_num = numbers[i];\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_num = numbers[i];\n        }\n\
    \    }\n    \n    return tuple(min_num, max_num);\n}\n", "{\n    float min_diff\
    \ = math.infinity;\n    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n\
    \    float max_diff_index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n\
    \        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n\
    \            min_diff = diff;\n            min_diff_index = i;\n        }\n  \
    \      if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two elements\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0)\n \
    \           diff = -diff;\n        if (diff < min_diff)\n        {\n         \
    \   min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff\
    \ > max_diff)\n        {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements:\
    \ array must be at least two elements long\");\n    \n    float min_diff = math.abs(numbers[0]\
    \ - numbers[1]);\n    float min_val = numbers[0];\n    float max_val = numbers[0];\n\
    \    \n    for (int i = 1; i < numbers.length; i++)\n    {\n        float diff\
    \ = math.abs(numbers[i] - numbers[i-1]);\n        if (diff < min_diff)\n     \
    \   {\n            min_diff = diff;\n            min_val = numbers[i];\n     \
    \   }\n        \n        if (numbers[i] > max_val)\n            max_val = numbers[i];\n\
    \    }\n    \n    return tuple(min_val, max_val);\n}\n", "{\n    float min_diff\
    \ = math.infinity;\n    float closest_a = 0.0;\n    float closest_b = 0.0;\n \
    \   for (float a : numbers)\n    {\n        for (float b : numbers)\n        {\n\
    \            float diff = abs(a - b);\n            if (diff < min_diff)\n    \
    \        {\n                min_diff = diff;\n                closest_a = a;\n\
    \                closest_b = b;\n            }\n        }\n    }\n    return tuple(closest_a,\
    \ closest_b);\n}\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index\
    \ = 0;\n    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n\
    \    \n    for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float diff = max - min;\n    float\
    \ closest = min + diff / 2;\n    float closest2 = min - diff / 2;\n    return\
    \ tuple(closest, closest2);\n}\n", "{\n    float min_diff = math.infinity;\n \
    \   float closest_a = 0.0;\n    float closest_b = 0.0;\n    for (float a : numbers)\
    \ {\n        for (float b : numbers) {\n            float diff = math.abs(a -\
    \ b);\n            if (diff < min_diff) {\n                min_diff = diff;\n\
    \                closest_a = a;\n                closest_b = b;\n            }\n\
    \        }\n    }\n    return tuple(closest_a, closest_b);\n}\n", "{\n    if (numbers.length\
    \ < 2)\n        throw new RuntimeException(\"find_closest_elements expects at\
    \ least two elements\");\n    \n    float min_diff = math.infinity;\n    float\
    \ min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float max_diff_index\
    \ = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        float\
    \ diff = numbers[i] - numbers[0];\n        if (diff < 0)\n            diff = -diff;\n\
    \        if (diff < min_diff)\n        {\n            min_diff = diff;\n     \
    \       min_diff_index = i;\n        }\n        if (diff > max_diff)\n       \
    \ {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n\
    \    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n\
    \    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i] - numbers[0];\n\
    \        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    float min_diff = math.inf;\n    float\
    \ min_diff_index = 0;\n    float max_diff = math.inf;\n    float max_diff_index\
    \ = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        float\
    \ diff = numbers[i] - numbers[0];\n        if(diff < min_diff)\n        {\n  \
    \          min_diff = diff;\n            min_diff_index = i;\n        }\n    \
    \    if(diff > max_diff)\n        {\n            max_diff = diff;\n          \
    \  max_diff_index = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    if (numbers.length < 2)\n        throw\
    \ new RuntimeException(\"find_closest_elements: array too short\");\n    \n  \
    \  float min_diff = math.infinity;\n    float min_diff_index = 0;\n    float min_diff_value\
    \ = math.infinity;\n    float max_diff = -math.infinity;\n    float max_diff_index\
    \ = 0;\n    float max_diff_value = -math.infinity;\n    \n    for (int i = 0;\
    \ i < numbers.length; i++)\n    {\n        float diff = numbers[i] - numbers[0];\n\
    \        if (diff < min_diff)\n        {\n            min_diff = diff;\n     \
    \       min_diff_index = i;\n            min_diff_value = numbers[i];\n      \
    \  }\n        if (diff > max_diff)\n        {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n            max_diff_value = numbers[i];\n \
    \       }\n    }\n    \n    return tuple(min_diff_value, max_diff_value);\n}\n",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (float number\
    \ : numbers) {\n        if (number < min) {\n            min = number;\n     \
    \   }\n        if (number > max) {\n            max = number;\n        }\n   \
    \ }\n    float diff = max - min;\n    float closest = min + diff / 2.0;\n    float\
    \ closest2 = min - diff / 2.0;\n    return tuple(closest, closest2);\n}\n", "{\n\
    \    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements:\
    \ array too short\");\n    \n    float min_diff = math.abs(numbers[0] - numbers[1]);\n\
    \    float min_val = numbers[0];\n    float max_val = numbers[0];\n    \n    for\
    \ (int i = 1; i < numbers.length; i++) {\n        float diff = math.abs(numbers[i]\
    \ - numbers[i-1]);\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_val = numbers[i];\n        }\n        \n        if (numbers[i]\
    \ > max_val)\n            max_val = numbers[i];\n    }\n    \n    return tuple(min_val,\
    \ max_val);\n}\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index\
    \ = 0;\n    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n\
    \    for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n}\n",
  "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"Not enough\
    \ numbers to find closest elements\");\n    \n    float min_diff = math.inf;\n\
    \    float min_diff_index = 0;\n    float min_diff_value = math.inf;\n    float\
    \ max_diff = -math.inf;\n    float max_diff_index = 0;\n    float max_diff_value\
    \ = -math.inf;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n  \
    \      float diff = numbers[i] - numbers[0];\n        if (diff < min_diff)\n \
    \       {\n            min_diff = diff;\n            min_diff_index = i;\n   \
    \         min_diff_value = numbers[i];\n        }\n        if (diff > max_diff)\n\
    \        {\n            max_diff = diff;\n            max_diff_index = i;\n  \
    \          max_diff_value = numbers[i];\n        }\n    }\n    \n    return tuple(min_diff_value,\
    \ max_diff_value);\n}\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"\
    find_closest_elements expects at least two numbers\");\n    \n    float min_diff\
    \ = math.abs(numbers[0] - numbers[1]);\n    float min_num = numbers[0];\n    float\
    \ max_num = numbers[0];\n    \n    for (int i = 1; i < numbers.length; i++) {\n\
    \        float diff = math.abs(numbers[i] - numbers[i-1]);\n        if (diff <\
    \ min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n\
    \            max_num = numbers[i-1];\n        }\n    }\n    \n    return tuple(min_num,\
    \ max_num);\n}\n", "{\n    return Tuple(numbers[0], numbers[1]);\n}\n", "{\n \
    \   float min_diff = math.infinity;\n    float min_diff_index = 0;\n    float\
    \ max_diff = -math.infinity;\n    float max_diff_index = 0;\n    for (int i =\
    \ 0; i < numbers.length; i++) {\n        float diff = numbers[i] - numbers[0];\n\
    \        if (diff < 0) diff = -diff;\n        if (diff < min_diff) {\n       \
    \     min_diff = diff;\n            min_diff_index = i;\n        }\n        if\
    \ (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n\
    \    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i] - numbers[0];\n\
    \        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    if (numbers.length < 2)\n        throw\
    \ new RuntimeException(\"find_closest_elements expects at least two numbers\"\
    );\n    \n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n\
    \    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    \n \
    \   for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_a = 0.0;\n  \
    \  float closest_b = 0.0;\n    for (float a : numbers) {\n        for (float b\
    \ : numbers) {\n            float diff = abs(a - b);\n            if (diff < min_diff)\
    \ {\n                min_diff = diff;\n                closest_a = a;\n      \
    \          closest_b = b;\n            }\n        }\n    }\n    return tuple(closest_a,\
    \ closest_b);\n}\n", "{\n    float min_diff = math.infinity;\n    float closest_a\
    \ = 0.0;\n    float closest_b = 0.0;\n    for (float a : numbers) {\n        for\
    \ (float b : numbers) {\n            float diff = abs(a - b);\n            if\
    \ (diff < min_diff) {\n                min_diff = diff;\n                closest_a\
    \ = a;\n                closest_b = b;\n            }\n        }\n    }\n    return\
    \ tuple(closest_a, closest_b);\n}\n", "{\n    return Tuple(numbers[0], numbers[1]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_num_1 = 0.0;\n\
    \    float closest_num_2 = 0.0;\n    for (int i = 0; i < numbers.length; i++)\
    \ {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff)\
    \ {\n            min_diff = diff;\n            closest_num_1 = numbers[i];\n \
    \           closest_num_2 = numbers[0];\n        }\n    }\n    return tuple(closest_num_1,\
    \ closest_num_2);\n}\n", "{\n    float min_diff = math.infinity;\n    float closest_a\
    \ = 0.0;\n    float closest_b = 0.0;\n    for (int i = 0; i < numbers.length -\
    \ 1; i++) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff\
    \ < min_diff) {\n            min_diff = diff;\n            closest_a = numbers[i];\n\
    \            closest_b = numbers[i + 1];\n        }\n    }\n    return tuple(closest_a,\
    \ closest_b);\n}\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"\
    find_closest_elements: array length must be at least 2\");\n    \n    float min_diff\
    \ = math.infinity;\n    float min_diff_index = 0;\n    float min_diff_value =\
    \ 0;\n    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n  \
    \  float max_diff_value = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0)\n\
    \            diff = -diff;\n        if (diff < min_diff)\n        {\n        \
    \    min_diff = diff;\n            min_diff_index = i;\n            min_diff_value\
    \ = numbers[i];\n        }\n        if (diff > max_diff)\n        {\n        \
    \    max_diff = diff;\n            max_diff_index = i;\n            max_diff_value\
    \ = numbers[i];\n        }\n    }\n    \n    return tuple(min_diff_value, max_diff_value);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"Not\
    \ enough elements in the array\");\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n    {\n       \
    \ if (numbers[i] < min)\n            min = numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float diff = max - min;\n\
    \    float closest = min + diff / 2;\n    float closest_other = min + diff / 2;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        if (numbers[i] <\
    \ closest)\n        {\n            closest = numbers[i];\n            closest_other\
    \ = min + diff / 2;\n        }\n        else if (numbers[i] > closest_other)\n\
    \        {\n            closest_other = numbers[i];\n        }\n    }\n    return\
    \ tuple(closest, closest_other);\n}\n", "{\n    float min_diff = math.infinity;\n\
    \    float closest_a = 0.0;\n    float closest_b = 0.0;\n    for (float a : numbers)\
    \ {\n        for (float b : numbers) {\n            float diff = abs(a - b);\n\
    \            if (diff < min_diff) {\n                min_diff = diff;\n      \
    \          closest_a = a;\n                closest_b = b;\n            }\n   \
    \     }\n    }\n    return tuple(closest_a, closest_b);\n}\n", "{\n    float min_diff\
    \ = math.infinity;\n    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n\
    \    float max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0)\
    \ diff = -diff;\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.inf;\n    float min_diff_index = 0;\n    float\
    \ max_diff = math.inf;\n    float max_diff_index = 0;\n    for (int i = 0; i <\
    \ numbers.length; i++) {\n        float diff = numbers[i] - numbers[0];\n    \
    \    if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    if (numbers.length < 2)\n        throw\
    \ new RuntimeException(\"find_closest_elements expects at least two elements\"\
    );\n    \n    float min_diff = math.abs(numbers[0] - numbers[1]);\n    float min_num\
    \ = numbers[0];\n    float max_num = numbers[0];\n    \n    for (int i = 1; i\
    \ < numbers.length; i++)\n    {\n        float diff = math.abs(numbers[i] - numbers[i\
    \ - 1]);\n        if (diff < min_diff)\n        {\n            min_diff = diff;\n\
    \            min_num = numbers[i];\n        }\n        else if (diff > min_diff)\n\
    \        {\n            max_num = numbers[i];\n        }\n    }\n    \n    return\
    \ tuple(min_num, max_num);\n}\n", "{\n    if (numbers.length < 2)\n        throw\
    \ new RuntimeException(\"find_closest_elements: array too short\");\n    \n  \
    \  float min_diff = math.inf;\n    float min_diff_index = 0;\n    float min_diff_value\
    \ = math.inf;\n    float max_diff = -math.inf;\n    float max_diff_index = 0;\n\
    \    float max_diff_value = -math.inf;\n    \n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff)\
    \ {\n            min_diff = diff;\n            min_diff_index = i;\n         \
    \   min_diff_value = numbers[i];\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n            max_diff_value\
    \ = numbers[i];\n        }\n    }\n    \n    return tuple(min_diff_value, max_diff_value);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements:\
    \ array must be at least 2 elements long\");\n    \n    float min_diff = math.abs(numbers[0]\
    \ - numbers[1]);\n    float min_value = numbers[0];\n    float max_value = numbers[0];\n\
    \    \n    for (int i = 1; i < numbers.length; i++)\n    {\n        float diff\
    \ = math.abs(numbers[i] - numbers[i-1]);\n        if (diff < min_diff)\n     \
    \   {\n            min_diff = diff;\n            min_value = numbers[i];\n   \
    \     }\n        else if (diff > min_diff)\n        {\n            max_value =\
    \ numbers[i];\n        }\n    }\n    \n    return tuple(min_value, max_value);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two numbers\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++) {\n\
    \        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n\
    \            min_diff = diff;\n            min_diff_index = i;\n        }\n  \
    \      if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two elements\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min_diff_index = i;\n  \
    \      }\n        if (diff > max_diff)\n        {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    return Tuple(numbers[0], numbers[1]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ expects at least two elements\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++) {\n\
    \        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n\
    \            min_diff = diff;\n            min_diff_index = i;\n        }\n  \
    \      if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_a = 0.0;\n  \
    \  float closest_b = 0.0;\n    for (float a : numbers)\n    {\n        for (float\
    \ b : numbers)\n        {\n            float diff = abs(a - b);\n            if\
    \ (diff < min_diff)\n            {\n                min_diff = diff;\n       \
    \         closest_a = a;\n                closest_b = b;\n            }\n    \
    \    }\n    }\n    return tuple(closest_a, closest_b);\n}\n", "{\n    float min_diff\
    \ = math.infinity;\n    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n\
    \    float max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff)\
    \ {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n\
    \        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_a = 0.0;\n  \
    \  float closest_b = 0.0;\n    for (float a : numbers)\n    {\n        for (float\
    \ b : numbers)\n        {\n            float diff = abs(a - b);\n            if\
    \ (diff < min_diff)\n            {\n                min_diff = diff;\n       \
    \         closest_a = a;\n                closest_b = b;\n            }\n    \
    \    }\n    }\n    return tuple(closest_a, closest_b);\n}\n", "{\n    float min_diff\
    \ = math.infinity;\n    float closest_a = 0.0;\n    float closest_b = 0.0;\n \
    \   for(int i = 0; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if(diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            closest_a = numbers[i];\n            closest_b = numbers[0];\n\
    \        }\n        else if(diff > min_diff)\n        {\n            min_diff\
    \ = diff;\n            closest_a = numbers[0];\n            closest_b = numbers[i];\n\
    \        }\n    }\n    return tuple(closest_a, closest_b);\n}\n", "{\n    if (numbers.length\
    \ < 2)\n        throw new RuntimeException(\"find_closest_elements: array must\
    \ be at least 2 elements long\");\n    \n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++) {\n\
    \        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n\
    \            min_diff = diff;\n            min_diff_index = i;\n        }\n  \
    \      if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_a = 0.0;\n  \
    \  float closest_b = 0.0;\n    for (float a : numbers) {\n        for (float b\
    \ : numbers) {\n            float diff = math.abs(a - b);\n            if (diff\
    \ < min_diff) {\n                min_diff = diff;\n                closest_a =\
    \ a;\n                closest_b = b;\n            }\n        }\n    }\n    return\
    \ tuple(closest_a, closest_b);\n}\n", "{\n    float min_diff = math.infinity;\n\
    \    float closest_a = 0;\n    float closest_b = 0;\n    for (int i = 0; i < numbers.length\
    \ - 1; i++) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff\
    \ < min_diff) {\n            min_diff = diff;\n            closest_a = numbers[i];\n\
    \            closest_b = numbers[i + 1];\n        }\n    }\n    return tuple(closest_a,\
    \ closest_b);\n}\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"\
    find_closest_elements expects at least 2 elements\");\n    \n    float min_diff\
    \ = math.abs(numbers[0] - numbers[1]);\n    float min_diff_index = 0;\n    float\
    \ max_diff = math.abs(numbers[0] - numbers[1]);\n    float max_diff_index = 0;\n\
    \    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        float diff\
    \ = math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff)\n       \
    \ {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n\
    \        diff = math.abs(numbers[i] - numbers[1]);\n        if (diff < max_diff)\n\
    \        {\n            max_diff = diff;\n            max_diff_index = i;\n  \
    \      }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n\
    \    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    \n \
    \   for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_a = 0.0;\n  \
    \  float closest_b = 0.0;\n    for (float a : numbers) {\n        for (float b\
    \ : numbers) {\n            float diff = math.abs(a - b);\n            if (diff\
    \ < min_diff) {\n                min_diff = diff;\n                closest_a =\
    \ a;\n                closest_b = b;\n            }\n        }\n    }\n    return\
    \ tuple(closest_a, closest_b);\n}\n", "{\n    if (numbers.length < 2)\n      \
    \  throw new RuntimeException(\"find_closest_elements requires at least two elements\"\
    );\n    \n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min)\n         \
    \   min = numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    \n    float diff = max - min;\n    float closest = min + diff / 2.0f;\n\
    \    \n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < closest) {\n            closest = numbers[i];\n        }\n    }\n    \n  \
    \  return tuple(closest, closest);\n}\n", "{\n    float min_diff = math.inf;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.inf;\n    float max_diff_index\
    \ = 0;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        float diff\
    \ = numbers[i] - numbers[0];\n        if (diff < 0) diff = -diff;\n        if\
    \ (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    float min_diff = math.infinity;\n \
    \   float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++) {\n\
    \        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n\
    \            min_diff = diff;\n            min_diff_index = i;\n        }\n  \
    \      if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float min_diff_index = 0;\n\
    \    float max_diff = -math.infinity;\n    float max_diff_index = 0;\n    \n \
    \   for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n        }\n  \
    \  }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.inf;\n    float min_diff_index = 0;\n    float\
    \ max_diff = -math.inf;\n    float max_diff_index = 0;\n    for (int i = 0; i\
    \ < numbers.length; i++) {\n        float diff = numbers[i] - numbers[0];\n  \
    \      if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    float min_diff = math.infinity;\n \
    \   float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n      \
    \  float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n   \
    \         min_diff = diff;\n            min_diff_index = i;\n        }\n     \
    \   if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    float diff = max - min;\n    float\
    \ diff2 = diff * diff;\n    float diff3 = diff2 * diff;\n    float diff4 = diff3\
    \ * diff;\n    float diff5 = diff4 * diff;\n    float diff6 = diff5 * diff;\n\
    \    float diff7 = diff6 * diff;\n    float diff8 = diff7 * diff;\n    float diff9\
    \ = diff8 * diff;\n    float diff10 = diff9 * diff;\n    float diff11 = diff10\
    \ * diff;\n    float diff12 = diff11 * diff;\n    float diff13 = diff12 * diff;\n\
    \    float diff14 = diff13 * diff;\n    float diff15 = diff14 * diff;\n    float\
    \ diff16 = diff15 * diff;\n    float diff17 = diff16 * diff;\n    float diff18\
    \ = diff17 * diff;\n    float diff19 = diff18 * diff;\n    float diff20 = diff19\
    \ * diff;\n    float diff21 = diff20 * diff;\n    float diff22 = diff21 * diff;\n\
    \    float diff23 = diff22 * diff;\n    float diff24 = diff23 * diff;\n    float\
    \ diff25 = diff24 * diff;\n    float diff26 = diff25 * diff;\n    float diff27\
    \ = diff26 * diff;\n    float diff28 = diff27 * diff;\n    float diff29 = diff28\
    \ * diff;\n    float diff30 = diff29 * diff;\n    float diff31 = diff30 * diff;\n\
    \    float diff32 = diff31 * diff;\n    float diff33 = diff32 * diff;\n    float\
    \ diff34 = diff33 * diff;\n    float diff35 = diff34 * diff;\n    float diff36\
    \ = diff35 * diff;\n    float diff37 = diff36 * diff;\n    float diff38 = diff37\
    \ * diff;\n    float diff39 = diff38 *", "{\n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    for (int i = 0; i < numbers.length; i++) {\n      \
    \  float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n   \
    \         min_diff = diff;\n            min_diff_index = i;\n        }\n     \
    \   if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements:\
    \ array too short\");\n    \n    float min_diff = math.inf;\n    float min_diff_index\
    \ = 0;\n    float min_diff_value = math.inf;\n    float max_diff = -math.inf;\n\
    \    float max_diff_index = 0;\n    float max_diff_value = -math.inf;\n    \n\
    \    for (int i = 0; i < numbers.length; i++) {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if (diff < 0) diff = -diff;\n        if (diff < min_diff)\
    \ {\n            min_diff = diff;\n            min_diff_index = i;\n         \
    \   min_diff_value = numbers[i];\n        }\n        if (diff > max_diff) {\n\
    \            max_diff = diff;\n            max_diff_index = i;\n            max_diff_value\
    \ = numbers[i];\n        }\n    }\n    \n    return tuple(min_diff_value, max_diff_value);\n\
    }\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"find_closest_elements\
    \ requires at least two elements\");\n    \n    float min_diff = math.inf;\n \
    \   float min_diff_index = 0;\n    float max_diff = -math.inf;\n    float max_diff_index\
    \ = 0;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        float diff\
    \ = numbers[i] - numbers[0];\n        if (diff < 0)\n            diff = -diff;\n\
    \        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index\
    \ = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    float min_diff = math.infinity;\n \
    \   float min_diff_index = 0;\n    float max_diff = math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++) {\n\
    \        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n\
    \            min_diff = diff;\n            min_diff_index = i;\n        }\n  \
    \      if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_a = 0.0;\n  \
    \  float closest_b = 0.0;\n    for (int i = 0; i < numbers.length - 1; i++) {\n\
    \        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff)\
    \ {\n            min_diff = diff;\n            closest_a = numbers[i];\n     \
    \       closest_b = numbers[i + 1];\n        }\n    }\n    return tuple(closest_a,\
    \ closest_b);\n}\n", "{\n    if (numbers.length < 2)\n        throw new RuntimeException(\"\
    find_closest_elements: array must be of length at least 2\");\n    \n    float\
    \ min_diff = math.abs(numbers[0] - numbers[1]);\n    float min_value = numbers[0];\n\
    \    float max_value = numbers[0];\n    \n    for (int i = 1; i < numbers.length;\
    \ i++)\n    {\n        float diff = math.abs(numbers[i] - numbers[i-1]);\n   \
    \     if (diff < min_diff)\n        {\n            min_diff = diff;\n        \
    \    min_value = numbers[i];\n        }\n        else if (diff > min_diff)\n \
    \       {\n            max_value = numbers[i];\n        }\n    }\n    \n    return\
    \ tuple(min_value, max_value);\n}\n", "{\n    float min_diff = math.infinity;\n\
    \    float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n  \
    \      float diff = numbers[i] - numbers[0];\n        if(diff < min_diff)\n  \
    \      {\n            min_diff = diff;\n            min_diff_index = i;\n    \
    \    }\n        if(diff > max_diff)\n        {\n            max_diff = diff;\n\
    \            max_diff_index = i;\n        }\n    }\n    return tuple(numbers[min_diff_index],\
    \ numbers[max_diff_index]);\n}\n", "{\n    float min_diff = math.infinity;\n \
    \   float min_diff_index = 0;\n    float max_diff = -math.infinity;\n    float\
    \ max_diff_index = 0;\n    \n    for (int i = 0; i < numbers.length; i++) {\n\
    \        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n\
    \            min_diff = diff;\n            min_diff_index = i;\n        }\n  \
    \      if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index\
    \ = i;\n        }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n", "{\n    float min_diff = math.infinity;\n    float closest_a = 0.0;\n  \
    \  float closest_b = 0.0;\n    for(int i = 0; i < numbers.length - 1; i++)\n \
    \   {\n        float diff = numbers[i + 1] - numbers[i];\n        if(diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            closest_a = numbers[i];\n\
    \            closest_b = numbers[i + 1];\n        }\n    }\n    return tuple(closest_a,\
    \ closest_b);\n}\n", "{\n    float min_diff = math.inf;\n    float min_diff_index\
    \ = 0;\n    float max_diff = -math.inf;\n    float max_diff_index = 0;\n    \n\
    \    for(int i = 0; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[0];\n        if(diff < 0)\n        {\n            diff = -diff;\n\
    \        }\n        if(diff < min_diff)\n        {\n            min_diff = diff;\n\
    \            min_diff_index = i;\n        }\n        if(diff > max_diff)\n   \
    \     {\n            max_diff = diff;\n            max_diff_index = i;\n     \
    \   }\n    }\n    \n    return tuple(numbers[min_diff_index], numbers[max_diff_index]);\n\
    }\n"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
