name: HumanEval_115_max_fill
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a rectangular\
  \ grid of wells. Each row represents a single well,\n    and each 1 in a row represents\
  \ a single unit of water.\n    Each well has a corresponding bucket that can be\
  \ used to extract water from it, \n    and all buckets have the same capacity.\n\
  \    Your task is to use the buckets to empty the wells.\n    Output the number\
  \ of times you need to lower the buckets.\n\n    Example 1:\n    >>> max_fill([[0L,\
  \ 0L, 1L, 0L], [0L, 1L, 0L, 0L], [1L, 1L, 1L, 1L]], 1L)\n    6L\n\n    Example 2:\n\
  \    >>> max_fill([[0L, 0L, 1L, 1L], [0L, 0L, 0L, 0L], [1L, 1L, 1L, 1L], [0L, 1L,\
  \ 1L, 1L]], 2L)\n    5L\n    \n    Example 3:\n    >>> max_fill([[0L, 0L, 0L], [0L,\
  \ 0L, 0L]], 5L)\n    0L\n\n    Constraints:\n        * all wells have the same length\n\
  \        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n \
  \       * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \n*/\nlong max_fill(long[][]\
  \ grid, long capacity) \n"
tests: "unittest\n{\n    alias candidate = max_fill;\n\n    assert(candidate([[0L,\
  \ 0L, 1L, 0L], [0L, 1L, 0L, 0L], [1L, 1L, 1L, 1L]], 1L) == 6L);\n    assert(candidate([[0L,\
  \ 0L, 1L, 1L], [0L, 0L, 0L, 0L], [1L, 1L, 1L, 1L], [0L, 1L, 1L, 1L]], 2L) == 5L);\n\
  \    assert(candidate([[0L, 0L, 0L], [0L, 0L, 0L]], 5L) == 0L);\n    assert(candidate([[1L,\
  \ 1L, 1L, 1L], [1L, 1L, 1L, 1L]], 2L) == 4L);\n    assert(candidate([[1L, 1L, 1L,\
  \ 1L], [1L, 1L, 1L, 1L]], 9L) == 2L);\n}\nvoid main(){}"
completions: ["{\n    long[][] dp = new long[grid.length][grid[0].length];\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(grid[i][k] == 0 && dp[i][k] == 0)\n                        dp[i][k]\
    \ = 1;\n    \n    long[][] dp2 = new long[grid.length][grid[0].length];\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            dp2[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp2[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(grid[k][j] == 0 && dp2[k][j] == 0)\n                        dp2[k][j]\
    \ = 1;\n    \n    long[][] dp3 = new long[grid.length][grid[0].length];\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            dp3[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp3[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         ", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n  \
    \  for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(grid[k][l]\
    \ == 0)\n                            dp[i][j] = Math.max(dp[i][j], dp[k][l] +\
    \ 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n   \
    \     for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(i !=\
    \ k && j != l && grid[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(dp[i][k] == 0 && dp[k][j] == 0)\n                        dp[i][j]\
    \ = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n \
    \   long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i\
    \ < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n     \
    \       dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j] ==\
    \ 1)\n                for(int k = 0; k < grid.length; k++)\n                 \
    \   for(int l = 0; l < grid[0].length; l++)\n                        if(grid[k][l]\
    \ == 0)\n                            dp[i][j] = Math.max(dp[i][j], dp[k][l] +\
    \ 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n   \
    \     for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(dp[i][k] == 0 && dp[k][j] == 0)\n                        dp[i][j]\
    \ = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n \
    \   long[][] dp = new long[grid.length][grid[0].length];\n    long[][] dp2 = new\
    \ long[grid.length][grid[0].length];\n    \n    for(int i = 0; i < grid.length;\
    \ i++) {\n        for(int j = 0; j < grid[0].length; j++) {\n            dp[i][j]\
    \ = grid[i][j];\n            dp2[i][j] = grid[i][j];\n        }\n    }\n    \n\
    \    for(int i = 0; i < grid.length; i++) {\n        for(int j = 0; j < grid[0].length;\
    \ j++) {\n            if(dp[i][j] == 1) {\n                dp[i][j] = 0;\n   \
    \             for(int k = 0; k < grid[0].length; k++) {\n                    if(grid[i][k]\
    \ == 1 && dp[i][k] == 0) {\n                        dp[i][j] += 1;\n         \
    \           }\n                }\n            }\n        }\n    }\n    \n    for(int\
    \ i = 0; i < grid.length; i++) {\n        for(int j = 0; j < grid[0].length; j++)\
    \ {\n            if(dp[i][j] == 1) {\n                dp2[i][j] = 0;\n       \
    \         for(int k = 0; k < grid[0].length; k++) {\n                    if(grid[k][j]\
    \ == 1 && dp2[k][j] == 0) {\n                        dp2[i][j] += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    \n  \
    \  long max = 0;\n    for(int i = 0; i < grid.length; i++) {\n        for(int\
    \ j = 0; j < grid[0].length; j++) {\n            if(dp[i][j] == 1) {\n       \
    \         max = Math.max(max, dp[i][j]);\n            }\n        }\n    }\n  \
    \  \n    for(int i = 0; i < grid.length; i++) {\n        for(int j = 0;", "{\n\
    \    int n = grid.length;\n    int m = grid[0].length;\n    long[][] dp = new\
    \ long[n][m];\n    \n    for(int i = 0; i < n; i++) {\n        for(int j = 0;\
    \ j < m; j++) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    \n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < m; j++) {\n    \
    \        if(dp[i][j] == 0) {\n                continue;\n            }\n     \
    \       \n            for(int k = 0; k < m; k++) {\n                if(k == j)\
    \ {\n                    continue;\n                }\n                \n    \
    \            if(dp[i][k] == 0) {\n                    continue;\n            \
    \    }\n                \n                dp[i][j] = Math.min(dp[i][j], dp[i][k]\
    \ + dp[k][j]);\n            }\n        }\n    }\n    \n    long max = 0;\n   \
    \ for(int i = 0; i < n; i++) {\n        for(int j = 0; j < m; j++) {\n       \
    \     if(dp[i][j] > max) {\n                max = dp[i][j];\n            }\n \
    \       }\n    }\n    \n    return max;\n}", "{\n    int n = grid.length;\n  \
    \  int m = grid[0].length;\n    long[][] dp = new long[n][m];\n    \n    for (int\
    \ i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if\
    \ (grid[i][j] == 1) {\n                dp[i][j] = 0;\n            } else {\n \
    \               dp[i][j] = -1;\n            }\n        }\n    }\n    \n    for\
    \ (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n         \
    \   if (dp[i][j] == -1) {\n                continue;\n            }\n        \
    \    \n            for (int k = 0; k < m; k++) {\n                if (grid[i][k]\
    \ == 1) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i][k] + 1);\n\
    \                }\n            }\n        }\n    }\n    \n    long max = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n  \
    \          if (dp[i][j] == -1) {\n                continue;\n            }\n \
    \           \n            max = Math.max(max, dp[i][j]);\n        }\n    }\n \
    \   \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            for(int k\
    \ = 0; k < grid[0].length; k++)\n                if(grid[i][j] == 1 && grid[i][k]\
    \ == 1)\n                    dp[i][j] = Math.min(dp[i][j], dp[i][k] + 1);\n  \
    \              \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(i !=\
    \ k && j != l && grid[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(grid[k][l]\
    \ == 0)\n                            dp[i][j] = Math.max(dp[i][j], dp[k][l] +\
    \ 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n   \
    \     for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    int n = grid.length;\n    int\
    \ m = grid[0].length;\n    long[][] dp = new long[n][m];\n    \n    for(int i\
    \ = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            dp[i][j] =\
    \ grid[i][j];\n    \n    for(int i = 0; i < n; i++)\n        for(int j = 0; j\
    \ < m; j++)\n            if(dp[i][j] == 1)\n                for(int k = 0; k <\
    \ m; k++)\n                    if(k != j)\n                        dp[i][j] =\
    \ Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int\
    \ i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    int n = grid.length;\n    int\
    \ m = grid[0].length;\n    long[][] dp = new long[n][m];\n    \n    for (int i\
    \ = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (grid[i][j]\
    \ == 1) {\n                dp[i][j] = 1;\n            } else {\n             \
    \   dp[i][j] = 0;\n            }\n        }\n    }\n    \n    for (int i = 0;\
    \ i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (dp[i][j]\
    \ == 0) {\n                continue;\n            }\n            \n          \
    \  for (int k = 0; k < m; k++) {\n                if (grid[i][k] == 0) {\n   \
    \                 dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n             \
    \   }\n            }\n        }\n    }\n    \n    long max = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if\
    \ (dp[i][j] > max) {\n                max = dp[i][j];\n            }\n       \
    \ }\n    }\n    \n    return max > capacity ? max - capacity : 0;\n}", "{\n  \
    \  long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i\
    \ < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n     \
    \       dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j] == 1)\n\
    \                for(int k = 0; k < grid[0].length; k++)\n                   \
    \ if(k != j)\n                        dp[i][j] = Math.max(dp[i][j], dp[i][k] +\
    \ dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    int n = grid.length;\n    int\
    \ m = grid[0].length;\n    long[][] dp = new long[n][m];\n    \n    for (int i\
    \ = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (grid[i][j]\
    \ == 1) {\n                dp[i][j] = 1;\n            } else {\n             \
    \   dp[i][j] = 0;\n            }\n        }\n    }\n    \n    for (int i = 0;\
    \ i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            for (int k\
    \ = 0; k < m; k++) {\n                if (i > 0 && dp[i-1][k] > 0) {\n       \
    \             dp[i][j] = Math.max(dp[i][j], dp[i-1][k] + 1);\n               \
    \ }\n                if (j > 0 && dp[i][j-1] > 0) {\n                    dp[i][j]\
    \ = Math.max(dp[i][j], dp[i][j-1] + 1);\n                }\n            }\n  \
    \      }\n    }\n    \n    long max = 0;\n    for (int i = 0; i < n; i++) {\n\
    \        for (int j = 0; j < m; j++) {\n            max = Math.max(max, dp[i][j]);\n\
    \        }\n    }\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = 0;\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j] ==\
    \ 1)\n                dp[i][j] = Math.min(dp[i][j], max_fill(grid, capacity -\
    \ 1));\n            \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    int n = grid.length;\n    int\
    \ m = grid[0].length;\n    long[][] dp = new long[n][m];\n    \n    for(int i\
    \ = 0; i < n; i++) {\n        for(int j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 1) {\n                dp[i][j] = Math.min(capacity, dp[i][j] + 1);\n    \
    \        }\n        }\n    }\n    \n    long max = 0;\n    for(int i = 0; i <\
    \ n; i++) {\n        for(int j = 0; j < m; j++) {\n            if(grid[i][j] ==\
    \ 1) {\n                max = Math.max(max, dp[i][j]);\n            }\n      \
    \  }\n    }\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    long[][] dp_temp = new long[grid.length][grid[0].length];\n    \n    for(int\
    \ i = 0; i < grid.length; i++)\n    {\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n        {\n            if(grid[i][j] == 1)\n            {\n          \
    \      dp[i][j] = 1;\n            }\n            else\n            {\n       \
    \         dp[i][j] = 0;\n            }\n        }\n    }\n    \n    for(int i\
    \ = 0; i < grid.length; i++)\n    {\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n        {\n            if(dp[i][j] == 1)\n            {\n            \
    \    dp_temp[i][j] = 1;\n            }\n            else\n            {\n    \
    \            dp_temp[i][j] = 0;\n            }\n        }\n    }\n    \n    for(int\
    \ i = 0; i < grid.length; i++)\n    {\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n        {\n            if(dp_temp[i][j] == 1)\n            {\n       \
    \         dp[i][j] = 1;\n            }\n            else\n            {\n    \
    \            dp[i][j] = 0;\n            }\n        }\n    }\n    \n    for(int\
    \ i = 0; i < grid.length; i++)\n    {\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n        {\n            if(dp[i][j] == 1)\n            {\n            \
    \    dp_temp[i][j] = 1;\n            }\n            else\n            {\n    \
    \            dp_temp[i][j] = 0;\n            }\n        }\n    }\n    \n    for(int\
    \ i = 0; i < grid.length; i++)\n    {\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n        {\n            if(dp_temp[i][j", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(dp[i][k] == 0 && dp[k][j] == 0)\n                        dp[i][j]\
    \ = Math.min(dp[i][j], dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            if(dp[i][j] == 0)\n                max = Math.max(max, dp[i][j]);\n\
    \    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(i !=\
    \ k && j != l && grid[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(i != k && dp[i][k] == 1)\n                        dp[i][j] = Math.max(dp[i][j],\
    \ dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(grid[i][k] == 0 && dp[i][k] == 0)\n                        dp[i][j]\
    \ = Math.max(dp[i][j], 1 + max_fill(grid, capacity));\n    return dp[0][0];\n}",
  "{\n    long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0;\
    \ i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n   \
    \         dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            for(int k = 1; k\
    \ <= capacity; k++)\n                if(dp[i][j] > 0 && dp[i][j] <= k)\n     \
    \               dp[i][j] = Math.min(dp[i][j], dp[i][j-1] + k);\n    \n    long\
    \ max = 0;\n    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j\
    \ < grid[0].length; j++)\n            max = Math.max(max, dp[i][j]);\n    \n \
    \   return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++) {\n        for(int j = 0; j < grid[0].length;\
    \ j++) {\n            dp[i][j] = 0;\n        }\n    }\n    \n    for(int i = 0;\
    \ i < grid.length; i++) {\n        for(int j = 0; j < grid[0].length; j++) {\n\
    \            if(grid[i][j] == 1) {\n                dp[i][j] = Math.min(dp[i][j],\
    \ dp[i][j-1] + 1);\n                dp[i][j] = Math.min(dp[i][j], dp[i-1][j] +\
    \ 1);\n                dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1] + 1);\n    \
    \        }\n        }\n    }\n    \n    long max = 0;\n    for(int i = 0; i <\
    \ grid.length; i++) {\n        for(int j = 0; j < grid[0].length; j++) {\n   \
    \         max = Math.max(max, dp[i][j]);\n        }\n    }\n    \n    return max;\n\
    }", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 0)\n                dp[i][j] = max(0, max(dp[i][j], max(dp[i][j+1], max(dp[i][j-1],\
    \ max(dp[i+1][j], max(dp[i-1][j], max(dp[i+1][j+1], max(dp[i+1][j-1], max(dp[i-1][j+1],\
    \ max(dp[i-1][j-1], dp[i+1][j]))))))))));\n    \n    return dp[0][0];\n}", "{\n\
    \    long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0;\
    \ i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n   \
    \         dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j] == 1)\n\
    \                for(int k = 0; k < grid[0].length; k++)\n                   \
    \ if(dp[i][k] == 0)\n                        dp[i][k] = Math.min(dp[i][k], dp[i][j]\
    \ + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n \
    \       for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    int n = grid.length;\n    int\
    \ m = grid[0].length;\n    \n    long[][] dp = new long[n][m];\n    \n    for(int\
    \ i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            dp[i][j]\
    \ = grid[i][j];\n    \n    for(int i = 0; i < n; i++)\n        for(int j = 0;\
    \ j < m; j++)\n            if(dp[i][j] == 1)\n                for(int k = 0; k\
    \ < m; k++)\n                    if(k != j)\n                        dp[i][j]\
    \ = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int\
    \ i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(i != k && j != k && grid[i][k] == 1 && grid[k][j] == 1)\n       \
    \                 dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k][j]);\n    \n\
    \    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            max = Math.max(max, dp[i][j]);\n\
    \    \n    return max;\n}", "{\n    int n = grid.length;\n    int m = grid[0].length;\n\
    \    long[][] dp = new long[n][m];\n    for(int i = 0; i < n; i++)\n        for(int\
    \ j = 0; j < m; j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i\
    \ = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < m; k++)\n                    if(k\
    \ != j)\n                        dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n\
    \    \n    long max = 0;\n    for(int i = 0; i < n; i++)\n        for(int j =\
    \ 0; j < m; j++)\n            max = Math.max(max, dp[i][j]);\n    \n    return\
    \ max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n   \
    \ for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(grid[i][k] == 1 && dp[i][k] == 0)\n                        dp[i][j]\
    \ = Math.min(dp[i][j], dp[i][k] + 1);\n    \n    long max = 0;\n    for(int i\
    \ = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n \
    \   long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i\
    \ < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n     \
    \       dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j] == 0)\n\
    \                dp[i][j] = Math.min(Math.min(dp[i][j], dp[i][j+1]), dp[i][j+2]);\n\
    \            else\n                dp[i][j] = Math.min(Math.min(dp[i][j], dp[i][j+1]),\
    \ dp[i][j+2]) + 1;\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(i !=\
    \ k && j != l && grid[k][l] == 0)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(i !=\
    \ k && j != l && grid[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(dp[i][k] == 0 && dp[k][j] == 0)\n                        dp[i][j]\
    \ = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n \
    \   long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i\
    \ < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n     \
    \       dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            for(int k = 1; k\
    \ <= capacity; k++)\n                if(dp[i][j] > 0 && dp[i][j] <= k)\n     \
    \               dp[i][j] = Math.min(dp[i][j], dp[i][j-1] + k);\n             \
    \   else\n                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j] + k);\n\
    \    \n    return dp[grid.length-1][grid[0].length-1];\n}", "{\n    long[][] dp\
    \ = new long[grid.length][grid[0].length];\n    long[][] dp_row = new long[grid.length][grid[0].length];\n\
    \    long[][] dp_col = new long[grid.length][grid[0].length];\n    long[][] dp_well\
    \ = new long[grid.length][grid[0].length];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n    {\n        for(int j = 0; j < grid[0].length; j++)\n        {\n  \
    \          dp[i][j] = grid[i][j];\n            dp_row[i][j] = grid[i][j];\n  \
    \          dp_col[i][j] = grid[i][j];\n            dp_well[i][j] = grid[i][j];\n\
    \        }\n    }\n    \n    for(int i = 0; i < grid.length; i++)\n    {\n   \
    \     for(int j = 0; j < grid[0].length; j++)\n        {\n            if(dp[i][j]\
    \ == 1)\n            {\n                for(int k = 0; k < grid[0].length; k++)\n\
    \                {\n                    if(dp[i][k] == 0)\n                  \
    \  {\n                        dp[i][k] = 1;\n                        dp_row[i][k]\
    \ = 1;\n                        dp_col[i][k] = 1;\n                        dp_well[i][k]\
    \ = 1;\n                    }\n                }\n            }\n        }\n \
    \   }\n    \n    for(int i = 0; i < grid.length; i++)\n    {\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n        {\n            if(dp_row[i][j] == 1)\n\
    \            {\n                for(int k = 0; k < grid[0].length; k++)\n    \
    \            {\n                    if(dp_col[i][k] == 0)\n                  \
    \  {\n                        dp_col[i][k] = 1;\n                        dp_well[i][k]\
    \ = 1;\n                    }\n                }\n            }\n", "{\n    long[][]\
    \ dp = new long[grid.length][grid[0].length];\n    for (int i = 0; i < grid.length;\
    \ i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            dp[i][j]\
    \ = grid[i][j];\n        }\n    }\n    \n    for (int i = 0; i < grid.length;\
    \ i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            if (dp[i][j]\
    \ == 0) {\n                continue;\n            }\n            \n          \
    \  for (int k = 0; k < grid[0].length; k++) {\n                if (grid[i][k]\
    \ == 0) {\n                    continue;\n                }\n                \n\
    \                dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k][j]);\n       \
    \     }\n        }\n    }\n    \n    long max = 0;\n    for (int i = 0; i < grid.length;\
    \ i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            if (dp[i][j]\
    \ > max) {\n                max = dp[i][j];\n            }\n        }\n    }\n\
    \    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(k !=\
    \ i && l != j)\n                            dp[k][l] = Math.max(dp[k][l], dp[i][j]\
    \ + Math.min(dp[k][l], dp[i][j]));\n    \n    long max = 0;\n    for(int i = 0;\
    \ i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n   \
    \         max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n    long[][]\
    \ dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            dp[i][j]\
    \ = 0;\n    \n    for(int i = 0; i < grid.length; i++)\n        for(int j = 0;\
    \ j < grid[0].length; j++)\n            if(grid[i][j] == 1)\n                dp[i][j]\
    \ = Math.min(dp[i][j], max_fill(grid, capacity - 1));\n            else\n    \
    \            dp[i][j] = 0;\n    \n    return dp[0][0];\n}", "{\n    long[][] dp\
    \ = new long[grid.length][grid[0].length];\n    for (int i = 0; i < grid.length;\
    \ i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            dp[i][j]\
    \ = grid[i][j];\n        }\n    }\n    \n    for (int i = 0; i < grid.length;\
    \ i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            if (grid[i][j]\
    \ == 1) {\n                dp[i][j] = Math.min(dp[i][j], Math.min(dp[i][j-1],\
    \ Math.min(dp[i-1][j], dp[i-1][j-1])));\n            }\n        }\n    }\n   \
    \ \n    long max = 0;\n    for (int i = 0; i < grid.length; i++) {\n        for\
    \ (int j = 0; j < grid[0].length; j++) {\n            if (grid[i][j] == 1) {\n\
    \                max = Math.max(max, dp[i][j]);\n            }\n        }\n  \
    \  }\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[i].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[i].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[i].length; k++)\n           \
    \         if(grid[i][k] == 1)\n                        dp[i][j] = Math.max(dp[i][j],\
    \ dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[i].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    long[][] dp2 = new long[grid.length][grid[0].length];\n    for(int i = 0;\
    \ i < grid.length; i++)\n    {\n        for(int j = 0; j < grid[0].length; j++)\n\
    \        {\n            dp[i][j] = 0;\n            dp2[i][j] = 0;\n        }\n\
    \    }\n    for(int i = 0; i < grid.length; i++)\n    {\n        for(int j = 0;\
    \ j < grid[0].length; j++)\n        {\n            if(grid[i][j] == 1)\n     \
    \       {\n                dp[i][j] = 1;\n                dp2[i][j] = 1;\n   \
    \         }\n            else\n            {\n                dp[i][j] = 0;\n\
    \                dp2[i][j] = 0;\n            }\n        }\n    }\n    for(int\
    \ i = 0; i < grid.length; i++)\n    {\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n        {\n            for(int k = 0; k < grid[0].length; k++)\n     \
    \       {\n                if(grid[i][j] == 1 && grid[i][k] == 1)\n          \
    \      {\n                    dp[i][j] = Math.max(dp[i][j], dp[i][k] + 1);\n \
    \                   dp2[i][j] = Math.max(dp2[i][j], dp2[i][k] + 1);\n        \
    \        }\n            }\n        }\n    }\n    long max = 0;\n    for(int i\
    \ = 0; i < grid.length; i++)\n    {\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n        {\n            if(dp[i][j] == dp2[i][j])\n            {\n    \
    \            max = Math.max(max, dp[i][j]);\n            }\n        }\n    }\n\
    \    return max;\n}\n", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(k !=\
    \ i && l != j && dp[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(grid[i][k] == 1 && dp[i][k] < capacity)\n                       \
    \ dp[i][j] = Math.max(dp[i][j], dp[i][k] + 1);\n    \n    long max = 0;\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n \
    \   long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i\
    \ < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n     \
    \       dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j] == 1)\n\
    \                for(int k = 0; k < grid[0].length; k++)\n                   \
    \ if(i != k && dp[i][k] == 1)\n                        dp[i][j] = Math.max(dp[i][j],\
    \ dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            for(int k\
    \ = 0; k < grid[0].length; k++)\n                if(i > 0 && j > 0 && grid[i][j]\
    \ == 1 && grid[i-1][j] == 1 && grid[i][j-1] == 1 && grid[i-1][j-1] == 1)\n   \
    \                 dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1] + 1);\n         \
    \       else if(i > 0 && j > 0 && grid[i][j] == 1 && grid[i-1][j] == 1 && grid[i][j-1]\
    \ == 1)\n                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j] + 1);\n\
    \                else if(i > 0 && j > 0 && grid[i][j] == 1 && grid[i][j-1] ==\
    \ 1)\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j-1] + 1);\n   \
    \             else if(i > 0 && j > 0 && grid[i][j] == 1 && grid[i-1][j] == 1)\n\
    \                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j] + 1);\n        \
    \        else if(i > 0 && j > 0 && grid[i][j] == 1 && grid[i][j-1] == 1)\n   \
    \                 dp[i][j] = Math.min(dp[i][j], dp[i][j-1] + 1);\n           \
    \     else if(i > 0 && j > 0 && grid[i][j] == 1 && grid[i", "{\n    long[][] dp\
    \ = new long[grid.length][grid[0].length];\n    for (int i = 0; i < grid.length;\
    \ i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            dp[i][j]\
    \ = grid[i][j];\n        }\n    }\n    \n    long max = 0;\n    for (int i = 0;\
    \ i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n\
    \            if (dp[i][j] == 1) {\n                dp[i][j] = 0;\n           \
    \     for (int k = 0; k < grid.length; k++) {\n                    for (int l\
    \ = 0; l < grid[0].length; l++) {\n                        if (grid[k][l] == 1)\
    \ {\n                            dp[i][j] = Math.max(dp[i][j], dp[k][l] + 1);\n\
    \                        }\n                    }\n                }\n       \
    \         max = Math.max(max, dp[i][j]);\n            }\n        }\n    }\n  \
    \  return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[i].length;\
    \ j++) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    \n    for\
    \ (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[i].length;\
    \ j++) {\n            if (grid[i][j] == 1) {\n                dp[i][j] = Math.min(dp[i][j],\
    \ Math.min(dp[i][j-1], Math.min(dp[i-1][j], dp[i-1][j-1])));\n            }\n\
    \        }\n    }\n    \n    long max = 0;\n    for (int i = 0; i < grid.length;\
    \ i++) {\n        for (int j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ == 1) {\n                max = Math.max(max, dp[i][j]);\n            }\n   \
    \     }\n    }\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(i != k && grid[k][j] == 1)\n                        dp[i][j] = Math.max(dp[i][j],\
    \ dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length;\
    \ j++) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    \n    for\
    \ (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length;\
    \ j++) {\n            if (dp[i][j] == 1) {\n                for (int k = 0; k\
    \ < grid.length; k++) {\n                    for (int l = 0; l < grid[0].length;\
    \ l++) {\n                        if (grid[k][l] == 1) {\n                   \
    \         dp[i][j] = Math.min(dp[i][j], dp[k][l] + 1);\n                     \
    \   }\n                    }\n                }\n            }\n        }\n  \
    \  }\n    \n    long max = 0;\n    for (int i = 0; i < grid.length; i++) {\n \
    \       for (int j = 0; j < grid[0].length; j++) {\n            if (dp[i][j] >\
    \ max) {\n                max = dp[i][j];\n            }\n        }\n    }\n \
    \   \n    return max;\n}", "{\n    int n = grid.length;\n    int m = grid[0].length;\n\
    \    long[][] dp = new long[n][m];\n    \n    for (int i = 0; i < n; i++) {\n\
    \        for (int j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n \
    \               dp[i][j] = 1;\n            } else {\n                dp[i][j]\
    \ = 0;\n            }\n        }\n    }\n    \n    for (int i = 0; i < n; i++)\
    \ {\n        for (int j = 0; j < m; j++) {\n            if (grid[i][j] == 0) {\n\
    \                dp[i][j] = 0;\n            } else {\n                for (int\
    \ k = 0; k < m; k++) {\n                    if (grid[i][k] == 1) {\n         \
    \               dp[i][j] = Math.max(dp[i][j], dp[i][k] + 1);\n               \
    \     }\n                }\n            }\n        }\n    }\n    \n    long max\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++)\
    \ {\n            max = Math.max(max, dp[i][j]);\n        }\n    }\n    \n    return\
    \ max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n   \
    \ for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            for(int k\
    \ = 0; k < grid[0].length; k++)\n                if(grid[i][j] == 1 && grid[i][k]\
    \ == 1)\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i][k],\
    \ dp[k][j]) + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = 0;\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j] ==\
    \ 1)\n                dp[i][j] = Math.min(dp[i][j], Math.max(0, dp[i][j-1] + 1));\n\
    \            else\n                dp[i][j] = Math.min(dp[i][j], Math.max(0, dp[i][j-1]));\n\
    \    \n    return dp[grid.length-1][grid[0].length-1];\n}", "{\n    int n = grid.length;\n\
    \    int m = grid[0].length;\n    long[][] dp = new long[n][m];\n    for (int\
    \ i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            dp[i][j]\
    \ = grid[i][j];\n        }\n    }\n    \n    for (int i = 0; i < n; i++) {\n \
    \       for (int j = 0; j < m; j++) {\n            if (dp[i][j] == 1) {\n    \
    \            for (int k = 0; k < m; k++) {\n                    if (k != j) {\n\
    \                        dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k][j]);\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   \n    long max = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j\
    \ = 0; j < m; j++) {\n            if (dp[i][j] == 1) {\n                max =\
    \ Math.max(max, dp[i][j]);\n            }\n        }\n    }\n    \n    return\
    \ max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n   \
    \ for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                dp[i][j] = Math.min(dp[i][j], Math.min(dp[i][j-1], Math.min(dp[i-1][j],\
    \ dp[i-1][j-1])));\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(k != j && dp[i][k] == 1)\n                        dp[i][j] = Math.min(dp[i][j],\
    \ dp[i][k] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                max = Math.max(max, dp[i][j]);\n    \n    return max;\n\
    }", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n    for(int\
    \ i = 0; i < grid.length; i++)\n    {\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n        {\n            if(grid[i][j] == 1)\n            {\n          \
    \      dp[i][j] = 1;\n            }\n            else\n            {\n       \
    \         dp[i][j] = 0;\n            }\n        }\n    }\n    \n    for(int i\
    \ = 0; i < grid.length; i++)\n    {\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n        {\n            for(int k = 0; k < grid.length; k++)\n        \
    \    {\n                for(int l = 0; l < grid[0].length; l++)\n            \
    \    {\n                    if(grid[k][l] == 1)\n                    {\n     \
    \                   dp[i][j] = Math.max(dp[i][j], dp[k][l] + 1);\n           \
    \         }\n                }\n            }\n        }\n    }\n    \n    long\
    \ max = 0;\n    for(int i = 0; i < grid.length; i++)\n    {\n        for(int j\
    \ = 0; j < grid[0].length; j++)\n        {\n            max = Math.max(max, dp[i][j]);\n\
    \        }\n    }\n    \n    return max;\n}", "{\n    int n = grid.length;\n \
    \   int m = grid[0].length;\n    \n    long[][] dp = new long[n][m];\n    \n \
    \   for(int i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n         \
    \   dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < n; i++)\n        for(int\
    \ j = 0; j < m; j++)\n            if(dp[i][j] == 1)\n                for(int k\
    \ = 0; k < m; k++)\n                    if(k != j)\n                        dp[i][j]\
    \ = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int\
    \ i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(k !=\
    \ i && l != j)\n                            dp[k][l] = Math.min(dp[k][l], Math.max(dp[k][j],\
    \ dp[i][l]));\n    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(grid[k][l]\
    \ == 1)\n                            dp[i][j] = Math.max(dp[i][j], Math.min(dp[k][l],\
    \ dp[i][j] + dp[k][l] - 1));\n    \n    return dp[0][0];\n}", "{\n    long[][]\
    \ dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            dp[i][j]\
    \ = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            if(dp[i][j] == 1)\n           \
    \     for(int k = 0; k < grid[0].length; k++)\n                    if(i != k &&\
    \ dp[i][k] == 1)\n                        dp[i][j] = Math.max(dp[i][j], dp[i][k]\
    \ + dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(dp[i][k] == 0 && dp[k][j] == 0)\n                        dp[i][j]\
    \ = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n \
    \   long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i\
    \ < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n     \
    \       dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j] == 1)\n\
    \                for(int k = 0; k < grid[0].length; k++)\n                   \
    \ if(grid[i][k] == 1 && dp[i][k] == 0)\n                        dp[i][j] = Math.min(dp[i][j],\
    \ dp[i][k] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length;\
    \ j++) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    \n    long\
    \ max = 0;\n    for (int i = 0; i < grid.length; i++) {\n        for (int j =\
    \ 0; j < grid[0].length; j++) {\n            if (dp[i][j] == 0) {\n          \
    \      continue;\n            }\n            \n            long max_fill = 0;\n\
    \            for (int k = 0; k < grid[0].length; k++) {\n                if (grid[i][k]\
    \ == 1) {\n                    max_fill = Math.max(max_fill, dp[i][k]);\n    \
    \            }\n            }\n            \n            dp[i][j] = Math.min(max_fill,\
    \ capacity);\n            max = Math.max(max, dp[i][j]);\n        }\n    }\n \
    \   \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length;\
    \ j++) {\n            if (grid[i][j] == 1) {\n                dp[i][j] = Math.min(capacity,\
    \ dp[i][j] + 1);\n            }\n        }\n    }\n    long max = 0;\n    for\
    \ (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length;\
    \ j++) {\n            if (grid[i][j] == 1) {\n                max = Math.max(max,\
    \ dp[i][j]);\n            }\n        }\n    }\n    return max;\n}", "{\n    int\
    \ n = grid.length;\n    int m = grid[0].length;\n    \n    long[][] dp = new long[n][m];\n\
    \    \n    for(int i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n  \
    \          dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < n; i++)\n    \
    \    for(int j = 0; j < m; j++)\n            if(dp[i][j] == 1)\n             \
    \   for(int k = 0; k < m; k++)\n                    if(k != j)\n             \
    \           dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n    \n    long\
    \ max = 0;\n    for(int i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n\
    \            max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n \
    \   long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i\
    \ < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n     \
    \       dp[i][j] = grid[i][j];", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(dp[i][k] == 0)\n                        dp[i][k] = Math.max(dp[i][k],\
    \ dp[i][j] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(i != k && j != k && grid[i][k] == 1 && grid[k][j] == 1)\n       \
    \                 dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n    \n\
    \    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            max = Math.max(max, dp[i][j]);\n\
    \    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    \n    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(grid[i][k] == 1 && dp[i][k] == 0)\n                        dp[i][j]\
    \ = Math.max(dp[i][j], 1 + max_fill(grid, capacity - 1));\n    \n    return dp[0][0];\n\
    }", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n    for (int\
    \ i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length;\
    \ j++) {\n            if (grid[i][j] == 1) {\n                dp[i][j] = 0;\n\
    \            } else {\n                dp[i][j] = -1;\n            }\n       \
    \ }\n    }\n    \n    for (int i = 0; i < grid.length; i++) {\n        for (int\
    \ j = 0; j < grid[0].length; j++) {\n            if (dp[i][j] == -1) {\n     \
    \           continue;\n            }\n            \n            for (int k = 0;\
    \ k < grid[0].length; k++) {\n                if (grid[i][k] == 0) {\n       \
    \             dp[i][j] = Math.max(dp[i][j], dp[i][k] + 1);\n                }\n\
    \            }\n        }\n    }\n    \n    long max = 0;\n    for (int i = 0;\
    \ i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n\
    \            if (dp[i][j] == -1) {\n                continue;\n            }\n\
    \            \n            max = Math.max(max, dp[i][j]);\n        }\n    }\n\
    \    \n    return max;\n}", "{\n    int n = grid.length;\n    int m = grid[0].length;\n\
    \    long[][] dp = new long[n][m];\n    \n    for(int i = 0; i < n; i++)\n   \
    \     for(int j = 0; j < m; j++)\n            dp[i][j] = grid[i][j];\n    \n \
    \   for(int i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n         \
    \   if(dp[i][j] == 1)\n                for(int k = 0; k < m; k++)\n          \
    \          if(k != j)\n                        dp[i][j] = Math.max(dp[i][j], dp[i][k]\
    \ + dp[k][j]);\n    \n    long ans = 0;\n    for(int i = 0; i < n; i++)\n    \
    \    for(int j = 0; j < m; j++)\n            if(dp[i][j] == 1)\n             \
    \   ans += Math.min(capacity, m - j);\n    \n    return ans;\n}", "{\n    long[][]\
    \ dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            dp[i][j]\
    \ = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            for(int k = 0; k < grid[0].length;\
    \ k++)\n                if(grid[i][j] == 1 && grid[i][k] == 1)\n             \
    \       dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k][j]);\n    \n    long max\
    \ = 0;\n    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            max = Math.max(max, dp[i][j]);\n    \n    return max;\n}",
  "{\n    long[][] dp = new long[grid.length][grid[0].length];\n    for (int i = 0;\
    \ i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n\
    \            dp[i][j] = 0;\n        }\n    }\n    \n    for (int i = 0; i < grid.length;\
    \ i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            if (grid[i][j]\
    \ == 1) {\n                dp[i][j] = Math.min(dp[i][j], dp[i][j-1] + 1);\n  \
    \              dp[i][j] = Math.min(dp[i][j], dp[i-1][j] + 1);\n              \
    \  dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1] + 1);\n            }\n        }\n\
    \    }\n    \n    long max = 0;\n    for (int i = 0; i < grid.length; i++) {\n\
    \        for (int j = 0; j < grid[0].length; j++) {\n            max = Math.max(max,\
    \ dp[i][j]);\n        }\n    }\n    \n    return max;\n}", "{\n    long[][] dp\
    \ = new long[grid.length][grid[0].length];\n    long[][] dp_last = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = dp_last[i][j] = 0;\n    \n    for(int i = 0; i\
    \ < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n     \
    \       if(grid[i][j] == 1)\n            {\n                dp[i][j] = 1;\n  \
    \              dp_last[i][j] = 1;\n                for(int k = 0; k < grid[0].length;\
    \ k++)\n                    if(grid[i][k] == 1 && dp[i][k] < dp_last[i][k])\n\
    \                        dp_last[i][j] = dp[i][k] + 1;\n            }\n    \n\
    \    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            if(dp[i][j] > max)\n          \
    \      max = dp[i][j];\n    \n    long[][] dp_new = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp_new[i][j] = dp[i][j];\n    \n    long[][] dp_last_new =\
    \ new long[grid.length][grid[0].length];\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            dp_last_new[i][j]\
    \ = dp_last[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n        for",
  "{\n    long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0;\
    \ i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n   \
    \         dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j] == 1)\n\
    \                for(int k = 0; k < grid.length; k++)\n                    for(int\
    \ l = 0; l < grid[0].length; l++)\n                        if(k != i && l != j\
    \ && dp[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(i !=\
    \ k && j != l && grid[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(dp[i][k] == 0)\n                        dp[i][k] = Math.max(dp[i][k],\
    \ dp[i][j] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            for(int k\
    \ = 0; k < grid[0].length; k++)\n                if(dp[i][k] > 0 && dp[i][k] <\
    \ capacity)\n                    dp[i][j] = Math.max(dp[i][j], dp[i][k] + 1);\n\
    \    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            max = Math.max(max, dp[i][j]);\n\
    \    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length;\
    \ j++) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    \n    for\
    \ (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length;\
    \ j++) {\n            if (dp[i][j] == 1) {\n                dp[i][j] = Math.min(Math.min(dp[i][j],\
    \ dp[i][j+1]), dp[i][j-1]);\n            }\n        }\n    }\n    \n    long max\
    \ = 0;\n    for (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j\
    \ < grid[0].length; j++) {\n            if (dp[i][j] == 1) {\n               \
    \ max = Math.max(max, dp[i][j]);\n            }\n        }\n    }\n    \n    return\
    \ max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n   \
    \ for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(k !=\
    \ i && l != j)\n                            dp[k][l] = Math.max(dp[k][l], dp[i][j]\
    \ + Math.min(dp[k][l], dp[i][j]));\n    \n    long max = 0;\n    for(int i = 0;\
    \ i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n   \
    \         max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n    long[][]\
    \ dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            dp[i][j]\
    \ = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            if(dp[i][j] == 1)\n           \
    \     for(int k = 0; k < grid[0].length; k++)\n                    if(i != k &&\
    \ j != k && dp[i][k] == 1 && dp[k][j] == 1)\n                        dp[i][j]\
    \ = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n \
    \   long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i\
    \ < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n     \
    \       dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            for(int k = 0; k\
    \ < grid[0].length; k++)\n                if(i != k && grid[i][j] == 1 && grid[k][j]\
    \ == 1)\n                    dp[i][j] = Math.max(dp[i][j], Math.max(dp[i][k],\
    \ dp[k][j]));\n    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length;\
    \ j++) {\n            dp[i][j] = 0;\n        }\n    }\n    \n    for (int i =\
    \ 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length; j++)\
    \ {\n            if (grid[i][j] == 1) {\n                dp[i][j] = 1;\n     \
    \           for (int k = 0; k < grid.length; k++) {\n                    for (int\
    \ l = 0; l < grid[0].length; l++) {\n                        if (grid[k][l] ==\
    \ 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[k][l] + 1);\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    \n    long max = 0;\n    for (int i = 0; i < grid.length;\
    \ i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            max\
    \ = Math.max(max, dp[i][j]);\n        }\n    }\n    \n    return max;\n}", "{\n\
    \    long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0;\
    \ i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n   \
    \         dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j] ==\
    \ 1)\n                for(int k = 0; k < grid.length; k++)\n                 \
    \   for(int l = 0; l < grid[0].length; l++)\n                        if(grid[k][l]\
    \ == 0)\n                            dp[i][j] = Math.max(dp[i][j], dp[k][l] +\
    \ 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n   \
    \     for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    long[][] dp_prev = new long[grid.length][grid[0].length];\n    long[][] dp_next\
    \ = new long[grid.length][grid[0].length];\n    \n    for (int i = 0; i < grid.length;\
    \ i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            dp[i][j]\
    \ = 0;\n            dp_prev[i][j] = 0;\n            dp_next[i][j] = 0;\n     \
    \   }\n    }\n    \n    for (int i = 0; i < grid.length; i++) {\n        for (int\
    \ j = 0; j < grid[0].length; j++) {\n            if (grid[i][j] == 1) {\n    \
    \            dp[i][j] = 1;\n                dp_prev[i][j] = 1;\n             \
    \   dp_next[i][j] = 1;\n            }\n        }\n    }\n    \n    for (int i\
    \ = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length; j++)\
    \ {\n            if (dp[i][j] == 1) {\n                for (int k = 0; k < grid.length;\
    \ k++) {\n                    for (int l = 0; l < grid[0].length; l++) {\n   \
    \                     if (grid[k][l] == 1) {\n                            dp_prev[k][l]\
    \ = Math.max(dp_prev[k][l], dp[i][j] + dp_prev[i][j]);\n                     \
    \       dp_next[k][l] = Math.max(dp_next[k][l], dp[i][j] + dp_next[i][j]);\n \
    \                       }\n                    }\n                }\n        \
    \    }\n        }\n    }\n    \n    long max = 0;\n    for (int i = 0; i < grid.length;\
    \ i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            if (dp[i",
  "{\n    long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0;\
    \ i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n   \
    \         dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j] ==\
    \ 1)\n                for(int k = 0; k < grid[0].length; k++)\n              \
    \      if(grid[i][k] == 1)\n                        dp[i][j] = Math.max(dp[i][j],\
    \ dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            for(int k\
    \ = 1; k <= capacity; k++)\n                if(dp[i][j] > k)\n               \
    \     dp[i][j] = k;\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    int n = grid.length;\n    int\
    \ m = grid[0].length;\n    long[][] dp = new long[n][m];\n    \n    for(int i\
    \ = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            dp[i][j] =\
    \ grid[i][j];\n    \n    for(int i = 0; i < n; i++)\n        for(int j = 0; j\
    \ < m; j++)\n            if(dp[i][j] == 1)\n                for(int k = 0; k <\
    \ m; k++)\n                    if(k != j)\n                        dp[i][j] =\
    \ Math.min(dp[i][j], dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int\
    \ i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(dp[i][k] == 0)\n                        dp[i][k] = Math.min(dp[i][k],\
    \ dp[i][j] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(i !=\
    \ k && j != l && grid[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(dp[i][k] == 0)\n                        dp[i][k] = Math.max(dp[i][k],\
    \ dp[i][j] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    int n = grid.length;\n    int\
    \ m = grid[0].length;\n    \n    long[][] dp = new long[n][m];\n    \n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n \
    \           if(grid[i][j] == 1)\n            {\n                dp[i][j] = 0;\n\
    \            }\n            else\n            {\n                dp[i][j] = -1;\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < m; j++)\n        {\n            if(dp[i][j] == -1)\n\
    \            {\n                continue;\n            }\n            \n     \
    \       for(int k = 0; k < m; k++)\n            {\n                if(grid[i][k]\
    \ == 1)\n                {\n                    dp[i][j] = Math.max(dp[i][j],\
    \ dp[i][k] + 1);\n                }\n            }\n        }\n    }\n    \n \
    \   long max = 0;\n    for(int i = 0; i < n; i++)\n    {\n        for(int j =\
    \ 0; j < m; j++)\n        {\n            if(dp[i][j] == -1)\n            {\n \
    \               continue;\n            }\n            \n            max = Math.max(max,\
    \ dp[i][j]);\n        }\n    }\n    \n    return max;\n}", "{\n    long[][] dp\
    \ = new long[grid.length][grid[0].length];\n    for (int i = 0; i < grid.length;\
    \ i++) {\n        for (int j = 0; j < grid[i].length; j++) {\n            dp[i][j]\
    \ = grid[i][j];\n        }\n    }", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(k !=\
    \ i && l != j && grid[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    int n = grid.length;\n    int\
    \ m = grid[0].length;\n    long[][] dp = new long[n][m];\n    \n    for (int i\
    \ = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (grid[i][j]\
    \ == 1) {\n                dp[i][j] = 0;\n            } else {\n             \
    \   dp[i][j] = -1;\n            }\n        }\n    }\n    \n    for (int i = 0;\
    \ i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (dp[i][j]\
    \ == -1) {\n                continue;\n            }\n            \n         \
    \   for (int k = 0; k < m; k++) {\n                if (grid[i][k] == 1) {\n  \
    \                  dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n            \
    \    }\n            }\n        }\n    }\n    \n    long max = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if\
    \ (dp[i][j] == -1) {\n                continue;\n            }\n            \n\
    \            max = Math.max(max, dp[i][j]);\n        }\n    }\n    \n    return\
    \ max;\n}", "{\n    int n = grid.length;\n    int m = grid[0].length;\n    long[][]\
    \ dp = new long[n][m];\n    \n    for(int i = 0; i < n; i++)\n        for(int\
    \ j = 0; j < m; j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i\
    \ = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < m; k++)\n                    if(k\
    \ != j)\n                        dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n\
    \    \n    long max = 0;\n    for(int i = 0; i < n; i++)\n        for(int j =\
    \ 0; j < m; j++)\n            max = Math.max(max, dp[i][j]);\n    \n    return\
    \ max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n   \
    \ for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(k !=\
    \ i && l != j)\n                            dp[k][l] = Math.min(dp[k][l], Math.max(dp[k][j],\
    \ dp[i][l]));\n    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j] > max)\n\
    \                max = dp[i][j];\n    \n    long res = 0;\n    for(int i = 0;\
    \ i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n   \
    \         if(dp[i][j] == max)\n                res++;\n    \n    return res;\n\
    }", "{\n    int n = grid.length;\n    int m = grid[0].length;\n    long[][] dp\
    \ = new long[n][m];\n    \n    for (int i = 0; i < n; i++) {\n        for (int\
    \ j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                dp[i][j]\
    \ = Math.min(capacity, dp[i][j]);\n            }\n        }\n    }\n    \n   \
    \ long max = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j\
    \ < m; j++) {\n            if (grid[i][j] == 1) {\n                max = Math.max(max,\
    \ dp[i][j]);\n            }\n        }\n    }\n    \n    return max;\n}", "{\n\
    \    long[][] dp = new long[grid.length][grid[0].length];\n    for (int i = 0;\
    \ i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n\
    \            dp[i][j] = grid[i][j];\n        }\n    }\n    \n    for (int i =\
    \ 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length; j++)\
    \ {\n            if (grid[i][j] == 1) {\n                dp[i][j] = Math.min(dp[i][j],\
    \ Math.min(dp[i][j-1], dp[i][j+1]));\n            }\n        }\n    }\n    \n\
    \    long max = 0;\n    for (int i = 0; i < grid.length; i++) {\n        for (int\
    \ j = 0; j < grid[0].length; j++) {\n            if (grid[i][j] == 1) {\n    \
    \            max = Math.max(max, dp[i][j]);\n            }\n        }\n    }\n\
    \    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(i != k && dp[i][k] == 1)\n                        dp[i][j] = Math.max(dp[i][j],\
    \ dp[i][k] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = 0;\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j] ==\
    \ 1)\n                dp[i][j] = Math.min(dp[i][j], max_fill(grid, capacity -\
    \ 1));\n            \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    long[][] dp_last = new long[grid.length][grid[0].length];\n    for(int i\
    \ = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            dp[i][j] = dp_last[i][j] = 0;\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n            {\n                dp[i][j] = 1;\n                for(int\
    \ k = 0; k < grid.length; k++)\n                    for(int l = 0; l < grid[0].length;\
    \ l++)\n                        if(grid[k][l] == 1)\n                        \
    \    dp[i][j] = Math.max(dp[i][j], dp_last[k][l] + 1);\n                dp_last[i][j]\
    \ = dp[i][j];\n            }\n    \n    long max = 0;\n    for(int i = 0; i <\
    \ grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n       \
    \     max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n    long[][]\
    \ dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            dp[i][j]\
    \ = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            if(dp[i][j] == 1)\n           \
    \     for(int k = 0; k < grid[0].length; k++)\n                    if(dp[i][k]\
    \ == 0)\n                        dp[i][k] = Math.min(dp[i][k], dp[i][j] + 1);\n\
    \    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            if(dp[i][j] == 1)\n           \
    \     max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n    long[][]\
    \ dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            dp[i][j]\
    \ = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            if(dp[i][j] == 1)\n           \
    \     for(int k = 0; k < grid[0].length; k++)\n                    if(dp[i][k]\
    \ == 0)\n                        dp[i][k] = Math.max(dp[i][k], dp[i][j] + 1);\n\
    \    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            max = Math.max(max, dp[i][j]);\n\
    \    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(i != k && j != k && grid[i][k] == 1 && grid[k][j] == 1)\n       \
    \                 dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n    \n\
    \    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            max = Math.max(max, dp[i][j]);\n\
    \    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(k !=\
    \ i && l != j && grid[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(i !=\
    \ k && j != l && grid[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    int n = grid.length;\n    int\
    \ m = grid[0].length;\n    long[][] dp = new long[n][m];\n    \n    for(int i\
    \ = 0; i < n; i++) {\n        for(int j = 0; j < m; j++) {\n            dp[i][j]\
    \ = grid[i][j];\n        }\n    }\n    \n    for(int i = 0; i < n; i++) {\n  \
    \      for(int j = 0; j < m; j++) {\n            if(dp[i][j] == 0) {\n       \
    \         continue;\n            }\n            \n            for(int k = 0; k\
    \ < 4; k++) {\n                int ni = i + dx[k];\n                int nj = j\
    \ + dy[k];\n                \n                if(ni >= 0 && nj >= 0 && ni < n\
    \ && nj < m && dp[ni][nj] > 0) {\n                    dp[i][j] = Math.min(dp[i][j],\
    \ dp[ni][nj] + 1);\n                }\n            }\n        }\n    }\n    \n\
    \    long max = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j\
    \ < m; j++) {\n            if(dp[i][j] > max) {\n                max = dp[i][j];\n\
    \            }\n        }\n    }\n    \n    return max > capacity ? max - capacity\
    \ : 0;\n}", "{\n    int n = grid.length;\n    int m = grid[0].length;\n    \n\
    \    long[][] dp = new long[n][m];\n    \n    for(int i = 0; i < n; i++) {\n \
    \       for(int j = 0; j < m; j++) {\n            if(grid[i][j] == 1) {\n    \
    \            dp[i][j] = Math.min(capacity, dp[i][j]);\n            }\n       \
    \ }\n    }\n    \n    long max = 0;\n    for(int i = 0; i < n; i++) {\n      \
    \  for(int j = 0; j < m; j++) {\n            if(grid[i][j] == 1) {\n         \
    \       max = Math.max(max, dp[i][j]);\n            }\n        }\n    }\n    \n\
    \    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length;\
    \ j++) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    \n    for\
    \ (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length;\
    \ j++) {\n            if (grid[i][j] == 1) {\n                dp[i][j] = Math.min(dp[i][j],\
    \ Math.min(dp[i][j-1], dp[i][j+1]));\n            }\n        }\n    }\n    \n\
    \    long max = 0;\n    for (int i = 0; i < grid.length; i++) {\n        for (int\
    \ j = 0; j < grid[0].length; j++) {\n            if (grid[i][j] == 1) {\n    \
    \            max = Math.max(max, dp[i][j]);\n            }\n        }\n    }\n\
    \    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = 0;\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j] ==\
    \ 1)\n                dp[i][j] = Math.min(dp[i][j], Math.min(dp[i][j-1], dp[i][j+1]));\n\
    \            else\n                dp[i][j] = Math.min(dp[i][j], dp[i][j-1]);\n\
    \    \n    return dp[0][0];\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(i != k && dp[i][k] == 1)\n                        dp[i][j] = Math.max(dp[i][j],\
    \ dp[i][k] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++) {\n        for(int j = 0; j < grid[0].length;\
    \ j++) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < grid.length; i++) {\n        for(int j = 0; j < grid[0].length; j++)\
    \ {\n            if(grid[i][j] == 1) {\n                dp[i][j] = Math.min(dp[i][j],\
    \ dp[i][j-1] + 1);\n                dp[i][j] = Math.min(dp[i][j], dp[i-1][j] +\
    \ 1);\n                dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1] + 1);\n    \
    \        }\n        }\n    }\n    \n    long max = 0;\n    for(int i = 0; i <\
    \ grid.length; i++) {\n        for(int j = 0; j < grid[0].length; j++) {\n   \
    \         max = Math.max(max, dp[i][j]);\n        }\n    }\n    \n    return max;\n\
    }", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(grid[i][k] == 1)\n                        dp[i][j] = Math.max(dp[i][j],\
    \ dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    long[][] dp_temp = new long[grid.length][grid[0].length];\n    long[][] dp_temp2\
    \ = new long[grid.length][grid[0].length];\n    long[][] dp_temp3 = new long[grid.length][grid[0].length];\n\
    \    long[][] dp_temp4 = new long[grid.length][grid[0].length];\n    long[][]\
    \ dp_temp5 = new long[grid.length][grid[0].length];\n    long[][] dp_temp6 = new\
    \ long[grid.length][grid[0].length];\n    long[][] dp_temp7 = new long[grid.length][grid[0].length];\n\
    \    long[][] dp_temp8 = new long[grid.length][grid[0].length];\n    long[][]\
    \ dp_temp9 = new long[grid.length][grid[0].length];\n    long[][] dp_temp10 =\
    \ new long[grid.length][grid[0].length];\n    long[][] dp_temp11 = new long[grid.length][grid[0].length];\n\
    \    long[][] dp_temp12 = new long[grid.length][grid[0].length];\n    long[][]\
    \ dp_temp13 = new long[grid.length][grid[0].length];\n    long[][] dp_temp14 =\
    \ new long[grid.length][grid[0].length];\n    long[][] dp_temp15 = new long[grid.length][grid[0].length];\n\
    \    long[][] dp_temp16 = new long[grid.length][grid[0].length];\n    long[][]\
    \ dp_temp17 = new long[grid.length][grid[0].length];\n    long[][] dp_temp18 =\
    \ new long[grid.length][grid[0].length];\n    long[][] dp_temp19 = new long[grid.length][grid[0].length];\n\
    \    long[][] dp_temp20 = new long[", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    long[][] dp_row = new long[grid.length][grid[0].length];\n    long[][] dp_col\
    \ = new long[grid.length][grid[0].length];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            dp[i][j]\
    \ = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            dp_row[i][j] = grid[i][j];\n  \
    \  \n    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp_col[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            dp[i][j]\
    \ = Math.min(Math.min(dp[i][j], dp_row[i][j]), dp_col[i][j]);\n    \n    long\
    \ max_fill = 0;\n    for(int i = 0; i < grid.length; i++)\n        for(int j =\
    \ 0; j < grid[0].length; j++)\n            max_fill = Math.max(max_fill, dp[i][j]);\n\
    \    \n    return max_fill;\n}", "{\n    int n = grid.length;\n    int m = grid[0].length;\n\
    \    long[][] dp = new long[n][m];\n    \n    for(int i = 0; i < n; i++)\n   \
    \     for(int j = 0; j < m; j++)\n            dp[i][j] = grid[i][j];\n    \n \
    \   for(int i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n         \
    \   if(dp[i][j] == 1)\n                for(int k = 0; k < m; k++)\n          \
    \          if(k != j)\n                        dp[i][j] = Math.max(dp[i][j], dp[i][k]\
    \ + dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < n; i++)\n    \
    \    for(int j = 0; j < m; j++)\n            max = Math.max(max, dp[i][j]);\n\
    \    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n    {\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n        {\n            if(grid[i][j] == 1)\n            {\n          \
    \      dp[i][j] = Math.min(dp[i][j], Math.min(Math.min(dp[i-1][j], dp[i][j-1]),\
    \ dp[i-1][j-1]) + 1);\n            }\n        }\n    }\n    return dp[grid.length-1][grid[0].length-1];\n\
    }", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(grid[i][k] == 1 && dp[i][k] == 0)\n                        dp[i][j]\
    \ = Math.max(dp[i][j], 1 + max_fill(grid, capacity));\n    \n    return dp[0][0];\n\
    }", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n    for (int\
    \ i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length;\
    \ j++) {\n            dp[i][j] = grid[i][j] == 1 ? 1 : 0;\n        }\n    }\n\
    \    \n    for (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j\
    \ < grid[0].length; j++) {\n            if (grid[i][j] == 1) {\n             \
    \   dp[i][j] = Math.min(dp[i][j], Math.min(dp[i][j-1], Math.min(dp[i-1][j], dp[i-1][j-1])));\n\
    \            }\n        }\n    }\n    \n    long max = 0;\n    for (int i = 0;\
    \ i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n\
    \            if (grid[i][j] == 1) {\n                max = Math.max(max, dp[i][j]);\n\
    \            }\n        }\n    }\n    \n    return max;\n}", "{\n    int n = grid.length;\n\
    \    int m = grid[0].length;\n    \n    long[][] dp = new long[n][m];\n    \n\
    \    for(int i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n        \
    \    dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < n; i++)\n        for(int\
    \ j = 0; j < m; j++)\n            if(dp[i][j] == 1)\n                for(int k\
    \ = 0; k < m; k++)\n                    if(k != j)\n                        dp[i][j]\
    \ = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int\
    \ i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(dp[i][k] == 0)\n                        dp[i][k] = Math.min(dp[i][k],\
    \ dp[i][j] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            for(int k\
    \ = 1; k <= capacity; k++)\n                if(dp[i][j] > 0)\n               \
    \     dp[i][j] = Math.min(dp[i][j], dp[i][j-1] + k);\n                \n    long\
    \ max = 0;\n    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j\
    \ < grid[0].length; j++)\n            max = Math.max(max, dp[i][j]);\n    \n \
    \   return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    long[][] dp_temp = new long[grid.length][grid[0].length];\n    long[][] dp_temp_2\
    \ = new long[grid.length][grid[0].length];\n    long[][] dp_temp_3 = new long[grid.length][grid[0].length];\n\
    \    long[][] dp_temp_4 = new long[grid.length][grid[0].length];\n    long[][]\
    \ dp_temp_5 = new long[grid.length][grid[0].length];\n    long[][] dp_temp_6 =\
    \ new long[grid.length][grid[0].length];\n    long[][] dp_temp_7 = new long[grid.length][grid[0].length];\n\
    \    long[][] dp_temp_8 = new long[grid.length][grid[0].length];\n    long[][]\
    \ dp_temp_9 = new long[grid.length][grid[0].length];\n    long[][] dp_temp_10\
    \ = new long[grid.length][grid[0].length];\n    long[][] dp_temp_11 = new long[grid.length][grid[0].length];\n\
    \    long[][] dp_temp_12 = new long[grid.length][grid[0].length];\n    long[][]\
    \ dp_temp_13 = new long[grid.length][grid[0].length];\n    long[][] dp_temp_14\
    \ = new long[grid.length][grid[0].length];\n    long[][] dp_temp_15 = new long[grid.length][grid[0].length];\n\
    \    long[][] dp_temp_16 = new long[grid.length][grid[0].length];\n    long[][]\
    \ dp_temp_17 = new long[grid.length][grid[0].length];\n    long[][] dp_temp_18\
    \ = new long[grid.length][grid[0].length];\n    long[][] dp_temp_19 = new long[grid.length][grid[0",
  "{\n    long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0;\
    \ i < grid.length; i++)\n        for(int j = 0; j < grid[i].length; j++)\n   \
    \         dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[i].length; j++)\n            if(grid[i][j] ==\
    \ 1)\n                for(int k = 0; k < grid.length; k++)\n                 \
    \   for(int l = 0; l < grid[k].length; l++)\n                        if(k != i\
    \ && l != j && grid[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[i].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            for(int k\
    \ = 1; k <= grid[i][j]; k++)\n                dp[i][j] = Math.max(dp[i][j], dp[i][j-k]\
    \ + k);\n    \n    return dp[grid.length-1][grid[0].length-1];\n}", "{\n    long[][]\
    \ dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            dp[i][j]\
    \ = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            if(grid[i][j] == 1)\n         \
    \       for(int k = 0; k < grid[0].length; k++)\n                    if(grid[i][k]\
    \ == 1)\n                        dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n\
    \    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            max = Math.max(max, dp[i][j]);\n\
    \    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(grid[i][k] == 1)\n                        dp[i][j] = Math.max(dp[i][j],\
    \ dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(dp[i][k] == 0)\n                        dp[i][k] = Math.min(dp[i][k],\
    \ dp[i][j] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(i !=\
    \ k && j != l && grid[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(i !=\
    \ k && j != l && dp[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(k !=\
    \ i && l != j && dp[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(k != j)\n                        dp[i][j] = Math.max(dp[i][j], dp[i][k]\
    \ + dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            for(int k\
    \ = 1; k <= capacity; k++)\n                if(dp[i][j] > 0)\n               \
    \     dp[i][j] = Math.min(dp[i][j], dp[i][j-1] + k);\n                else\n \
    \                   dp[i][j] = Math.min(dp[i][j], dp[i-1][j] + k);\n    \n   \
    \ return dp[grid.length-1][grid[0].length-1];\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length;\
    \ j++) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    \n    long[][]\
    \ dp_next = new long[grid.length][grid[0].length];\n    for (int i = 0; i < grid.length;\
    \ i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            if (dp[i][j]\
    \ == 0) {\n                dp_next[i][j] = 0;\n            } else {\n        \
    \        dp_next[i][j] = Math.min(dp[i][j], Math.min(dp[i][j-1], dp[i][j+1]));\n\
    \            }\n        }\n    }\n    \n    long max = 0;\n    for (int i = 0;\
    \ i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n\
    \            if (dp[i][j] == 0) {\n                dp[i][j] = dp_next[i][j];\n\
    \            } else {\n                dp[i][j] = Math.min(dp[i][j], dp_next[i][j]);\n\
    \            }\n            max = Math.max(max, dp[i][j]);\n        }\n    }\n\
    \    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(i !=\
    \ k && j != l && grid[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    int n = grid.length;\n    int\
    \ m = grid[0].length;\n    long[][] dp = new long[n][m];\n    \n    for(int i\
    \ = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n   \
    \         if(grid[i][j] == 1)\n            {\n                dp[i][j] = 0;\n\
    \            }\n            else\n            {\n                dp[i][j] = -1;\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < m; j++)\n        {\n            if(dp[i][j] == -1)\n\
    \            {\n                continue;\n            }\n            \n     \
    \       for(int k = 0; k < m; k++)\n            {\n                if(grid[i][k]\
    \ == 1)\n                {\n                    dp[i][j] = Math.max(dp[i][j],\
    \ dp[i][k] + 1);\n                }\n            }\n        }\n    }\n    \n \
    \   long max = 0;\n    for(int i = 0; i < n; i++)\n    {\n        for(int j =\
    \ 0; j < m; j++)\n        {\n            max = Math.max(max, dp[i][j]);\n    \
    \    }\n    }\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(grid[i][k] == 1 && dp[i][k] == 0)\n                        dp[i][j]\
    \ = Math.max(dp[i][j], dp[i][k] + 1);\n    \n    long max = 0;\n    for(int i\
    \ = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            if(dp[i][j] == 0)\n                max = Math.max(max, dp[i][j]);\n\
    \    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            for(int k\
    \ = 1; k <= grid[i][j]; k++)\n                dp[i][j] = Math.max(dp[i][j], dp[i][j-k]\
    \ + k);\n    \n    return dp[grid.length-1][grid[0].length-1];\n}", "{\n    long[][]\
    \ dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            dp[i][j]\
    \ = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            if(grid[i][j] == 1)\n         \
    \       for(int k = 0; k < grid.length; k++)\n                    for(int l =\
    \ 0; l < grid[0].length; l++)\n                        if(k != i && l != j &&\
    \ grid[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(dp[i][k] == 0)\n                        dp[i][k] = Math.max(dp[i][k],\
    \ dp[i][j] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(grid[i][k] == 0 && dp[i][k] < capacity)\n                       \
    \ dp[i][j] = Math.max(dp[i][j], dp[i][k] + 1);\n    \n    long max = 0;\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n \
    \   long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i\
    \ < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n     \
    \       dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j] ==\
    \ 1)\n                for(int k = 0; k < grid.length; k++)\n                 \
    \   for(int l = 0; l < grid[0].length; l++)\n                        if(i != k\
    \ && j != l && grid[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(i !=\
    \ k && j != l && grid[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(grid[i][k] == 1)\n                        dp[i][j] = Math.min(dp[i][j],\
    \ dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                max = Math.max(max, dp[i][j]);\n    \n    return max;\n\
    }", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(grid[k][l]\
    \ == 0)\n                            dp[i][j] = Math.max(dp[i][j], dp[k][l] +\
    \ 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n   \
    \     for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    int n = grid.length;\n    int\
    \ m = grid[0].length;\n    long[][] dp = new long[n][m];\n    \n    for (int i\
    \ = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (grid[i][j]\
    \ == 1) {\n                dp[i][j] = 1;\n            } else {\n             \
    \   dp[i][j] = 0;\n            }\n        }\n    }\n    \n    for (int i = 0;\
    \ i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (grid[i][j]\
    \ == 1) {\n                for (int k = 0; k < m; k++) {\n                   \
    \ if (grid[i][k] == 1) {\n                        dp[i][j] = Math.max(dp[i][j],\
    \ dp[i][k] + 1);\n                    }\n                }\n            }\n  \
    \      }\n    }\n    \n    long max = 0;\n    for (int i = 0; i < n; i++) {\n\
    \        for (int j = 0; j < m; j++) {\n            max = Math.max(max, dp[i][j]);\n\
    \        }\n    }\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(i != k && dp[i][k] == 1)\n                        dp[i][j] = Math.max(dp[i][j],\
    \ dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    int n = grid.length;\n    int\
    \ m = grid[0].length;\n    long[][] dp = new long[n][m];\n    \n    for(int i\
    \ = 0; i < n; i++) {\n        for(int j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 1) {\n                dp[i][j] = 1;\n            }\n            else {\n\
    \                dp[i][j] = 0;\n            }\n        }\n    }\n    \n    for(int\
    \ i = 0; i < n; i++) {\n        for(int j = 0; j < m; j++) {\n            if(dp[i][j]\
    \ == 1) {\n                for(int k = 0; k < m; k++) {\n                    if(grid[i][k]\
    \ == 1) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][k] + 1);\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   \n    long max = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j =\
    \ 0; j < m; j++) {\n            max = Math.max(max, dp[i][j]);\n        }\n  \
    \  }\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(grid[i][k] == 1)\n                        dp[i][j] = Math.max(dp[i][j],\
    \ dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    int n = grid.length;\n    int\
    \ m = grid[0].length;\n    \n    long[][] dp = new long[n][m];\n    \n    for(int\
    \ i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            dp[i][j]\
    \ = grid[i][j];\n    \n    for(int i = 0; i < n; i++)\n        for(int j = 0;\
    \ j < m; j++)\n            if(dp[i][j] == 1)\n                for(int k = 0; k\
    \ < m; k++)\n                    if(k != j)\n                        dp[i][j]\
    \ = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int\
    \ i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(grid[k][l]\
    \ == 0)\n                            dp[i][j] = Math.max(dp[i][j], dp[k][l] +\
    \ 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n   \
    \     for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = 0;\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j] ==\
    \ 1)\n                dp[i][j] = 1;\n            else\n                dp[i][j]\
    \ = 0;\n    \n    for(int i = 0; i < grid.length; i++)\n        for(int j = 0;\
    \ j < grid[0].length; j++)\n            for(int k = 0; k < grid[0].length; k++)\n\
    \                if(grid[i][j] == 1 && grid[i][k] == 1)\n                    dp[i][j]\
    \ = Math.max(dp[i][j], dp[i][k] + 1);\n                \n    long max = 0;\n \
    \   for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            max = Math.max(max, dp[i][j]);\n    \n    return max;\n}",
  "{\n    int n = grid.length;\n    int m = grid[0].length;\n    long[][] dp = new\
    \ long[n][m];\n    \n    for(int i = 0; i < n; i++) {\n        for(int j = 0;\
    \ j < m; j++) {\n            if(grid[i][j] == 1) {\n                dp[i][j] =\
    \ Math.min(capacity, dp[i-1][j] + 1);\n            }\n        }\n    }\n    \n\
    \    long max = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j\
    \ < m; j++) {\n            if(grid[i][j] == 1) {\n                max = Math.max(max,\
    \ dp[i][j]);\n            }\n        }\n    }\n    \n    return max;\n}", "{\n\
    \    long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0;\
    \ i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n   \
    \         dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j] ==\
    \ 1)\n                for(int k = 0; k < grid.length; k++)\n                 \
    \   for(int l = 0; l < grid[0].length; l++)\n                        if(i != k\
    \ && j != l && grid[k][l] == 0)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[i].length;\
    \ j++) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    \n    for\
    \ (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[i].length;\
    \ j++) {\n            if (grid[i][j] == 1) {\n                dp[i][j] = Math.min(dp[i][j],\
    \ dp[i][j-1] + 1);\n                dp[i][j] = Math.min(dp[i][j], dp[i-1][j] +\
    \ 1);\n                dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1] + 1);\n    \
    \        }\n        }\n    }\n    \n    long max = 0;\n    for (int i = 0; i <\
    \ grid.length; i++) {\n        for (int j = 0; j < grid[i].length; j++) {\n  \
    \          if (grid[i][j] == 1) {\n                max = Math.max(max, dp[i][j]);\n\
    \            }\n        }\n    }\n    \n    return max;\n}", "{\n    int n = grid.length;\n\
    \    int m = grid[0].length;\n    \n    long[][] dp = new long[n][m];\n    \n\
    \    for(int i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n        \
    \    dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < n; i++)\n        for(int\
    \ j = 0; j < m; j++)\n            if(dp[i][j] == 1)\n                for(int k\
    \ = 0; k < m; k++)\n                    if(k != j)\n                        dp[i][j]\
    \ = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int\
    \ i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(grid[k][l]\
    \ == 1)\n                            dp[i][j] = Math.max(dp[i][j], dp[k][l] +\
    \ 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n   \
    \     for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    int n = grid.length;\n    int\
    \ m = grid[0].length;\n    long[][] dp = new long[n][m];\n    for (int i = 0;\
    \ i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            dp[i][j] =\
    \ grid[i][j];\n        }\n    }\n    \n    for (int i = 0; i < n; i++) {\n   \
    \     for (int j = 0; j < m; j++) {\n            if (dp[i][j] == 0) {\n      \
    \          continue;\n            }\n            \n            for (int k = 0;\
    \ k < m; k++) {\n                if (k == j) {\n                    continue;\n\
    \                }\n                \n                if (dp[i][k] == 0) {\n \
    \                   continue;\n                }\n                \n         \
    \       dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n            }\n \
    \       }\n    }\n    \n    long max = 0;\n    for (int i = 0; i < n; i++) {\n\
    \        for (int j = 0; j < m; j++) {\n            if (dp[i][j] > max) {\n  \
    \              max = dp[i][j];\n            }\n        }\n    }\n    \n    return\
    \ max < capacity ? 0 : max;\n}", "{\n    int n = grid.length;\n    int m = grid[0].length;\n\
    \    long[][] dp = new long[n][m];\n    \n    for(int i = 0; i < n; i++)\n   \
    \     for(int j = 0; j < m; j++)\n            dp[i][j] = grid[i][j];\n    \n \
    \   for(int i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n         \
    \   if(dp[i][j] == 1)\n                for(int k = 0; k < m; k++)\n          \
    \          if(k != j)\n                        dp[i][j] = Math.min(dp[i][j], dp[i][k]\
    \ + dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < n; i++)\n    \
    \    for(int j = 0; j < m; j++)\n            if(dp[i][j] == 1)\n             \
    \   max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n    long[][]\
    \ dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            dp[i][j]\
    \ = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            if(dp[i][j] == 1)\n           \
    \     for(int k = 0; k < grid[0].length; k++)\n                    if(dp[i][k]\
    \ == 0 && dp[k][j] == 0)\n                        dp[i][j] = Math.max(dp[i][j],\
    \ dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            for(int k\
    \ = 0; k < grid[0].length; k++)\n                if(i > 0 && j > 0 && grid[i][j]\
    \ == 1 && grid[i-1][j] == 1 && grid[i][j-1] == 1 && grid[i-1][j-1] == 1)\n   \
    \                 dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1] + 1);\n         \
    \       else if(i > 0 && j > 0 && grid[i][j] == 1 && grid[i-1][j] == 1 && grid[i][j-1]\
    \ == 1)\n                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j] + 1);\n\
    \                else if(i > 0 && j > 0 && grid[i][j] == 1 && grid[i-1][j] ==\
    \ 1)\n                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j] + 1);\n   \
    \             else if(i > 0 && j > 0 && grid[i][j] == 1 && grid[i][j-1] == 1)\n\
    \                    dp[i][j] = Math.min(dp[i][j], dp[i][j-1] + 1);\n        \
    \        else if(i > 0 && j > 0 && grid[i][j] == 1)\n                    dp[i][j]\
    \ = Math.min(dp[i][j], dp[i-1][j-1] + 1);\n                else if(i > 0 && j\
    \ > 0 && grid[i][j] == 0)\n                    dp[i][j] = Math.min", "{\n    long[][]\
    \ dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            dp[i][j]\
    \ = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            if(grid[i][j] == 1)\n         \
    \       for(int k = 0; k < grid.length; k++)\n                    for(int l =\
    \ 0; l < grid[0].length; l++)\n                        if(i != k && j != l)\n\
    \                            dp[i][j] = Math.max(dp[i][j], Math.min(dp[k][l],\
    \ dp[i][j] + Math.min(k - i, l - j)));\n    \n    long max = 0;\n    for(int i\
    \ = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n \
    \   long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i\
    \ < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n     \
    \       dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j] ==\
    \ 1)\n                for(int k = 0; k < grid[0].length; k++)\n              \
    \      if(grid[i][k] == 0 && grid[k][j] == 0)\n                        dp[i][j]\
    \ = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n \
    \   long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i\
    \ < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n     \
    \       dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            for(int k = 1; k\
    \ <= capacity; k++)\n                if(dp[i][j] > 0)\n                    dp[i][j]\
    \ = Math.min(dp[i][j], dp[i][j-1] + k);\n                else\n              \
    \      dp[i][j] = Math.min(dp[i][j], dp[i-1][j] + k);\n    \n    return dp[grid.length-1][grid[0].length-1];\n\
    }", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            for(int k\
    \ = 0; k < grid[0].length; k++)\n                if(dp[i][k] > 0 && dp[i][k] <\
    \ capacity)\n                    dp[i][j] = Math.max(dp[i][j], dp[i][k] + 1);\n\
    \    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            max = Math.max(max, dp[i][j]);\n\
    \    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++) {\n        for(int j = 0; j < grid[0].length;\
    \ j++) {\n            dp[i][j] = 0;\n        }\n    }\n    \n    for(int i = 0;\
    \ i < grid.length; i++) {\n        for(int j = 0; j < grid[0].length; j++) {\n\
    \            if(grid[i][j] == 1) {\n                dp[i][j] = 1;\n          \
    \  }\n            \n            for(int k = 0; k < grid[i].length; k++) {\n  \
    \              if(grid[i][k] == 1 && grid[k][j] == 1) {\n                    dp[i][j]\
    \ = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n                }\n            }\n\
    \        }\n    }\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++) {\n        for(int j = 0; j < grid[0].length; j++) {\n            max =\
    \ Math.max(max, dp[i][j]);\n        }\n    }\n    \n    return max;\n}", "{\n\
    \    long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0;\
    \ i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n   \
    \         dp[i][j] = 0;\n    \n    for(int i = 0; i < grid.length; i++)\n    \
    \    for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j] == 1)\n\
    \                dp[i][j] = Math.min(dp[i][j], Math.min(dp[i][j-1], dp[i][j+1])\
    \ + 1);\n            else\n                dp[i][j] = 0;\n    \n    long max =\
    \ 0;\n    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            max = Math.max(max, dp[i][j]);\n    \n    return max;\n}",
  "{\n    long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0;\
    \ i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n   \
    \         dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j] ==\
    \ 1)\n                for(int k = 0; k < grid.length; k++)\n                 \
    \   for(int l = 0; l < grid[0].length; l++)\n                        if(k != i\
    \ && l != j)\n                            dp[k][l] = Math.max(dp[k][l], dp[i][j]\
    \ + Math.min(dp[k][l], dp[i][j]));\n    \n    long max = 0;\n    for(int i = 0;\
    \ i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n   \
    \         max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n    long[][]\
    \ dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i < grid.length;\
    \ i++) {\n        for(int j = 0; j < grid[0].length; j++) {\n            if(grid[i][j]\
    \ == 1) {\n                dp[i][j] = 1;\n            } else {\n             \
    \   dp[i][j] = 0;\n            }\n        }\n    }\n    \n    long max = 0;\n\
    \    for(int i = 0; i < grid.length; i++) {\n        for(int j = 0; j < grid[0].length;\
    \ j++) {\n            if(dp[i][j] == 0) {\n                continue;\n       \
    \     }\n            \n            long[] dp_row = new long[grid[0].length];\n\
    \            for(int k = 0; k < grid[0].length; k++) {\n                dp_row[k]\
    \ = Math.min(dp[i][k], dp[i][k] + dp[k][j]);\n            }\n            \n  \
    \          long max_row = 0;\n            for(int k = 0; k < grid[0].length; k++)\
    \ {\n                max_row = Math.max(max_row, dp_row[k]);\n            }\n\
    \            \n            max = Math.max(max, max_row);\n        }\n    }\n \
    \   \n    return max;\n}", "{\n    int n = grid.length;\n    int m = grid[0].length;\n\
    \    long[][] dp = new long[n][m];\n    for (int i = 0; i < n; i++) {\n      \
    \  for (int j = 0; j < m; j++) {\n            dp[i][j] = grid[i][j];\n       \
    \ }\n    }\n    \n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j\
    \ < m; j++) {\n            if (dp[i][j] == 1) {\n                for (int k =\
    \ 0; k < m; k++) {\n                    if (k != j) {\n                      \
    \  dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k][j]);\n                    }\n\
    \                }\n            }\n        }\n    }\n    \n    long max = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n  \
    \          if (dp[i][j] == 1) {\n                max = Math.max(max, dp[i][j]);\n\
    \            }\n        }\n    }\n    \n    return max;\n}", "{\n    long[][]\
    \ dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            dp[i][j]\
    \ = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n        for(int\
    \ j = 0; j < grid[0].length; j++)\n            for(int k = 1; k <= grid[i][j];\
    \ k++)\n                dp[i][j] = Math.max(dp[i][j], dp[i][j-k] + k * capacity);\n\
    \    \n    return dp[grid.length-1][grid[0].length-1];\n}", "{\n    long[][] dp\
    \ = new long[grid.length][grid[0].length];\n    for (int i = 0; i < grid.length;\
    \ i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            dp[i][j]\
    \ = grid[i][j];\n        }\n    }\n    \n    long max = 0;\n    for (int i = 0;\
    \ i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n\
    \            if (grid[i][j] == 1) {\n                dp[i][j] = Math.min(dp[i][j],\
    \ Math.min(dp[i][j-1], Math.min(dp[i-1][j], dp[i-1][j-1])));\n               \
    \ max = Math.max(max, dp[i][j]);\n            }\n        }\n    }\n    return\
    \ max;\n}", "{\n    int n = grid.length;\n    int m = grid[0].length;\n    long[][]\
    \ dp = new long[n][m];\n    for (int i = 0; i < n; i++) {\n        for (int j\
    \ = 0; j < m; j++) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n \
    \   \n    long[][] dp2 = new long[n][m];\n    for (int i = 0; i < n; i++) {\n\
    \        for (int j = 0; j < m; j++) {\n            dp2[i][j] = 0;\n        }\n\
    \    }\n    \n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m;\
    \ j++) {\n            if (dp[i][j] == 1) {\n                dp2[i][j] = 1;\n \
    \               for (int k = 0; k < m; k++) {\n                    if (k != j)\
    \ {\n                        dp2[i][j] = Math.max(dp2[i][j], dp[i][k] + dp2[k][j]);\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   \n    long max = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j\
    \ = 0; j < m; j++) {\n            if (dp2[i][j] == 1) {\n                max =\
    \ Math.max(max, dp[i][j] + dp2[i][j]);\n            }\n        }\n    }\n    \n\
    \    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(i !=\
    \ k && j != l && dp[k][l] == 1)\n                            dp[i][j] = Math.min(dp[i][j],\
    \ dp[i][l] + dp[k][j] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++) {\n        for(int j = 0; j < grid[0].length;\
    \ j++) {\n            dp[i][j] = 0;\n        }\n    }\n    \n    for(int i = 0;\
    \ i < grid.length; i++) {\n        for(int j = 0; j < grid[0].length; j++) {\n\
    \            if(grid[i][j] == 1) {\n                dp[i][j] = Math.min(dp[i][j],\
    \ dp[i][j-1] + 1);\n                dp[i][j] = Math.min(dp[i][j], dp[i-1][j] +\
    \ 1);\n                dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1] + 1);\n    \
    \        }\n        }\n    }\n    \n    long max = 0;\n    for(int i = 0; i <\
    \ grid.length; i++) {\n        for(int j = 0; j < grid[0].length; j++) {\n   \
    \         max = Math.max(max, dp[i][j]);\n        }\n    }\n    \n    return max;\n\
    }", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(dp[i][k] == 0 && dp[k][j] == 0)\n                        dp[i][j]\
    \ = Math.max(dp[i][j], dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n \
    \   long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0; i\
    \ < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n     \
    \       dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j] == 1)\n\
    \                for(int k = 0; k < grid[0].length; k++)\n                   \
    \ if(grid[i][k] == 1 && dp[i][k] == 0)\n                        dp[i][j] = Math.min(dp[i][j],\
    \ dp[i][k] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    int n = grid.length;\n    int\
    \ m = grid[0].length;\n    long[][] dp = new long[n][m];\n    for(int i = 0; i\
    \ < n; i++)\n        for(int j = 0; j < m; j++)\n            dp[i][j] = grid[i][j];\n\
    \    \n    for(int i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n  \
    \          if(dp[i][j] == 1)\n                for(int k = 0; k < m; k++)\n   \
    \                 if(k != j)\n                        dp[i][j] = Math.max(dp[i][j],\
    \ dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < n; i++)\n\
    \        for(int j = 0; j < m; j++)\n            max = Math.max(max, dp[i][j]);\n\
    \    \n    return max;\n}", "{\n    int n = grid.length;\n    int m = grid[0].length;\n\
    \    long[][] dp = new long[n][m];\n    \n    for (int i = 0; i < n; i++) {\n\
    \        for (int j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n \
    \               dp[i][j] = Math.min(capacity, dp[i][j] + 1);\n            }\n\
    \        }\n    }\n    \n    long max = 0;\n    for (int i = 0; i < n; i++) {\n\
    \        for (int j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n \
    \               max = Math.max(max, dp[i][j]);\n            }\n        }\n   \
    \ }\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length;\
    \ j++) {\n            dp[i][j] = 0;\n        }\n    }\n    \n    for (int i =\
    \ 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length; j++)\
    \ {\n            if (grid[i][j] == 1) {\n                dp[i][j] = Math.min(dp[i][j],\
    \ Math.min(Math.min(dp[i-1][j], dp[i][j-1]), dp[i-1][j-1]) + 1);\n           \
    \ }\n        }\n    }\n    \n    long max = 0;\n    for (int i = 0; i < grid.length;\
    \ i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            max\
    \ = Math.max(max, dp[i][j]);\n        }\n    }\n    \n    return max;\n}", "{\n\
    \    int n = grid.length;\n    int m = grid[0].length;\n    long[][] dp = new\
    \ long[n][m];\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j <\
    \ m; j++) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    \n    long[][]\
    \ dp2 = new long[n][m];\n    for (int i = 0; i < n; i++) {\n        for (int j\
    \ = 0; j < m; j++) {\n            dp2[i][j] = 0;\n        }\n    }\n    \n   \
    \ for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n     \
    \       if (dp[i][j] == 1) {\n                dp2[i][j] = 1;\n            }\n\
    \        }\n    }\n    \n    long[][] dp3 = new long[n][m];\n    for (int i =\
    \ 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            dp3[i][j]\
    \ = 0;\n        }\n    }\n    \n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = 0; j < m; j++) {\n            if (dp2[i][j] == 1) {\n             \
    \   dp3[i][j] = 1;\n            }\n        }\n    }\n    \n    long[][] dp4 =\
    \ new long[n][m];\n    for (int i = 0; i < n; i++) {\n        for (int j = 0;\
    \ j < m; j++) {\n            dp4[i][j] = 0;\n        }\n    }\n    \n    for (int\
    \ i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if\
    \ (dp3[i][j] == 1) {\n                dp4[i][j] = 1;\n            }\n        }\n\
    \    }\n    \n    long[", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(grid[k][l]\
    \ == 0)\n                            dp[i][j] = Math.max(dp[i][j], dp[k][l] +\
    \ 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n   \
    \     for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(i !=\
    \ k && j != l && grid[k][l] == 1)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ dp[k][l] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(grid[i][k] == 1)\n                        dp[i][j] = Math.min(dp[i][j],\
    \ dp[i][k] + dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    int n = grid.length;\n    int\
    \ m = grid[0].length;\n    long[][] dp = new long[n][m];\n    \n    for(int i\
    \ = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n   \
    \         if(grid[i][j] == 1)\n            {\n                dp[i][j] = 1;\n\
    \            }\n            else\n            {\n                dp[i][j] = 0;\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < m; j++)\n        {\n            if(grid[i][j] == 1)\n\
    \            {\n                for(int k = 0; k < m; k++)\n                {\n\
    \                    if(grid[i][k] == 1)\n                    {\n            \
    \            dp[i][j] = Math.max(dp[i][j], dp[i][k] + 1);\n                  \
    \  }\n                }\n            }\n        }\n    }\n    \n    long max =\
    \ 0;\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n\
    \        {\n            max = Math.max(max, dp[i][j]);\n        }\n    }\n   \
    \ \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    long max = 0;\n    for(int\
    \ i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            if(dp[i][j] == 1)\n            {\n                dp[i][j] = 0;\n\
    \                for(int k = 0; k < grid.length; k++)\n                    for(int\
    \ l = 0; l < grid[0].length; l++)\n                        if(grid[k][l] == 1\
    \ && dp[k][l] == 0)\n                            dp[i][j] = Math.max(dp[i][j],\
    \ 1 + max_fill(grid, capacity - 1));\n                max = Math.max(max, dp[i][j]);\n\
    \            }\n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(dp[i][k] == 0)\n                        dp[i][k] = Math.min(dp[i][k],\
    \ dp[i][j] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(grid[k][l]\
    \ == 0)\n                            dp[i][j] = Math.max(dp[i][j], Math.min(dp[k][l],\
    \ dp[i][j] + Math.min(k - i, l - j)));\n    \n    long max = 0;\n    for(int i\
    \ = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n\
    \            max = Math.max(max, dp[i][j]);\n    \n    return max;\n}", "{\n \
    \   int n = grid.length;\n    int m = grid[0].length;\n    long[][] dp = new long[n][m];\n\
    \    \n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++)\
    \ {\n            if (grid[i][j] == 1) {\n                dp[i][j] = 1;\n     \
    \       } else {\n                dp[i][j] = 0;\n            }\n        }\n  \
    \  }\n    \n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m;\
    \ j++) {\n            if (dp[i][j] == 1) {\n                for (int k = 0; k\
    \ < m; k++) {\n                    if (k != j) {\n                        if (grid[i][k]\
    \ == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][k]\
    \ + 1);\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    \n    long max = 0;\n    for (int i = 0;\
    \ i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (dp[i][j]\
    \ > max) {\n                max = dp[i][j];\n            }\n        }\n    }\n\
    \    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length;\
    \ j++) {\n            dp[i][j] = 0;\n        }\n    }\n    \n    for (int i =\
    \ 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length; j++)\
    \ {\n            if (grid[i][j] == 1) {\n                dp[i][j] = Math.min(dp[i][j],\
    \ max_fill(grid, i, j, capacity));\n            }\n        }\n    }\n    \n  \
    \  return dp[grid.length - 1][grid[0].length - 1];\n}", "{\n    long[][] dp =\
    \ new long[grid.length][grid[0].length];\n    for (int i = 0; i < grid.length;\
    \ i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            if (grid[i][j]\
    \ == 1) {\n                dp[i][j] = 1;\n            } else {\n             \
    \   dp[i][j] = 0;\n            }\n        }\n    }\n    \n    long[][] dp2 = new\
    \ long[grid.length][grid[0].length];\n    for (int i = 0; i < grid.length; i++)\
    \ {\n        for (int j = 0; j < grid[0].length; j++) {\n            if (dp[i][j]\
    \ == 0) {\n                dp2[i][j] = 0;\n            } else {\n            \
    \    dp2[i][j] = dp[i][j];\n            }\n        }\n    }\n    \n    long[][]\
    \ dp3 = new long[grid.length][grid[0].length];\n    for (int i = 0; i < grid.length;\
    \ i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            if (dp2[i][j]\
    \ == 0) {\n                dp3[i][j] = 0;\n            } else {\n            \
    \    dp3[i][j] = dp2[i][j];\n            }\n        }\n    }\n    \n    long[][]\
    \ dp4 = new long[grid.length][grid[0].length];\n    for (int i = 0; i < grid.length;\
    \ i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            if (dp3[i][j]\
    \ == 0) {\n                dp4[i][j] = 0;\n            } else {\n            \
    \    dp4[i][j] = dp3[i][j];\n            }\n        }\n    }\n    \n    long[][]\
    \ dp5 = new long[grid.length][grid[0].length];\n    for (int i = 0; i < grid",
  "{\n    long[][] dp = new long[grid.length][grid[0].length];\n    for(int i = 0;\
    \ i < grid.length; i++)\n        for(int j = 0; j < grid[0].length; j++)\n   \
    \         dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j] == 1)\n\
    \                for(int k = 0; k < grid[0].length; k++)\n                   \
    \ if(k != j)\n                        dp[i][j] = Math.max(dp[i][j], dp[i][k] +\
    \ dp[k][j]);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n\
    \        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(dp[i][j]\
    \ == 1)\n                for(int k = 0; k < grid[0].length; k++)\n           \
    \         if(grid[i][k] == 0)\n                        dp[i][k] = Math.max(dp[i][k],\
    \ dp[i][j] + 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    for(int i = 0; i < grid.length; i++)\n        for(int j = 0; j < grid[0].length;\
    \ j++)\n            dp[i][j] = grid[i][j];\n    \n    for(int i = 0; i < grid.length;\
    \ i++)\n        for(int j = 0; j < grid[0].length; j++)\n            if(grid[i][j]\
    \ == 1)\n                for(int k = 0; k < grid.length; k++)\n              \
    \      for(int l = 0; l < grid[0].length; l++)\n                        if(grid[k][l]\
    \ == 0)\n                            dp[i][j] = Math.max(dp[i][j], dp[k][l] +\
    \ 1);\n    \n    long max = 0;\n    for(int i = 0; i < grid.length; i++)\n   \
    \     for(int j = 0; j < grid[0].length; j++)\n            max = Math.max(max,\
    \ dp[i][j]);\n    \n    return max;\n}", "{\n    int n = grid.length;\n    int\
    \ m = grid[0].length;\n    long[][] dp = new long[n][m];\n    for(int i = 0; i\
    \ < n; i++)\n        dp[i][0] = 0;\n    for(int i = 0; i < m; i++)\n        dp[0][i]\
    \ = 0;\n    for(int i = 1; i < n; i++)\n        for(int j = 1; j < m; j++)\n \
    \           dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n    long\
    \ ans = 0;\n    for(int i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n\
    \            ans = Math.max(ans, dp[i][j]);\n    return ans;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
