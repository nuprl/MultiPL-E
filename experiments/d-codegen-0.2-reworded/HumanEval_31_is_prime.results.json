{
  "name": "HumanEval_31_is_prime",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n",
  "tests": "unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <= math.sqrt(n); i += 2)\n        if (n % i == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "/tmp/tmpdcle9kdm.d(26): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdcle9kdm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    for (int i = 3; i <= math.sqrt(n); i += 2)\n        if (n % i == 0)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "/tmp/tmpdng6u359.d(29): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdng6u359.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    if (n < 4) return true;\n    if (n % 3 == 0) return false;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n == 3) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n == 3) return true;\n    if (n == 5) return true;\n    if (n == 7) return true;\n    if (n == 11) return true;\n    if (n == 13) return true;\n    if (n == 17) return true;\n    if (n == 19) return true;\n    if (n == 23) return true;\n    if (n == 29) return true;\n    if (n == 31) return true;\n    if (n == 37) return true;\n    if (n == 41) return true;\n    if (n == 43) return true;\n    if (n == 47) return true;\n    if (n == 53) return true;\n    if (n == 59) return true;\n    if (n == 61) return true;\n    if (n == 67) return true;\n    if (n == 71) return true;\n    if (n == 73) return true;\n    if (n == 79) return true;\n    if (n == 83) return true;\n    if (n == 89) return true;\n    if (n == 97) return true;\n    if (n == 101) return true;\n    if (n == 103) return true;\n    if (n == 107) return true;\n    if (n == 109) return true;\n    if (n == 113) return true;\n    if (n == 127) return true;\n    if (n == 131) return true;\n    if (n == 137) return true;\n    if (n == 139) return true;\n    if (n == 149) return true;\n    if (n == 151) return true;\n    if (n == 157) return true;\n    if (n == 163) return true;\n    if (n == 167) return true;\n    if (n == 173) return true;\n    if (n == 179) return true;\n    if (n == 181) return true;\n    if (n == 191) return true;\n    if (n == 193) return true;\n    if (n == 197) return true;\n    if (n\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "/tmp/tmplmts1inp.d(70): Error: found `unittest` when expecting `)`\n/tmp/tmplmts1inp.d(88): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplmts1inp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <= math.sqrt(n); i += 2)\n        if (n % i == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "/tmp/tmpdcle9kdm.d(26): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdcle9kdm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <= math.sqrt(n); i += 2)\n        if (n % i == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "/tmp/tmpdcle9kdm.d(26): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdcle9kdm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n == 3) return true;\n    if (n == 5) return true;\n    if (n == 7) return true;\n    if (n == 11) return true;\n    if (n == 13) return true;\n    if (n == 17) return true;\n    if (n == 19) return true;\n    if (n == 23) return true;\n    if (n == 29) return true;\n    if (n == 31) return true;\n    if (n == 37) return true;\n    if (n == 41) return true;\n    if (n == 43) return true;\n    if (n == 47) return true;\n    if (n == 53) return true;\n    if (n == 59) return true;\n    if (n == 61) return true;\n    if (n == 67) return true;\n    if (n == 71) return true;\n    if (n == 73) return true;\n    if (n == 79) return true;\n    if (n == 83) return true;\n    if (n == 89) return true;\n    if (n == 97) return true;\n    if (n == 101) return true;\n    if (n == 103) return true;\n    if (n == 107) return true;\n    if (n == 109) return true;\n    if (n == 113) return true;\n    if (n == 127) return true;\n    if (n == 131) return true;\n    if (n == 137) return true;\n    if (n == 139) return true;\n    if (n == 149) return true;\n    if (n == 151) return true;\n    if (n == 157) return true;\n    if (n == 163) return true;\n    if (n == 167) return true;\n    if (n == 173) return true;\n    if (n == 179) return true;\n    if (n == 181) return true;\n    if (n == 191) return true;\n    if (n == 193) return true;\n    if (n == 197) return true;\n    if (n\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "/tmp/tmplmts1inp.d(70): Error: found `unittest` when expecting `)`\n/tmp/tmplmts1inp.d(88): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplmts1inp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <= math.sqrt(n); i += 2)\n        if (n % i == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "/tmp/tmp10r3y7ga.d(26): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp10r3y7ga.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    if (n < 4) return true;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <= math.sqrt(n); i += 2)\n        if (n % i == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "/tmp/tmpdcle9kdm.d(26): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdcle9kdm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <= math.sqrt(n); i += 2)\n        if (n % i == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "/tmp/tmpdcle9kdm.d(26): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdcle9kdm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <= math.sqrt(n); i += 2)\n        if (n % i == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "/tmp/tmp10r3y7ga.d(26): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp10r3y7ga.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    if (n < 4) return true;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n == 3) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n)\n    {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n == 3) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n)\n    {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <= math.sqrt(n); i += 2)\n        if (n % i == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "/tmp/tmpdcle9kdm.d(26): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdcle9kdm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n == 3) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1)\n        return false;\n    if (n == 2)\n        return true;\n    if (n < 2)\n        return false;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    if (n < 4) return true;\n    if (n % 2 == 0) return false;\n    if (n < 9) return true;\n    if (n % 3 == 0) return false;\n    long r = math.sqrt(n);\n    for (long i = 5; i <= r; i += 6) {\n        if (n % (i - 1) == 0 || n % (i + 1) == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "/tmp/tmpxpjnwmcc.d(31): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxpjnwmcc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    if (n < 4) return true;\n    if (n % 2 == 0) return false;\n    if (n < 9) return true;\n    if (n % 3 == 0) return false;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        if (n % (i + 2) == 0) return false;\n        i += 6;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <= math.sqrt(n); i += 2)\n        if (n % i == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "/tmp/tmpdcle9kdm.d(26): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdcle9kdm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n == 3) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i <= math.sqrt(n); i += 2)\n        if (n % i == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "/tmp/tmp10r3y7ga.d(26): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp10r3y7ga.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1)\n        return false;\n    if (n == 2)\n        return true;\n    if (n == 3)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n < 2) return false;\n    if (n % 2 == 0) return false;\n    if (n < 4) return true;\n    if (n % 2 == 0) return false;\n    if (n < 9) return true;\n    if (n % 3 == 0) return false;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1)\n        return false;\n    if (n == 2)\n        return true;\n    if (n < 2)\n        return false;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <= math.sqrt(n); i += 2)\n        if (n % i == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "/tmp/tmpdcle9kdm.d(26): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdcle9kdm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n == 3) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <= math.sqrt(n); i += 2) \n    {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "/tmp/tmpcte7gzda.d(26): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcte7gzda.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <= math.sqrt(n); i += 2)\n        if (n % i == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "/tmp/tmpdcle9kdm.d(26): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdcle9kdm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <= math.sqrt(n); i += 2)\n        if (n % i == 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293036,
      "stdout": "",
      "stderr": "/tmp/tmpdcle9kdm.d(26): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdcle9kdm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool is_prime(long n) \n{\n    if (n < 2) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}