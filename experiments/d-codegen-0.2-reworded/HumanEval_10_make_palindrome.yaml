name: HumanEval_10_make_palindrome
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
  \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
  \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
  \ the end of the string reverse of a string prefix that comes before the palindromic\
  \ suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\"\
  )\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n*/\nstring\
  \ make_palindrome(string string) \n"
tests: "unittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
  \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\"\
  ) == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
  jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
completions: ["{\n    int len = string.length();\n    int max_len = len;\n    int\
    \ max_len_index = 0;\n    for(int i = 0; i < len; i++)\n    {\n        if(is_palindrome(string,\
    \ i, i))\n        {\n            max_len = i;\n            max_len_index = i;\n\
    \            break;\n        }\n    }\n    \n    string result = string;\n   \
    \ for(int i = 0; i < max_len; i++)\n    {\n        result += string[i];\n    }\n\
    \    \n    for(int i = max_len_index - 1; i >= 0; i--)\n    {\n        result\
    \ += string[i];\n    }\n    \n    return result;\n}", "{\n    string reverse =\
    \ \"\";\n    int length = string.length();\n    int i = 0;\n    while(i < length)\n\
    \    {\n        reverse = reverse + string[i];\n        i++;\n    }\n    reverse\
    \ = reverse + string[0];\n    reverse = reverse.substr(0, length);\n    reverse\
    \ = reverse.substr(0, length-1);\n    reverse = reverse.substr(0, length-2);\n\
    \    reverse = reverse.substr(0, length-3);\n    reverse = reverse.substr(0, length-4);\n\
    \    reverse = reverse.substr(0, length-5);\n    reverse = reverse.substr(0, length-6);\n\
    \    reverse = reverse.substr(0, length-7);\n    reverse = reverse.substr(0, length-8);\n\
    \    reverse = reverse.substr(0, length-9);\n    reverse = reverse.substr(0, length-10);\n\
    \    reverse = reverse.substr(0, length-11);\n    reverse = reverse.substr(0,\
    \ length-12);\n    reverse = reverse.substr(0, length-13);\n    reverse = reverse.substr(0,\
    \ length-14);\n    reverse = reverse.substr(0, length-15);\n    reverse = reverse.substr(0,\
    \ length-16);\n    reverse = reverse.substr(0, length-17);\n    reverse = reverse.substr(0,\
    \ length-18);\n    reverse = reverse.substr(0, length-19);\n    reverse = reverse.substr(0,\
    \ length-20);\n    reverse = reverse.substr(0, length-21);\n    reverse = reverse.substr(0,\
    \ length-22);\n    reverse = reverse.substr(0, length-23);\n    reverse = reverse.substr(0,\
    \ length-24);\n    reverse = reverse.substr(0, length-25);\n    reverse = reverse.substr(0,\
    \ length-26);\n    reverse = reverse.substr(0, length-27);\n    reverse = reverse.substr(0,\
    \ length-28);\n    reverse = reverse.substr(0, length-29);\n    ", "{\n    int\
    \ len = string.length();\n    int max_len = len;\n    int i = 0;\n    while (i\
    \ < len)\n    {\n        if (is_palindrome(string, i, i))\n        {\n       \
    \     max_len = i;\n            break;\n        }\n        i++;\n    }\n    if\
    \ (max_len == len)\n        return string;\n    string = string.substr(0, max_len);\n\
    \    string += string.substr(max_len, len - max_len);\n    return string;\n}",
  "{\n    int len = string.length();\n    int max_len = len;\n    int max_len_index\
    \ = 0;\n    for(int i = 0; i < len; i++)\n    {\n        if(is_palindrome(string,\
    \ i, i))\n        {\n            if(i > max_len)\n            {\n            \
    \    max_len = i;\n                max_len_index = i;\n            }\n       \
    \ }\n    }\n    \n    string result = string;\n    for(int i = 0; i < max_len;\
    \ i++)\n    {\n        result.append(string.substr(i, len-i));\n    }\n    \n\
    \    return result;\n}", "{\n    if (string.length() == 0)\n        return string;\n\
    \    \n    int max_len = 0;\n    int max_index = 0;\n    for (int i = 0; i < string.length();\
    \ i++)\n    {\n        if (is_palindrome(string.substr(i, string.length() - i)))\n\
    \        {\n            if (string.length() - i > max_len)\n            {\n  \
    \              max_len = string.length() - i;\n                max_index = i;\n\
    \            }\n        }\n    }\n    \n    return string.substr(0, max_index)\
    \ + reverse(string.substr(max_index, string.length() - max_index));\n}", "{\n\
    \    string result = string;\n    int len = string.length();\n    int i = 0;\n\
    \    int j = len - 1;\n    while (i < j) {\n        while (i < j && !is_palindrome(string,\
    \ i, j)) {\n            i++;\n        }\n        while (i < j && !is_palindrome(string,\
    \ i, j)) {\n            j--;\n        }\n        if (i < j) {\n            string.insert(j,\
    \ string[i]);\n            string.erase(i, 1);\n            j--;\n        }\n\
    \    }\n    return string;\n}", "{\n    string longest_palindrome = \"\";\n  \
    \  for (int i = 0; i < string.length(); i++)\n    {\n        string prefix = string.substr(0,\
    \ i);\n        string postfix = string.substr(i);\n        if (is_palindrome(postfix))\n\
    \        {\n            if (longest_palindrome.length() < postfix.length())\n\
    \            {\n                longest_palindrome = postfix;\n            }\n\
    \        }\n    }\n    return string + reverse(longest_palindrome);\n}", "{\n\
    \    if (string.length() == 0) return string;\n    \n    string longest_palindrome\
    \ = \"\";\n    int longest_palindrome_length = 0;\n    \n    for (int i = 0; i\
    \ < string.length(); i++) {\n        string prefix = string.substr(0, i);\n  \
    \      string suffix = string.substr(i, string.length() - i);\n        \n    \
    \    if (is_palindrome(suffix)) {\n            if (suffix.length() > longest_palindrome_length)\
    \ {\n                longest_palindrome = suffix;\n                longest_palindrome_length\
    \ = suffix.length();\n            }\n        }\n        \n        if (is_palindrome(prefix))\
    \ {\n            if (prefix.length() > longest_palindrome_length) {\n        \
    \        longest_palindrome = prefix + suffix;\n                longest_palindrome_length\
    \ = prefix.length() + suffix.length();\n            }\n        }\n    }\n    \n\
    \    return longest_palindrome;\n}", "{\n    if (string.length() == 0)\n     \
    \   return string;\n    \n    string prefix = string.substr(0, string.length()/2);\n\
    \    string suffix = string.substr(string.length()/2);\n    \n    string palindrome\
    \ = prefix + suffix;\n    \n    return palindrome;\n}", "{\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j)\n    {\n        while\
    \ (i < j && string[i] == string[j])\n        {\n            i++;\n           \
    \ j--;\n        }\n        if (i < j)\n        {\n            string[i] = string[j];\n\
    \            string[j] = string[i];\n            i++;\n            j--;\n    \
    \    }\n    }\n    return string;\n}", "{\n    int len = string.length();\n  \
    \  int i = 0;\n    int j = len - 1;\n    while(i < j)\n    {\n        if(string[i]\
    \ != string[j])\n        {\n            break;\n        }\n        i++;\n    \
    \    j--;\n    }\n    string.append(string.substr(i, len - i));\n    string.append(string.substr(0,\
    \ i));\n    return string;\n}", "{\n    int len = string.length();\n    int max_len\
    \ = 0;\n    int max_len_index = 0;\n    for(int i = 0; i < len; i++)\n    {\n\
    \        if(is_palindrome(string, i, i))\n        {\n            if(i > max_len)\n\
    \            {\n                max_len = i;\n                max_len_index =\
    \ i;\n            }\n        }\n    }\n    \n    string result = string.substr(0,\
    \ max_len_index);\n    for(int i = max_len_index; i < len; i++)\n    {\n     \
    \   result += string[i];\n    }\n    return result;\n}", "{\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    string palindrome = \"\";\n    while\
    \ (i < j) {\n        if (string[i] == string[j]) {\n            palindrome +=\
    \ string[i];\n            i++;\n            j--;\n        } else {\n         \
    \   break;\n        }\n    }\n    string reverse = \"\";\n    while (i < j) {\n\
    \        reverse += string[i];\n        i++;\n    }\n    return palindrome + reverse;\n\
    }", "{\n    string result = \"\";\n    int len = string.length();\n    int i =\
    \ 0;\n    int j = len - 1;\n    while (i < j) {\n        if (string[i] == string[j])\
    \ {\n            result += string[i];\n            i++;\n            j--;\n  \
    \      } else {\n            break;\n        }\n    }\n    if (result.length()\
    \ == 0) {\n        return string;\n    }\n    string prefix = string.substr(0,\
    \ i);\n    string suffix = string.substr(j + 1);\n    result += reverse(prefix)\
    \ + suffix;\n    return result;\n}", "{\n    string reverse_string = string;\n\
    \    reverse(reverse_string.begin(), reverse_string.end());\n    string palindrome\
    \ = string + reverse_string;\n    return palindrome;\n}", "{\n    int len = string.length();\n\
    \    if (len == 0) return string;\n    int max_len = len;\n    int max_len_index\
    \ = len - 1;\n    int max_len_index_rev = len - 1;\n    for (int i = len - 2;\
    \ i >= 0; i--)\n    {\n        if (string[i] == string[i + 1])\n        {\n  \
    \          max_len = i + 1;\n            max_len_index = i;\n            max_len_index_rev\
    \ = i + 1;\n        }\n    }\n    string rev_string = string.substr(0, max_len_index);\n\
    \    string rev_string_rev = string.substr(max_len_index_rev, len - max_len_index_rev);\n\
    \    string result = string + rev_string_rev;\n    return result;\n}", "{\n  \
    \  string longest_palindrome = \"\";\n    int length = string.length();\n    for(int\
    \ i = 0; i < length; i++)\n    {\n        int j = length - 1 - i;\n        if(string[i]\
    \ == string[j] && is_palindrome(string.substr(i, length - i)))\n        {\n  \
    \          longest_palindrome = string.substr(i, length - i);\n        }\n   \
    \ }\n    return string + reverse(longest_palindrome);\n}", "{\n    string result\
    \ = \"\";\n    int len = string.length();\n    int i = 0;\n    int j = len - 1;\n\
    \    while (i < j)\n    {\n        if (string[i] == string[j])\n        {\n  \
    \          result += string[i];\n            i++;\n            j--;\n        }\n\
    \        else\n        {\n            break;\n        }\n    }\n    if (i == j)\n\
    \    {\n        result += string[i];\n    }\n    else\n    {\n        result +=\
    \ string[j];\n        result += string[i];\n    }\n    return result;\n}", "{\n\
    \    if(string.empty())\n        return string;\n    string prefix = string.substr(0,string.size()/2);\n\
    \    string suffix = string.substr(string.size()/2);\n    string result = prefix\
    \ + suffix;\n    return result;\n}", "{\n    int len = string.length();\n    int\
    \ max_len = 0;\n    int max_index = 0;\n    for(int i = 0; i < len; i++)\n   \
    \ {\n        if(is_palindrome(string, i, i))\n        {\n            if(i > max_len)\n\
    \            {\n                max_len = i;\n                max_index = i;\n\
    \            }\n        }\n    }\n    \n    string result = string;\n    for(int\
    \ i = 0; i < max_len; i++)\n    {\n        result += string[max_index - i];\n\
    \    }\n    return result;\n}", "{\n    if (string.length() == 0)\n        return\
    \ string;\n    \n    int max_len = 0;\n    int max_len_index = 0;\n    for (int\
    \ i = 0; i < string.length(); i++)\n    {\n        if (is_palindrome(string.substr(i,\
    \ string.length() - i)))\n        {\n            if (string.length() - i > max_len)\n\
    \            {\n                max_len = string.length() - i;\n             \
    \   max_len_index = i;\n            }\n        }\n    }\n    \n    string result\
    \ = string.substr(0, max_len_index) + string.substr(max_len_index, string.length()\
    \ - max_len_index);\n    return result;\n}", "{\n    string prefix = \"\";\n \
    \   string postfix = \"\";\n    int len = string.length();\n    int i = 0;\n \
    \   int j = len - 1;\n    while (i < j)\n    {\n        if (string[i] == string[j])\n\
    \        {\n            prefix += string[i];\n            postfix += string[j];\n\
    \            i++;\n            j--;\n        }\n        else\n        {\n    \
    \        break;\n        }\n    }\n    return prefix + postfix;\n}", "{\n    int\
    \ len = string.length();\n    int max_len = len;\n    int max_len_index = len;\n\
    \    int max_len_index_rev = len;\n    int max_len_index_rev_index = len;\n  \
    \  for (int i = len - 1; i >= 0; i--)\n    {\n        if (string[i] == 'a' ||\
    \ string[i] == 'A')\n        {\n            if (i - 1 >= 0 && string[i - 1] ==\
    \ 'a' || string[i - 1] == 'A')\n            {\n                max_len = i;\n\
    \                max_len_index = i;\n                max_len_index_rev = i;\n\
    \                max_len_index_rev_index = i;\n            }\n        }\n    \
    \    else if (string[i] == 'c' || string[i] == 'C')\n        {\n            if\
    \ (i - 1 >= 0 && string[i - 1] == 'c' || string[i - 1] == 'C')\n            {\n\
    \                max_len = i;\n                max_len_index = i;\n          \
    \      max_len_index_rev = i;\n                max_len_index_rev_index = i;\n\
    \            }\n        }\n        else if (string[i] == 't' || string[i] == 'T')\n\
    \        {\n            if (i - 1 >= 0 && string[i - 1] == 't' || string[i - 1]\
    \ == 'T')\n            {\n                max_len = i;\n                max_len_index\
    \ = i;\n                max_len_index_rev = i;\n                max_len_index_rev_index\
    \ = i;\n            }\n        }\n        else if (string[i] == 'g' || string[i]\
    \ == 'G')\n        {\n            if (i - 1 >= 0 && string[i - 1] == 'g' || string[i\
    \ - 1] == 'G')\n            {\n                max_len = i;\n                max_len_index\
    \ = i;\n                max_len_index_rev = i;\n                max_len_index_rev_index\
    \ = i;\n            }\n", "{\n    string palindrome = \"\";\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j)\n    {\n        if (string[i]\
    \ == string[j])\n        {\n            palindrome += string[i];\n           \
    \ i++;\n            j--;\n        }\n        else\n        {\n            break;\n\
    \        }\n    }\n    string prefix = string.substr(0, i);\n    string suffix\
    \ = string.substr(j + 1);\n    string reverse_prefix = \"\";\n    for (int k =\
    \ 0; k < prefix.length(); k++)\n    {\n        reverse_prefix += string[prefix.length()\
    \ - k - 1];\n    }\n    string reverse_suffix = \"\";\n    for (int k = 0; k <\
    \ suffix.length(); k++)\n    {\n        reverse_suffix += string[suffix.length()\
    \ - k - 1];\n    }\n    string result = prefix + reverse_suffix + suffix;\n  \
    \  return result;\n}", "{\n    int len = string.length();\n    int max_len = 0;\n\
    \    int max_len_index = 0;\n    for (int i = 0; i < len; i++) {\n        if (is_palindrome(string,\
    \ i, i)) {\n            max_len = i;\n            max_len_index = i;\n       \
    \     break;\n        }\n    }\n    if (max_len == 0) {\n        return string;\n\
    \    }\n    string.append(string.substr(0, max_len_index));\n    string.append(reverse(string.substr(max_len_index,\
    \ max_len)));\n    return string;\n}", "{\n    string longest_palindrome = \"\"\
    ;\n    int longest_palindrome_length = 0;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string prefix = string.substr(0, i);\n        string postfix\
    \ = string.substr(i);\n        if(is_palindrome(postfix))\n        {\n       \
    \     if(postfix.length() > longest_palindrome_length)\n            {\n      \
    \          longest_palindrome = postfix;\n                longest_palindrome_length\
    \ = postfix.length();\n            }\n        }\n    }\n    return string + reverse(longest_palindrome);\n\
    }", "{\n    string prefix = \"\";\n    string postfix = \"\";\n    int len = string.length();\n\
    \    int i = 0;\n    while(i < len)\n    {\n        if(is_palindrome(string.substr(i,\
    \ len-i)))\n        {\n            prefix = string.substr(0, i);\n           \
    \ postfix = string.substr(i, len-i);\n            break;\n        }\n        i++;\n\
    \    }\n    return prefix + postfix;\n}", "{\n    int len = string.length();\n\
    \    int max_len = 0;\n    int max_len_index = 0;\n    for(int i = 0; i < len;\
    \ i++)\n    {\n        if(is_palindrome(string, i, i))\n        {\n          \
    \  if(i > max_len)\n            {\n                max_len = i;\n            \
    \    max_len_index = i;\n            }\n        }\n    }\n    string result =\
    \ string.substr(0, max_len_index) + string.substr(max_len_index, len - max_len_index);\n\
    \    return result;\n}", "{\n    string longest_palindrome = \"\";\n    int length\
    \ = string.length();\n    for(int i = 0; i < length; i++)\n    {\n        string\
    \ prefix = string.substr(0, i+1);\n        string suffix = string.substr(i+1,\
    \ length);\n        if(is_palindrome(suffix))\n        {\n            if(suffix.length()\
    \ > longest_palindrome.length())\n            {\n                longest_palindrome\
    \ = suffix;\n            }\n        }\n    }\n    return string + longest_palindrome;\n\
    }", "{\n    string prefix = \"\";\n    string suffix = \"\";\n    int len = string.length();\n\
    \    int max_len = 0;\n    int i = 0;\n    while(i < len)\n    {\n        if(is_palindrome(string.substr(i,\
    \ len - i)))\n        {\n            max_len = max(max_len, len - i);\n      \
    \      suffix = string.substr(i, len - i);\n        }\n        i++;\n    }\n \
    \   if(max_len == 0)\n    {\n        return string;\n    }\n    else\n    {\n\
    \        string ret = string;\n        for(int i = 0; i < max_len; i++)\n    \
    \    {\n            ret = ret + suffix[i];\n        }\n        return ret;\n \
    \   }\n}", "{\n    string longest_palindrome = \"\";\n    int length = string.length();\n\
    \    for(int i = 0; i < length; i++)\n    {\n        string prefix = string.substr(0,\
    \ i);\n        string postfix = string.substr(i, length - i);\n        if(is_palindrome(postfix))\n\
    \        {\n            if(postfix.length() > longest_palindrome.length())\n \
    \           {\n                longest_palindrome = postfix;\n            }\n\
    \        }\n    }\n    return string + reverse(longest_palindrome);\n}", "{\n\
    \    int len = string.length();\n    int i = 0;\n    int j = len - 1;\n    while\
    \ (i < j) {\n        if (string[i] != string[j]) {\n            break;\n     \
    \   }\n        i++;\n        j--;\n    }\n    string.append(string.substr(i, len\
    \ - i));\n    string.append(string.substr(0, i));\n    return string;\n}", "{\n\
    \    string longest_palindrome = \"\";\n    string reverse_of_string = \"\";\n\
    \    int length = string.length();\n    for(int i = 0; i < length; i++)\n    {\n\
    \        if(is_palindrome(string.substr(i, length - i)))\n        {\n        \
    \    longest_palindrome = string.substr(i, length - i);\n        }\n    }\n  \
    \  \n    for(int i = 0; i < length; i++)\n    {\n        if(is_palindrome(string.substr(0,\
    \ i + 1)))\n        {\n            reverse_of_string = string.substr(i, length\
    \ - i);\n        }\n    }\n    \n    return longest_palindrome + reverse_of_string;\n\
    }", "{\n    int len = string.length();\n    int max_len = len;\n    int max_len_index\
    \ = len - 1;\n    int max_len_index_rev = len - 1;\n    \n    for(int i = len\
    \ - 1; i >= 0; i--)\n    {\n        if(string[i] == string[max_len_index])\n \
    \       {\n            max_len_index--;\n            max_len--;\n        }\n \
    \       else\n        {\n            break;\n        }\n    }\n    \n    for(int\
    \ i = len - 1; i >= 0; i--)\n    {\n        if(string[i] == string[max_len_index_rev])\n\
    \        {\n            max_len_index_rev--;\n            max_len--;\n       \
    \ }\n        else\n        {\n            break;\n        }\n    }\n    \n   \
    \ string rev_string = string.substr(0, max_len_index + 1);\n    string rev_string_rev\
    \ = string.substr(max_len_index_rev + 1, len - max_len_index_rev - 1);\n    \n\
    \    string result = string + rev_string_rev;\n    \n    return result;\n}", "{\n\
    \    int len = string.length();\n    int i = 0;\n    int j = len - 1;\n    string\
    \ palindrome = \"\";\n    while (i < j)\n    {\n        if (string[i] == string[j])\n\
    \        {\n            palindrome += string[i];\n            i++;\n         \
    \   j--;\n        }\n        else\n        {\n            break;\n        }\n\
    \    }\n    if (i == j)\n    {\n        palindrome += string[i];\n    }\n    else\n\
    \    {\n        palindrome = string[i] + palindrome;\n    }\n    return palindrome;\n\
    }", "{\n    int len = string.length();\n    int i = 0;\n    int j = len - 1;\n\
    \    string palindrome = \"\";\n    while (i < j)\n    {\n        if (string[i]\
    \ == string[j])\n        {\n            palindrome += string[i];\n           \
    \ i++;\n            j--;\n        }\n        else\n        {\n            break;\n\
    \        }\n    }\n    if (palindrome.length() == 0)\n    {\n        return string;\n\
    \    }\n    else\n    {\n        return string + reverse(string.substr(0, palindrome.length()));\n\
    \    }\n}", "{\n    int len = string.length();\n    int i = 0;\n    int j = len\
    \ - 1;\n    string palindrome = \"\";\n    while (i < j) {\n        if (string[i]\
    \ == string[j]) {\n            palindrome += string[i];\n            i++;\n  \
    \          j--;\n        } else {\n            break;\n        }\n    }\n    if\
    \ (palindrome.length() == 0) {\n        return string;\n    }\n    string prefix\
    \ = string.substr(0, i);\n    string suffix = string.substr(j + 1);\n    return\
    \ prefix + suffix[::-1];\n}", "{\n    int len = string.length();\n    int i =\
    \ 0;\n    int j = len - 1;\n    while (i < j)\n    {\n        while (i < j &&\
    \ string[i] != string[j])\n        {\n            i++;\n            j--;\n   \
    \     }\n        if (i < j)\n        {\n            string[i] = string[i] + string[j];\n\
    \            string[j] = string[i] - string[j];\n            string[i] = string[i]\
    \ - string[j];\n            i++;\n            j--;\n        }\n    }\n    return\
    \ string;\n}", "{\n    int len = string.length();\n    int i = 0;\n    int j =\
    \ len - 1;\n    string palindrome = \"\";\n    while (i < j) {\n        if (string[i]\
    \ == string[j]) {\n            palindrome += string[i];\n            i++;\n  \
    \          j--;\n        } else {\n            break;\n        }\n    }\n    if\
    \ (palindrome.length() == 0) {\n        return string;\n    }\n    string reverse\
    \ = \"\";\n    while (i < j) {\n        reverse += string[i];\n        i++;\n\
    \    }\n    return string + reverse;\n}", "{\n    int len = string.length();\n\
    \    int max_len = len;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ j)\n    {\n        if (string[i] != string[j])\n        {\n            break;\n\
    \        }\n        i++;\n        j--;\n    }\n    if (i == j)\n    {\n      \
    \  return string;\n    }\n    else\n    {\n        string.insert(i, string[j]);\n\
    \        string.insert(j, string[i]);\n        return string;\n    }\n}\n", "{\n\
    \    int len = string.length();\n    if (len == 0)\n        return string;\n \
    \   \n    int max_len = 0;\n    int max_index = 0;\n    for (int i = 0; i < len;\
    \ i++)\n    {\n        if (is_palindrome(string, i, i))\n        {\n         \
    \   if (i > max_len)\n            {\n                max_len = i;\n          \
    \      max_index = i;\n            }\n        }\n    }\n    \n    if (max_len\
    \ == 0)\n        return string;\n    \n    string result = string.substr(0, max_index\
    \ + 1);\n    for (int i = max_index - 1; i >= 0; i--)\n    {\n        result +=\
    \ string[i];\n    }\n    \n    return result;\n}", "{\n    string result = string;\n\
    \    int len = string.length();\n    int max_len = 0;\n    int max_len_index =\
    \ 0;\n    for(int i = 0; i < len; i++)\n    {\n        if(is_palindrome(string,\
    \ i, i))\n        {\n            if(i > max_len)\n            {\n            \
    \    max_len = i;\n                max_len_index = i;\n            }\n       \
    \ }\n    }\n    if(max_len > 0)\n    {\n        result = string.substr(0, max_len)\
    \ + string.substr(max_len_index, len - max_len_index);\n    }\n    return result;\n\
    }", "{\n    int len = string.length();\n    int max_len = 0;\n    int max_len_index\
    \ = 0;\n    for (int i = 0; i < len; i++) {\n        if (is_palindrome(string,\
    \ i, i)) {\n            if (i > max_len) {\n                max_len = i;\n   \
    \             max_len_index = i;\n            }\n        }\n    }\n    \n    if\
    \ (max_len == 0) {\n        return string;\n    }\n    \n    string result = string;\n\
    \    for (int i = 0; i < max_len; i++) {\n        result += string.substr(i, max_len\
    \ - i);\n    }\n    \n    return result;\n}", "{\n    string longest_palindrome\
    \ = \"\";\n    string reverse_of_string_prefix = \"\";\n    int string_length\
    \ = string.length();\n    int i = 0;\n    while (i < string_length)\n    {\n \
    \       if (is_palindrome(string.substr(i, string_length - i)))\n        {\n \
    \           longest_palindrome = string.substr(i, string_length - i);\n      \
    \      break;\n        }\n        i++;\n    }\n    if (longest_palindrome.length()\
    \ == 0)\n    {\n        return string;\n    }\n    i = 0;\n    while (i < longest_palindrome.length())\n\
    \    {\n        reverse_of_string_prefix = reverse_of_string_prefix + longest_palindrome.substr(i,\
    \ longest_palindrome.length() - i);\n        i++;\n    }\n    return string +\
    \ reverse_of_string_prefix;\n}", "{\n    int len = string.length();\n    if (len\
    \ == 0) return string;\n    int max_len = len;\n    int max_len_index = len -\
    \ 1;\n    for (int i = len - 1; i >= 0; i--)\n    {\n        if (is_palindrome(string,\
    \ i, i))\n        {\n            max_len = i;\n            max_len_index = i;\n\
    \            break;\n        }\n    }\n    string = string.substr(0, max_len);\n\
    \    string += reverse(string.substr(0, max_len));\n    return string;\n}", "{\n\
    \    if (string.length() == 0)\n        return string;\n    \n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    \n    while (i < j)\n    {\n      \
    \  if (string[i] != string[j])\n            break;\n        i++;\n        j--;\n\
    \    }\n    \n    string prefix = string.substr(0, i);\n    string suffix = string.substr(j\
    \ + 1);\n    \n    return prefix + suffix.reverse();\n}", "{\n    int len = string.length();\n\
    \    int max_len = len;\n    int max_len_index = len;\n    int max_len_index_rev\
    \ = len;\n    int max_len_index_rev_rev = len;\n    int max_len_index_rev_rev_rev\
    \ = len;\n    \n    for(int i = len - 1; i >= 0; i--)\n    {\n        if(string[i]\
    \ == ' ')\n        {\n            continue;\n        }\n        \n        if(is_palindrome(string.substr(i,\
    \ len - i)))\n        {\n            max_len = len - i;\n            max_len_index\
    \ = i;\n            max_len_index_rev = i;\n            max_len_index_rev_rev\
    \ = i;\n            max_len_index_rev_rev_rev = i;\n            break;\n     \
    \   }\n    }\n    \n    string result = string.substr(0, max_len_index) + string.substr(max_len_index_rev,\
    \ max_len - max_len_index_rev);\n    \n    if(max_len_index_rev_rev_rev != max_len_index_rev_rev)\n\
    \    {\n        result += string.substr(max_len_index_rev_rev, max_len - max_len_index_rev_rev);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    int len\
    \ = string.length();\n    int max_len = len;\n    int i = 0;\n    while(i < len)\n\
    \    {\n        int j = len - 1;\n        while(j >= i && string[i] == string[j])\n\
    \        {\n            j--;\n        }\n        if(j - i + 1 < max_len)\n   \
    \     {\n            max_len = j - i + 1;\n        }\n        i++;\n    }\n  \
    \  for(i = 0; i < max_len; i++)\n    {\n        result += string[i];\n    }\n\
    \    reverse(result.begin(), result.end());\n    return result;\n}\n", "{\n  \
    \  string longest_palindrome = \"\";\n    int len = string.length();\n    for(int\
    \ i = 0; i < len; i++)\n    {\n        int j = len - 1 - i;\n        if(string[i]\
    \ == string[j] && is_palindrome(string, i, j))\n        {\n            longest_palindrome\
    \ = string.substr(i, j - i + 1);\n        }\n    }\n    return longest_palindrome\
    \ + string.substr(0, len - longest_palindrome.length());\n}", "{\n    int len\
    \ = string.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j)\n\
    \    {\n        if (string[i] != string[j])\n        {\n            break;\n \
    \       }\n        i++;\n        j--;\n    }\n    string = string.substr(i, len\
    \ - i);\n    string = string.substr(0, len - j - 1);\n    string += string.substr(0,\
    \ j + 1);\n    return string;\n}", "{\n    string prefix = \"\";\n    string suffix\
    \ = \"\";\n    int len = string.length();\n    int i = 0;\n    int j = len - 1;\n\
    \    while (i < j) {\n        while (i < j && !is_palindrome(string, i, j)) {\n\
    \            i++;\n        }\n        while (i < j && !is_palindrome(string, i,\
    \ j)) {\n            j--;\n        }\n        if (i < j) {\n            prefix\
    \ += string[i];\n            suffix += string[j];\n            i++;\n        \
    \    j--;\n        }\n    }\n    return prefix + suffix;\n}", "{\n    string longest_palindrome\
    \ = \"\";\n    string reverse_of_string = \"\";\n    int len = string.length();\n\
    \    for (int i = 0; i < len; i++) {\n        string prefix = string.substr(0,\
    \ i);\n        if (is_palindrome(prefix)) {\n            if (prefix.length() >\
    \ longest_palindrome.length()) {\n                longest_palindrome = prefix;\n\
    \            }\n        }\n    }\n    for (int i = 0; i < len; i++) {\n      \
    \  string suffix = string.substr(i, len);\n        if (is_palindrome(suffix))\
    \ {\n            if (suffix.length() > reverse_of_string.length()) {\n       \
    \         reverse_of_string = suffix;\n            }\n        }\n    }\n    return\
    \ longest_palindrome + reverse_of_string;\n}", "{\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    string palindrome = \"\";\n    while\
    \ (i < j) {\n        if (string[i] == string[j]) {\n            palindrome +=\
    \ string[i];\n            i++;\n            j--;\n        } else {\n         \
    \   break;\n        }\n    }\n    return palindrome;\n}", "{\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    string palindrome = \"\";\n    while(i\
    \ < j)\n    {\n        if(string[i] == string[j])\n        {\n            palindrome\
    \ += string[i];\n            i++;\n            j--;\n        }\n        else\n\
    \        {\n            break;\n        }\n    }\n    return palindrome;\n}",
  "{\n    string prefix = \"\";\n    string suffix = \"\";\n    int len = string.length();\n\
    \    int i = 0;\n    while (i < len) {\n        if (is_palindrome(string.substr(i,\
    \ len))) {\n            prefix = string.substr(0, i);\n            suffix = string.substr(i,\
    \ len);\n            break;\n        }\n        i++;\n    }\n    return prefix\
    \ + suffix;\n}", "{\n    string result = string;\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        while (i <\
    \ j && !is_palindrome(string, i, j)) {\n            i++;\n        }\n        while\
    \ (i < j && !is_palindrome(string, j, i)) {\n            j--;\n        }\n   \
    \     if (i < j) {\n            swap(string, i, j);\n            i++;\n      \
    \      j--;\n        }\n    }\n    return string;\n}", "{\n    string prefix =\
    \ string;\n    string suffix = string;\n    string reverse = \"\";\n    int len\
    \ = string.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j)\
    \ {\n        if (string[i] != string[j]) {\n            break;\n        }\n  \
    \      i++;\n        j--;\n    }\n    if (i == j) {\n        return string;\n\
    \    }\n    while (i < j) {\n        reverse += string[i];\n        i++;\n   \
    \ }\n    reverse += string[j];\n    reverse = reverse.substr(0, len);\n    return\
    \ string + reverse;\n}", "{\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    int len = string.length();\n    int i = 0;\n    int j = len - 1;\n  \
    \  while(i < j)\n    {\n        if(string[i] == string[j])\n        {\n      \
    \      prefix += string[i];\n            suffix += string[i];\n            i++;\n\
    \            j--;\n        }\n        else\n        {\n            break;\n  \
    \      }\n    }\n    string result = prefix + suffix;\n    return result;\n}",
  "{\n    string reverse_string = string;\n    reverse(reverse_string.begin(), reverse_string.end());\n\
    \    string palindrome = string + reverse_string;\n    return palindrome;\n}",
  "{\n    int len = string.length();\n    int i = 0;\n    int j = len - 1;\n    string\
    \ palindrome = \"\";\n    while (i < j)\n    {\n        if (string[i] == string[j])\n\
    \        {\n            palindrome += string[i];\n            i++;\n         \
    \   j--;\n        }\n        else\n        {\n            break;\n        }\n\
    \    }\n    if (palindrome.length() == 0)\n    {\n        return string;\n   \
    \ }\n    else\n    {\n        string prefix = string.substr(0, i);\n        string\
    \ postfix = string.substr(j + 1);\n        return prefix + make_palindrome(postfix);\n\
    \    }\n}", "{\n    int len = string.length();\n    int i = 0;\n    int j = len\
    \ - 1;\n    string palindrome = \"\";\n    while (i < j)\n    {\n        if (string[i]\
    \ == string[j])\n        {\n            palindrome += string[i];\n           \
    \ i++;\n            j--;\n        }\n        else\n        {\n            break;\n\
    \        }\n    }\n    string reverse = \"\";\n    while (i < j)\n    {\n    \
    \    reverse += string[i];\n        i++;\n    }\n    return palindrome + reverse;\n\
    }", "{\n    string palindrome = \"\";\n    string prefix = \"\";\n    int length\
    \ = string.length();\n    int i = 0;\n    while(i < length)\n    {\n        if(is_palindrome(string.substr(i,\
    \ length - i)))\n        {\n            palindrome = string.substr(i, length -\
    \ i) + palindrome;\n            i = length - 1;\n        }\n        else\n   \
    \     {\n            prefix = string.substr(0, i + 1);\n            i = i - 1;\n\
    \        }\n    }\n    return prefix + palindrome;\n}", "{\n    int len = string.length();\n\
    \    int max_len = len;\n    int i = 0;\n    while (i < len)\n    {\n        if\
    \ (is_palindrome(string, i, i))\n        {\n            max_len = i;\n       \
    \     i++;\n        }\n        else\n        {\n            i++;\n        }\n\
    \    }\n    if (max_len == len)\n    {\n        return string;\n    }\n    else\n\
    \    {\n        string.append(string.substr(0, max_len));\n        string.append(string.substr(max_len,\
    \ len - max_len));\n        return string;\n    }\n}", "{\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    int mid = len / 2;\n    while (i <\
    \ mid && j > mid)\n    {\n        if (string[i] != string[j])\n        {\n   \
    \         break;\n        }\n        i++;\n        j--;\n    }\n    if (i == mid)\n\
    \    {\n        return string;\n    }\n    else\n    {\n        string.append(string.substr(i,\
    \ len - i));\n        string.append(string.substr(0, i));\n        return string;\n\
    \    }\n}\n", "{\n    if (string.length() == 0) return string;\n    \n    int\
    \ len = string.length();\n    int i = 0;\n    int j = len - 1;\n    \n    while\
    \ (i < j) {\n        if (string[i] != string[j]) {\n            break;\n     \
    \   }\n        i++;\n        j--;\n    }\n    \n    string prefix = string.substr(0,\
    \ i);\n    string suffix = string.substr(j + 1);\n    \n    string result = prefix\
    \ + suffix;\n    \n    return result;\n}", "{\n    if(string.length() == 0)\n\
    \        return string;\n    \n    string longest_palindrome = \"\";\n    int\
    \ longest_palindrome_length = 0;\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string prefix = string.substr(0, i);\n        string postfix\
    \ = string.substr(i);\n        \n        if(is_palindrome(postfix))\n        {\n\
    \            if(postfix.length() > longest_palindrome_length)\n            {\n\
    \                longest_palindrome = postfix;\n                longest_palindrome_length\
    \ = postfix.length();\n            }\n        }\n    }\n    \n    if(longest_palindrome_length\
    \ == 0)\n        return string;\n    \n    string result = string + string.substr(0,\
    \ longest_palindrome_length - 1);\n    \n    return result;\n}", "{\n    int len\
    \ = string.length();\n    int max_len = len;\n    int max_len_index = len - 1;\n\
    \    int max_len_index_rev = len - 1;\n    int max_len_index_rev_rev = len - 1;\n\
    \    \n    for(int i = len - 2; i >= 0; i--)\n    {\n        if(string[i] == string[i+1])\n\
    \        {\n            if(i == max_len_index)\n            {\n              \
    \  max_len = len - i;\n                max_len_index = i;\n            }\n   \
    \         else if(i == max_len_index_rev)\n            {\n                max_len\
    \ = len - i;\n                max_len_index_rev = i;\n            }\n        \
    \    else if(i == max_len_index_rev_rev)\n            {\n                max_len\
    \ = len - i;\n                max_len_index_rev_rev = i;\n            }\n    \
    \    }\n    }\n    \n    string result = string;\n    \n    if(max_len > 1)\n\
    \    {\n        result = string.substr(0, max_len_index) + string.substr(max_len_index_rev,\
    \ max_len - max_len_index_rev);\n    }\n    \n    return result;\n}", "{\n   \
    \ int len = string.length();\n    int max_len = 0;\n    int max_len_index = 0;\n\
    \    int i = 0;\n    while (i < len) {\n        if (is_palindrome(string, i, len))\
    \ {\n            if (max_len < len - i) {\n                max_len = len - i;\n\
    \                max_len_index = i;\n            }\n        }\n        i++;\n\
    \    }\n    return string.substr(0, max_len_index) + string.substr(max_len_index,\
    \ max_len);\n}", "{\n    string palindrome = \"\";\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while(i < j)\n    {\n        if(string[i]\
    \ == string[j])\n        {\n            palindrome += string[i];\n           \
    \ i++;\n            j--;\n        }\n        else\n        {\n            break;\n\
    \        }\n    }\n    \n    //reverse the string\n    string reverse = \"\";\n\
    \    while(i < j)\n    {\n        reverse += string[i];\n        i++;\n    }\n\
    \    \n    //append the reverse of the string to the end of the palindrome\n \
    \   palindrome += reverse;\n    \n    return palindrome;\n}", "{\n    string longest_palindrome\
    \ = \"\";\n    string palindrome = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string prefix = string.substr(0, i);\n        string postfix\
    \ = string.substr(i);\n        \n        if(is_palindrome(postfix))\n        {\n\
    \            if(postfix.length() > longest_palindrome.length())\n            {\n\
    \                longest_palindrome = postfix;\n            }\n        }\n   \
    \     \n        if(is_palindrome(prefix))\n        {\n            if(prefix.length()\
    \ > palindrome.length())\n            {\n                palindrome = prefix;\n\
    \            }\n        }\n    }\n    \n    return palindrome + reverse(longest_palindrome);\n\
    }", "{\n    int len = string.length();\n    int max_len = len;\n    int max_len_index\
    \ = len - 1;\n    for (int i = len - 1; i >= 0; i--)\n    {\n        if (is_palindrome(string,\
    \ i, i))\n        {\n            max_len = i;\n            max_len_index = i;\n\
    \            break;\n        }\n    }\n    \n    string result = string;\n   \
    \ for (int i = max_len_index - max_len; i < max_len_index; i++)\n    {\n     \
    \   result += string[i];\n    }\n    \n    return result;\n}", "{\n    if (string.empty())\
    \ return string;\n    string longest_palindrome = \"\";\n    int len = string.length();\n\
    \    for (int i = 0; i < len; i++) {\n        if (is_palindrome(string.substr(i)))\
    \ {\n            longest_palindrome = string.substr(i);\n            break;\n\
    \        }\n    }\n    if (longest_palindrome.empty()) return string;\n    string\
    \ result = string + longest_palindrome[0] + longest_palindrome[longest_palindrome.length()\
    \ - 1];\n    return result;\n}", "{\n    int len = string.length();\n    int i\
    \ = 0;\n    int j = len - 1;\n    string reverse_string = \"\";\n    while (i\
    \ < j)\n    {\n        if (string[i] == string[j])\n        {\n            reverse_string\
    \ += string[i];\n            i++;\n            j--;\n        }\n        else\n\
    \        {\n            break;\n        }\n    }\n    return string + reverse_string;\n\
    }", "{\n    string reverse_string = \"\";\n    int length = string.length();\n\
    \    int i = 0;\n    int j = length - 1;\n    while(i < j)\n    {\n        reverse_string\
    \ += string[i];\n        i++;\n        j--;\n    }\n    return string + reverse_string;\n\
    }", "{\n    int len = string.length();\n    int i = 0;\n    int j = len - 1;\n\
    \    string result = \"\";\n    while (i < j) {\n        if (string[i] == string[j])\
    \ {\n            result += string[i];\n            i++;\n            j--;\n  \
    \      } else {\n            break;\n        }\n    }\n    if (result.length()\
    \ == 0) {\n        return string;\n    }\n    string prefix = string.substr(0,\
    \ i);\n    string suffix = string.substr(j + 1);\n    return prefix + make_palindrome(suffix);\n\
    }", "{\n    string palindrome = \"\";\n    int len = string.length();\n    int\
    \ max_len = len;\n    int i = 0;\n    while (i < len)\n    {\n        int j =\
    \ i;\n        while (j < len && string[j] == string[i])\n        {\n         \
    \   j++;\n        }\n        if (j - i > max_len)\n        {\n            max_len\
    \ = j - i;\n        }\n        i = j;\n    }\n    if (max_len == len)\n    {\n\
    \        palindrome = string;\n    }\n    else\n    {\n        palindrome = string.substr(0,\
    \ max_len);\n        palindrome += string.substr(max_len, len - max_len);\n  \
    \  }\n    return palindrome;\n}", "{\n    string reverse_string = string;\n  \
    \  reverse(reverse_string.begin(), reverse_string.end());\n    string palindrome\
    \ = string + reverse_string;\n    return palindrome;\n}", "{\n    string result\
    \ = \"\";\n    int len = string.length();\n    int i = 0;\n    int j = len - 1;\n\
    \    while(i < j)\n    {\n        if(string[i] == string[j])\n        {\n    \
    \        result = string[i] + result;\n            i++;\n            j--;\n  \
    \      }\n        else\n        {\n            break;\n        }\n    }\n    \n\
    \    if(i == j)\n    {\n        result = string[i] + result;\n    }\n    \n  \
    \  return result;\n}", "{\n    int len = string.length();\n    int max_len = len;\n\
    \    int max_len_index = len - 1;\n    int max_len_index_rev = len - 1;\n    int\
    \ max_len_index_rev_rev = len - 1;\n    int max_len_index_rev_rev_rev = len -\
    \ 1;\n    int max_len_index_rev_rev_rev_rev = len - 1;\n    int max_len_index_rev_rev_rev_rev_rev\
    \ = len - 1;\n    int max_len_index_rev_rev_rev_rev_rev_rev = len - 1;\n    int\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev = len - 1;\n    int max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = len - 1;\n    int max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = len\
    \ - 1;\n    int max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = len -\
    \ 1;\n    int max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = len\
    \ - 1;\n    int max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = len - 1;\n    int max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = len - 1;\n    int max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = len - 1;\n    int max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = len - 1;\n    int max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = len - 1;", "{\n    string palindrome = \"\";\n    int len = string.length();\n\
    \    int max_len = len;\n    for (int i = 0; i < len; i++) {\n        if (is_palindrome(string,\
    \ i, i)) {\n            palindrome = string.substr(i, len - i);\n            max_len\
    \ = i;\n            break;\n        }\n    }\n    if (max_len == len) {\n    \
    \    return string;\n    }\n    else {\n        return string.substr(0, max_len)\
    \ + reverse(string.substr(max_len, len - max_len));\n    }\n}", "{\n    int len\
    \ = string.length();\n    int max_len = 0;\n    int max_len_index = 0;\n    for\
    \ (int i = 0; i < len; i++) {\n        if (is_palindrome(string, i, i)) {\n  \
    \          max_len = i;\n            max_len_index = i;\n            break;\n\
    \        }\n    }\n    \n    if (max_len == 0) {\n        return string;\n   \
    \ }\n    \n    string result = string;\n    for (int i = 0; i < max_len; i++)\
    \ {\n        result += string[i];\n    }\n    \n    for (int i = max_len_index\
    \ - 1; i >= 0; i--) {\n        result += string[i];\n    }\n    \n    return result;\n\
    }", "{\n    string longest_palindrome = \"\";\n    string longest_palindrome_prefix\
    \ = \"\";\n    int longest_palindrome_length = 0;\n    \n    for (int i = 0; i\
    \ < string.length(); i++) {\n        string prefix = string.substr(0, i);\n  \
    \      string postfix = string.substr(i);\n        \n        if (is_palindrome(postfix))\
    \ {\n            if (postfix.length() > longest_palindrome_length) {\n       \
    \         longest_palindrome = postfix;\n                longest_palindrome_prefix\
    \ = prefix;\n                longest_palindrome_length = postfix.length();\n \
    \           }\n        }\n    }\n    \n    return longest_palindrome_prefix +\
    \ longest_palindrome;\n}", "{\n    int len = string.length();\n    if (len ==\
    \ 0) return string;\n    int max_len = 0;\n    int max_len_index = 0;\n    for\
    \ (int i = 0; i < len; i++) {\n        if (is_palindrome(string, i, i)) {\n  \
    \          max_len = i;\n            max_len_index = i;\n            break;\n\
    \        }\n    }\n    if (max_len == 0) return string;\n    string result = string.substr(0,\
    \ max_len);\n    for (int i = max_len_index - 1; i >= 0; i--) {\n        result\
    \ += string[i];\n    }\n    return result;\n}", "{\n    int len = string.length();\n\
    \    int max_len = len;\n    int max_len_index = len - 1;\n    int max_len_index_rev\
    \ = len - 1;\n    \n    for (int i = len - 1; i >= 0; i--)\n    {\n        if\
    \ (string[i] == ' ')\n        {\n            continue;\n        }\n        \n\
    \        if (is_palindrome(string, i, i))\n        {\n            max_len = i;\n\
    \            max_len_index = i;\n            break;\n        }\n        \n   \
    \     if (is_palindrome(string, i, i + 1))\n        {\n            max_len = i\
    \ + 1;\n            max_len_index = i + 1;\n            break;\n        }\n  \
    \  }\n    \n    for (int i = 0; i < max_len; i++)\n    {\n        if (string[i]\
    \ == ' ')\n        {\n            continue;\n        }\n        \n        if (is_palindrome(string,\
    \ i, i))\n        {\n            max_len = i;\n            max_len_index = i;\n\
    \            break;\n        }\n        \n        if (is_palindrome(string, i,\
    \ i + 1))\n        {\n            max_len = i + 1;\n            max_len_index\
    \ = i + 1;\n            break;\n        }\n    }\n    \n    string result = string.substr(0,\
    \ max_len);\n    \n    for (int i = max_len_index_rev; i >= max_len; i--)\n  \
    \  {\n        if (string[i] == ' ')\n        {\n            continue;\n      \
    \  }\n        \n        if (is_palindrome(string, i, i))\n        {\n        \
    \    result += string.substr(i, max_len - i);\n            break;\n        }\n\
    \        \n        if (is_palindrome(string, i, i + 1))\n        {\n         \
    \   result += string.substr(i, max_len - i);\n            break;\n        }\n\
    \    }\n    \n    return result;\n}\n", "{\n    string result;\n    int len =\
    \ string.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j)\n\
    \    {\n        if (string[i] != string[j])\n        {\n            break;\n \
    \       }\n        i++;\n        j--;\n    }\n    if (i == j)\n    {\n       \
    \ return string;\n    }\n    else\n    {\n        result = string.substr(0, i\
    \ + 1);\n        result += string.substr(j, len - j);\n        return result;\n\
    \    }\n}", "{\n    string prefix = \"\";\n    string postfix = \"\";\n    int\
    \ len = string.length();\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ j)\n    {\n        if (string[i] == string[j])\n        {\n            prefix\
    \ += string[i];\n            postfix += string[j];\n            i++;\n       \
    \     j--;\n        }\n        else\n        {\n            break;\n        }\n\
    \    }\n    return prefix + postfix;\n}", "{\n    string palindrome = \"\";\n\
    \    int len = string.length();\n    int i = 0;\n    int j = len - 1;\n    while\
    \ (i < j) {\n        if (string[i] == string[j]) {\n            palindrome +=\
    \ string[i];\n            i++;\n            j--;\n        } else {\n         \
    \   break;\n        }\n    }\n    if (palindrome.length() == 0) {\n        return\
    \ string;\n    }\n    string prefix = string.substr(0, i);\n    string suffix\
    \ = string.substr(j + 1, len - j - 1);\n    return prefix + suffix + suffix.reverse();\n\
    }", "{\n    int len = string.length();\n    int max_len = 0;\n    int max_len_index\
    \ = 0;\n    int i = 0;\n    while(i < len)\n    {\n        int j = i;\n      \
    \  while(j < len && string[j] == string[i])\n        {\n            j++;\n   \
    \     }\n        if(j - i > max_len)\n        {\n            max_len = j - i;\n\
    \            max_len_index = i;\n        }\n        i++;\n    }\n    string.append(string.substr(0,\
    \ max_len_index));\n    string.append(string.substr(max_len_index, max_len));\n\
    \    return string;\n}\n", "{\n    if(string.length() == 0)\n        return string;\n\
    \    \n    string prefix = string.substr(0, string.length()/2);\n    string postfix\
    \ = string.substr(string.length()/2);\n    \n    if(is_palindrome(prefix))\n \
    \       return prefix + postfix;\n    else\n        return make_palindrome(prefix\
    \ + postfix);\n}", "{\n    string palindrome = \"\";\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j)\n    {\n        if (string[i]\
    \ == string[j])\n        {\n            palindrome += string[i];\n           \
    \ i++;\n            j--;\n        }\n        else\n        {\n            break;\n\
    \        }\n    }\n    if (palindrome.length() == 0)\n    {\n        palindrome\
    \ = string;\n    }\n    else\n    {\n        palindrome += string.substr(i, len\
    \ - i);\n    }\n    return palindrome;\n}", "{\n    int len = string.length();\n\
    \    int max_len = len;\n    int max_len_index = 0;\n    for (int i = 0; i < len;\
    \ i++) {\n        if (is_palindrome(string, i, i)) {\n            max_len = i;\n\
    \            max_len_index = i;\n            break;\n        }\n    }\n    \n\
    \    string result = string;\n    for (int i = 0; i < max_len; i++) {\n      \
    \  result.append(string.substr(i, len - i));\n    }\n    \n    return result;\n\
    }", "{\n    int len = string.length();\n    int max_len = len;\n    int max_len_index\
    \ = len;\n    int i = 0;\n    int j = len - 1;\n    string longest_palindrome\
    \ = \"\";\n    while (i < j)\n    {\n        if (string[i] == string[j])\n   \
    \     {\n            i++;\n            j--;\n            if (i == j)\n       \
    \     {\n                longest_palindrome = string.substr(i, len);\n       \
    \         break;\n            }\n            if (string[i] == string[j])\n   \
    \         {\n                i++;\n                j--;\n            }\n     \
    \   }\n        else\n        {\n            if (i < j)\n            {\n      \
    \          if (max_len < j - i + 1)\n                {\n                    max_len\
    \ = j - i + 1;\n                    max_len_index = i;\n                }\n  \
    \          }\n            i++;\n        }\n    }\n    if (longest_palindrome ==\
    \ \"\")\n    {\n        longest_palindrome = string;\n    }\n    else\n    {\n\
    \        longest_palindrome = string.substr(max_len_index, max_len);\n       \
    \ reverse(longest_palindrome.begin(), longest_palindrome.end());\n        string\
    \ temp = string.substr(0, max_len_index);\n        reverse(temp.begin(), temp.end());\n\
    \        longest_palindrome = temp + longest_palindrome;\n    }\n    return longest_palindrome;\n\
    }", "{\n    if (string.length() == 0)\n        return string;\n    \n    string\
    \ longest_palindrome = \"\";\n    int longest_palindrome_length = 0;\n    \n \
    \   for (int i = 0; i < string.length(); i++) {\n        string prefix = string.substr(0,\
    \ i);\n        string suffix = string.substr(i);\n        \n        if (is_palindrome(prefix))\
    \ {\n            if (prefix.length() > longest_palindrome_length) {\n        \
    \        longest_palindrome = prefix;\n                longest_palindrome_length\
    \ = prefix.length();\n            }\n        }\n        \n        if (is_palindrome(suffix))\
    \ {\n            if (suffix.length() > longest_palindrome_length) {\n        \
    \        longest_palindrome = suffix + longest_palindrome;\n                longest_palindrome_length\
    \ = suffix.length() + longest_palindrome_length;\n            }\n        }\n \
    \   }\n    \n    return longest_palindrome;\n}", "{\n    int len = string.length();\n\
    \    int max_len = len;\n    int max_len_index = len - 1;\n    for (int i = len\
    \ - 1; i >= 0; i--)\n    {\n        if (is_palindrome(string, i, i))\n       \
    \ {\n            max_len = i;\n            max_len_index = i;\n            break;\n\
    \        }\n    }\n    \n    string result = string;\n    for (int i = max_len_index\
    \ - max_len; i < max_len_index; i++)\n    {\n        result += string[i];\n  \
    \  }\n    \n    return result;\n}", "{\n    int len = string.length();\n    int\
    \ i = 0;\n    int j = len - 1;\n    while (i < j)\n    {\n        if (string[i]\
    \ != string[j])\n        {\n            break;\n        }\n        i++;\n    \
    \    j--;\n    }\n    string.append(string.substr(i, len - i));\n    string.append(string.substr(0,\
    \ i));\n    return string;\n}", "{\n    string result = \"\";\n    int len = string.length();\n\
    \    int max_len = 0;\n    int i = 0;\n    int j = 0;\n    while(i < len)\n  \
    \  {\n        if(is_palindrome(string.substr(i, len-i)))\n        {\n        \
    \    max_len = len - i;\n            break;\n        }\n        i++;\n    }\n\
    \    if(max_len == 0)\n        return \"\";\n    for(i = 0; i < max_len; i++)\n\
    \    {\n        result += string[i];\n    }\n    for(i = max_len-1; i >= 0; i--)\n\
    \    {\n        result += string[i];\n    }\n    return result;\n}", "{\n    int\
    \ len = string.length();\n    if (len == 0) return string;\n    \n    int max_len\
    \ = len;\n    int max_len_index = 0;\n    for (int i = 0; i < len; i++) {\n  \
    \      if (is_palindrome(string, i, i)) {\n            max_len = i;\n        \
    \    max_len_index = i;\n            break;\n        }\n    }\n    \n    if (max_len\
    \ == len) return string;\n    \n    string result = string.substr(0, max_len);\n\
    \    for (int i = 0; i < max_len_index; i++) {\n        result += string[i];\n\
    \    }\n    \n    return result;\n}", "{\n    int len = string.length();\n   \
    \ if (len == 0) return string;\n    int max_len = len;\n    int max_index = len\
    \ - 1;\n    for (int i = len - 1; i >= 0; i--) {\n        if (is_palindrome(string,\
    \ i, i)) {\n            max_len = i;\n            max_index = i;\n           \
    \ break;\n        }\n    }\n    for (int i = max_len - 1; i >= 0; i--) {\n   \
    \     if (is_palindrome(string, i, max_index)) {\n            string.append(string.substr(i,\
    \ max_len - i));\n            return string;\n        }\n    }\n    return string;\n\
    }", "{\n    string result = string;\n    int length = string.length();\n    int\
    \ i = 0;\n    int j = length - 1;\n    while (i < j) {\n        if (string[i]\
    \ != string[j]) {\n            break;\n        }\n        i++;\n        j--;\n\
    \    }\n    if (i == j) {\n        return string;\n    }\n    \n    string prefix\
    \ = string.substr(0, i);\n    string suffix = string.substr(j + 1);\n    \n  \
    \  string result = prefix + suffix;\n    result = result + suffix;\n    return\
    \ result;\n}", "{\n    string reverse_string = \"\";\n    string palindrome_string\
    \ = \"\";\n    int length = string.length();\n    for(int i = 0; i < length; i++)\n\
    \    {\n        reverse_string += string[length - 1 - i];\n    }\n    \n    for(int\
    \ i = 0; i < length; i++)\n    {\n        if(is_palindrome(reverse_string[i]))\n\
    \        {\n            palindrome_string += reverse_string[i];\n        }\n \
    \   }\n    \n    return palindrome_string;\n}", "{\n    string longest_palindrome\
    \ = \"\";\n    int length = string.length();\n    for (int i = 0; i < length;\
    \ i++) {\n        string prefix = string.substr(0, i);\n        string suffix\
    \ = string.substr(i);\n        if (is_palindrome(suffix)) {\n            if (suffix.length()\
    \ > longest_palindrome.length()) {\n                longest_palindrome = suffix;\n\
    \            }\n        }\n    }\n    return string + reverse(longest_palindrome);\n\
    }", "{\n    int len = string.length();\n    int i = 0;\n    int j = len - 1;\n\
    \    while (i < j) {\n        while (i < j && string[i] == string[j]) {\n    \
    \        i++;\n            j--;\n        }\n        if (i < j) {\n           \
    \ string.insert(j + 1, string[i]);\n            i++;\n            j--;\n     \
    \   }\n    }\n    return string;\n}", "{\n    string longest_palindrome = \"\"\
    ;\n    for(int i = 0; i < string.length(); i++)\n    {\n        string prefix\
    \ = string.substr(0, i);\n        string suffix = string.substr(i);\n        if(is_palindrome(suffix))\n\
    \        {\n            if(suffix.length() > longest_palindrome.length())\n  \
    \          {\n                longest_palindrome = suffix;\n            }\n  \
    \      }\n    }\n    if(longest_palindrome.length() == 0)\n    {\n        return\
    \ string;\n    }\n    else\n    {\n        string result = string + longest_palindrome[0]\
    \ + longest_palindrome[longest_palindrome.length() - 1];\n        return result;\n\
    \    }\n}", "{\n    string result = \"\";\n    int len = string.length();\n  \
    \  int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (string[i]\
    \ == string[j]) {\n            result += string[i];\n            i++;\n      \
    \      j--;\n        } else {\n            break;\n        }\n    }\n    if (i\
    \ == j) {\n        result += string[i];\n    }\n    return result;\n}", "{\n \
    \   int len = string.length();\n    int max_len = len;\n    int max_len_index\
    \ = len - 1;\n    for (int i = len - 1; i >= 0; i--)\n    {\n        if (string[i]\
    \ == string[max_len_index])\n        {\n            max_len_index--;\n       \
    \     max_len--;\n        }\n        else\n        {\n            break;\n   \
    \     }\n    }\n    string reverse_string = string.substr(0, max_len_index + 1);\n\
    \    reverse(reverse_string.begin(), reverse_string.end());\n    string result\
    \ = string + reverse_string;\n    return result;\n}", "{\n    string longest_palindrome\
    \ = \"\";\n    string reverse_of_string = \"\";\n    int length = string.length();\n\
    \    for (int i = 0; i < length; i++)\n    {\n        if (is_palindrome(string.substr(i,\
    \ length)))\n        {\n            longest_palindrome = string.substr(i, length);\n\
    \        }\n    }\n    for (int i = 0; i < length; i++)\n    {\n        if (is_palindrome(string.substr(0,\
    \ i)))\n        {\n            reverse_of_string = string.substr(0, i);\n    \
    \    }\n    }\n    string result = longest_palindrome + reverse_of_string;\n \
    \   return result;\n}", "{\n    int len = string.length();\n    int i = 0;\n \
    \   int j = len - 1;\n    while (i < j)\n    {\n        if (string[i] != string[j])\n\
    \        {\n            break;\n        }\n        i++;\n        j--;\n    }\n\
    \    string = string.substr(i, len - i);\n    string = string.append(string.substr(0,\
    \ len - j - 1));\n    return string;\n}", "{\n    int len = string.length();\n\
    \    int max_len = len;\n    int i = 0;\n    while (i < len)\n    {\n        if\
    \ (is_palindrome(string, i, i))\n        {\n            max_len = i;\n       \
    \     i = len;\n        }\n        else\n        {\n            i++;\n       \
    \ }\n    }\n    if (max_len == len)\n    {\n        return string;\n    }\n  \
    \  else\n    {\n        string.append(string.substr(0, max_len));\n        string.append(string.substr(max_len,\
    \ len - max_len));\n        return string;\n    }\n}", "{\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    string palindrome = \"\";\n    while\
    \ (i < j)\n    {\n        if (string[i] == string[j])\n        {\n           \
    \ palindrome += string[i];\n            i++;\n            j--;\n        }\n  \
    \      else\n        {\n            break;\n        }\n    }\n    return palindrome\
    \ + string.substr(i, len - i);\n}", "{\n    int len = string.length();\n    int\
    \ max_len = 0;\n    int max_len_index = 0;\n    for (int i = 0; i < len; i++)\
    \ {\n        if (is_palindrome(string, i, i)) {\n            max_len = i;\n  \
    \          max_len_index = i;\n            break;\n        }\n    }\n    if (max_len\
    \ == 0) {\n        return string;\n    }\n    string result = string.substr(0,\
    \ max_len);\n    for (int i = max_len_index - 1; i >= 0; i--) {\n        result\
    \ += string[i];\n    }\n    return result;\n}", "{\n    int len = string.length();\n\
    \    int max_len = 0;\n    int max_len_index = 0;\n    for(int i = 0; i < len;\
    \ i++)\n    {\n        if(is_palindrome(string, i, i))\n        {\n          \
    \  if(i > max_len)\n            {\n                max_len = i;\n            \
    \    max_len_index = i;\n            }\n        }\n    }\n    \n    string palindrome\
    \ = string.substr(0, max_len);\n    string reverse = reverse_string(string.substr(max_len,\
    \ len - max_len));\n    return palindrome + reverse;\n}", "{\n    string reverse_string\
    \ = \"\";\n    int length = string.length();\n    int i = 0;\n    int j = length\
    \ - 1;\n    while(i < j)\n    {\n        reverse_string += string[i];\n      \
    \  i++;\n        j--;\n    }\n    string prefix = \"\";\n    while(i < length)\n\
    \    {\n        prefix += string[i];\n        i++;\n    }\n    string result =\
    \ prefix + reverse_string;\n    return result;\n}", "{\n    int len = string.length();\n\
    \    int max_len = 0;\n    int max_len_index = 0;\n    for (int i = 0; i < len;\
    \ i++) {\n        if (is_palindrome(string, i, i)) {\n            if (i > max_len)\
    \ {\n                max_len = i;\n                max_len_index = i;\n      \
    \      }\n        }\n    }\n    string.append(string.substr(0, max_len_index));\n\
    \    string.append(reverse(string.substr(max_len_index, max_len)));\n    return\
    \ string;\n}", "{\n    int len = string.length();\n    int i = 0;\n    int j =\
    \ len - 1;\n    int max_len = 0;\n    string max_str = \"\";\n    while (i < j)\n\
    \    {\n        if (string[i] == string[j])\n        {\n            if (max_len\
    \ < (j - i + 1))\n            {\n                max_len = j - i + 1;\n      \
    \          max_str = string.substr(i, max_len);\n            }\n            i++;\n\
    \            j--;\n        }\n        else\n        {\n            i++;\n    \
    \    }\n    }\n    if (max_len == 0)\n        return string;\n    else\n     \
    \   return string.substr(0, max_len) + reverse(max_str);\n}", "{\n    string prefix\
    \ = \"\";\n    string suffix = \"\";\n    int len = string.length();\n    int\
    \ i = 0;\n    while(i < len)\n    {\n        if(is_palindrome(string.substr(i,\
    \ len - i)))\n        {\n            prefix = string.substr(0, i);\n         \
    \   suffix = string.substr(i, len - i);\n            break;\n        }\n     \
    \   i++;\n    }\n    return prefix + suffix;\n}", "{\n    string prefix = \"\"\
    ;\n    string suffix = \"\";\n    int len = string.length();\n    int i = 0;\n\
    \    int j = len - 1;\n    while (i < j)\n    {\n        if (string[i] == string[j])\n\
    \        {\n            prefix += string[i];\n            i++;\n            j--;\n\
    \        }\n        else\n        {\n            break;\n        }\n    }\n  \
    \  i = 0;\n    j = len - 1;\n    while (i < j)\n    {\n        if (string[i] ==\
    \ string[j])\n        {\n            suffix += string[j];\n            i++;\n\
    \            j--;\n        }\n        else\n        {\n            break;\n  \
    \      }\n    }\n    string result = prefix + suffix;\n    return result;\n}",
  "{\n    string result = string;\n    int len = string.length();\n    int i = 0;\n\
    \    int j = len - 1;\n    while (i < j)\n    {\n        while (i < j && string[i]\
    \ == string[j])\n        {\n            i++;\n            j--;\n        }\n  \
    \      if (i < j)\n        {\n            result.append(string[i]);\n        \
    \    result.append(string[j]);\n            i++;\n            j--;\n        }\n\
    \    }\n    return result;\n}", "{\n    int len = string.length();\n    int i\
    \ = 0;\n    int j = len - 1;\n    int max_len = 0;\n    int max_i = 0;\n    int\
    \ max_j = 0;\n    while(i < j)\n    {\n        if(string[i] == string[j])\n  \
    \      {\n            if(max_len < (j - i + 1))\n            {\n             \
    \   max_len = j - i + 1;\n                max_i = i;\n                max_j =\
    \ j;\n            }\n        }\n        else\n        {\n            break;\n\
    \        }\n        i++;\n        j--;\n    }\n    if(max_len == 0)\n    {\n \
    \       return string;\n    }\n    else\n    {\n        string.append(string.substr(max_i,\
    \ max_len));\n        string.append(string.substr(0, max_j - max_len + 1));\n\
    \        return string;\n    }\n}", "{\n    int len = string.length();\n    int\
    \ i = 0;\n    int j = len - 1;\n    string reverse = \"\";\n    while(i < j)\n\
    \    {\n        reverse += string[i++];\n    }\n    reverse += string[j--];\n\
    \    return string + reverse;\n}", "{\n    string longest_palindrome = \"\";\n\
    \    int length = string.length();\n    for(int i = 0; i < length; i++)\n    {\n\
    \        string prefix = string.substr(0, i);\n        string suffix = string.substr(i,\
    \ length - i);\n        if(is_palindrome(suffix))\n        {\n            if(suffix.length()\
    \ > longest_palindrome.length())\n            {\n                longest_palindrome\
    \ = suffix;\n            }\n        }\n    }\n    return string + longest_palindrome;\n\
    }", "{\n    int len = string.length();\n    int max_len = 0;\n    int max_len_index\
    \ = 0;\n    for(int i = 0; i < len; i++)\n    {\n        if(is_palindrome(string,\
    \ i, i))\n        {\n            if(i > max_len)\n            {\n            \
    \    max_len = i;\n                max_len_index = i;\n            }\n       \
    \ }\n    }\n    string result = string;\n    for(int i = 0; i < max_len; i++)\n\
    \    {\n        result.append(string.substr(i, len - i));\n    }\n    result.append(string.substr(max_len_index,\
    \ max_len - max_len_index));\n    return result;\n}", "{\n    string palindrome\
    \ = \"\";\n    int len = string.length();\n    int i = 0;\n    int j = len - 1;\n\
    \    while (i < j)\n    {\n        if (string[i] == string[j])\n        {\n  \
    \          palindrome += string[i];\n            i++;\n            j--;\n    \
    \    }\n        else\n        {\n            break;\n        }\n    }\n    string\
    \ reverse = \"\";\n    while (i < j)\n    {\n        reverse += string[i];\n \
    \       i++;\n    }\n    return palindrome + reverse;\n}", "{\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j)\n    {\n        if (string[i]\
    \ != string[j])\n        {\n            break;\n        }\n        i++;\n    \
    \    j--;\n    }\n    string.append(string.substr(i, len - i));\n    string.append(string.substr(0,\
    \ i));\n    return string;\n}", "{\n    string palindrome = \"\";\n    int len\
    \ = string.length();\n    int max_len = 0;\n    for (int i = 0; i < len; i++)\
    \ {\n        if (is_palindrome(string, i, i)) {\n            palindrome += string[i];\n\
    \            max_len = max(max_len, i);\n        }\n    }\n    for (int i = max_len;\
    \ i >= 0; i--) {\n        if (is_palindrome(string, i, i)) {\n            palindrome\
    \ += string[i];\n        }\n    }\n    return palindrome;\n}", "{\n    string\
    \ palindrome = string;\n    int length = string.length();\n    int max_length\
    \ = 0;\n    int max_index = 0;\n    for(int i = 0; i < length; i++)\n    {\n \
    \       if(is_palindrome(string.substr(i, length-i)))\n        {\n           \
    \ if(length-i > max_length)\n            {\n                max_length = length-i;\n\
    \                max_index = i;\n            }\n        }\n    }\n    \n    if(max_length\
    \ > 0)\n    {\n        palindrome = string.substr(0, max_index) + string.substr(max_index,\
    \ max_length) + string.substr(max_index+max_length, length-max_index-max_length);\n\
    \    }\n    \n    return palindrome;\n}", "{\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    int max_len = 0;\n    string longest_palindrome\
    \ = \"\";\n    while (i < j)\n    {\n        if (string[i] == string[j])\n   \
    \     {\n            if (len - i > max_len)\n            {\n                max_len\
    \ = len - i;\n                longest_palindrome = string.substr(i, max_len);\n\
    \            }\n            i++;\n            j--;\n        }\n        else\n\
    \        {\n            i++;\n        }\n    }\n    if (max_len == 0)\n    {\n\
    \        return string;\n    }\n    else\n    {\n        return string.substr(0,\
    \ max_len) + reverse(string.substr(max_len, string.length() - max_len));\n   \
    \ }\n}", "{\n    string longest_palindrome = \"\";\n    int len = string.length();\n\
    \    for (int i = 0; i < len; i++) {\n        string prefix = string.substr(0,\
    \ i);\n        string suffix = string.substr(i, len);\n        if (is_palindrome(suffix))\
    \ {\n            if (suffix.length() > longest_palindrome.length()) {\n      \
    \          longest_palindrome = suffix;\n            }\n        }\n    }\n   \
    \ return string + longest_palindrome;\n}", "{\n    string result = string;\n \
    \   int length = string.length();\n    int i = 0;\n    int j = length - 1;\n \
    \   while (i < j)\n    {\n        if (string[i] != string[j])\n        {\n   \
    \         break;\n        }\n        i++;\n        j--;\n    }\n    if (i < j)\n\
    \    {\n        result = string.substr(0, i) + string.substr(j + 1, length - (j\
    \ + 1));\n    }\n    return result;\n}\n", "{\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        while (i <\
    \ j && string[i] != string[j]) {\n            i++;\n            j--;\n       \
    \ }\n        if (i < j) {\n            string[i] = string[i] + string[j];\n  \
    \          string[j] = string[i] - string[j];\n            string[i] = string[i]\
    \ - string[j];\n            i++;\n            j--;\n        }\n    }\n    return\
    \ string;\n}", "{\n    int len = string.length();\n    int max_len = 0;\n    int\
    \ max_len_index = 0;\n    int i = 0;\n    while (i < len)\n    {\n        if (is_palindrome(string,\
    \ i, len))\n        {\n            if (len - i > max_len)\n            {\n   \
    \             max_len = len - i;\n                max_len_index = i;\n       \
    \     }\n        }\n        i++;\n    }\n    string = string.substr(0, max_len_index)\
    \ + string.substr(max_len_index, len - max_len_index);\n    return string;\n}",
  "{\n    int len = string.length();\n    int max_len = len;\n    int max_len_index\
    \ = 0;\n    int i = 0;\n    while(i < len)\n    {\n        if(is_palindrome(string,\
    \ i, i))\n        {\n            max_len = i;\n            max_len_index = i;\n\
    \            break;\n        }\n        i++;\n    }\n    string.append(string.substr(0,\
    \ max_len_index));\n    string.append(string.substr(max_len_index, len - max_len_index));\n\
    \    return string;\n}", "{\n    string result = \"\";\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j)\n    {\n        if (string[i]\
    \ == string[j])\n        {\n            result += string[i];\n            i++;\n\
    \            j--;\n        }\n        else\n        {\n            break;\n  \
    \      }\n    }\n    if (i == j)\n    {\n        result += string[i];\n    }\n\
    \    else\n    {\n        result += string[j];\n        result += string[i];\n\
    \    }\n    return result;\n}", "{\n    if (string.length() == 0) return string;\n\
    \    string prefix = string.substr(0, string.length()/2);\n    string suffix =\
    \ string.substr(string.length()/2);\n    string reverse_prefix = reverse(prefix);\n\
    \    string reverse_suffix = reverse(suffix);\n    return reverse_prefix + reverse_suffix;\n\
    }", "{\n    if(string.length() == 0)\n        return string;\n    \n    int max_len\
    \ = 0;\n    int max_len_index = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(is_palindrome(string.substr(i, string.length() - i)))\n   \
    \     {\n            if(max_len < string.length() - i)\n            {\n      \
    \          max_len = string.length() - i;\n                max_len_index = i;\n\
    \            }\n        }\n    }\n    \n    return string.substr(0, max_len_index)\
    \ + reverse(string.substr(max_len_index, string.length() - max_len_index));\n}",
  "{\n    string reverse_string = string;\n    reverse(reverse_string.begin(), reverse_string.end());\n\
    \    string palindrome = string + reverse_string;\n    return palindrome;\n}",
  "{\n    int len = string.length();\n    int i = 0;\n    int j = len - 1;\n    int\
    \ max_len = 0;\n    int max_i = 0;\n    int max_j = 0;\n    while (i < j) {\n\
    \        if (string[i] == string[j]) {\n            max_len = max(max_len, j -\
    \ i + 1);\n            i++;\n            j--;\n        } else {\n            if\
    \ (j - i + 1 > max_len) {\n                max_i = i;\n                max_j =\
    \ j;\n                max_len = j - i + 1;\n            }\n            i++;\n\
    \        }\n    }\n    string result = string.substr(max_i, max_len);\n    result\
    \ = result + string.substr(0, max_j + 1);\n    return result;\n}", "{\n    int\
    \ len = string.length();\n    int max_len = len;\n    int max_len_index = len;\n\
    \    int max_len_index_rev = len;\n    int max_len_index_rev_index = len;\n  \
    \  \n    for (int i = 0; i < len; i++) {\n        if (is_palindrome(string, i,\
    \ i)) {\n            max_len = i;\n            max_len_index = i;\n          \
    \  max_len_index_rev = i;\n            max_len_index_rev_index = i;\n        \
    \    break;\n        }\n    }\n    \n    for (int i = max_len_index - 1; i >=\
    \ 0; i--) {\n        if (is_palindrome(string, i, max_len_index_rev_index)) {\n\
    \            max_len_index_rev = i;\n            max_len_index_rev_index = i;\n\
    \            break;\n        }\n    }\n    \n    string result = string;\n   \
    \ \n    for (int i = max_len_index_rev + 1; i < len; i++) {\n        result.append(string.substr(max_len_index_rev,\
    \ i - max_len_index_rev));\n        result.append(string.substr(0, max_len_index));\n\
    \    }\n    \n    return result;\n}", "{\n    string prefix = \"\";\n    string\
    \ suffix = \"\";\n    int len = string.length();\n    int i = len - 1;\n    int\
    \ j = len - 1;\n    while(i >= 0 && j >= 0)\n    {\n        if(string[i] == string[j])\n\
    \        {\n            prefix += string[i];\n            i--;\n            j--;\n\
    \        }\n        else\n        {\n            break;\n        }\n    }\n  \
    \  i = len - 1;\n    j = len - 1;\n    while(i >= 0 && j >= 0)\n    {\n      \
    \  if(string[i] == string[j])\n        {\n            suffix += string[i];\n \
    \           i--;\n            j--;\n        }\n        else\n        {\n     \
    \       break;\n        }\n    }\n    string result = prefix + suffix;\n    return\
    \ result;\n}", "{\n    if (string.length() == 0)\n        return string;\n   \
    \ \n    string longest_palindrome = \"\";\n    \n    for (int i = 0; i < string.length();\
    \ i++)\n    {\n        string prefix = string.substr(0, i);\n        string suffix\
    \ = string.substr(i);\n        \n        if (is_palindrome(prefix) && is_palindrome(suffix))\n\
    \        {\n            longest_palindrome = prefix + suffix;\n            break;\n\
    \        }\n    }\n    \n    if (longest_palindrome.length() == 0)\n        return\
    \ string;\n    \n    string result = string + string.substr(longest_palindrome.length());\n\
    \    return result;\n}", "{\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    int len = string.length();\n    int i = len - 1;\n    while (i >= 0 &&\
    \ string[i] == string[i+1])\n    {\n        i--;\n    }\n    if (i < 0)\n    {\n\
    \        return string;\n    }\n    else\n    {\n        while (i >= 0)\n    \
    \    {\n            prefix += string[i];\n            i--;\n        }\n      \
    \  i = len - 1;\n        while (i >= 0 && string[i] == string[i+1])\n        {\n\
    \            i--;\n        }\n        if (i < 0)\n        {\n            return\
    \ string;\n        }\n        else\n        {\n            while (i >= 0)\n  \
    \          {\n                suffix += string[i];\n                i--;\n   \
    \         }\n            return prefix + suffix;\n        }\n    }\n}", "{\n \
    \   string palindrome = string;\n    int length = string.length();\n    int i\
    \ = 0;\n    int j = length - 1;\n    while (i < j)\n    {\n        if (string[i]\
    \ != string[j])\n        {\n            break;\n        }\n        i++;\n    \
    \    j--;\n    }\n    if (i == j)\n    {\n        return string;\n    }\n    else\n\
    \    {\n        string prefix = string.substr(0, i);\n        string suffix =\
    \ string.substr(j + 1, length - (j + 1));\n        string result = prefix + suffix;\n\
    \        return result;\n    }\n}", "{\n    int len = string.length();\n    int\
    \ i = 0;\n    int j = len - 1;\n    int max_len = 0;\n    string max_string =\
    \ \"\";\n    while (i < j)\n    {\n        if (string[i] == string[j])\n     \
    \   {\n            if (len - i - 1 > max_len)\n            {\n               \
    \ max_len = len - i - 1;\n                max_string = string.substr(i, max_len);\n\
    \            }\n            i++;\n            j--;\n        }\n        else\n\
    \        {\n            i++;\n            j--;\n        }\n    }\n    return string\
    \ + max_string;\n}", "{\n    string result = string;\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j)\n    {\n        if (string[i]\
    \ != string[j])\n        {\n            break;\n        }\n        i++;\n    \
    \    j--;\n    }\n    if (i == j)\n    {\n        return string;\n    }\n    else\n\
    \    {\n        string prefix = string.substr(0, i);\n        string suffix =\
    \ string.substr(j + 1);\n        string reverse = suffix + reverse(prefix);\n\
    \        return make_palindrome(reverse);\n    }\n}", "{\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (string[i]\
    \ != string[j]) {\n            break;\n        }\n        i++;\n        j--;\n\
    \    }\n    string.append(string.substr(i, len - i));\n    string.append(string.substr(0,\
    \ i));\n    return string;\n}", "{\n    string result = \"\";\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while(i < j)\n    {\n        if(string[i]\
    \ == string[j])\n        {\n            result += string[i];\n            i++;\n\
    \            j--;\n        }\n        else\n        {\n            break;\n  \
    \      }\n    }\n    \n    if(result == \"\")\n    {\n        return string;\n\
    \    }\n    \n    string prefix = string.substr(0, i);\n    string suffix = string.substr(j\
    \ + 1);\n    \n    return prefix + make_palindrome(suffix);\n}", "{\n    int len\
    \ = string.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j)\
    \ {\n        while (i < j && string[i] == string[j]) {\n            i++;\n   \
    \         j--;\n        }\n        if (i < j) {\n            string[i] = string[j];\n\
    \            string[j] = string[i];\n            i++;\n            j--;\n    \
    \    }\n    }\n    return string;\n}", "{\n    string palindrome = string;\n \
    \   int len = string.length();\n    int i = 0;\n    int j = len - 1;\n    while\
    \ (i < j)\n    {\n        if (string[i] != string[j])\n        {\n           \
    \ break;\n        }\n        i++;\n        j--;\n    }\n    if (i == j)\n    {\n\
    \        return string;\n    }\n    else\n    {\n        while (i < j)\n     \
    \   {\n            string[i] = string[j];\n            i++;\n            j--;\n\
    \        }\n        string[i] = string[i];\n        return string;\n    }\n}",
  "{\n    if (string.empty())\n        return string;\n    string prefix = string.substr(0,\
    \ string.size()/2);\n    string suffix = string.substr(string.size()/2);\n   \
    \ string reverse_prefix = reverse(prefix);\n    string reverse_suffix = reverse(suffix);\n\
    \    string result = prefix + reverse_suffix;\n    return result;\n}", "{\n  \
    \  int len = string.length();\n    int max_len = 0;\n    int max_len_index = 0;\n\
    \    for (int i = 0; i < len; i++) {\n        if (is_palindrome(string, i, i))\
    \ {\n            max_len = i + 1;\n            max_len_index = i;\n        }\n\
    \    }\n    if (max_len == 0) {\n        return string;\n    }\n    string result\
    \ = string.substr(0, max_len_index) + string.substr(max_len_index, len - max_len_index);\n\
    \    return result;\n}", "{\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    int len = string.length();\n    int i = len - 1;\n    int j = len - 1;\n\
    \    while (i >= 0 && j >= 0)\n    {\n        if (string[i] == string[j])\n  \
    \      {\n            prefix += string[i];\n            i--;\n            j--;\n\
    \        }\n        else\n        {\n            break;\n        }\n    }\n  \
    \  i = len - 1;\n    j = len - 1;\n    while (i >= 0 && j >= 0)\n    {\n     \
    \   if (string[i] == string[j])\n        {\n            suffix += string[i];\n\
    \            i--;\n            j--;\n        }\n        else\n        {\n    \
    \        break;\n        }\n    }\n    return prefix + suffix;\n}", "{\n    string\
    \ result = \"\";\n    int len = string.length();\n    int i = 0;\n    int j =\
    \ len - 1;\n    while (i < j)\n    {\n        if (string[i] == string[j])\n  \
    \      {\n            result += string[i];\n            i++;\n            j--;\n\
    \        }\n        else\n        {\n            break;\n        }\n    }\n  \
    \  if (i == j)\n    {\n        result += string[i];\n    }\n    else\n    {\n\
    \        result += string[j];\n        result += string[i];\n    }\n    return\
    \ result;\n}", "{\n    int len = string.length();\n    int max_len = len;\n  \
    \  int i = 0;\n    while (i < len) {\n        if (is_palindrome(string, i, i))\
    \ {\n            max_len = i;\n            i++;\n        } else {\n          \
    \  i++;\n        }\n    }\n    string result = string.substr(0, max_len);\n  \
    \  string rev = string.substr(max_len, len - max_len);\n    result += rev;\n \
    \   return result;\n}", "{\n    int len = string.length();\n    int max_len =\
    \ 0;\n    int max_len_index = 0;\n    for(int i = 0; i < len; i++)\n    {\n  \
    \      if(is_palindrome(string, i, i))\n        {\n            if(i > max_len)\n\
    \            {\n                max_len = i;\n                max_len_index =\
    \ i;\n            }\n        }\n    }\n    \n    if(max_len == 0)\n    {\n   \
    \     return \"\";\n    }\n    \n    string result = \"\";\n    for(int i = 0;\
    \ i < max_len; i++)\n    {\n        result += string[i];\n    }\n    \n    for(int\
    \ i = max_len_index - 1; i >= 0; i--)\n    {\n        result += string[i];\n \
    \   }\n    \n    return result;\n}", "{\n    int len = string.length();\n    int\
    \ max_len = len;\n    int i = 0;\n    int j = len - 1;\n    while (i < j)\n  \
    \  {\n        if (string[i] != string[j])\n        {\n            break;\n   \
    \     }\n        i++;\n        j--;\n    }\n    if (i == j)\n    {\n        return\
    \ string;\n    }\n    string.append(string.substr(i, len - i));\n    string.append(string.substr(0,\
    \ i));\n    return string;\n}", "{\n    int len = string.length();\n    int i\
    \ = 0;\n    int j = len - 1;\n    while (i < j) {\n        while (i < j && string[i]\
    \ == string[j]) {\n            i++;\n            j--;\n        }\n        if (i\
    \ < j) {\n            string[i] = string[j];\n            string[j] = string[i];\n\
    \            i++;\n            j--;\n        }\n    }\n    return string;\n}",
  "{\n    string longest_palindrome = \"\";\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string prefix = string.substr(0, i);\n        string suffix\
    \ = string.substr(i, string.length() - i);\n        if(is_palindrome(suffix))\n\
    \        {\n            if(suffix.length() > longest_palindrome.length())\n  \
    \          {\n                longest_palindrome = suffix;\n            }\n  \
    \      }\n    }\n    return string + reverse(longest_palindrome);\n}", "{\n  \
    \  int len = string.length();\n    if (len == 0)\n        return string;\n   \
    \ int max_len = len;\n    int max_len_index = len - 1;\n    for (int i = len -\
    \ 1; i >= 0; i--)\n    {\n        if (string[i] == string[max_len_index])\n  \
    \      {\n            max_len = i;\n            max_len_index = i;\n        }\n\
    \    }\n    string.append(string.substr(0, max_len));\n    string.append(string.substr(max_len,\
    \ len - max_len));\n    return string;\n}", "{\n    string palindrome = \"\";\n\
    \    int len = string.length();\n    int i = 0;\n    int j = len - 1;\n    while\
    \ (i < j)\n    {\n        if (string[i] == string[j])\n        {\n           \
    \ palindrome += string[i];\n            i++;\n            j--;\n        }\n  \
    \      else\n        {\n            break;\n        }\n    }\n    if (palindrome.length()\
    \ == 0)\n    {\n        palindrome = string;\n    }\n    else\n    {\n       \
    \ palindrome += string.substr(i, len - i);\n    }\n    return palindrome;\n}",
  "{\n    string longest_palindrome = \"\";\n    string reverse_of_string = \"\";\n\
    \    int length = string.length();\n    int i = 0;\n    while(i < length)\n  \
    \  {\n        if(is_palindrome(string.substr(i, length-i)))\n        {\n     \
    \       longest_palindrome = string.substr(i, length-i);\n            break;\n\
    \        }\n        i++;\n    }\n    if(longest_palindrome == \"\")\n        return\
    \ \"\";\n    i = 0;\n    while(i < length)\n    {\n        if(is_palindrome(string.substr(i,\
    \ length-i)))\n        {\n            reverse_of_string = string.substr(0, i)\
    \ + string.substr(i, length-i);\n            break;\n        }\n        i++;\n\
    \    }\n    return longest_palindrome + reverse_of_string;\n}", "{\n    int len\
    \ = string.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j)\
    \ {\n        while (i < j && !is_palindrome(string, i, j)) {\n            i++;\n\
    \        }\n        while (i < j && !is_palindrome(string, i, j)) {\n        \
    \    j--;\n        }\n        if (i < j) {\n            string.append(string.substr(i,\
    \ j - i + 1));\n            i++;\n            j--;\n        }\n    }\n    return\
    \ string;\n}", "{\n    string result = \"\";\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j)\n    {\n        if (string[i]\
    \ == string[j])\n        {\n            result += string[i];\n            i++;\n\
    \            j--;\n        }\n        else\n        {\n            break;\n  \
    \      }\n    }\n    if (i == j)\n    {\n        result += string[i];\n    }\n\
    \    else\n    {\n        result += string[j];\n        result += string[i];\n\
    \    }\n    return result;\n}", "{\n    string longest_palindrome = \"\";\n  \
    \  int len = string.length();\n    for(int i = 0; i < len; i++)\n    {\n     \
    \   string prefix = string.substr(0, i+1);\n        string suffix = string.substr(i+1,\
    \ len);\n        if(is_palindrome(suffix))\n        {\n            if(suffix.length()\
    \ > longest_palindrome.length())\n            {\n                longest_palindrome\
    \ = suffix;\n            }\n        }\n    }\n    return string + longest_palindrome;\n\
    }", "{\n    int len = string.length();\n    int i = 0;\n    int j = len - 1;\n\
    \    while (i < j) {\n        while (i < j && !is_palindrome(string, i, j)) {\n\
    \            i++;\n        }\n        while (i < j && !is_palindrome(string, i,\
    \ j)) {\n            j--;\n        }\n        if (i < j) {\n            string.insert(i,\
    \ string[j]);\n            string.erase(j);\n            i++;\n            j--;\n\
    \        }\n    }\n    return string;\n}", "{\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    string palindrome = \"\";\n    while(i\
    \ < j)\n    {\n        if(string[i] == string[j])\n        {\n            palindrome\
    \ += string[i];\n            i++;\n            j--;\n        }\n        else\n\
    \        {\n            break;\n        }\n    }\n    string reverse = \"\";\n\
    \    while(i < j)\n    {\n        reverse += string[i];\n        i++;\n    }\n\
    \    return palindrome + reverse;\n}", "{\n    string result = \"\";\n    int\
    \ len = string.length();\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ j) {\n        if (string[i] == string[j]) {\n            result += string[i];\n\
    \            i++;\n            j--;\n        } else {\n            break;\n  \
    \      }\n    }\n    \n    if (result.length() == 0) {\n        return string;\n\
    \    }\n    \n    string prefix = string.substr(0, i);\n    string suffix = string.substr(j\
    \ + 1);\n    \n    return prefix + make_palindrome(suffix);\n}", "{\n    string\
    \ result = \"\";\n    int len = string.length();\n    int max_len = 0;\n    int\
    \ i = 0;\n    while (i < len) {\n        int j = i;\n        while (j < len &&\
    \ string[j] == string[i]) {\n            j++;\n        }\n        if (j - i >\
    \ max_len) {\n            max_len = j - i;\n        }\n        i = j;\n    }\n\
    \    if (max_len == 0) {\n        return string;\n    }\n    i = 0;\n    while\
    \ (i < max_len) {\n        result += string[i];\n        i++;\n    }\n    i =\
    \ max_len - 1;\n    while (i >= 0) {\n        result += string[i];\n        i--;\n\
    \    }\n    return result;\n}", "{\n    int len = string.length();\n    int i\
    \ = 0;\n    int j = len - 1;\n    while (i < j) {\n        while (i < j && !isalnum(string[i]))\
    \ {\n            i++;\n        }\n        while (i < j && !isalnum(string[j]))\
    \ {\n            j--;\n        }\n        if (i < j && string[i] != string[j])\
    \ {\n            break;\n        }\n        i++;\n        j--;\n    }\n    if\
    \ (i == j) {\n        return string;\n    }\n    string.append(string.substr(i,\
    \ len - i));\n    string.append(string.substr(0, i));\n    return string;\n}",
  "{\n    string result = \"\";\n    int len = string.length();\n    int i = 0;\n\
    \    int j = len - 1;\n    while(i < j)\n    {\n        if(string[i] == string[j])\n\
    \        {\n            result = string[i] + result;\n            i++;\n     \
    \       j--;\n        }\n        else\n        {\n            break;\n       \
    \ }\n    }\n    if(i == j)\n    {\n        result = string[i] + result;\n    }\n\
    \    else\n    {\n        result = string[i] + result + string[j];\n    }\n  \
    \  return result;\n}", "{\n    if (string.length() == 0)\n        return string;\n\
    \    \n    int max_len = 0;\n    int max_len_index = 0;\n    for (int i = 0; i\
    \ < string.length(); i++)\n    {\n        if (is_palindrome(string.substr(i, string.length()\
    \ - i)))\n        {\n            if (string.length() - i > max_len)\n        \
    \    {\n                max_len = string.length() - i;\n                max_len_index\
    \ = i;\n            }\n        }\n    }\n    \n    string result = string.substr(0,\
    \ max_len_index) + string.substr(max_len_index, string.length() - max_len_index);\n\
    \    return result;\n}", "{\n    int len = string.length();\n    int i = 0;\n\
    \    int j = len - 1;\n    string result = \"\";\n    while (i < j)\n    {\n \
    \       if (string[i] == string[j])\n        {\n            result += string[i];\n\
    \            i++;\n            j--;\n        }\n        else\n        {\n    \
    \        break;\n        }\n    }\n    if (i == j)\n    {\n        return string;\n\
    \    }\n    else\n    {\n        return result + string.substr(i, j - i + 1);\n\
    \    }\n}", "{\n    string longest_palindrome = \"\";\n    string reverse_of_string\
    \ = \"\";\n    int length = string.length();\n    for (int i = 0; i < length;\
    \ i++) {\n        string prefix = string.substr(0, i);\n        string postfix\
    \ = string.substr(i, length - i);\n        if (is_palindrome(postfix)) {\n   \
    \         if (postfix.length() > longest_palindrome.length()) {\n            \
    \    longest_palindrome = postfix;\n            }\n        }\n        if (is_palindrome(prefix))\
    \ {\n            if (prefix.length() > reverse_of_string.length()) {\n       \
    \         reverse_of_string = prefix;\n            }\n        }\n    }\n    return\
    \ string + reverse_of_string;\n}", "{\n    string result = \"\";\n    int len\
    \ = string.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j)\n\
    \    {\n        if (string[i] == string[j])\n        {\n            result +=\
    \ string[i];\n            i++;\n            j--;\n        }\n        else\n  \
    \      {\n            break;\n        }\n    }\n    if (i == j)\n    {\n     \
    \   result += string[i];\n    }\n    else\n    {\n        result += string[j];\n\
    \        result += string[i];\n    }\n    return result;\n}", "{\n    string longest_palindrome\
    \ = \"\";\n    int len = string.length();\n    int i = 0;\n    int j = len - 1;\n\
    \    while (i < j)\n    {\n        if (string[i] == string[j])\n        {\n  \
    \          longest_palindrome = string[i] + longest_palindrome;\n            i++;\n\
    \            j--;\n        }\n        else if (string[i] > string[j])\n      \
    \  {\n            j--;\n        }\n        else\n        {\n            i++;\n\
    \        }\n    }\n    return longest_palindrome;\n}", "{\n    string result =\
    \ \"\";\n    int len = string.length();\n    int i = 0;\n    int j = len - 1;\n\
    \    while(i < j)\n    {\n        if(string[i] == string[j])\n        {\n    \
    \        result = string[i] + result;\n            i++;\n            j--;\n  \
    \      }\n        else\n        {\n            break;\n        }\n    }\n    if(i\
    \ == j)\n    {\n        result = string[i] + result;\n    }\n    else\n    {\n\
    \        result = string[i] + result + string[j];\n    }\n    return result;\n\
    }", "{\n    string palindrome = \"\";\n    int len = string.length();\n    int\
    \ i = 0;\n    int j = len - 1;\n    while (i < j)\n    {\n        if (string[i]\
    \ == string[j])\n        {\n            palindrome += string[i];\n           \
    \ i++;\n            j--;\n        }\n        else\n        {\n            break;\n\
    \        }\n    }\n    if (palindrome.length() == 0)\n    {\n        return string;\n\
    \    }\n    else\n    {\n        return string + reverse(string.substr(0, palindrome.length()));\n\
    \    }\n}", "{\n    string longest_palindrome = \"\";\n    int len = string.length();\n\
    \    for (int i = 0; i < len; i++) {\n        string prefix = string.substr(0,\
    \ i);\n        string postfix = string.substr(i, len);\n        if (is_palindrome(postfix))\
    \ {\n            if (longest_palindrome.length() < postfix.length()) {\n     \
    \           longest_palindrome = postfix;\n            }\n        }\n    }\n \
    \   if (longest_palindrome.length() == 0) {\n        return string;\n    }\n \
    \   string result = string + longest_palindrome[::-1];\n    return result;\n}",
  "{\n    if(string.empty())\n        return string;\n    \n    string longest_palindrome\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ string prefix = string.substr(0, i);\n        string postfix = string.substr(i);\n\
    \        \n        if(is_palindrome(postfix))\n        {\n            if(postfix.length()\
    \ > longest_palindrome.length())\n                longest_palindrome = postfix;\n\
    \        }\n        \n        if(is_palindrome(prefix))\n        {\n         \
    \   if(prefix.length() > longest_palindrome.length())\n                longest_palindrome\
    \ = prefix;\n        }\n    }\n    \n    string result = string + longest_palindrome;\n\
    \    \n    return result;\n}", "{\n    string reverse_string = \"\";\n    int\
    \ length = string.length();\n    int i = 0;\n    while(i < length)\n    {\n  \
    \      reverse_string = string[i] + reverse_string;\n        i++;\n    }\n   \
    \ return string + reverse_string;\n}", "{\n    if (string.length() == 0)\n   \
    \     return string;\n    \n    int max_len = 0;\n    int max_index = 0;\n   \
    \ for (int i = 0; i < string.length(); i++) {\n        if (is_palindrome(string.substr(i)))\
    \ {\n            if (i > max_len) {\n                max_len = i;\n          \
    \      max_index = i;\n            }\n        }\n    }\n    \n    string result\
    \ = string.substr(0, max_index + 1);\n    for (int i = 0; i < max_len - max_index\
    \ - 1; i++) {\n        result += string.substr(max_index + 1 + i, 1);\n    }\n\
    \    \n    return result;\n}", "{\n    int len = string.length();\n    int max_len\
    \ = 0;\n    int max_len_index = 0;\n    for (int i = 0; i < len; i++) {\n    \
    \    if (is_palindrome(string, i, i)) {\n            max_len = i + 1;\n      \
    \      max_len_index = i;\n        }\n    }\n    if (max_len == 0) {\n       \
    \ return string;\n    }\n    string result = string.substr(0, max_len_index) +\
    \ string.substr(max_len_index, len - max_len_index);\n    return result;\n}",
  "{\n    string result = string;\n    int len = string.length();\n    int i = 0;\n\
    \    int j = len - 1;\n    while (i < j) {\n        if (string[i] != string[j])\
    \ {\n            break;\n        }\n        i++;\n        j--;\n    }\n    if\
    \ (i == j) {\n        return string;\n    }\n    string prefix = string.substr(0,\
    \ i);\n    string suffix = string.substr(j + 1);\n    string reverse = suffix\
    \ + reverse(prefix);\n    return reverse;\n}", "{\n    int len = string.length();\n\
    \    int max_len = 0;\n    int max_len_index = 0;\n    for(int i = 0; i < len;\
    \ i++)\n    {\n        if(is_palindrome(string, i, i))\n        {\n          \
    \  if(i > max_len)\n            {\n                max_len = i;\n            \
    \    max_len_index = i;\n            }\n        }\n    }\n    \n    string result\
    \ = string.substr(0, max_len);\n    for(int i = max_len_index - 1; i >= 0; i--)\n\
    \    {\n        result += string[i];\n    }\n    return result;\n}", "{\n    string\
    \ prefix = \"\";\n    string postfix = \"\";\n    int len = string.length();\n\
    \    int i = 0;\n    while(i < len)\n    {\n        if(is_palindrome(string[i]))\n\
    \        {\n            postfix += string[i];\n            i++;\n        }\n \
    \       else\n        {\n            break;\n        }\n    }\n    while(i < len)\n\
    \    {\n        if(is_palindrome(string[len-i-1]))\n        {\n            prefix\
    \ += string[len-i-1];\n            i++;\n        }\n        else\n        {\n\
    \            break;\n        }\n    }\n    return prefix + postfix;\n}", "{\n\
    \    int len = string.length();\n    if (len == 0) return string;\n    int max_len\
    \ = len;\n    int max_i = 0;\n    for (int i = 0; i < len; i++) {\n        if\
    \ (is_palindrome(string, i, i)) {\n            max_i = i;\n            max_len\
    \ = i + 1;\n        }\n    }\n    if (max_len == len) return string;\n    string\
    \ ret = string.substr(0, max_i) + string.substr(max_i, max_len - max_i - 1);\n\
    \    return ret;\n}", "{\n    string result = \"\";\n    int len = string.length();\n\
    \    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (string[i]\
    \ == string[j]) {\n            result += string[i];\n            i++;\n      \
    \      j--;\n        } else {\n            break;\n        }\n    }\n    \n  \
    \  if (result.length() == 0) {\n        return string;\n    }\n    \n    string\
    \ prefix = string.substr(0, i);\n    string suffix = string.substr(j + 1);\n \
    \   \n    return prefix + make_palindrome(suffix);\n}", "{\n    string result\
    \ = string;\n    int length = string.length();\n    int i = 0;\n    int j = length\
    \ - 1;\n    while (i < j)\n    {\n        if (string[i] != string[j])\n      \
    \  {\n            break;\n        }\n        i++;\n        j--;\n    }\n    if\
    \ (i < j)\n    {\n        string.append(string.substr(i, j - i + 1));\n      \
    \  string.append(string.substr(0, i));\n    }\n    return string;\n}", "{\n  \
    \  string result = \"\";\n    int len = string.length();\n    int i = 0;\n   \
    \ int j = len - 1;\n    while (i < j)\n    {\n        if (string[i] == string[j])\n\
    \        {\n            result += string[i];\n            i++;\n            j--;\n\
    \        }\n        else\n        {\n            break;\n        }\n    }\n  \
    \  if (i == j)\n    {\n        result += string[i];\n    }\n    else\n    {\n\
    \        result += string[j];\n        result += string[i];\n    }\n    return\
    \ result;\n}", "{\n    string result = string;\n    int length = string.length();\n\
    \    int max_length = length;\n    int i = 0;\n    int j = length - 1;\n    while(i\
    \ < j)\n    {\n        if(string[i] != string[j])\n        {\n            if(string[i]\
    \ < string[j])\n            {\n                max_length = max(max_length, j\
    \ - i);\n                j--;\n            }\n            else\n            {\n\
    \                max_length = max(max_length, i - j);\n                i++;\n\
    \            }\n        }\n        else\n        {\n            i++;\n       \
    \     j--;\n        }\n    }\n    if(max_length == length)\n    {\n        return\
    \ string;\n    }\n    else\n    {\n        string prefix = string.substr(0, max_length);\n\
    \        string postfix = string.substr(length - max_length, length);\n      \
    \  string reverse_postfix = reverse(postfix);\n        return prefix + reverse_postfix;\n\
    \    }\n}", "{\n    string result = string;\n    int length = string.length();\n\
    \    int i = 0;\n    int j = length - 1;\n    while (i < j)\n    {\n        if\
    \ (string[i] != string[j])\n        {\n            break;\n        }\n       \
    \ i++;\n        j--;\n    }\n    if (i == j)\n    {\n        return string;\n\
    \    }\n    else\n    {\n        string prefix = string.substr(0, i);\n      \
    \  string suffix = string.substr(j + 1);\n        string reverse_suffix = suffix;\n\
    \        reverse_suffix.reverse();\n        string result = prefix + reverse_suffix;\n\
    \        return result;\n    }\n}", "{\n    if(string.length() == 0)\n       \
    \ return string;\n    \n    string longest_palindrome = \"\";\n    int longest_palindrome_length\
    \ = 0;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string\
    \ prefix = string.substr(0, i);\n        string suffix = string.substr(i);\n \
    \       \n        if(is_palindrome(suffix))\n        {\n            if(suffix.length()\
    \ > longest_palindrome_length)\n            {\n                longest_palindrome\
    \ = suffix;\n                longest_palindrome_length = suffix.length();\n  \
    \          }\n        }\n        \n        if(is_palindrome(prefix))\n       \
    \ {\n            if(prefix.length() > longest_palindrome_length)\n           \
    \ {\n                longest_palindrome = prefix + suffix;\n                longest_palindrome_length\
    \ = prefix.length() + suffix.length();\n            }\n        }\n    }\n    \n\
    \    return longest_palindrome;\n}", "{\n    string result = string;\n    int\
    \ len = string.length();\n    int max_len = 0;\n    int max_index = 0;\n    for(int\
    \ i = 0; i < len; i++)\n    {\n        if(is_palindrome(string, i, i))\n     \
    \   {\n            max_len = i + 1;\n            max_index = i;\n            break;\n\
    \        }\n    }\n    if(max_len == 0)\n        return result;\n    for(int i\
    \ = max_index - 1; i >= 0; i--)\n    {\n        if(is_palindrome(string, i, i\
    \ + max_len - 1))\n        {\n            result += string.substr(i, max_len);\n\
    \            break;\n        }\n    }\n    return result;\n}", "{\n    int len\
    \ = string.length();\n    int max_len = len;\n    int max_len_index = len;\n \
    \   for (int i = len - 1; i >= 0; i--)\n    {\n        if (is_palindrome(string,\
    \ i, i))\n        {\n            max_len = i;\n            max_len_index = i;\n\
    \            break;\n        }\n    }\n    string = string.substr(0, max_len_index)\
    \ + string.substr(max_len_index, len - max_len_index);\n    return string;\n}",
  "{\n    string longest_palindrome = \"\";\n    int length = string.length();\n \
    \   for(int i = 0; i < length; i++)\n    {\n        string prefix = string.substr(0,\
    \ i);\n        string suffix = string.substr(i, length - i);\n        if(is_palindrome(suffix))\n\
    \        {\n            if(suffix.length() > longest_palindrome.length())\n  \
    \          {\n                longest_palindrome = suffix;\n            }\n  \
    \      }\n    }\n    string result = string + longest_palindrome;\n    return\
    \ result;\n}", "{\n    int len = string.length();\n    int max_len = 0;\n    int\
    \ max_len_index = 0;\n    for(int i = 0; i < len; i++)\n    {\n        if(is_palindrome(string,\
    \ i, i))\n        {\n            if(i > max_len)\n            {\n            \
    \    max_len = i;\n                max_len_index = i;\n            }\n       \
    \ }\n    }\n    \n    string result = string;\n    for(int i = 0; i < max_len;\
    \ i++)\n    {\n        result += string.substr(i, max_len - i);\n    }\n    \n\
    \    return result;\n}", "{\n    int len = string.length();\n    int max_len =\
    \ 0;\n    int max_len_index = 0;\n    int i = 0;\n    for(i = 0; i < len; i++)\n\
    \    {\n        if(is_palindrome(string, i, i))\n        {\n            if(i >\
    \ max_len)\n            {\n                max_len = i;\n                max_len_index\
    \ = i;\n            }\n        }\n    }\n    \n    if(max_len == 0)\n    {\n \
    \       return string;\n    }\n    \n    string result = string;\n    for(i =\
    \ max_len_index; i >= 0; i--)\n    {\n        result.append(string.substr(i, 1));\n\
    \    }\n    \n    return result;\n}", "{\n    int len = string.length();\n   \
    \ int i = 0;\n    int j = len - 1;\n    string palindrome = \"\";\n    while (i\
    \ < j)\n    {\n        if (string[i] == string[j])\n        {\n            palindrome\
    \ += string[i];\n            i++;\n            j--;\n        }\n        else\n\
    \        {\n            break;\n        }\n    }\n    if (palindrome.length()\
    \ == 0)\n    {\n        return string;\n    }\n    else\n    {\n        string\
    \ prefix = string.substr(0, i);\n        string suffix = string.substr(j + 1);\n\
    \        return prefix + make_palindrome(suffix);\n    }\n}", "{\n    string reverse_string\
    \ = \"\";\n    int length = string.length();\n    int i = 0;\n    int j = length\
    \ - 1;\n    while(i < j)\n    {\n        reverse_string += string[i];\n      \
    \  i++;\n        j--;\n    }\n    reverse_string += string[i];\n    string = string\
    \ + reverse_string;\n    return string;\n}", "{\n    string prefix = \"\";\n \
    \   string suffix = \"\";\n    int len = string.length();\n    int i = 0;\n  \
    \  while (i < len)\n    {\n        if (is_palindrome(string.substr(i, len - i)))\n\
    \        {\n            prefix = string.substr(0, i);\n            suffix = string.substr(i,\
    \ len - i);\n            break;\n        }\n        i++;\n    }\n    return prefix\
    \ + suffix;\n}", "{\n    int len = string.length();\n    if(len == 0)\n      \
    \  return string;\n    \n    int max_len = len;\n    int max_len_index = len -\
    \ 1;\n    \n    for(int i = len - 1; i >= 0; i--)\n    {\n        if(string[i]\
    \ == string[max_len_index])\n        {\n            max_len_index--;\n       \
    \     max_len--;\n        }\n        else\n            break;\n    }\n    \n \
    \   string reverse_string = string.substr(0, max_len_index + 1);\n    reverse(reverse_string.begin(),\
    \ reverse_string.end());\n    \n    string result = string + reverse_string;\n\
    \    return result;\n}", "{\n    int len = string.length();\n    int i = 0;\n\
    \    int j = len - 1;\n    while (i < j) {\n        while (i < j && string[i]\
    \ != string[j]) {\n            i++;\n            j--;\n        }\n        if (i\
    \ < j) {\n            string[i] = string[i] + string[j];\n            string[j]\
    \ = string[i] - string[j];\n            string[i] = string[i] - string[j];\n \
    \           i++;\n            j--;\n        }\n    }\n    return string;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
