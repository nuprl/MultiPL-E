{
  "name": "HumanEval_29_filter_by_prefix",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n",
  "tests": "unittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = (string[])realloc(result, (result.length + 1) * sizeof(string));\n            result[result.length - 1] = strings[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp3f2e28r4.d(16): Error: C style cast illegal, use `cast(string[])realloc(result, (result.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3f2e28r4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpzffzmi3i.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpzffzmi3i.d(15): Error: expression expected, not `:`\n/tmp/tmpzffzmi3i.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzffzmi3i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyyijm38o.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpyyijm38o.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyijm38o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for(string s : strings)\n    {\n        if(s.startsWith(prefix))\n        {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpv9129dba.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpv9129dba.d(15): Error: expression expected, not `:`\n/tmp/tmpv9129dba.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv9129dba.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = (string[]) (std.concat(result, new string[] { strings[i] }));\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpw6rvy4k6.d(16): Error: found `{` when expecting `,`\n/tmp/tmpw6rvy4k6.d(16): Error: found `}` when expecting `,`\n/tmp/tmpw6rvy4k6.d(16): Error: C style cast illegal, use `cast(string[])std.concat(result, new string[], strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw6rvy4k6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp76jtxlkl.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmp76jtxlkl.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76jtxlkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return filter_by_prefix(strings, prefix, 0);\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpx6k9nekb.d(13): Error: function `tmpx6k9nekb.filter_by_prefix(string[] strings, string prefix)` is not callable using argument types `(string[], string, int)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx6k9nekb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpj75pnj0w.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpj75pnj0w.d(15): Error: expression expected, not `:`\n/tmp/tmpj75pnj0w.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj75pnj0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpzffzmi3i.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpzffzmi3i.d(15): Error: expression expected, not `:`\n/tmp/tmpzffzmi3i.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzffzmi3i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) \n    {\n        if (strings[i].startsWith(prefix)) \n        {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmprknxcl3n.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmprknxcl3n.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprknxcl3n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpzffzmi3i.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpzffzmi3i.d(15): Error: expression expected, not `:`\n/tmp/tmpzffzmi3i.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzffzmi3i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = (string[])realloc(result, (result.length + 1) * sizeof(string));\n            result[result.length - 1] = strings[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp3f2e28r4.d(16): Error: C style cast illegal, use `cast(string[])realloc(result, (result.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3f2e28r4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = (string[])realloc(result, (result.length + 1) * sizeof(string));\n        else\n            result[result.length] = strings[i];\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpp8ina80b.d(16): Error: C style cast illegal, use `cast(string[])realloc(result, (result.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp8ina80b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return filter(strings, (string s) -> starts_with(s, prefix));\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp1crifhoi.d(13): Error: found `s` when expecting `)`\n/tmp/tmp1crifhoi.d(13): Error: expression expected, not `>`\n/tmp/tmp1crifhoi.d(13): Error: found `starts_with` when expecting `;` following `return` statement\n/tmp/tmp1crifhoi.d(13): Error: found `)` when expecting `;` following statement\n/tmp/tmp1crifhoi.d(13): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1crifhoi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp76jtxlkl.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmp76jtxlkl.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76jtxlkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = (string[])cat(result, (Object[])new String[] {strings[i]});\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp1b0b2oxt.d(18): Error: C style cast illegal, use `cast(Object[])new String[]`\n/tmp/tmp1b0b2oxt.d(18): Error: found `{` when expecting `,`\n/tmp/tmp1b0b2oxt.d(18): Error: found `}` when expecting `,`\n/tmp/tmp1b0b2oxt.d(18): Error: C style cast illegal, use `cast(string[])cat(result, cast(Object[])new String[], strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1b0b2oxt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyyibwz22.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpyyibwz22.d(17): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyibwz22.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp76jtxlkl.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmp76jtxlkl.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76jtxlkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp76jtxlkl.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmp76jtxlkl.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76jtxlkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp3u7joxbk.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmp3u7joxbk.d(15): Error: expression expected, not `:`\n/tmp/tmp3u7joxbk.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u7joxbk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyyibwz22.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpyyibwz22.d(17): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyibwz22.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyyijm38o.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpyyijm38o.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyijm38o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp76jtxlkl.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmp76jtxlkl.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76jtxlkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpog8b0277.d(15): Error: no property `startsWith` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpog8b0277.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp3u7joxbk.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmp3u7joxbk.d(15): Error: expression expected, not `:`\n/tmp/tmp3u7joxbk.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u7joxbk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = (string[]) (std.lib.array.append(result, strings[i]));\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpob9fv2e2.d(18): Error: C style cast illegal, use `cast(string[])std.lib.array.append(result, strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpob9fv2e2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpzffzmi3i.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpzffzmi3i.d(15): Error: expression expected, not `:`\n/tmp/tmpzffzmi3i.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzffzmi3i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = (string[])realloc(result, (result.length + 1) * sizeof(string));\n            result[result.length - 1] = strings[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpvbiioag7.d(18): Error: C style cast illegal, use `cast(string[])realloc(result, (result.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvbiioag7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp3u7joxbk.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmp3u7joxbk.d(15): Error: expression expected, not `:`\n/tmp/tmp3u7joxbk.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u7joxbk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for(string s : strings)\n    {\n        if(s.startsWith(prefix))\n        {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpv9129dba.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpv9129dba.d(15): Error: expression expected, not `:`\n/tmp/tmpv9129dba.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv9129dba.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = (string[]) (java.lang.reflect.Array.set(result, i, strings[i]));\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpw7t8f4jz.d(18): Error: C style cast illegal, use `cast(string[])java.lang.reflect.Array.set(result, i, strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw7t8f4jz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n        {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyul5kzjm.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpyul5kzjm.d(15): Error: expression expected, not `:`\n/tmp/tmpyul5kzjm.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyul5kzjm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyyijm38o.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpyyijm38o.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyijm38o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) \n    {\n        if (strings[i].startsWith(prefix)) \n        {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmprknxcl3n.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmprknxcl3n.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprknxcl3n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp76jtxlkl.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmp76jtxlkl.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76jtxlkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = (string[])realloc(result, (result.length + 1) * sizeof(string));\n            result[result.length - 1] = strings[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpvbiioag7.d(18): Error: C style cast illegal, use `cast(string[])realloc(result, (result.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvbiioag7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpdji66m5w.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpdji66m5w.d(17): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdji66m5w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = (string[])cat(result, (Object[])new string[]{strings[i]});\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpvwhbf9sc.d(18): Error: C style cast illegal, use `cast(Object[])new string[]`\n/tmp/tmpvwhbf9sc.d(18): Error: found `{` when expecting `,`\n/tmp/tmpvwhbf9sc.d(18): Error: found `}` when expecting `,`\n/tmp/tmpvwhbf9sc.d(18): Error: C style cast illegal, use `cast(string[])cat(result, cast(Object[])new string[], strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvwhbf9sc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = (string[]) Utils.append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpmyac04t3.d(18): Error: C style cast illegal, use `cast(string[])Utils.append(result, strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmyac04t3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n        {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyul5kzjm.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpyul5kzjm.d(15): Error: expression expected, not `:`\n/tmp/tmpyul5kzjm.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyul5kzjm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp76jtxlkl.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmp76jtxlkl.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76jtxlkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for(string s : strings)\n    {\n        if(s.startsWith(prefix))\n            result[i++] = s;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyhg0lmnm.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpyhg0lmnm.d(15): Error: expression expected, not `:`\n/tmp/tmpyhg0lmnm.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhg0lmnm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp3u7joxbk.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmp3u7joxbk.d(15): Error: expression expected, not `:`\n/tmp/tmp3u7joxbk.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u7joxbk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp3u7joxbk.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmp3u7joxbk.d(15): Error: expression expected, not `:`\n/tmp/tmp3u7joxbk.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u7joxbk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n        {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyul5kzjm.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpyul5kzjm.d(15): Error: expression expected, not `:`\n/tmp/tmpyul5kzjm.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyul5kzjm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n        {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp6qcx57jt.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmp6qcx57jt.d(15): Error: expression expected, not `:`\n/tmp/tmp6qcx57jt.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6qcx57jt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = (string[]) Utils.append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpmyac04t3.d(18): Error: C style cast illegal, use `cast(string[])Utils.append(result, strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmyac04t3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp76jtxlkl.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmp76jtxlkl.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76jtxlkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyyijm38o.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpyyijm38o.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyijm38o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = (string[])realloc(result, (result.length + 1) * sizeof(string));\n            result[result.length - 1] = strings[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpvbiioag7.d(18): Error: C style cast illegal, use `cast(string[])realloc(result, (result.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvbiioag7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n        {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyul5kzjm.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpyul5kzjm.d(15): Error: expression expected, not `:`\n/tmp/tmpyul5kzjm.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyul5kzjm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyyijm38o.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpyyijm38o.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyijm38o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp3u7joxbk.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmp3u7joxbk.d(15): Error: expression expected, not `:`\n/tmp/tmp3u7joxbk.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u7joxbk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp76jtxlkl.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmp76jtxlkl.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76jtxlkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyyijm38o.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpyyijm38o.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyijm38o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp76jtxlkl.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmp76jtxlkl.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76jtxlkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp76jtxlkl.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmp76jtxlkl.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76jtxlkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpzffzmi3i.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpzffzmi3i.d(15): Error: expression expected, not `:`\n/tmp/tmpzffzmi3i.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzffzmi3i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = (string[]) (java.lang.reflect.Array.set(result, i, strings[i]));\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpw7t8f4jz.d(18): Error: C style cast illegal, use `cast(string[])java.lang.reflect.Array.set(result, i, strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw7t8f4jz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpj75pnj0w.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpj75pnj0w.d(15): Error: expression expected, not `:`\n/tmp/tmpj75pnj0w.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj75pnj0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyyijm38o.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpyyijm38o.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyijm38o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyyijm38o.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpyyijm38o.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyijm38o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpdji66m5w.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpdji66m5w.d(17): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdji66m5w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].startsWith(prefix))\n        {\n            result = (string[])append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp6ngyl6qd.d(18): Error: C style cast illegal, use `cast(string[])append(result, strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ngyl6qd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyyibwz22.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpyyibwz22.d(17): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyibwz22.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpj75pnj0w.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpj75pnj0w.d(15): Error: expression expected, not `:`\n/tmp/tmpj75pnj0w.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj75pnj0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyyijm38o.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpyyijm38o.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyijm38o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp76jtxlkl.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmp76jtxlkl.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76jtxlkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpj75pnj0w.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpj75pnj0w.d(15): Error: expression expected, not `:`\n/tmp/tmpj75pnj0w.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj75pnj0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpzffzmi3i.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpzffzmi3i.d(15): Error: expression expected, not `:`\n/tmp/tmpzffzmi3i.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzffzmi3i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyyibwz22.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpyyibwz22.d(17): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyibwz22.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n        {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyul5kzjm.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpyul5kzjm.d(15): Error: expression expected, not `:`\n/tmp/tmpyul5kzjm.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyul5kzjm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = (string[]) Utils.append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpmyac04t3.d(18): Error: C style cast illegal, use `cast(string[])Utils.append(result, strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmyac04t3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp3u7joxbk.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmp3u7joxbk.d(15): Error: expression expected, not `:`\n/tmp/tmp3u7joxbk.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u7joxbk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = (string[])realloc(result, (result.length + 1) * sizeof(string));\n            result[result.length - 1] = strings[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpvbiioag7.d(18): Error: C style cast illegal, use `cast(string[])realloc(result, (result.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvbiioag7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpzffzmi3i.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpzffzmi3i.d(15): Error: expression expected, not `:`\n/tmp/tmpzffzmi3i.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzffzmi3i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].startsWith(prefix))\n        {\n            result = (string[]) Utils.append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp256guuii.d(18): Error: C style cast illegal, use `cast(string[])Utils.append(result, strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp256guuii.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n        {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyul5kzjm.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpyul5kzjm.d(15): Error: expression expected, not `:`\n/tmp/tmpyul5kzjm.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyul5kzjm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = (string[])cat(result, (Object[])new String[] {strings[i]});\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp1b0b2oxt.d(18): Error: C style cast illegal, use `cast(Object[])new String[]`\n/tmp/tmp1b0b2oxt.d(18): Error: found `{` when expecting `,`\n/tmp/tmp1b0b2oxt.d(18): Error: found `}` when expecting `,`\n/tmp/tmp1b0b2oxt.d(18): Error: C style cast illegal, use `cast(string[])cat(result, cast(Object[])new String[], strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1b0b2oxt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp76jtxlkl.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmp76jtxlkl.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76jtxlkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp76jtxlkl.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmp76jtxlkl.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76jtxlkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return filter_by_prefix(strings, prefix, 0);\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpx6k9nekb.d(13): Error: function `tmpx6k9nekb.filter_by_prefix(string[] strings, string prefix)` is not callable using argument types `(string[], string, int)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx6k9nekb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = (string[])cat(result, (Object[])new String[] {strings[i]});\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpivm40ks6.d(16): Error: C style cast illegal, use `cast(Object[])new String[]`\n/tmp/tmpivm40ks6.d(16): Error: found `{` when expecting `,`\n/tmp/tmpivm40ks6.d(16): Error: found `}` when expecting `,`\n/tmp/tmpivm40ks6.d(16): Error: C style cast illegal, use `cast(string[])cat(result, cast(Object[])new String[], strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpivm40ks6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = (string[]) Utils.append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpmyac04t3.d(18): Error: C style cast illegal, use `cast(string[])Utils.append(result, strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmyac04t3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyyijm38o.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpyyijm38o.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyijm38o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyyijm38o.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpyyijm38o.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyijm38o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp76jtxlkl.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmp76jtxlkl.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76jtxlkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpj75pnj0w.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpj75pnj0w.d(15): Error: expression expected, not `:`\n/tmp/tmpj75pnj0w.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj75pnj0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpj75pnj0w.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpj75pnj0w.d(15): Error: expression expected, not `:`\n/tmp/tmpj75pnj0w.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj75pnj0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp3u7joxbk.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmp3u7joxbk.d(15): Error: expression expected, not `:`\n/tmp/tmp3u7joxbk.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u7joxbk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpj75pnj0w.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpj75pnj0w.d(15): Error: expression expected, not `:`\n/tmp/tmpj75pnj0w.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj75pnj0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) \n    {\n        if (strings[i].startsWith(prefix)) \n        {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmprknxcl3n.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmprknxcl3n.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprknxcl3n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n        {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyul5kzjm.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpyul5kzjm.d(15): Error: expression expected, not `:`\n/tmp/tmpyul5kzjm.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyul5kzjm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return filter(strings, (string s) -> starts_with(s, prefix));\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp1crifhoi.d(13): Error: found `s` when expecting `)`\n/tmp/tmp1crifhoi.d(13): Error: expression expected, not `>`\n/tmp/tmp1crifhoi.d(13): Error: found `starts_with` when expecting `;` following `return` statement\n/tmp/tmp1crifhoi.d(13): Error: found `)` when expecting `;` following statement\n/tmp/tmp1crifhoi.d(13): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1crifhoi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = (string[]) Utils.append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpmyac04t3.d(18): Error: C style cast illegal, use `cast(string[])Utils.append(result, strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmyac04t3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp76jtxlkl.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmp76jtxlkl.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76jtxlkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyyijm38o.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpyyijm38o.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyijm38o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp3u7joxbk.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmp3u7joxbk.d(15): Error: expression expected, not `:`\n/tmp/tmp3u7joxbk.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u7joxbk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = (string[]) (std.concat(result, new string[] {strings[i]}));\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpidy8jggs.d(16): Error: found `{` when expecting `,`\n/tmp/tmpidy8jggs.d(16): Error: found `}` when expecting `,`\n/tmp/tmpidy8jggs.d(16): Error: C style cast illegal, use `cast(string[])std.concat(result, new string[], strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpidy8jggs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp3u7joxbk.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmp3u7joxbk.d(15): Error: expression expected, not `:`\n/tmp/tmp3u7joxbk.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u7joxbk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = (string[]) append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpb7gusoov.d(18): Error: C style cast illegal, use `cast(string[])append(result, strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb7gusoov.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyyijm38o.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpyyijm38o.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyijm38o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp76jtxlkl.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmp76jtxlkl.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76jtxlkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpzffzmi3i.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpzffzmi3i.d(15): Error: expression expected, not `:`\n/tmp/tmpzffzmi3i.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzffzmi3i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292997,
      "stdout": "",
      "stderr": "/tmp/tmpole2boz5.d(16): Error: no property `startsWith` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpole2boz5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n        {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyul5kzjm.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpyul5kzjm.d(15): Error: expression expected, not `:`\n/tmp/tmpyul5kzjm.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyul5kzjm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n        {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyul5kzjm.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpyul5kzjm.d(15): Error: expression expected, not `:`\n/tmp/tmpyul5kzjm.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyul5kzjm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = (string[]) (std.concat(result, new string[] {strings[i]}));\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpln0x8a3b.d(18): Error: found `{` when expecting `,`\n/tmp/tmpln0x8a3b.d(18): Error: found `}` when expecting `,`\n/tmp/tmpln0x8a3b.d(18): Error: C style cast illegal, use `cast(string[])std.concat(result, new string[], strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpln0x8a3b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp3u7joxbk.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmp3u7joxbk.d(15): Error: expression expected, not `:`\n/tmp/tmp3u7joxbk.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u7joxbk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return filter_by_prefix(strings, prefix, 0);\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpx6k9nekb.d(13): Error: function `tmpx6k9nekb.filter_by_prefix(string[] strings, string prefix)` is not callable using argument types `(string[], string, int)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx6k9nekb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n        {\n            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyul5kzjm.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpyul5kzjm.d(15): Error: expression expected, not `:`\n/tmp/tmpyul5kzjm.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyul5kzjm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp76jtxlkl.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmp76jtxlkl.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76jtxlkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n        if (s.startsWith(prefix)) {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp3u7joxbk.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmp3u7joxbk.d(15): Error: expression expected, not `:`\n/tmp/tmp3u7joxbk.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u7joxbk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n        if (strings[i].startsWith(prefix))\n            result = append(result, strings[i]);\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpbyj2kj_6.d(15): Error: no property `startsWith` for type `string`\n/tmp/tmpbyj2kj_6.d(16): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyj2kj_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpyyijm38o.d(16): Error: no property `startsWith` for type `string`\n/tmp/tmpyyijm38o.d(18): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyijm38o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].startsWith(prefix))\n        {\n            result = (string[])realloc(result, (result.length + 1) * sizeof(string));\n            result[result.length - 1] = strings[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpvbiioag7.d(18): Error: C style cast illegal, use `cast(string[])realloc(result, (result.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvbiioag7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpiczpyqrv.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpiczpyqrv.d(15): Error: expression expected, not `:`\n/tmp/tmpiczpyqrv.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiczpyqrv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\n    {\n        if (s.startsWith(prefix))\n            result[i++] = s;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmpj75pnj0w.d(15): Error: found `s` when expecting `;` following statement\n/tmp/tmpj75pnj0w.d(15): Error: expression expected, not `:`\n/tmp/tmpj75pnj0w.d(15): Error: found `strings` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj75pnj0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    string[] result = new string[0];\n    for (int i = 0; i < strings.length; i++) \n    {\n        if (strings[i].startsWith(prefix)) \n        {\n            result = (string[]) Utils.append(result, strings[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}",
      "timestamp": 1664292996,
      "stdout": "",
      "stderr": "/tmp/tmp5mh40qf1.d(18): Error: C style cast illegal, use `cast(string[])Utils.append(result, strings[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5mh40qf1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}