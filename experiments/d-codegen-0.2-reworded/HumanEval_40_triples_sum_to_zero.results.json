{
  "name": "HumanEval_40_triples_sum_to_zero",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n",
  "tests": "unittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    int i, j, k;\n    int n = l.length;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "/tmp/tmp607cy4d0.d(24): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp607cy4d0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    int i, j, k;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            for (k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            for (int k = j + 1; k < l.length; k++)\n            {\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n            }\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    int n = l.length;\n    if (n < 3) return false;\n    int i, j, k;\n    for (i = 0; i < n - 2; i++) {\n        for (j = i + 1; j < n - 1; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "/tmp/tmp1kk01wli.d(23): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1kk01wli.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    int i, j, k;\n    int n = l.length;\n    if (n < 3) return false;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "/tmp/tmpb7ghzbzm.d(24): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb7ghzbzm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9938g4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpe9938g4u.__unittest_L31_C1() [0x427e84]\n??:? void tmpe9938g4u.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt0pp14vh.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpt0pp14vh.__unittest_L36_C1() [0x427e84]\n??:? void tmpt0pp14vh.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    if (sum == 0)\n        return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa9hls504.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpa9hls504.__unittest_L32_C1() [0x427e84]\n??:? void tmpa9hls504.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if(l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for(int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if(sum == 0L)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5a6r0ohk.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmp5a6r0ohk.__unittest_L35_C1() [0x427e84]\n??:? void tmp5a6r0ohk.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0L)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvhlxalep.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpvhlxalep.__unittest_L37_C1() [0x427e84]\n??:? void tmpvhlxalep.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    int i, j, k;\n    int n = l.length;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "/tmp/tmp607cy4d0.d(24): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp607cy4d0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0L)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0L)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt0pp14vh.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpt0pp14vh.__unittest_L36_C1() [0x427e84]\n??:? void tmpt0pp14vh.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    int i, j, k;\n    for (i = 0; i < l.length - 2; i++) {\n        for (j = i + 1; j < l.length - 1; j++) {\n            for (k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt0pp14vh.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpt0pp14vh.__unittest_L36_C1() [0x427e84]\n??:? void tmpt0pp14vh.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0L)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeejnp8jl.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpeejnp8jl.__unittest_L36_C1() [0x427e84]\n??:? void tmpeejnp8jl.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0L) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkwos4a1t.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpkwos4a1t.__unittest_L31_C1() [0x427e84]\n??:? void tmpkwos4a1t.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    int i, j, k;\n    int count = 0;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            for (k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    count++;\n                    if (count == 3) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprnru_65y.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42838d]\n??:? void tmprnru_65y.__unittest_L39_C1() [0x427f00]\n??:? void tmprnru_65y.__modtest() [0x42810c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428850]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0L) return true;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0L) return true;\n            }\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0L)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0L)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0L)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqgh7hmxh.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpqgh7hmxh.__unittest_L35_C1() [0x427e84]\n??:? void tmpqgh7hmxh.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    int i, j, k;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            for (k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0L)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqgh7hmxh.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpqgh7hmxh.__unittest_L35_C1() [0x427e84]\n??:? void tmpqgh7hmxh.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprnxgqyey.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmprnxgqyey.__unittest_L37_C1() [0x427e84]\n??:? void tmprnxgqyey.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    int i, j, k;\n    for (i = 0; i < l.length - 2; i++) {\n        for (j = i + 1; j < l.length - 1; j++) {\n            for (k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    int i, j, k;\n    for (i = 0; i < l.length - 2; i++)\n        for (j = i + 1; j < l.length - 1; j++)\n            for (k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9938g4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpe9938g4u.__unittest_L31_C1() [0x427e84]\n??:? void tmpe9938g4u.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0L)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeejnp8jl.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpeejnp8jl.__unittest_L36_C1() [0x427e84]\n??:? void tmpeejnp8jl.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0L) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkwos4a1t.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpkwos4a1t.__unittest_L31_C1() [0x427e84]\n??:? void tmpkwos4a1t.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9938g4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpe9938g4u.__unittest_L31_C1() [0x427e84]\n??:? void tmpe9938g4u.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9938g4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpe9938g4u.__unittest_L31_C1() [0x427e84]\n??:? void tmpe9938g4u.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt0pp14vh.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpt0pp14vh.__unittest_L36_C1() [0x427e84]\n??:? void tmpt0pp14vh.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            for (int k = j + 1; k < l.length; k++)\n            {\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n            }\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9938g4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpe9938g4u.__unittest_L31_C1() [0x427e84]\n??:? void tmpe9938g4u.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0L)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0L)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    int i, j, k;\n    int n = l.length;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "/tmp/tmpxfra5ve3.d(24): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxfra5ve3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt0pp14vh.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpt0pp14vh.__unittest_L36_C1() [0x427e84]\n??:? void tmpt0pp14vh.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9938g4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpe9938g4u.__unittest_L31_C1() [0x427e84]\n??:? void tmpe9938g4u.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0L) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmu63x1sc.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpmu63x1sc.__unittest_L34_C1() [0x427e84]\n??:? void tmpmu63x1sc.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0L) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkwos4a1t.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpkwos4a1t.__unittest_L31_C1() [0x427e84]\n??:? void tmpkwos4a1t.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprnxgqyey.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmprnxgqyey.__unittest_L37_C1() [0x427e84]\n??:? void tmprnxgqyey.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if(l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if(sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg_mzfj98.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpg_mzfj98.__unittest_L35_C1() [0x427e84]\n??:? void tmpg_mzfj98.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0L) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkwos4a1t.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpkwos4a1t.__unittest_L31_C1() [0x427e84]\n??:? void tmpkwos4a1t.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9938g4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpe9938g4u.__unittest_L31_C1() [0x427e84]\n??:? void tmpe9938g4u.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9938g4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpe9938g4u.__unittest_L31_C1() [0x427e84]\n??:? void tmpe9938g4u.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt0pp14vh.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpt0pp14vh.__unittest_L36_C1() [0x427e84]\n??:? void tmpt0pp14vh.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9938g4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpe9938g4u.__unittest_L31_C1() [0x427e84]\n??:? void tmpe9938g4u.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    int i = 0;\n    int j = 1;\n    int k = 2;\n    while (j < l.length) {\n        if (l[i] + l[j] + l[k] == 0) {\n            return true;\n        }\n        if (l[i] + l[j] + l[k] > 0) {\n            k = j;\n            j = i;\n            i = (i + 1) % l.length;\n        } else {\n            j = (j + 1) % l.length;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "/tmp/tmpc4bltwyz.d(36): Error: cannot implicitly convert expression `cast(ulong)(i + 1) % l.length` of type `ulong` to `int`\n/tmp/tmpc4bltwyz.d(38): Error: cannot implicitly convert expression `cast(ulong)(j + 1) % l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc4bltwyz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    int i, j, k;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            for (k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0L)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0L)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt0pp14vh.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpt0pp14vh.__unittest_L36_C1() [0x427e84]\n??:? void tmpt0pp14vh.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprnxgqyey.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmprnxgqyey.__unittest_L37_C1() [0x427e84]\n??:? void tmprnxgqyey.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp124zp98w.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmp124zp98w.__unittest_L33_C1() [0x427e84]\n??:? void tmp124zp98w.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0L)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0L)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt0pp14vh.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpt0pp14vh.__unittest_L36_C1() [0x427e84]\n??:? void tmpt0pp14vh.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprnxgqyey.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmprnxgqyey.__unittest_L37_C1() [0x427e84]\n??:? void tmprnxgqyey.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0L) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmu63x1sc.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpmu63x1sc.__unittest_L34_C1() [0x427e84]\n??:? void tmpmu63x1sc.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if(l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if(sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg_mzfj98.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpg_mzfj98.__unittest_L35_C1() [0x427e84]\n??:? void tmpg_mzfj98.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9938g4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpe9938g4u.__unittest_L31_C1() [0x427e84]\n??:? void tmpe9938g4u.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    int i = 0;\n    int j = 1;\n    int k = 2;\n    \n    while (j < l.length) {\n        if (l[i] + l[j] + l[k] == 0) {\n            return true;\n        }\n        \n        if (l[i] + l[j] + l[k] > 0) {\n            k = j;\n            j = i;\n            i = (i + 1) % l.length;\n        } else {\n            j = (j + 1) % l.length;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "/tmp/tmpw58djmcf.d(38): Error: cannot implicitly convert expression `cast(ulong)(i + 1) % l.length` of type `ulong` to `int`\n/tmp/tmpw58djmcf.d(40): Error: cannot implicitly convert expression `cast(ulong)(j + 1) % l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw58djmcf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    int i, j, k;\n    int n = l.length;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "/tmp/tmp607cy4d0.d(24): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp607cy4d0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0L)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvhlxalep.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpvhlxalep.__unittest_L37_C1() [0x427e84]\n??:? void tmpvhlxalep.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0L)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqgh7hmxh.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpqgh7hmxh.__unittest_L35_C1() [0x427e84]\n??:? void tmpqgh7hmxh.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    int i, j, k;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            for (k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    int i, j, k;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            for (k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9938g4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpe9938g4u.__unittest_L31_C1() [0x427e84]\n??:? void tmpe9938g4u.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9938g4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpe9938g4u.__unittest_L31_C1() [0x427e84]\n??:? void tmpe9938g4u.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprnxgqyey.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmprnxgqyey.__unittest_L37_C1() [0x427e84]\n??:? void tmprnxgqyey.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9938g4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpe9938g4u.__unittest_L31_C1() [0x427e84]\n??:? void tmpe9938g4u.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt0pp14vh.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpt0pp14vh.__unittest_L36_C1() [0x427e84]\n??:? void tmpt0pp14vh.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0L) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkwos4a1t.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpkwos4a1t.__unittest_L31_C1() [0x427e84]\n??:? void tmpkwos4a1t.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0L) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkwos4a1t.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpkwos4a1t.__unittest_L31_C1() [0x427e84]\n??:? void tmpkwos4a1t.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0L)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqgh7hmxh.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpqgh7hmxh.__unittest_L35_C1() [0x427e84]\n??:? void tmpqgh7hmxh.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9938g4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpe9938g4u.__unittest_L31_C1() [0x427e84]\n??:? void tmpe9938g4u.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "/tmp/tmp9mqadwcl.d(25): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9mqadwcl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    int i, j, k;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            for (k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0L)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqgh7hmxh.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpqgh7hmxh.__unittest_L35_C1() [0x427e84]\n??:? void tmpqgh7hmxh.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    int i, j, k;\n    for (i = 0; i < l.length - 2; i++)\n        for (j = i + 1; j < l.length - 1; j++)\n            for (k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9938g4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpe9938g4u.__unittest_L31_C1() [0x427e84]\n??:? void tmpe9938g4u.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if(l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if(sum == 0)\n        return true;\n    \n    for(int i = 0; i < l.length; i++)\n        for(int j = i + 1; j < l.length; j++)\n            for(int k = j + 1; k < l.length; k++)\n                if(l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9938g4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpe9938g4u.__unittest_L31_C1() [0x427e84]\n??:? void tmpe9938g4u.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return (sum == 0);\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi6ep4whx.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428305]\n??:? void tmpi6ep4whx.__unittest_L30_C1() [0x427e7c]\n??:? void tmpi6ep4whx.__modtest() [0x428088]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c363]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430389]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430838]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430315]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1cd]\n??:? runModuleUnitTests [0x42c139]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return (sum == 0L);\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp82huzjbv.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428305]\n??:? void tmp82huzjbv.__unittest_L30_C1() [0x427e7c]\n??:? void tmp82huzjbv.__modtest() [0x428088]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c363]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430389]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430838]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430315]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1cd]\n??:? runModuleUnitTests [0x42c139]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0L)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeejnp8jl.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpeejnp8jl.__unittest_L36_C1() [0x427e84]\n??:? void tmpeejnp8jl.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp97zl8a8s.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmp97zl8a8s.__unittest_L35_C1() [0x427e84]\n??:? void tmp97zl8a8s.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9938g4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpe9938g4u.__unittest_L31_C1() [0x427e84]\n??:? void tmpe9938g4u.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0L) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkwos4a1t.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpkwos4a1t.__unittest_L31_C1() [0x427e84]\n??:? void tmpkwos4a1t.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprnxgqyey.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmprnxgqyey.__unittest_L37_C1() [0x427e84]\n??:? void tmprnxgqyey.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0L)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0L)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    int i, j, k;\n    for (i = 0; i < l.length - 2; i++) {\n        for (j = i + 1; j < l.length - 1; j++) {\n            for (k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9938g4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpe9938g4u.__unittest_L31_C1() [0x427e84]\n??:? void tmpe9938g4u.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0L)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqgh7hmxh.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpqgh7hmxh.__unittest_L35_C1() [0x427e84]\n??:? void tmpqgh7hmxh.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprnxgqyey.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmprnxgqyey.__unittest_L37_C1() [0x427e84]\n??:? void tmprnxgqyey.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0L)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0L)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprnxgqyey.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmprnxgqyey.__unittest_L37_C1() [0x427e84]\n??:? void tmprnxgqyey.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0L) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkwos4a1t.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpkwos4a1t.__unittest_L31_C1() [0x427e84]\n??:? void tmpkwos4a1t.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpobljru8i.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpobljru8i.__unittest_L34_C1() [0x427e84]\n??:? void tmpobljru8i.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0L) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkwos4a1t.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpkwos4a1t.__unittest_L31_C1() [0x427e84]\n??:? void tmpkwos4a1t.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3) return false;\n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0L) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkwos4a1t.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpkwos4a1t.__unittest_L31_C1() [0x427e84]\n??:? void tmpkwos4a1t.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0L)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqgh7hmxh.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpqgh7hmxh.__unittest_L35_C1() [0x427e84]\n??:? void tmpqgh7hmxh.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt0pp14vh.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpt0pp14vh.__unittest_L36_C1() [0x427e84]\n??:? void tmpt0pp14vh.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            for (int k = j + 1; k < l.length; k++)\n                if (l[i] + l[j] + l[k] == 0)\n                    return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    triples_sum_to_zero takes an array of integers as an input.\n    it returns true if there are three distinct elements in the array that\n    sum to zero, and false otherwise.\n\n    >>> triples_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> triples_sum_to_zero([1L, 3L, -2L, 1L])\n    true\n    >>> triples_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\n    true\n    >>> triples_sum_to_zero([1L])\n    false\n    \n*/\nbool triples_sum_to_zero(long[] l) \n{\n    if (l.length < 3)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxqpjtvz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42830d]\n??:? void tmpxxqpjtvz.__unittest_L35_C1() [0x427e84]\n??:? void tmpxxqpjtvz.__modtest() [0x428090]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430391]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430840]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43031d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d5]\n??:? runModuleUnitTests [0x42c141]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}