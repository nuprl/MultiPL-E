{
  "name": "HumanEval_124_valid_date",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n",
  "tests": "unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmps86wu_mg.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps86wu_mg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    string month_str = date.substr(0,2);\n    string day_str = date.substr(3,2);\n    string year_str = date.substr(6,4);\n    \n    if(month_str == \"00\")\n        return false;\n    \n    if(day_str == \"00\")\n        return false;\n    \n    if(year_str == \"0000\")\n        return false;\n    \n    if(month_str == \"01\")\n    {\n        month = 1;\n        day = atoi(day_str.c_str());\n        year = atoi(year_str.c_str());\n    }\n    else if(month_str == \"02\")\n    {\n        month = 2;\n        day = atoi(day_str.c_str());\n        year = atoi(year_str.c_str());\n    }\n    else if(month_str == \"03\")\n    {\n        month = 3;\n        day = atoi(day_str.c_str());\n        year = atoi(year_str.c_str());\n    }\n    else if(month_str == \"04\")\n    {\n        month = 4;\n        day = atoi(day_str.c_str());\n        year = atoi(year_str.c_str());\n    }\n    else if(month_str == \"05\")\n    {\n        month = 5;\n        day = atoi(day_str.c_str());\n        year = atoi(year_str.c_str());\n    }\n    else if(month_str == \"06\")\n    {\n        month = 6;\n        day = atoi(day_str.c_str());\n        year = atoi(year_str.c_str());\n    }\n    else if(month_str == \"07\")\n    {\n        month = 7;\n        day = atoi(day_str.c_str());\n        year = atoi(\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpj05go7ry.d(91): Error: expression expected, not `unittest`\n/tmp/tmpj05go7ry.d(92): Error: found `{` when expecting `,`\n/tmp/tmpj05go7ry.d(93): Error: expression expected, not `alias`\n/tmp/tmpj05go7ry.d(93): Error: found `candidate` when expecting `,`\n/tmp/tmpj05go7ry.d(93): Error: expression expected, not `=`\n/tmp/tmpj05go7ry.d(93): Error: found `valid_date` when expecting `,`\n/tmp/tmpj05go7ry.d(93): Error: expression expected, not `;`\n/tmp/tmpj05go7ry.d(95): Error: found `assert` when expecting `,`\n/tmp/tmpj05go7ry.d(95): Error: found `;` when expecting `,`\n/tmp/tmpj05go7ry.d(96): Error: found `;` when expecting `,`\n/tmp/tmpj05go7ry.d(97): Error: found `;` when expecting `,`\n/tmp/tmpj05go7ry.d(98): Error: found `;` when expecting `,`\n/tmp/tmpj05go7ry.d(99): Error: found `;` when expecting `,`\n/tmp/tmpj05go7ry.d(100): Error: found `;` when expecting `,`\n/tmp/tmpj05go7ry.d(101): Error: found `;` when expecting `,`\n/tmp/tmpj05go7ry.d(102): Error: found `;` when expecting `,`\n/tmp/tmpj05go7ry.d(103): Err",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while (i < date.length())\n    {\n        if (date[i] == '-')\n        {\n            month = 0;\n            day = 0;\n            year = 0;\n            i++;\n            continue;\n        }\n        \n        if (month == 0)\n        {\n            month = date[i] - '0';\n            i++;\n            continue;\n        }\n        \n        if (day == 0)\n        {\n            day = date[i] - '0';\n            i++;\n            continue;\n        }\n        \n        if (year == 0)\n        {\n            year = date[i] - '0';\n            i++;\n            continue;\n        }\n        \n        if (month < 1 || month > 12)\n            return false;\n        \n        if (day < 1 || day > 31)\n            return false;\n        \n        if (month == 2)\n        {\n            if (day < 1 || day > 29)\n                return false;\n        }\n        \n        if (month == 4 || month == 6 || month == 9 || month == 11)\n        {\n            if (day < 1 || day > 30)\n                return false;\n        }\n        \n        i++;\n    }\n    \n    if (year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpusmdql3o.d(30): Error: no property `length` for type `string`\n/tmp/tmpusmdql3o.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpusmdql3o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int month_count = 0;\n    int day_count = 0;\n    int year_count = 0;\n    \n    for(int i = 0; i < date.length(); i++)\n    {\n        if(date[i] == '-')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                year_count = 0;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n        else if(date[i] >= '0' && date[i] <= '9')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                year_count = 0;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n        else if(date[i] == '/')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                year_count = 0;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n        else if(date[i] == ' ')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpe89cljeq.d(106): Error: found `unittest` when expecting `)`\n/tmp/tmpe89cljeq.d(127): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpe89cljeq.d(127): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpe89cljeq.d(127): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe89cljeq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() != 10)\n        return false;\n    \n    if(date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9')\n        return false;\n    \n    if(date[2] != '0' && date[2] != '1' && date[2] != '2' && date[2] != '3' && date[2] != '4' && date[2] != '5' && date[2] != '6' && date[2] != '7' && date[2] != '8' && date[2] != '9')\n        return false;\n    \n    if(date[5] != '0' && date[5] != '1' && date[5] != '2' && date[5] != '3' && date[5] != '4' && date[5] != '5' && date[5] != '6' && date[5] != '7' && date[5] != '8' && date[5] != '9')\n        return false;\n    \n    if(date[8] != '0' && date[8] != '1' && date[8] != '2' && date[8] != '3' && date[8] != '4' && date[8] != '5' && date[8] != '6' && date[8] != '7' && date[8] != '8' && date[8] != '9')\n        return false;\n    \n    month = date[0] - '0';\n    day = date[2] - '0';\n    year = date[5] - '0';\n    \n    if(month < 1 || month > 12)\n        \nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpvy8izytf.d(58): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvy8izytf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if (date.length() != 10)\n        return false;\n    \n    if (date[0] == '0')\n        return false;\n    \n    if (date[2] != '-')\n        return false;\n    \n    if (date[5] != '-')\n        return false;\n    \n    if (date[8] != '-')\n        return false;\n    \n    if (date[0] < '0' || date[0] > '9')\n        return false;\n    \n    if (date[1] < '0' || date[1] > '9')\n        return false;\n    \n    if (date[3] < '0' || date[3] > '9')\n        return false;\n    \n    if (date[4] < '0' || date[4] > '9')\n        return false;\n    \n    if (date[6] < '0' || date[6] > '9')\n        return false;\n    \n    if (date[7] < '0' || date[7] > '9')\n        return false;\n    \n    if (date[9] < '0' || date[9] > '9')\n        return false;\n    \n    month = date[0] - '0';\n    day = date[1] - '0';\n    year = date[3] - '0';\n    \n    if (month < 1 || month > 12)\n        return false;\n    \n    if (day < 1 || day > 31)\n        return false;\n    \n    if (month == 2 && day > 29)\n        return false;\n    \n    if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day < 1 || day > 30)\n            return false;\n    }\n    \n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if (day\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpr7sfin7m.d(95): Error: found `unittest` when expecting `)`\n/tmp/tmpr7sfin7m.d(116): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpr7sfin7m.d(116): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7sfin7m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int month_count = 0;\n    int day_count = 0;\n    int year_count = 0;\n    \n    for(int i = 0; i < date.length(); i++)\n    {\n        if(date[i] == '-')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                year_count = 0;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n        else if(date[i] >= '0' && date[i] <= '9')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                year_count = 0;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n        else if(date[i] >= 'a' && date[i] <= 'z')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                year_count = 0;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n        else if(date[i] >= 'A' && date[i] <= 'Z')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmp6u68qud1.d(103): Error: found `unittest` when expecting `;` following statement\n/tmp/tmp6u68qud1.d(124): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6u68qud1.d(124): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6u68qud1.d(124): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6u68qud1.d(124): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6u68qud1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int month_len = 0;\n    int day_len = 0;\n    int year_len = 0;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    \n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            month_len = 0;\n            day_len = 0;\n            year_len = 0;\n            \n            while(j < date.length())\n            {\n                if(date[j] == '-')\n                {\n                    month_len++;\n                }\n                else if(date[j] == '/')\n                {\n                    day_len++;\n                }\n                else if(date[j] == ' ')\n                {\n                    year_len++;\n                }\n                else\n                {\n                    break;\n                }\n                j++;\n            }\n            \n            if(month_len == 0 || month_len > 2)\n            {\n                return false;\n            }\n            \n            if(day_len == 0 || day_len > 2)\n            {\n                return false;\n            }\n            \n            if(year_len == 0 || year_len > 4)\n            {\n                return false;\n            }\n            \n            i = j;\n        }\n        else if(date[i] == '/')\n        {\n            month_len = 0;\n            day_len = 0;\n            year_len = 0;\n            \n            while(j < date.length())\n            {\n                if(date[j] == '/')\n                {\n                    month_len++;\n                }\n                else if(date[j] == ' ')\n                {\n                    day_len++;\n                }\n                else if(date[j] == ' ')\n                {\n                    year_len++;\n                }\n                else\n                {\n                    break;\n                }\n                j++;\n            }\n            \n            if(month_len == 0 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmp8qt94ykj.d(119): Error: found `unittest` when expecting `)`\n/tmp/tmp8qt94ykj.d(140): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp8qt94ykj.d(140): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp8qt94ykj.d(140): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8qt94ykj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    if(date.length() != 10)\n        return false;\n    if(date[2] != '-')\n        return false;\n    if(date[5] != '-')\n        return false;\n    if(date[8] != '-')\n        return false;\n    if(date[0] < '0' || date[0] > '9')\n        return false;\n    if(date[1] < '0' || date[1] > '9')\n        return false;\n    if(date[3] < '0' || date[3] > '9')\n        return false;\n    if(date[4] < '0' || date[4] > '9')\n        return false;\n    if(date[6] < '0' || date[6] > '9')\n        return false;\n    if(date[7] < '0' || date[7] > '9')\n        return false;\n    if(date[9] < '0' || date[9] > '9')\n        return false;\n    if(date[10] < '0' || date[10] > '9')\n        return false;\n    if(date[11] < '0' || date[11] > '9')\n        return false;\n    if(date[1] > '2')\n        return false;\n    if(date[3] > '5')\n        return false;\n    if(date[5] > '9')\n        return false;\n    if(date[7] > '9')\n        return false;\n    if(date[9] > '9')\n        return false;\n    if(date[11] > '9')\n        return false;\n    if(date[2] > '9')\n        return false;\n    if(date[5] > '9')\n        return false;\n    if(date[8] > '9')\n        return false;\n    if(date[10] > '9')\n        return false;\n    if(date[12] > '9')\n        return false;\n    if(date[2\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmp7i9gxnj6.d(81): Error: found `unittest` when expecting `,`\n/tmp/tmp7i9gxnj6.d(102): Error: found `void` when expecting `,`\n/tmp/tmp7i9gxnj6.d(102): Error: found `{` when expecting `,`\n/tmp/tmp7i9gxnj6.d(102): Error: expression expected, not `}`\n/tmp/tmp7i9gxnj6.d(102): Error: found `End of File` when expecting `,`\n/tmp/tmp7i9gxnj6.d(102): Error: found `End of File` when expecting `]`\n/tmp/tmp7i9gxnj6.d(102): Error: found `End of File` when expecting `)`\n/tmp/tmp7i9gxnj6.d(102): Error: found `End of File` instead of statement\n/tmp/tmp7i9gxnj6.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7i9gxnj6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    if(date.length() < 10)\n        return false;\n    \n    if(date.length() > 10)\n        return false;\n    \n    if(date.length() == 10)\n    {\n        if(date.substr(4,2) != \"0\")\n            return false;\n    }\n    \n    if(date.length() == 11)\n    {\n        if(date.substr(6,2) != \"0\")\n            return false;\n    }\n    \n    if(date.length() == 12)\n    {\n        if(date.substr(8,2) != \"0\")\n            return false;\n    }\n    \n    if(date.length() == 13)\n    {\n        if(date.substr(10,2) != \"0\")\n            return false;\n    }\n    \n    if(date.length() == 14)\n    {\n        if(date.substr(0,2) != \"0\")\n            return false;\n    }\n    \n    if(date.length() == 15)\n    {\n        if(date.substr(2,2) != \"0\")\n            return false;\n    }\n    \n    if(date.length() == 16)\n    {\n        if(date.substr(4,2) != \"0\")\n            return false;\n    }\n    \n    if(date.length() == 17)\n    {\n        if(date.substr(6,2) != \"0\")\n            return false;\n    }\n    \n    if(date.length() == 18)\n    {\n        if(date.substr(8,2) != \"0\")\n            return false;\n    }\n    \n    if(date.length() == 19)\n    {\n        if(date.substr(10,2) != \"0\")\n            return false;\n    }\n    \n    if(date.length() == 20)\n    {\n        if(date.substr(12,2) != \"0\")\n            return false;\n    }\n    \n    if(date.\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpdtap2y3h.d(106): Error: identifier expected following `.`, not `unittest`\n/tmp/tmpdtap2y3h.d(107): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdtap2y3h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() < 8)\n        return false;\n    \n    if(date.length() > 8)\n        return false;\n    \n    if(date.length() == 8)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 1)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 3)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 5)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 6)\n    {\n        if(day < 1 || day > 30)\n            return false;\n\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmp9l93q340.d(109): Error: found `unittest` instead of statement\n/tmp/tmp9l93q340.d(130): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9l93q340.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmp47v2ixfq.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47v2ixfq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp32oao0ed.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp32oao0ed.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 30)\n            return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 29)\n            return false;\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpf76nrcea.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf76nrcea.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 2000 || year > 2040)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmprya6u40m.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprya6u40m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    string month_str = date.substr(0,2);\n    string day_str = date.substr(3,2);\n    string year_str = date.substr(6,4);\n    \n    if(month_str == \"0\")\n        month = 0;\n    else\n        month = stoi(month_str);\n    \n    if(day_str == \"0\")\n        day = 0;\n    else\n        day = stoi(day_str);\n    \n    if(year_str == \"0\")\n        year = 0;\n    else\n        year = stoi(year_str);\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day < 1 || month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 31)\n            return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 30)\n            return false;\n    \n    if(month == 2)\n        if(day < 1 || day > 29)\n            return false;\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpy_lq9pd7.d(30): Error: no property `length` for type `string`\n/tmp/tmpy_lq9pd7.d(37): Error: no property `substr` for type `string`\n/tmp/tmpy_lq9pd7.d(38): Error: no property `substr` for type `string`\n/tmp/tmpy_lq9pd7.d(39): Error: no property `substr` for type `string`\n/tmp/tmpy_lq9pd7.d(44): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpy_lq9pd7.d(49): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpy_lq9pd7.d(54): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_lq9pd7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    if(date.length() < 8)\n        return false;\n    if(date.length() > 10)\n        return false;\n    if(date[2] == '-')\n    {\n        if(date[5] == '-')\n        {\n            if(date[8] == '-')\n            {\n                if(date[0] < '0' || date[0] > '9')\n                    return false;\n                if(date[1] < '0' || date[1] > '9')\n                    return false;\n                if(date[3] < '0' || date[3] > '9')\n                    return false;\n                if(date[4] < '0' || date[4] > '9')\n                    return false;\n                if(date[6] < '0' || date[6] > '9')\n                    return false;\n                if(date[7] < '0' || date[7] > '9')\n                    return false;\n                if(date[9] < '0' || date[9] > '9')\n                    return false;\n                if(date[10] < '0' || date[10] > '9')\n                    return false;\n                if(date[11] < '0' || date[11] > '9')\n                    return false;\n                if(date[12] != '-')\n                    return false;\n                if(date[14] != '-')\n                    return false;\n                if(date[15] != '-')\n                    return false;\n                if(date[17] != '-')\n                    return false;\n                if(date[18] != '-')\n                    return false;\n                if(date[19] != '-')\n                    return false;\n                if(date[20] != '-')\n                    return false;\n                if(date[21] != '-')\n                    return false;\n                if(date[22] != '-')\n                    return false;\n                if(date[23] != '-')\n                    return false;\n                if(date[24] != '-')\n                    \nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpshzcoqn3.d(82): Error: found `unittest` instead of statement\n/tmp/tmpshzcoqn3.d(103): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpshzcoqn3.d(103): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpshzcoqn3.d(103): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpshzcoqn3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() != 10)\n        return false;\n    \n    if(date[2] != '-')\n        return false;\n    \n    if(date[5] != '-')\n        return false;\n    \n    if(date[8] != '-')\n        return false;\n    \n    if(date[0] > '9' || date[0] < '0')\n        return false;\n    \n    if(date[1] > '9' || date[1] < '0')\n        return false;\n    \n    if(date[3] > '9' || date[3] < '0')\n        return false;\n    \n    if(date[4] > '9' || date[4] < '0')\n        return false;\n    \n    if(date[6] > '9' || date[6] < '0')\n        return false;\n    \n    if(date[7] > '9' || date[7] < '0')\n        return false;\n    \n    month = date[0] - '0';\n    day = date[1] - '0';\n    year = date[3] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 30)\n            return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 29)\n            return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpx5mdflxa.d(30): Error: no property `length` for type `string`\n/tmp/tmpx5mdflxa.d(37): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx5mdflxa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.empty())\n        return false;\n    \n    int month = stoi(date.substr(0,2));\n    int day = stoi(date.substr(3,2));\n    int year = stoi(date.substr(6,4));\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp_rplosvr.d(30): Error: no property `empty` for type `string`\n/tmp/tmp_rplosvr.d(33): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp_rplosvr.d(34): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp_rplosvr.d(35): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_rplosvr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            if(month == 0)\n            {\n                month = 1;\n            }\n            else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n            {\n                if(day > 31)\n                    return false;\n            }\n            else if(month == 4 || month == 6 || month == 9 || month == 11)\n            {\n                if(day > 30)\n                    return false;\n            }\n            else if(month == 2)\n            {\n                if(day > 29)\n                    return false;\n            }\n            else\n                return false;\n            \n            day = 0;\n            i++;\n        }\n        else if(date[i] >= '0' && date[i] <= '9')\n        {\n            day = day * 10 + date[i] - '0';\n            i++;\n        }\n        else\n            return false;\n    }\n    \n    if(month == 0)\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day > 30)\n            return false;\n    }\n    \n    year = year * 10 + day / 10;\n    year = year * 10 + day % 10;\n    \n    if(year < 1000 || year\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpqfzg1_0u.d(107): Error: found `unittest` when expecting `)`\n/tmp/tmpqfzg1_0u.d(128): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqfzg1_0u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 30)\n            return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 29)\n            return false;\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpmnum6kxp.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmnum6kxp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            if(month == 0)\n            {\n                month = 1;\n                i++;\n            }\n            else\n                return false;\n        }\n        else if(date[i] == '/')\n        {\n            if(day == 0)\n            {\n                day = 1;\n                i++;\n            }\n            else\n                return false;\n        }\n        else if(date[i] == ' ')\n        {\n            i++;\n        }\n        else if(date[i] >= '0' && date[i] <= '9')\n        {\n            if(month == 0)\n            {\n                month = date[i] - '0';\n                i++;\n            }\n            else if(day == 0)\n            {\n                day = date[i] - '0';\n                i++;\n            }\n            else if(year == 0)\n            {\n                year = date[i] - '0';\n                i++;\n            }\n            else\n                return false;\n        }\n        else\n            return false;\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 0 || year > 9999)\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmp5dhnfz9t.d(113): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dhnfz9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() != 10)\n        return false;\n    \n    if(date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9')\n        return false;\n    \n    if(date[2] != '0' && date[2] != '1' && date[2] != '2' && date[2] != '3' && date[2] != '4' && date[2] != '5' && date[2] != '6' && date[2] != '7' && date[2] != '8' && date[2] != '9')\n        return false;\n    \n    if(date[5] != '0' && date[5] != '1' && date[5] != '2' && date[5] != '3' && date[5] != '4' && date[5] != '5' && date[5] != '6' && date[5] != '7' && date[5] != '8' && date[5] != '9')\n        return false;\n    \n    if(date[8] != '0' && date[8] != '1' && date[8] != '2' && date[8] != '3' && date[8] != '4' && date[8] != '5' && date[8] != '6' && date[8] != '7' && date[8] != '8' && date[8] != '9')\n        return false;\n    \n    month = date[0] - '0';\n    day = date[2] - '0';\n    year = date[5] - '0';\n    \n    if(month < 1 || month > 12)\n        \nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpvy8izytf.d(58): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvy8izytf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int month_len = date.length() - date.find_first_of(\"-\") - 1;\n    int day_len = date.length() - date.find_first_of(\"-\") - 1;\n    int year_len = date.length() - date.find_first_of(\"-\") - 1;\n    \n    if(month_len < 1 || month_len > 3)\n        return false;\n    \n    if(day_len < 1 || day_len > 2)\n        return false;\n    \n    if(year_len < 4 || year_len > 6)\n        return false;\n    \n    if(date.find_first_of(\"-\") == -1)\n        return false;\n    \n    if(date.find_first_of(\"-\") == date.length() - 1)\n        return false;\n    \n    if(date.find_first_of(\"-\") == date.length() - 2)\n        return false;\n    \n    if(date.find_first_of(\"-\") == date.length() - 3)\n        return false;\n    \n    if(date.find_first_of(\"-\") == date.length() - 4)\n        return false;\n    \n    if(date.find_first_of(\"-\") == date.length() - 5)\n        return false;\n    \n    if(date.find_first_of(\"-\") == date.length() - 6)\n        return false;\n    \n    if(date.find_first_of(\"-\") == date.length() - 7)\n        return false;\n    \n    if(date.find_first_of(\"-\") == date.length() - 8)\n        return false;\n    \n    if(date.find_first_of(\"-\") == date.length() - 9)\n        return false;\n    \n    if(date.find_first_of(\"-\") == date.length() - 10)\n        return false;\n    \n    if(date.find_first\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpazvt4k2p.d(84): Error: found `unittest` when expecting `)`\n/tmp/tmpazvt4k2p.d(105): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpazvt4k2p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,2));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpetatu04k.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmpetatu04k.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpetatu04k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            if(i == 0)\n                return false;\n            else if(i == 1)\n                month = stoi(date.substr(0, i));\n            else if(i == 2)\n                day = stoi(date.substr(i+1, date.length() - i));\n            else if(i == 3)\n                year = stoi(date.substr(i+1, date.length() - i));\n            else\n                return false;\n        }\n        else\n            return false;\n        i++;\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmprtopjf3d.d(30): Error: no property `length` for type `string`\n/tmp/tmprtopjf3d.d(38): Error: no property `length` for type `string`\n/tmp/tmprtopjf3d.d(45): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmprtopjf3d.d(47): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmprtopjf3d.d(49): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprtopjf3d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpigxrdae8.d(30): Error: no property `length` for type `string`\n/tmp/tmpigxrdae8.d(37): Error: no property `length` for type `string`\n/tmp/tmpigxrdae8.d(39): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpigxrdae8.d(40): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpigxrdae8.d(41): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpigxrdae8.d(43): Error: no property `length` for type `string`\n/tmp/tmpigxrdae8.d(45): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpigxrdae8.d(46): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpigxrdae8.d(47): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpigxrdae8.d(49): Error: no property `length` for type `string`\n/tmp/tmpigxrdae8.d(51): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpigxrdae8.d(52): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpigxrdae8.d(53): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpigxrdae8.d(55): Error: no property `length` for type `string`\n/tmp/tmpigxrdae8.d(57): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpigxrdae8.d(58): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpigxrdae8.d(59): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpigxrdae8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpt7973l4n.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt7973l4n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpecqfh7gg.d(89): Error: found `unittest` when expecting `(`\n/tmp/tmpecqfh7gg.d(110): Error: found `void` when expecting `)`\n/tmp/tmpecqfh7gg.d(110): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecqfh7gg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            month = atoi(date.substr(0, i).c_str());\n            day = atoi(date.substr(i+1, date.length()-i-1).c_str());\n            year = atoi(date.substr(date.length()-4, date.length()).c_str());\n            break;\n        }\n        i++;\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n    {\n        if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n            return false;\n    }\n    \n    if(day < 1 || day > 30)\n    {\n        if(month == 4 || month == 6 || month == 9 || month == 11)\n            return false;\n    }\n    \n    if(day < 1 || day > 29)\n    {\n        if(month == 2)\n            return false;\n    }\n    \n    if(year < 1 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpw2c97ilh.d(30): Error: no property `length` for type `string`\n/tmp/tmpw2c97ilh.d(38): Error: no property `length` for type `string`\n/tmp/tmpw2c97ilh.d(42): Error: undefined identifier `atoi`, did you mean function `atan`?\n/tmp/tmpw2c97ilh.d(43): Error: undefined identifier `atoi`, did you mean function `atan`?\n/tmp/tmpw2c97ilh.d(44): Error: undefined identifier `atoi`, did you mean function `atan`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2c97ilh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() < 10)\n        return false;\n    \n    if(date.length() > 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp_826zbno.d(30): Error: no property `length` for type `string`\n/tmp/tmp_826zbno.d(37): Error: no property `length` for type `string`\n/tmp/tmp_826zbno.d(40): Error: no property `length` for type `string`\n/tmp/tmp_826zbno.d(42): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp_826zbno.d(43): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp_826zbno.d(44): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_826zbno.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    for(; i < date.length(); i++)\n    {\n        if(date[i] == '-')\n        {\n            if(i == 0)\n                return false;\n            if(i == 1)\n                month = 0;\n            else if(i == 2)\n                day = 0;\n            else if(i == 4)\n                year = 0;\n            else\n                return false;\n        }\n        else if(date[i] < '0' || date[i] > '9')\n            return false;\n        else\n        {\n            if(month == 0)\n                month = date[i] - '0';\n            else if(day == 0)\n                day = date[i] - '0';\n            else if(year == 0)\n                year = date[i] - '0';\n            else\n                return false;\n        }\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day > 31)\n        return false;\n    if(month == 2 && day > 29)\n        return false;\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 31)\n            return false;\n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 30)\n            return false;\n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp72f4x4kv.d(30): Error: no property `length` for type `string`\n/tmp/tmp72f4x4kv.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72f4x4kv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() != 10)\n        return false;\n    \n    if(date[0] == '0' && date[1] == '0')\n        return false;\n    \n    if(date[2] != '-')\n        return false;\n    \n    if(date[5] != '-')\n        return false;\n    \n    if(date[8] != '-')\n        return false;\n    \n    if(date[0] > '9' || date[1] > '9')\n        return false;\n    \n    if(date[2] > '9' || date[3] > '9')\n        return false;\n    \n    if(date[5] > '9' || date[6] > '9')\n        return false;\n    \n    if(date[8] > '9' || date[9] > '9')\n        return false;\n    \n    month = stoi(date.substr(0,2));\n    day = stoi(date.substr(3,2));\n    year = stoi(date.substr(6,4));\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 30)\n            return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 29)\n            return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmptrzdo8xz.d(30): Error: no property `length` for type `string`\n/tmp/tmptrzdo8xz.d(37): Error: no property `length` for type `string`\n/tmp/tmptrzdo8xz.d(64): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmptrzdo8xz.d(65): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmptrzdo8xz.d(66): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptrzdo8xz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    else if(month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpkzs6w4_d.d(87): Error: found `unittest` when expecting `)`\n/tmp/tmpkzs6w4_d.d(108): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkzs6w4_d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() != 10)\n        return false;\n    \n    if(date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9')\n        return false;\n    \n    if(date[2] != '0' && date[2] != '1' && date[2] != '2' && date[2] != '3' && date[2] != '4' && date[2] != '5' && date[2] != '6' && date[2] != '7' && date[2] != '8' && date[2] != '9')\n        return false;\n    \n    if(date[5] != '0' && date[5] != '1' && date[5] != '2' && date[5] != '3' && date[5] != '4' && date[5] != '5' && date[5] != '6' && date[5] != '7' && date[5] != '8' && date[5] != '9')\n        return false;\n    \n    if(date[8] != '0' && date[8] != '1' && date[8] != '2' && date[8] != '3' && date[8] != '4' && date[8] != '5' && date[8] != '6' && date[8] != '7' && date[8] != '8' && date[8] != '9')\n        return false;\n    \n    month = date[0] - '0';\n    day = date[2] - '0';\n    year = date[5] - '0';\n    \n    if(month < 1 || month > 12)\n        \nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpvy8izytf.d(58): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvy8izytf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    string month_str = date.substr(0,2);\n    string day_str = date.substr(3,2);\n    string year_str = date.substr(6,4);\n    \n    if(month_str.length() != 2)\n        return false;\n    \n    if(day_str.length() != 2)\n        return false;\n    \n    if(year_str.length() != 4)\n        return false;\n    \n    month = stoi(month_str);\n    day = stoi(day_str);\n    year = stoi(year_str);\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 30)\n            return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 29)\n            return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp36gc0gi7.d(30): Error: no property `length` for type `string`\n/tmp/tmp36gc0gi7.d(37): Error: no property `substr` for type `string`\n/tmp/tmp36gc0gi7.d(38): Error: no property `substr` for type `string`\n/tmp/tmp36gc0gi7.d(39): Error: no property `substr` for type `string`\n/tmp/tmp36gc0gi7.d(41): Error: no property `length` for type `string`\n/tmp/tmp36gc0gi7.d(44): Error: no property `length` for type `string`\n/tmp/tmp36gc0gi7.d(47): Error: no property `length` for type `string`\n/tmp/tmp36gc0gi7.d(50): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp36gc0gi7.d(51): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp36gc0gi7.d(52): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp36gc0gi7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() != 10)\n        return false;\n    \n    if(date[2] != '-')\n        return false;\n    \n    if(date[5] != '-')\n        return false;\n    \n    if(date[8] != '-')\n        return false;\n    \n    if(date[0] < '0' || date[0] > '9')\n        return false;\n    \n    if(date[1] < '0' || date[1] > '9')\n        return false;\n    \n    if(date[3] < '0' || date[3] > '9')\n        return false;\n    \n    if(date[4] < '0' || date[4] > '9')\n        return false;\n    \n    if(date[6] < '0' || date[6] > '9')\n        return false;\n    \n    if(date[7] < '0' || date[7] > '9')\n        return false;\n    \n    month = date[0] - '0';\n    day = date[1] - '0';\n    year = date[3] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpr2uovqb9.d(30): Error: no property `length` for type `string`\n/tmp/tmpr2uovqb9.d(37): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr2uovqb9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            month = i + 1;\n            while(i < date.length() && date[i] != '-')\n                i++;\n            i++;\n            day = i;\n            while(i < date.length() && date[i] != '-')\n                i++;\n            i++;\n            year = i;\n            while(i < date.length() && date[i] != '-')\n                i++;\n            i++;\n        }\n        else\n            return false;\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp2irjntrr.d(30): Error: no property `length` for type `string`\n/tmp/tmp2irjntrr.d(38): Error: no property `length` for type `string`\n/tmp/tmp2irjntrr.d(43): Error: no property `length` for type `string`\n/tmp/tmp2irjntrr.d(47): Error: no property `length` for type `string`\n/tmp/tmp2irjntrr.d(51): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2irjntrr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n    {\n        if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n            return false;\n    }\n    \n    if(day < 1 || day > 30)\n    {\n        if(month == 4 || month == 6 || month == 9 || month == 11)\n            return false;\n    }\n    \n    if(day < 1 || day > 29)\n    {\n        if(month == 2)\n            return false;\n    }\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp95wqggq4.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp95wqggq4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            if(i == 0 || i == date.length() - 1)\n                return false;\n            \n            if(month == 0)\n            {\n                month = 1;\n                i++;\n            }\n            else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n            {\n                if(day == 0)\n                {\n                    day = 1;\n                    i++;\n                }\n                else if(day == 1 || day == 30 || day == 29 || day == 31)\n                {\n                    i++;\n                }\n                else\n                    return false;\n            }\n            else if(month == 4 || month == 6 || month == 9 || month == 11)\n            {\n                if(day == 0)\n                {\n                    day = 1;\n                    i++;\n                }\n                else if(day == 1 || day == 30)\n                {\n                    i++;\n                }\n                else\n                    return false;\n            }\n            else if(month == 2)\n            {\n                if(day == 0)\n                {\n                    day = 1;\n                    i++;\n                }\n                else if(day == 1 || day == 29)\n                {\n                    i++;\n                }\n                else\n                    return false;\n            }\n            else\n                return false;\n        }\n        else if(date[i] >= '0' && date[i] <= '9')\n        {\n            if(month == 0)\n            {\n                month = date[i] - '0';\n                i++;\n            }\n            else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n            {\n                if(day == 0)\n                {\n                    day = date[i] - '0';\n                    i++;\n                }\n\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp4w02aagc.d(110): Error: found `unittest` instead of statement\n/tmp/tmp4w02aagc.d(131): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp4w02aagc.d(131): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp4w02aagc.d(131): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4w02aagc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() != 10)\n        return false;\n    \n    month = stoi(date.substr(0,2));\n    day = stoi(date.substr(3,2));\n    year = stoi(date.substr(6,4));\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 30)\n            return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 29)\n            return false;\n    \n    if(month == 2)\n        if(day < 1 || day > 28)\n            return false;\n    \n    if(year < 1900 || year > 2100)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmptmdmh3ei.d(30): Error: no property `length` for type `string`\n/tmp/tmptmdmh3ei.d(37): Error: no property `length` for type `string`\n/tmp/tmptmdmh3ei.d(40): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmptmdmh3ei.d(41): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmptmdmh3ei.d(42): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmdmh3ei.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() != 10)\n        return false;\n    \n    if(date[0] < '0' || date[0] > '9')\n        return false;\n    \n    if(date[2] < '0' || date[2] > '9')\n        return false;\n    \n    if(date[5] < '0' || date[5] > '9')\n        return false;\n    \n    if(date[8] < '0' || date[8] > '9')\n        return false;\n    \n    if(date[1] != '0' && date[1] != '1' && date[1] != '2' && date[1] != '3' && date[1] != '4' && date[1] != '5' && date[1] != '6' && date[1] != '7' && date[1] != '8' && date[1] != '9')\n        return false;\n    \n    if(date[3] != '0' && date[3] != '1' && date[3] != '2' && date[3] != '3' && date[3] != '4' && date[3] != '5' && date[3] != '6' && date[3] != '7' && date[3] != '8' && date[3] != '9')\n        return false;\n    \n    if(date[4] != '0' && date[4] != '1' && date[4] != '2' && date[4] != '3' && date[4] != '4' && date[4] != '5' && date[4] != '6' && date[4] != '7' && date[4] != '8' && date[4] != '9')\n        return false;\n    \n    if(date[6] != '0' && date[6] != '1' && date[6] != '2' && date[6] != '3' &&\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpq37m0okp.d(62): Error: expression expected, not `unittest`\n/tmp/tmpq37m0okp.d(63): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq37m0okp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    string month_str = date.substr(0,2);\n    string day_str = date.substr(3,2);\n    string year_str = date.substr(6,4);\n    \n    if(month_str == \"00\")\n        return false;\n    \n    month = stoi(month_str);\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day_str == \"00\")\n        return false;\n    \n    day = stoi(day_str);\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    year = stoi(year_str);\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp31hq1l8l.d(30): Error: no property `length` for type `string`\n/tmp/tmp31hq1l8l.d(37): Error: no property `substr` for type `string`\n/tmp/tmp31hq1l8l.d(38): Error: no property `substr` for type `string`\n/tmp/tmp31hq1l8l.d(39): Error: no property `substr` for type `string`\n/tmp/tmp31hq1l8l.d(44): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp31hq1l8l.d(52): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp31hq1l8l.d(75): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp31hq1l8l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() < 10)\n        return false;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 19)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 0)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpx7xnrfqo.d(30): Error: no property `length` for type `string`\n/tmp/tmpx7xnrfqo.d(37): Error: no property `length` for type `string`\n/tmp/tmpx7xnrfqo.d(40): Error: no property `length` for type `string`\n/tmp/tmpx7xnrfqo.d(42): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpx7xnrfqo.d(43): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpx7xnrfqo.d(44): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpx7xnrfqo.d(46): Error: no property `length` for type `string`\n/tmp/tmpx7xnrfqo.d(48): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpx7xnrfqo.d(49): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpx7xnrfqo.d(50): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7xnrfqo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,2));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpetatu04k.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmpetatu04k.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpetatu04k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length() == 0)\n        return false;\n    if (date.length() != 10)\n        return false;\n    if (date[2] != '-')\n        return false;\n    if (date[5] != '-')\n        return false;\n    if (date[8] != '-')\n        return false;\n    if (date[0] < '0' || date[0] > '9')\n        return false;\n    if (date[1] < '0' || date[1] > '9')\n        return false;\n    if (date[3] < '0' || date[3] > '9')\n        return false;\n    if (date[4] < '0' || date[4] > '9')\n        return false;\n    if (date[6] < '0' || date[6] > '9')\n        return false;\n    if (date[7] < '0' || date[7] > '9')\n        return false;\n    if (date[9] < '0' || date[9] > '9')\n        return false;\n    if (date[10] < '0' || date[10] > '9')\n        return false;\n    if (date[11] < '0' || date[11] > '9')\n        return false;\n    if (date[12] != '0')\n        return false;\n    if (date[13] != '0')\n        return false;\n    if (date[14] != '0')\n        return false;\n    if (date[15] != '0')\n        return false;\n    if (date[16] != '0')\n        return false;\n    if (date[17] != '0')\n        return false;\n    if (date[18] != '0')\n        return false;\n    if (date[19] != '0')\n        return false;\n    if (date[20] != '0')\n        return false;\n    if (date[21] != '0')\n        return false;\n    if (date[22] != '0')\n        return false;\n    if (date[23\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpc3e_stt_.d(81): Error: found `unittest` when expecting `,`\n/tmp/tmpc3e_stt_.d(102): Error: found `void` when expecting `,`\n/tmp/tmpc3e_stt_.d(102): Error: found `{` when expecting `,`\n/tmp/tmpc3e_stt_.d(102): Error: expression expected, not `}`\n/tmp/tmpc3e_stt_.d(102): Error: found `End of File` when expecting `,`\n/tmp/tmpc3e_stt_.d(102): Error: found `End of File` when expecting `]`\n/tmp/tmpc3e_stt_.d(102): Error: found `End of File` when expecting `)`\n/tmp/tmpc3e_stt_.d(102): Error: found `End of File` instead of statement\n/tmp/tmpc3e_stt_.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc3e_stt_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpa8w9a60b.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa8w9a60b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp6ryd52wo.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ryd52wo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() < 8)\n        return false;\n    \n    if(date.length() > 10)\n        return false;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpkx1unbfx.d(30): Error: no property `length` for type `string`\n/tmp/tmpkx1unbfx.d(37): Error: no property `length` for type `string`\n/tmp/tmpkx1unbfx.d(40): Error: no property `length` for type `string`\n/tmp/tmpkx1unbfx.d(43): Error: no property `length` for type `string`\n/tmp/tmpkx1unbfx.d(45): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpkx1unbfx.d(46): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpkx1unbfx.d(47): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkx1unbfx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date.substr(0,2).toInt();\n    int day = date.substr(3,2).toInt();\n    int year = date.substr(6,4).toInt();\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 2000 || year > 2020)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp_zg0nnfk.d(30): Error: no property `length` for type `string`\n/tmp/tmp_zg0nnfk.d(33): Error: no property `substr` for type `string`\n/tmp/tmp_zg0nnfk.d(34): Error: no property `substr` for type `string`\n/tmp/tmp_zg0nnfk.d(35): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_zg0nnfk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp6ryd52wo.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ryd52wo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpnrlt0xs0.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrlt0xs0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 2000 || year > 2040)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpsw16fwhu.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsw16fwhu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    string month_str = date.substr(0,2);\n    string day_str = date.substr(3,2);\n    string year_str = date.substr(6,4);\n    \n    if(month_str == \"00\")\n        return false;\n    \n    if(month_str == \"01\")\n        month = 1;\n    else if(month_str == \"02\")\n        month = 2;\n    else if(month_str == \"03\")\n        month = 3;\n    else if(month_str == \"04\")\n        month = 4;\n    else if(month_str == \"05\")\n        month = 5;\n    else if(month_str == \"06\")\n        month = 6;\n    else if(month_str == \"07\")\n        month = 7;\n    else if(month_str == \"08\")\n        month = 8;\n    else if(month_str == \"09\")\n        month = 9;\n    else if(month_str == \"10\")\n        month = 10;\n    else if(month_str == \"11\")\n        month = 11;\n    else if(month_str == \"12\")\n        month = 12;\n    \n    if(day_str == \"00\")\n        return false;\n    \n    if(day_str == \"01\")\n        day = 1;\n    else if(day_str == \"02\")\n        day = 2;\n    else if(day_str == \"03\")\n        day = 3;\n    else if(day_str == \"04\")\n        day = 4;\n    else if(day_str == \"05\")\n        day = 5;\n    else if(day_str == \"06\")\n        day = 6;\n    else if(day_str == \"07\")\n        day = 7;\n    else if(day_str == \"08\")\n        day = 8;\n    else if(day_str == \"09\")\n        day = 9;\n    else if(day\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp9uexzj0p.d(91): Error: found `unittest` when expecting `)`\n/tmp/tmp9uexzj0p.d(112): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9uexzj0p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while (i < date.length())\n    {\n        if (date[i] == '-')\n        {\n            if (month != 0)\n                return false;\n            month = 0;\n            day = 0;\n            year = 0;\n            i++;\n        }\n        else if (date[i] >= '0' && date[i] <= '9')\n        {\n            if (month == 0)\n                month = date[i] - '0';\n            else if (day == 0)\n                day = date[i] - '0';\n            else if (year == 0)\n                year = date[i] - '0';\n            else\n                return false;\n            i++;\n        }\n        else\n            return false;\n    }\n    \n    if (month == 0)\n        return false;\n    \n    if (month < 1 || month > 12)\n        return false;\n    \n    if (day < 1 || day > 31)\n        return false;\n    \n    if (month == 2 && day > 29)\n        return false;\n    \n    if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day < 1 || day > 30)\n            return false;\n    }\n    \n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if (day < 1 || day > 31)\n            return false;\n    }\n    \n    if (year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpid8ub59c.d(30): Error: no property `length` for type `string`\n/tmp/tmpid8ub59c.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpid8ub59c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int month_index = date.find(\"-\");\n    int day_index = date.find(\"-\", month_index + 1);\n    int year_index = date.find(\"-\", day_index + 1);\n    \n    if(month_index == -1 || day_index == -1 || year_index == -1)\n        return false;\n    \n    month = stoi(date.substr(0, month_index));\n    day = stoi(date.substr(month_index + 1, day_index - month_index - 1));\n    year = stoi(date.substr(day_index + 1, year_index - day_index - 1));\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpo1517v0t.d(30): Error: no property `length` for type `string`\n/tmp/tmpo1517v0t.d(37): Error: no property `find` for type `string`\n/tmp/tmpo1517v0t.d(38): Error: no property `find` for type `string`\n/tmp/tmpo1517v0t.d(39): Error: no property `find` for type `string`\n/tmp/tmpo1517v0t.d(44): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpo1517v0t.d(45): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpo1517v0t.d(46): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo1517v0t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while (i < date.length())\n    {\n        if (date[i] == '-')\n        {\n            if (month != 0)\n                return false;\n            month = 0;\n            day = 0;\n            year = 0;\n            i++;\n        }\n        else if (date[i] >= '0' && date[i] <= '9')\n        {\n            if (month == 0)\n                month = date[i] - '0';\n            else if (day == 0)\n                day = date[i] - '0';\n            else if (year == 0)\n                year = date[i] - '0';\n            else\n                return false;\n            i++;\n        }\n        else\n            return false;\n    }\n    \n    if (month == 0)\n        return false;\n    \n    if (month < 1 || month > 12)\n        return false;\n    \n    if (day < 1 || day > 31)\n    {\n        if (month == 2)\n        {\n            if (day < 1 || day > 29)\n                return false;\n        }\n        else if (month == 4 || month == 6 || month == 9 || month == 11)\n        {\n            if (day < 1 || day > 30)\n                return false;\n        }\n        else\n            return false;\n    }\n    \n    if (year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp2gg4xwyr.d(30): Error: no property `length` for type `string`\n/tmp/tmp2gg4xwyr.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gg4xwyr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(1,2));\n        year = stoi(date.substr(2,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpfy8b12ko.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmpfy8b12ko.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfy8b12ko.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int month_count = 0;\n    int day_count = 0;\n    int year_count = 0;\n    \n    for(int i = 0; i < date.length(); i++)\n    {\n        if(date[i] == '-')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                year_count = 0;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n        else if(date[i] >= '0' && date[i] <= '9')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                year_count = 0;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n        else if(date[i] == '/')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                year_count = 0;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n        else if(date[i] == ' ')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpe89cljeq.d(106): Error: found `unittest` when expecting `)`\n/tmp/tmpe89cljeq.d(127): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpe89cljeq.d(127): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpe89cljeq.d(127): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe89cljeq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            if(month == 0)\n            {\n                month = 1;\n            }\n            else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n            {\n                if(day == 0)\n                {\n                    day = 1;\n                }\n                else if(day == 1 || day == 2 || day == 3 || day == 4 || day == 5 || day == 6 || day == 7 || day == 8 || day == 9 || day == 10 || day == 11 || day == 12 || day == 13 || day == 14 || day == 15 || day == 16 || day == 17 || day == 18 || day == 19 || day == 20 || day == 21 || day == 22 || day == 23 || day == 24 || day == 25 || day == 26 || day == 27 || day == 28 || day == 29 || day == 30 || day == 31)\n                {\n                    if(year == 0)\n                    {\n                        year = 1;\n                    }\n                    else if(year == 1 || year == 2 || year == 3 || year == 4 || year == 5 || year == 6 || year == 7 || year == 8 || year == 9 || year == 10 || year == 11 || year == 12)\n                    {\n                        return true;\n                    }\n                }\n            }\n            else if(month == 4 || month == 6 || month == 9 || month == 11)\n            {\n                if(day == 0)\n                {\n                    day = 1;\n                }\n                else if(day == 1 || day == 2 || day == 3 || day == 4 || day == 5 || day == 6 || day == 7 || day == 8 || day == 9 || day == 10 || day == 11 || day == 12 || day == 13 || day == 14 || day == 15 || day == 16 || day == 17 || day == 18 || day == 19 || day == 20 || day == 21 || day == 22 ||\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpimt6otxs.d(71): Error: expression expected, not `unittest`\n/tmp/tmpimt6otxs.d(72): Error: found `{` when expecting `)`\n/tmp/tmpimt6otxs.d(92): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpimt6otxs.d(92): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpimt6otxs.d(92): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpimt6otxs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if (month < 1 || month > 12)\n        return false;\n    \n    if (day < 1 || day > 31)\n        return false;\n    \n    if (month == 2)\n    {\n        if (day < 1 || day > 29)\n            return false;\n    }\n    \n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if (day < 1 || day > 30)\n            return false;\n    }\n    \n    if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day < 1 || day > 30)\n            return false;\n    }\n    \n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if (day < 1 || day > 31)\n            return false;\n    }\n    \n    if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day < 1 || day > 30)\n            return false;\n    }\n    \n    if (month == 2)\n    {\n        if (day < 1 || day > 29)\n            return false;\n    }\n    \n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if (day < 1 || day > 30)\n            return false;\n    }\n    \n    if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day < 1 || day > 30)\n            return false;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmprdaje2kr.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprdaje2kr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpecqfh7gg.d(89): Error: found `unittest` when expecting `(`\n/tmp/tmpecqfh7gg.d(110): Error: found `void` when expecting `)`\n/tmp/tmpecqfh7gg.d(110): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecqfh7gg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(1,2));\n        year = stoi(date.substr(2,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpfy8b12ko.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmpfy8b12ko.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfy8b12ko.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(year < 2000 || year > 2020)\n            return false;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmppf2mnndt.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppf2mnndt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date.substr(0,2).toInt();\n    int day = date.substr(3,2).toInt();\n    int year = date.substr(6,4).toInt();\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 2000 || year > 2040)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp2pa65cko.d(30): Error: no property `length` for type `string`\n/tmp/tmp2pa65cko.d(33): Error: no property `substr` for type `string`\n/tmp/tmp2pa65cko.d(34): Error: no property `substr` for type `string`\n/tmp/tmp2pa65cko.d(35): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2pa65cko.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmputxyzhf7.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmputxyzhf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() < 10)\n        return false;\n    \n    if(date.length() > 10)\n        return false;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpmjbyngxw.d(30): Error: no property `length` for type `string`\n/tmp/tmpmjbyngxw.d(37): Error: no property `length` for type `string`\n/tmp/tmpmjbyngxw.d(40): Error: no property `length` for type `string`\n/tmp/tmpmjbyngxw.d(43): Error: no property `length` for type `string`\n/tmp/tmpmjbyngxw.d(45): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpmjbyngxw.d(46): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpmjbyngxw.d(47): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmjbyngxw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    string month_str = date.substr(0,2);\n    string day_str = date.substr(3,2);\n    string year_str = date.substr(6,4);\n    \n    if(month_str == \"0\")\n        month = 0;\n    else\n        month = stoi(month_str);\n    \n    if(day_str == \"0\")\n        day = 0;\n    else\n        day = stoi(day_str);\n    \n    if(year_str == \"0\")\n        year = 0;\n    else\n        year = stoi(year_str);\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpncr8fc9y.d(30): Error: no property `length` for type `string`\n/tmp/tmpncr8fc9y.d(37): Error: no property `substr` for type `string`\n/tmp/tmpncr8fc9y.d(38): Error: no property `substr` for type `string`\n/tmp/tmpncr8fc9y.d(39): Error: no property `substr` for type `string`\n/tmp/tmpncr8fc9y.d(44): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpncr8fc9y.d(49): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpncr8fc9y.d(54): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpncr8fc9y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() != 10)\n        return false;\n    \n    if(date[0] == '0')\n        return false;\n    \n    if(date[2] == '-')\n        return false;\n    \n    if(date[4] == '-')\n        return false;\n    \n    if(date[6] == '-')\n        return false;\n    \n    if(date[8] == '-')\n        return false;\n    \n    if(date[0] < '0' || date[0] > '9')\n        return false;\n    \n    if(date[1] < '0' || date[1] > '9')\n        return false;\n    \n    if(date[3] < '0' || date[3] > '9')\n        return false;\n    \n    if(date[5] < '0' || date[5] > '9')\n        return false;\n    \n    if(date[7] < '0' || date[7] > '9')\n        return false;\n    \n    if(date[9] < '0' || date[9] > '9')\n        return false;\n    \n    month = date[0] - '0';\n    day = date[1] - '0';\n    year = date[3] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 31)\n            return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 30)\n            return false;\n    \n    if(\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp93n1dltq.d(95): Error: expression expected, not `unittest`\n/tmp/tmp93n1dltq.d(96): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp93n1dltq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() < 8)\n        return false;\n    \n    if(date.length() > 10)\n        return false;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(4,4));\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmptuo4av1m.d(30): Error: no property `length` for type `string`\n/tmp/tmptuo4av1m.d(37): Error: no property `length` for type `string`\n/tmp/tmptuo4av1m.d(40): Error: no property `length` for type `string`\n/tmp/tmptuo4av1m.d(43): Error: no property `length` for type `string`\n/tmp/tmptuo4av1m.d(45): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmptuo4av1m.d(46): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmptuo4av1m.d(47): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmptuo4av1m.d(51): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmptuo4av1m.d(52): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmptuo4av1m.d(53): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptuo4av1m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int month_count = 0;\n    int day_count = 0;\n    int year_count = 0;\n    \n    for(int i = 0; i < date.length(); i++)\n    {\n        if(date[i] == '-')\n        {\n            if(month_count == 0)\n            {\n                month_count++;\n                continue;\n            }\n            else if(day_count == 0)\n            {\n                day_count++;\n                continue;\n            }\n            else if(year_count == 0)\n            {\n                year_count++;\n                continue;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        \n        if(month_count == 0)\n        {\n            if(date[i] < '0' || date[i] > '9')\n                return false;\n            else\n                month = month * 10 + date[i] - '0';\n        }\n        else if(day_count == 0)\n        {\n            if(date[i] < '0' || date[i] > '9')\n                return false;\n            else\n                day = day * 10 + date[i] - '0';\n        }\n        else if(year_count == 0)\n        {\n            if(date[i] < '0' || date[i] > '9')\n                return false;\n            else\n                year = year * 10 + date[i] - '0';\n        }\n        else\n        {\n            return false;\n        }\n    }\n    \n    if(month_count != 3)\n        return false;\n    \n    if(day_count != 2)\n        return false;\n    \n    if(year_count != 4)\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        \nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp7y4cfrr7.d(110): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7y4cfrr7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date.substr(0,2).toInt();\n    int day = date.substr(3,2).toInt();\n    int year = date.substr(6,4).toInt();\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp9rj5crs3.d(30): Error: no property `length` for type `string`\n/tmp/tmp9rj5crs3.d(33): Error: no property `substr` for type `string`\n/tmp/tmp9rj5crs3.d(34): Error: no property `substr` for type `string`\n/tmp/tmp9rj5crs3.d(35): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9rj5crs3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpv5d7ebpo.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmpv5d7ebpo.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5d7ebpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,2));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpetatu04k.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmpetatu04k.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpetatu04k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if (date.length() == 10)\n    {\n        month = stoi(date.substr(0, 2));\n        day = stoi(date.substr(3, 2));\n        year = stoi(date.substr(6, 4));\n    }\n    else if (date.length() == 7)\n    {\n        month = stoi(date.substr(0, 2));\n        day = stoi(date.substr(3, 2));\n        year = stoi(date.substr(5, 4));\n    }\n    else if (date.length() == 6)\n    {\n        month = stoi(date.substr(0, 2));\n        day = stoi(date.substr(3, 2));\n        year = stoi(date.substr(4, 4));\n    }\n    else if (date.length() == 4)\n    {\n        month = stoi(date.substr(0, 2));\n        day = stoi(date.substr(2, 2));\n        year = stoi(date.substr(3, 4));\n    }\n    else if (date.length() == 2)\n    {\n        month = stoi(date.substr(0, 1));\n        day = stoi(date.substr(1, 1));\n        year = stoi(date.substr(2, 2));\n    }\n    else\n        return false;\n    \n    if (month < 1 || month > 12)\n        return false;\n    \n    if (day < 1 || day > 31)\n        return false;\n    \n    if (month == 2 && day > 29)\n        return false;\n    \n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if (day < 1 || day > 31)\n            return false;\n    }\n    \n    if (month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp6sj6licm.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmp6sj6licm.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6sj6licm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    if(date.length() != 10)\n        return false;\n    if(date[2] != '-')\n        return false;\n    if(date[5] != '-')\n        return false;\n    if(date[8] != '-')\n        return false;\n    if(date[0] < '0' || date[0] > '9')\n        return false;\n    if(date[1] < '0' || date[1] > '9')\n        return false;\n    if(date[3] < '0' || date[3] > '9')\n        return false;\n    if(date[4] < '0' || date[4] > '9')\n        return false;\n    if(date[6] < '0' || date[6] > '9')\n        return false;\n    if(date[7] < '0' || date[7] > '9')\n        return false;\n    if(date[9] < '0' || date[9] > '9')\n        return false;\n    if(date[10] < '0' || date[10] > '9')\n        return false;\n    if(date[2] > '9' || date[5] > '9' || date[8] > '9' || date[0] > '9' || date[1] > '9' || date[3] > '9' || date[4] > '9' || date[6] > '9' || date[7] > '9' || date[9] > '9' || date[10] > '9')\n        return false;\n    if(date[0] > '2' || date[1] > '2')\n        return false;\n    if(date[3] > '5' || date[4] > '5' || date[6] > '5' || date[7] > '5' || date[9] > '5')\n        return false;\n    if(date[1] > '9' || date[4] > '9' || date[6] > '9' || date[7\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpyafy3dvm.d(63): Error: found `unittest` when expecting `,`\n/tmp/tmpyafy3dvm.d(84): Error: found `void` when expecting `,`\n/tmp/tmpyafy3dvm.d(84): Error: found `{` when expecting `,`\n/tmp/tmpyafy3dvm.d(84): Error: expression expected, not `}`\n/tmp/tmpyafy3dvm.d(84): Error: found `End of File` when expecting `,`\n/tmp/tmpyafy3dvm.d(84): Error: found `End of File` when expecting `]`\n/tmp/tmpyafy3dvm.d(84): Error: found `End of File` when expecting `)`\n/tmp/tmpyafy3dvm.d(84): Error: found `End of File` instead of statement\n/tmp/tmpyafy3dvm.d(84): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyafy3dvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length() == 0) return false;\n    if (date.length() < 10) return false;\n    if (date.length() > 10) return false;\n    if (date.length() == 10)\n    {\n        if (date[2] != '-') return false;\n        if (date[5] != '-') return false;\n        if (date[8] != '-') return false;\n    }\n    if (date[0] < '0' || date[0] > '9') return false;\n    if (date[1] < '0' || date[1] > '9') return false;\n    if (date[2] < '0' || date[2] > '9') return false;\n    if (date[3] < '0' || date[3] > '9') return false;\n    if (date[4] < '0' || date[4] > '9') return false;\n    if (date[5] < '0' || date[5] > '9') return false;\n    if (date[6] < '0' || date[6] > '9') return false;\n    if (date[7] < '0' || date[7] > '9') return false;\n    if (date[8] < '0' || date[8] > '9') return false;\n    if (date[9] < '0' || date[9] > '9') return false;\n    if (date[10] < '0' || date[10] > '9') return false;\n    if (date[11] < '0' || date[11] > '9') return false;\n    if (date[12] < '0' || date[12] > '9') return false;\n    if (date[13] < '0' || date[13] > '9') return false;\n    if (date[14] < '0' || date[14] > '9') return false;\n    if (date[15] < '0' || date[15] > '9') return false;\n    if (date[16] < '0' || date[16] > '9') return false\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpktap2d5t.d(56): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmpktap2d5t.d(77): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpktap2d5t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,2));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpetatu04k.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmpetatu04k.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpetatu04k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() < 10)\n        return false;\n    \n    if(date.length() > 10)\n        return false;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 1900 || year > 2100)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpxe_d8g2o.d(30): Error: no property `length` for type `string`\n/tmp/tmpxe_d8g2o.d(37): Error: no property `length` for type `string`\n/tmp/tmpxe_d8g2o.d(40): Error: no property `length` for type `string`\n/tmp/tmpxe_d8g2o.d(43): Error: no property `length` for type `string`\n/tmp/tmpxe_d8g2o.d(45): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpxe_d8g2o.d(46): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpxe_d8g2o.d(47): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxe_d8g2o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    if(date.length() < 8)\n        return false;\n    if(date.length() > 10)\n        return false;\n    if(date.length() == 10)\n    {\n        if(date[4] != '-' || date[7] != '-')\n            return false;\n    }\n    if(date.length() == 8)\n    {\n        if(date[2] != '-' || date[5] != '-')\n            return false;\n    }\n    if(date.length() == 6)\n    {\n        if(date[1] != '-' || date[4] != '-')\n            return false;\n    }\n    if(date.length() == 4)\n    {\n        if(date[0] != '-' || date[3] != '-')\n            return false;\n    }\n    if(date.length() == 2)\n    {\n        if(date[0] != '-' || date[1] != '-')\n            return false;\n    }\n    if(date.length() == 1)\n    {\n        if(date[0] != '-')\n            return false;\n    }\n    if(date[0] < '0' || date[0] > '9')\n        return false;\n    if(date[1] < '0' || date[1] > '9')\n        return false;\n    if(date[2] < '0' || date[2] > '9')\n        return false;\n    if(date[3] < '0' || date[3] > '9')\n        return false;\n    if(date[4] < '0' || date[4] > '9')\n        return false;\n    if(date[5] < '0' || date[5] > '9')\n        return false;\n    if(date[6] < '0' || date[6] > '9')\n        return false;\n    if(date[7] < '0' || date[7] > '9')\n        return false;\n    if(date[8] < '0\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpdset90a5.d(82): Error: unterminated character constant\n/tmp/tmpdset90a5.d(83): Error: found `unittest` when expecting `)`\n/tmp/tmpdset90a5.d(104): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdset90a5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    string month_str = date.substr(0,2);\n    string day_str = date.substr(3,2);\n    string year_str = date.substr(6,4);\n    \n    if(month_str == \"0\")\n        month = 0;\n    else\n        month = stoi(month_str);\n    \n    if(day_str == \"0\")\n        day = 0;\n    else\n        day = stoi(day_str);\n    \n    if(year_str == \"0\")\n        year = 0;\n    else\n        year = stoi(year_str);\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 30)\n            return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 29)\n            return false;\n    \n    if(month == 2)\n        if(day < 1 || day > 28)\n            return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp3mykj_n5.d(30): Error: no property `length` for type `string`\n/tmp/tmp3mykj_n5.d(37): Error: no property `substr` for type `string`\n/tmp/tmp3mykj_n5.d(38): Error: no property `substr` for type `string`\n/tmp/tmp3mykj_n5.d(39): Error: no property `substr` for type `string`\n/tmp/tmp3mykj_n5.d(44): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp3mykj_n5.d(49): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp3mykj_n5.d(54): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3mykj_n5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpjrbxy7l2.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjrbxy7l2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpdmz9wrlv.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdmz9wrlv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() != 10)\n        return false;\n    \n    if(date[2] == '-')\n    {\n        month = stoi(date.substr(0, 2));\n        day = stoi(date.substr(3, 2));\n        year = stoi(date.substr(6, 4));\n    }\n    else\n    {\n        month = stoi(date.substr(0, 2));\n        day = stoi(date.substr(3, 2));\n        year = stoi(date.substr(6, 4));\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 28)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpdix0q3n3.d(30): Error: no property `length` for type `string`\n/tmp/tmpdix0q3n3.d(37): Error: no property `length` for type `string`\n/tmp/tmpdix0q3n3.d(42): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpdix0q3n3.d(43): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpdix0q3n3.d(44): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpdix0q3n3.d(48): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpdix0q3n3.d(49): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpdix0q3n3.d(50): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdix0q3n3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.empty())\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int month_len = date.length() - date.find_first_of('-') - 1;\n    int day_len = date.length() - date.find_first_of('-') - 1;\n    int year_len = date.length() - date.find_first_of('-') - 1;\n    \n    if(month_len == 2)\n    {\n        month = date[0] - '0';\n        day = date[2] - '0';\n        year = date[4] - '0';\n    }\n    else if(month_len == 4)\n    {\n        month = date[0] - '0';\n        day = date[2] - '0';\n        year = date[4] - '0';\n    }\n    else if(month_len == 6)\n    {\n        month = date[0] - '0';\n        day = date[2] - '0';\n        year = date[4] - '0';\n    }\n    else if(month_len == 8)\n    {\n        month = date[0] - '0';\n        day = date[2] - '0';\n        year = date[4] - '0';\n    }\n    else if(month_len == 10)\n    {\n        month = date[0] - '0';\n        day = date[2] - '0';\n        year = date[4] - '0';\n    }\n    else if(month_len == 12)\n    {\n        month = date[0] - '0';\n        day = date[2] - '0';\n        year = date[4] - '0';\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpmfm4tk4q.d(91): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfm4tk4q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() < 10)\n        return false;\n    \n    if(date.length() > 10)\n        return false;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpmjbyngxw.d(30): Error: no property `length` for type `string`\n/tmp/tmpmjbyngxw.d(37): Error: no property `length` for type `string`\n/tmp/tmpmjbyngxw.d(40): Error: no property `length` for type `string`\n/tmp/tmpmjbyngxw.d(43): Error: no property `length` for type `string`\n/tmp/tmpmjbyngxw.d(45): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpmjbyngxw.d(46): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpmjbyngxw.d(47): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmjbyngxw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() != 10)\n        return false;\n    \n    if(date[0] == '0')\n        return false;\n    \n    if(date[2] == '-')\n        return false;\n    \n    if(date[5] == '-')\n        return false;\n    \n    if(date[8] == '-')\n        return false;\n    \n    if(date[0] < '0' || date[0] > '9')\n        return false;\n    \n    if(date[2] < '0' || date[2] > '9')\n        return false;\n    \n    if(date[5] < '0' || date[5] > '9')\n        return false;\n    \n    if(date[8] < '0' || date[8] > '9')\n        return false;\n    \n    if(date[0] > '9')\n        return false;\n    \n    if(date[2] > '9')\n        return false;\n    \n    if(date[5] > '9')\n        return false;\n    \n    if(date[8] > '9')\n        return false;\n    \n    month = date[0] - '0';\n    day = date[2] - '0';\n    year = date[5] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 30)\n            return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 31)\n            return false;\n    \n    if\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp3gd557yj.d(98): Error: found `unittest` when expecting `(`\n/tmp/tmp3gd557yj.d(119): Error: found `void` when expecting `)`\n/tmp/tmp3gd557yj.d(119): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3gd557yj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            month = 0;\n            day = 0;\n            year = 0;\n            i++;\n            continue;\n        }\n        \n        if(month == 0)\n        {\n            month = date[i] - '0';\n            i++;\n            continue;\n        }\n        \n        if(day == 0)\n        {\n            day = date[i] - '0';\n            i++;\n            continue;\n        }\n        \n        if(year == 0)\n        {\n            year = date[i] - '0';\n            i++;\n            continue;\n        }\n        \n        if(month < 1 || month > 12)\n            return false;\n        \n        if(day < 1 || day > 31)\n            return false;\n        \n        if(month == 2)\n        {\n            if(day < 1 || day > 29)\n                return false;\n        }\n        \n        if(month == 4 || month == 6 || month == 9 || month == 11)\n        {\n            if(day < 1 || day > 30)\n                return false;\n        }\n        \n        i++;\n    }\n    \n    if(year < 1900 || year > 2100)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpoiye3ozi.d(30): Error: no property `length` for type `string`\n/tmp/tmpoiye3ozi.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoiye3ozi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int month_len = date.length();\n    int day_len = date.length();\n    int year_len = date.length();\n    \n    if(date[0] == '0' && date[1] == '0')\n    {\n        month = stoi(date.substr(2, month_len - 2));\n        day = stoi(date.substr(4, day_len - 4));\n        year = stoi(date.substr(6, year_len - 6));\n    }\n    else\n    {\n        month = stoi(date.substr(0, month_len));\n        day = stoi(date.substr(3, day_len - 3));\n        year = stoi(date.substr(6, year_len - 6));\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(year < 1 || year > 9999)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(year < 1 || year > 9999)\n            return false;\n    }\n    \n    \nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp5gqqd30p.d(91): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5gqqd30p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            month = 0;\n            day = 0;\n            year = 0;\n            i++;\n            continue;\n        }\n        \n        if(month == 0)\n        {\n            month = date[i] - '0';\n            i++;\n            continue;\n        }\n        \n        if(day == 0)\n        {\n            day = date[i] - '0';\n            i++;\n            continue;\n        }\n        \n        if(year == 0)\n        {\n            year = date[i] - '0';\n            i++;\n            continue;\n        }\n        \n        if(month < 1 || month > 12)\n            return false;\n        \n        if(day < 1 || day > 31)\n            return false;\n        \n        if(month == 2 && day > 29)\n            return false;\n        \n        if(month == 4 || month == 6 || month == 9 || month == 11)\n        {\n            if(day < 1 || day > 30)\n                return false;\n        }\n        \n        if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        {\n            if(day < 1 || day > 31)\n                return false;\n        }\n        \n        i++;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpkzol3pu_.d(30): Error: no property `length` for type `string`\n/tmp/tmpkzol3pu_.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkzol3pu_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 30)\n            return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 29)\n            return false;\n    \n    if(month == 2)\n        if(day < 1 || day > 28)\n            return false;\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpvf5pjapd.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvf5pjapd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    else if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpygn0qza4.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpygn0qza4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    string month_str = date.substr(0,2);\n    string day_str = date.substr(3,2);\n    string year_str = date.substr(6,4);\n    \n    if(month_str.length() != 2)\n        return false;\n    \n    if(day_str.length() != 2)\n        return false;\n    \n    if(year_str.length() != 4)\n        return false;\n    \n    month = stoi(month_str);\n    day = stoi(day_str);\n    year = stoi(year_str);\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpobcwjz94.d(30): Error: no property `length` for type `string`\n/tmp/tmpobcwjz94.d(37): Error: no property `substr` for type `string`\n/tmp/tmpobcwjz94.d(38): Error: no property `substr` for type `string`\n/tmp/tmpobcwjz94.d(39): Error: no property `substr` for type `string`\n/tmp/tmpobcwjz94.d(41): Error: no property `length` for type `string`\n/tmp/tmpobcwjz94.d(44): Error: no property `length` for type `string`\n/tmp/tmpobcwjz94.d(47): Error: no property `length` for type `string`\n/tmp/tmpobcwjz94.d(50): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpobcwjz94.d(51): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpobcwjz94.d(52): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpobcwjz94.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int month_len = date.length() - date.find_first_of(\"-\") - 1;\n    \n    if(month_len == 2)\n    {\n        month = stoi(date.substr(0, 2));\n        day = stoi(date.substr(date.find_first_of(\"-\") + 1, 2));\n        year = stoi(date.substr(date.find_first_of(\"-\") + 3, 4));\n    }\n    else if(month_len == 4)\n    {\n        month = stoi(date.substr(0, 2));\n        day = stoi(date.substr(date.find_first_of(\"-\") + 1, 2));\n        year = stoi(date.substr(date.find_first_of(\"-\") + 3, 4));\n    }\n    else if(month_len == 6)\n    {\n        month = stoi(date.substr(0, 2));\n        day = stoi(date.substr(date.find_first_of(\"-\") + 1, 2));\n        year = stoi(date.substr(date.find_first_of(\"-\") + 3, 4));\n    }\n    else if(month_len == 8)\n    {\n        month = stoi(date.substr(0, 2));\n        day = stoi(date.substr(date.find_first_of(\"-\") + 1, 2));\n        year = stoi(date.substr(date.find_first_of(\"-\") + 3, 4));\n    }\n    else if(month_len == 10)\n    {\n        month = stoi(date.substr(0, 2));\n        day = stoi(date.substr(date.find_first_of(\"-\") + 1, 2));\n        year = stoi(date.substr(date.find_first_of(\"-\") + 3, 4));\n    }\n    else if(month_len ==\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpp0zy_xjb.d(70): Error: expression expected, not `unittest`\n/tmp/tmpp0zy_xjb.d(71): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0zy_xjb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n    {\n        if(month == 2)\n        {\n            if(day < 1 || day > 29)\n                return false;\n        }\n        else if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 2000 || year > 2040)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp22shdvve.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp22shdvve.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    string month_str = date.substr(0,2);\n    string day_str = date.substr(3,2);\n    string year_str = date.substr(6,4);\n    \n    if(month_str == \"00\")\n        return false;\n    \n    if(month_str == \"01\")\n        month = 1;\n    else if(month_str == \"02\")\n        month = 2;\n    else if(month_str == \"03\")\n        month = 3;\n    else if(month_str == \"04\")\n        month = 4;\n    else if(month_str == \"05\")\n        month = 5;\n    else if(month_str == \"06\")\n        month = 6;\n    else if(month_str == \"07\")\n        month = 7;\n    else if(month_str == \"08\")\n        month = 8;\n    else if(month_str == \"09\")\n        month = 9;\n    else if(month_str == \"10\")\n        month = 10;\n    else if(month_str == \"11\")\n        month = 11;\n    else if(month_str == \"12\")\n        month = 12;\n    else\n        return false;\n    \n    if(day_str == \"00\")\n        return false;\n    \n    if(day_str == \"01\")\n        day = 1;\n    else if(day_str == \"02\")\n        day = 2;\n    else if(day_str == \"03\")\n        day = 3;\n    else if(day_str == \"04\")\n        day = 4;\n    else if(day_str == \"05\")\n        day = 5;\n    else if(day_str == \"06\")\n        day = 6;\n    else if(day_str == \"07\")\n        day = 7;\n    else if(day_str == \"08\")\n        day = 8;\n    else if(day_str == \"09\")\n        day =\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpca9uwufu.d(92): Error: expression expected, not `unittest`\n/tmp/tmpca9uwufu.d(93): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpca9uwufu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    string month_str = date.substr(0,2);\n    string day_str = date.substr(3,2);\n    string year_str = date.substr(6,4);\n    \n    if (month_str.length() != 2)\n        return false;\n    if (day_str.length() != 2)\n        return false;\n    if (year_str.length() != 4)\n        return false;\n    \n    month = stoi(month_str);\n    day = stoi(day_str);\n    year = stoi(year_str);\n    \n    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n        return false;\n    if (month == 2 && day > 29)\n        return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if (day < 1 || day > 30)\n            return false;\n    if (month == 4 || month == 6 || month == 9 || month == 11)\n        if (day < 1 || day > 29)\n            return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp9c4ci742.d(30): Error: no property `length` for type `string`\n/tmp/tmp9c4ci742.d(37): Error: no property `substr` for type `string`\n/tmp/tmp9c4ci742.d(38): Error: no property `substr` for type `string`\n/tmp/tmp9c4ci742.d(39): Error: no property `substr` for type `string`\n/tmp/tmp9c4ci742.d(41): Error: no property `length` for type `string`\n/tmp/tmp9c4ci742.d(43): Error: no property `length` for type `string`\n/tmp/tmp9c4ci742.d(45): Error: no property `length` for type `string`\n/tmp/tmp9c4ci742.d(48): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp9c4ci742.d(49): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp9c4ci742.d(50): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9c4ci742.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    else if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpy1197ozo.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy1197ozo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    int j = 0;\n    \n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            j = i + 1;\n            while(j < date.length() && date[j] >= '0' && date[j] <= '9')\n            {\n                month = month * 10 + date[j] - '0';\n                j++;\n            }\n            if(month < 1 || month > 12)\n                return false;\n            \n            if(date[j] == '-')\n            {\n                j = j + 1;\n                while(j < date.length() && date[j] >= '0' && date[j] <= '9')\n                {\n                    day = day * 10 + date[j] - '0';\n                    j++;\n                }\n                if(day < 1 || day > 31)\n                    return false;\n                \n                if(date[j] == '-')\n                {\n                    j = j + 1;\n                    while(j < date.length() && date[j] >= '0' && date[j] <= '9')\n                    {\n                        year = year * 10 + date[j] - '0';\n                        j++;\n                    }\n                    if(year < 1 || year > 31)\n                        return false;\n                    \n                    if(date[j] == '-')\n                    {\n                        j = j + 1;\n                        while(j < date.length() && date[j] >= '0' && date[j] <= '9')\n                        {\n                            j++;\n                        }\n                        if(j < date.length())\n                            return false;\n                        \n                        if(date[j] == '-')\n                        {\n                            j = j + 1;\n                            while(j < date.length() && date[j] >= '0' && date[j] <= '9')\n                            {\n                                j++;\n                            }\n                            if(j < date.length())\n                                return false\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpapqoqqsv.d(94): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmpapqoqqsv.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpapqoqqsv.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpapqoqqsv.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpapqoqqsv.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpapqoqqsv.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpapqoqqsv.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpapqoqqsv.d(115): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapqoqqsv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpv5d7ebpo.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmpv5d7ebpo.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5d7ebpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 2000 || year > 2040)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmprya6u40m.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprya6u40m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp6ryd52wo.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ryd52wo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    for(i = 0; i < date.length(); i++)\n    {\n        if(date[i] == '-')\n        {\n            if(i == 0 || i == date.length() - 1)\n                return false;\n            \n            if(date[i - 1] == '0')\n                return false;\n            \n            if(date[i + 1] == '0')\n                return false;\n            \n            if(date[i - 1] == '-')\n                return false;\n            \n            if(date[i + 1] == '-')\n                return false;\n            \n            if(date[i - 1] == '/')\n                return false;\n            \n            if(date[i + 1] == '/')\n                return false;\n            \n            if(date[i - 1] == ' ')\n                return false;\n            \n            if(date[i + 1] == ' ')\n                return false;\n            \n            if(date[i - 1] == ':')\n                return false;\n            \n            if(date[i + 1] == ':')\n                return false;\n            \n            if(date[i - 1] == '.')\n                return false;\n            \n            if(date[i + 1] == '.')\n                return false;\n            \n            if(date[i - 1] == ',')\n                return false;\n            \n            if(date[i + 1] == ',')\n                return false;\n            \n            if(date[i - 1] == ' ')\n                return false;\n            \n            if(date[i + 1] == ' ')\n                return false;\n            \n            if(date[i - 1] == '0')\n                return false;\n            \n            if(date[i + 1] == '0')\n                return false;\n            \n            if(date[i - 1] == '1')\n                return false;\n            \n            if(date[i +\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpjz741364.d(103): Error: expression expected, not `unittest`\n/tmp/tmpjz741364.d(104): Error: found `{` when expecting `,`\n/tmp/tmpjz741364.d(105): Error: expression expected, not `alias`\n/tmp/tmpjz741364.d(105): Error: found `candidate` when expecting `,`\n/tmp/tmpjz741364.d(105): Error: expression expected, not `=`\n/tmp/tmpjz741364.d(105): Error: found `valid_date` when expecting `,`\n/tmp/tmpjz741364.d(105): Error: expression expected, not `;`\n/tmp/tmpjz741364.d(107): Error: found `assert` when expecting `,`\n/tmp/tmpjz741364.d(107): Error: found `;` when expecting `,`\n/tmp/tmpjz741364.d(108): Error: found `;` when expecting `,`\n/tmp/tmpjz741364.d(109): Error: found `;` when expecting `,`\n/tmp/tmpjz741364.d(110): Error: found `;` when expecting `,`\n/tmp/tmpjz741364.d(111): Error: found `;` when expecting `,`\n/tmp/tmpjz741364.d(112): Error: found `;` when expecting `,`\n/tmp/tmpjz741364.d(113): Error: found `;` when expecting `,`\n/tmp/tmpjz741364.d(114): Error: found `;` when expecting `,`\n/tmp/tmpjz74136",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmppib7s1t1.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppib7s1t1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            month = 0;\n            day = 0;\n            year = 0;\n            i++;\n            continue;\n        }\n        \n        if(month == 0)\n        {\n            if(date[i] >= '0' && date[i] <= '9')\n            {\n                month = date[i] - '0';\n                i++;\n                continue;\n            }\n            else\n                return false;\n        }\n        \n        if(day == 0)\n        {\n            if(date[i] >= '0' && date[i] <= '9')\n            {\n                day = date[i] - '0';\n                i++;\n                continue;\n            }\n            else\n                return false;\n        }\n        \n        if(year == 0)\n        {\n            if(date[i] >= '0' && date[i] <= '9')\n            {\n                year = date[i] - '0';\n                i++;\n                continue;\n            }\n            else\n                return false;\n        }\n        \n        if(date[i] >= '0' && date[i] <= '9')\n        {\n            i++;\n            continue;\n        }\n        else\n            return false;\n    }\n    \n    if(month > 12 || month < 1)\n        return false;\n    \n    if(day > 31 || day < 1)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day > 29 || day < 1)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day > 31 || day < 1)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpv3wiv946.d(113): Error: found `unittest` when expecting `)`\n/tmp/tmpv3wiv946.d(134): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv3wiv946.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            if(i == 0 || i == date.length() - 1)\n                return false;\n            if(month == 0)\n            {\n                month = date[i + 1] - '0';\n                if(month < 1 || month > 12)\n                    return false;\n                i = i + 2;\n            }\n            else if(day == 0)\n            {\n                day = date[i + 1] - '0';\n                if(day < 1 || day > 31)\n                    return false;\n                i = i + 2;\n            }\n            else if(year == 0)\n            {\n                year = date[i + 1] - '0';\n                if(year < 0 || year > 9999)\n                    return false;\n                i = i + 2;\n            }\n            else\n                return false;\n        }\n        else if(date[i] == '/')\n        {\n            if(i == 0 || i == date.length() - 1)\n                return false;\n            if(month == 0)\n            {\n                month = date[i + 1] - '0';\n                if(month < 1 || month > 12)\n                    return false;\n                i = i + 2;\n            }\n            else if(day == 0)\n            {\n                day = date[i + 1] - '0';\n                if(day < 1 || day > 30)\n                    return false;\n                i = i + 2;\n            }\n            else if(year == 0)\n            {\n                year = date[i + 1] - '0';\n                if(year < 0 || year > 9999)\n                    return false;\n                i = i + 2;\n            }\n            else\n                return false;\n        }\n        else if(date[i] == ' ')\n        {\n            if(i == 0 || i == date.length()\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp4ah_7f23.d(99): Error: found `unittest` when expecting `)`\n/tmp/tmp4ah_7f23.d(120): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp4ah_7f23.d(120): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp4ah_7f23.d(120): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ah_7f23.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int month_count = 0;\n    int day_count = 0;\n    int year_count = 0;\n    \n    for(int i = 0; i < date.length(); i++)\n    {\n        if(date[i] == '-')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                year_count = 0;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n        else if(date[i] >= '0' && date[i] <= '9')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                year_count = 0;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n        else if(date[i] >= 'a' && date[i] <= 'z')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                year_count = 0;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n        else if(date[i] >= 'A' && date[i] <= 'Z')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmp6u68qud1.d(103): Error: found `unittest` when expecting `;` following statement\n/tmp/tmp6u68qud1.d(124): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6u68qud1.d(124): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6u68qud1.d(124): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6u68qud1.d(124): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6u68qud1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while (i < date.length())\n    {\n        if (date[i] == '-')\n        {\n            if (month == 0)\n            {\n                month = 1;\n            }\n            else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n            {\n                if (day > 31)\n                    return false;\n            }\n            else if (month == 4 || month == 6 || month == 9 || month == 11)\n            {\n                if (day > 30)\n                    return false;\n            }\n            else if (month == 2)\n            {\n                if (day > 29)\n                    return false;\n            }\n            day = 0;\n        }\n        else if (date[i] >= '0' && date[i] <= '9')\n        {\n            day = day * 10 + date[i] - '0';\n        }\n        else\n        {\n            return false;\n        }\n        i++;\n    }\n    \n    if (month == 0)\n        return false;\n    else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if (day < 1 || day > 31)\n            return false;\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day < 1 || day > 30)\n            return false;\n    }\n    else if (month == 2)\n    {\n        if (day < 1 || day > 29)\n            return false;\n    }\n    \n    if (month < 1 || month > 12)\n        return false;\n    \n    if (day < 1 || day > 31)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpj6iu58w2.d(30): Error: no property `length` for type `string`\n/tmp/tmpj6iu58w2.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6iu58w2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpuut4kalv.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuut4kalv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() < 8)\n        return false;\n    \n    if(date.length() > 10)\n        return false;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(4,4));\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 1 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmphgddbz4y.d(30): Error: no property `length` for type `string`\n/tmp/tmphgddbz4y.d(37): Error: no property `length` for type `string`\n/tmp/tmphgddbz4y.d(40): Error: no property `length` for type `string`\n/tmp/tmphgddbz4y.d(43): Error: no property `length` for type `string`\n/tmp/tmphgddbz4y.d(45): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmphgddbz4y.d(46): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmphgddbz4y.d(47): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmphgddbz4y.d(51): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmphgddbz4y.d(52): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmphgddbz4y.d(53): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgddbz4y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    if(date.length() != 10)\n        return false;\n    if(date[2] != '-')\n        return false;\n    if(date[5] != '-')\n        return false;\n    if(date[8] != '-')\n        return false;\n    if(date[0] < '0' || date[0] > '9')\n        return false;\n    if(date[1] < '0' || date[1] > '9')\n        return false;\n    if(date[3] < '0' || date[3] > '9')\n        return false;\n    if(date[4] < '0' || date[4] > '9')\n        return false;\n    if(date[6] < '0' || date[6] > '9')\n        return false;\n    if(date[7] < '0' || date[7] > '9')\n        return false;\n    if(date[9] < '0' || date[9] > '9')\n        return false;\n    if(date[10] < '0' || date[10] > '9')\n        return false;\n    if(date[11] < '0' || date[11] > '9')\n        return false;\n    if(date[12] != '0')\n        return false;\n    if(date[13] != '0')\n        return false;\n    if(date[14] != '0')\n        return false;\n    if(date[15] != '0')\n        return false;\n    if(date[16] != '0')\n        return false;\n    if(date[17] != '0')\n        return false;\n    if(date[18] != '0')\n        return false;\n    if(date[19] != '0')\n        return false;\n    if(date[20] != '0')\n        return false;\n    if(date[21] != '0')\n        return false;\n    if(date[22] != '0')\n        return false;\n    if(date[23\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpswisqdda.d(81): Error: found `unittest` when expecting `,`\n/tmp/tmpswisqdda.d(102): Error: found `void` when expecting `,`\n/tmp/tmpswisqdda.d(102): Error: found `{` when expecting `,`\n/tmp/tmpswisqdda.d(102): Error: expression expected, not `}`\n/tmp/tmpswisqdda.d(102): Error: found `End of File` when expecting `,`\n/tmp/tmpswisqdda.d(102): Error: found `End of File` when expecting `]`\n/tmp/tmpswisqdda.d(102): Error: found `End of File` when expecting `)`\n/tmp/tmpswisqdda.d(102): Error: found `End of File` instead of statement\n/tmp/tmpswisqdda.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpswisqdda.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() != 10)\n        return false;\n    \n    if(date[0] == '0')\n        return false;\n    \n    if(date[2] != '-')\n        return false;\n    \n    if(date[5] != '-')\n        return false;\n    \n    if(date[8] != '-')\n        return false;\n    \n    if(date[0] < '0' || date[0] > '9')\n        return false;\n    \n    if(date[1] < '0' || date[1] > '9')\n        return false;\n    \n    if(date[3] < '0' || date[3] > '9')\n        return false;\n    \n    if(date[4] < '0' || date[4] > '9')\n        return false;\n    \n    if(date[6] < '0' || date[6] > '9')\n        return false;\n    \n    if(date[7] < '0' || date[7] > '9')\n        return false;\n    \n    if(date[9] < '0' || date[9] > '9')\n        return false;\n    \n    month = date[0] - '0';\n    day = date[1] - '0';\n    year = date[3] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month ==\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpc9qlu1ye.d(96): Error: expression expected, not `unittest`\n/tmp/tmpc9qlu1ye.d(97): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9qlu1ye.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,2));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpetatu04k.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmpetatu04k.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpetatu04k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date.substr(0,2).toInt();\n    int day = date.substr(3,2).toInt();\n    int year = date.substr(6,4).toInt();\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1900 || year > 2100)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmprcqwbpez.d(30): Error: no property `length` for type `string`\n/tmp/tmprcqwbpez.d(33): Error: no property `substr` for type `string`\n/tmp/tmprcqwbpez.d(34): Error: no property `substr` for type `string`\n/tmp/tmprcqwbpez.d(35): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprcqwbpez.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int month_count = 0;\n    int day_count = 0;\n    int year_count = 0;\n    \n    for(int i = 0; i < date.length(); i++)\n    {\n        if(date[i] == '-')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                year_count = 0;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n        else if(date[i] >= '0' && date[i] <= '9')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                year_count = 0;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n        else\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                year_count = 0;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n    }\n    \n    if(month_count == 0)\n        return false;\n    \n    if(day_count == 0)\n        return false;\n    \n    if(year_count == 0)\n        return false;\n    \n    if(month_count == 1)\n    {\n        if\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpifevibyd.d(111): Error: found `unittest` when expecting `(`\n/tmp/tmpifevibyd.d(132): Error: found `void` when expecting `)`\n/tmp/tmpifevibyd.d(132): Error: found `{` when expecting `;` following statement\n/tmp/tmpifevibyd.d(132): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpifevibyd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,2));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpetatu04k.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmpetatu04k.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpetatu04k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpdmz9wrlv.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdmz9wrlv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if (date.length() != 10)\n        return false;\n    \n    month = stoi(date.substr(0, 2));\n    day = stoi(date.substr(3, 2));\n    year = stoi(date.substr(6, 4));\n    \n    if (month < 1 || month > 12)\n        return false;\n    \n    if (day < 1 || day > 31)\n        return false;\n    \n    if (month == 2)\n    {\n        if (day < 1 || day > 29)\n            return false;\n    }\n    \n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if (day < 1 || day > 31)\n            return false;\n    }\n    \n    if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day < 1 || day > 30)\n            return false;\n    }\n    \n    if (year < 1 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpi1wmru1r.d(30): Error: no property `length` for type `string`\n/tmp/tmpi1wmru1r.d(37): Error: no property `length` for type `string`\n/tmp/tmpi1wmru1r.d(40): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpi1wmru1r.d(41): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpi1wmru1r.d(42): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi1wmru1r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp0n_th2n9.d(30): Error: no property `length` for type `string`\n/tmp/tmp0n_th2n9.d(37): Error: no property `length` for type `string`\n/tmp/tmp0n_th2n9.d(39): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp0n_th2n9.d(40): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp0n_th2n9.d(41): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp0n_th2n9.d(43): Error: no property `length` for type `string`\n/tmp/tmp0n_th2n9.d(45): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp0n_th2n9.d(46): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp0n_th2n9.d(47): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp0n_th2n9.d(49): Error: no property `length` for type `string`\n/tmp/tmp0n_th2n9.d(51): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp0n_th2n9.d(52): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp0n_th2n9.d(53): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp0n_th2n9.d(55): Error: no property `length` for type `string`\n/tmp/tmp0n_th2n9.d(57): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp0n_th2n9.d(58): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp0n_th2n9.d(59): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0n_th2n9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmp47v2ixfq.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47v2ixfq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    string month_str = date.substr(0,2);\n    string day_str = date.substr(3,2);\n    string year_str = date.substr(6,4);\n    \n    if (month_str.length() != 2)\n        return false;\n    \n    if (day_str.length() != 2)\n        return false;\n    \n    if (year_str.length() != 4)\n        return false;\n    \n    month = stoi(month_str);\n    day = stoi(day_str);\n    year = stoi(year_str);\n    \n    if (month < 1 || month > 12)\n        return false;\n    \n    if (day < 1 || day > 31)\n        return false;\n    \n    if (month == 2)\n    {\n        if (day < 1 || day > 29)\n            return false;\n    }\n    \n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if (day < 1 || day > 31)\n            return false;\n    }\n    \n    if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day < 1 || day > 30)\n            return false;\n    }\n    \n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if (day < 1 || day > 31)\n            return false;\n    }\n    \n    if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day < 1 || day > 30)\n            return false;\n    }\n    \n    if (month == 2)\n    {\n        if (day < 1 || day > 29)\n            return false;\n    }\n    \n    if (month == 1 || month == 3 || month == 5 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpiccq3t2s.d(97): Error: found `unittest` when expecting `)`\n/tmp/tmpiccq3t2s.d(118): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiccq3t2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            month = atoi(date.substr(0, i).c_str());\n            day = atoi(date.substr(i+1, date.length()).c_str());\n            year = atoi(date.substr(date.length()-4, date.length()).c_str());\n            break;\n        }\n        i++;\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpd0eeo3vp.d(30): Error: no property `length` for type `string`\n/tmp/tmpd0eeo3vp.d(38): Error: no property `length` for type `string`\n/tmp/tmpd0eeo3vp.d(42): Error: undefined identifier `atoi`, did you mean function `atan`?\n/tmp/tmpd0eeo3vp.d(43): Error: undefined identifier `atoi`, did you mean function `atan`?\n/tmp/tmpd0eeo3vp.d(44): Error: undefined identifier `atoi`, did you mean function `atan`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd0eeo3vp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpv5d7ebpo.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmpv5d7ebpo.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5d7ebpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n    {\n        if(month == 2)\n        {\n            if(day < 1 || day > 29)\n                return false;\n        }\n        else if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpqcol0sfk.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqcol0sfk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if (date.length() != 10)\n        return false;\n    \n    if (date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9')\n        return false;\n    \n    if (date[2] != '0' && date[2] != '1' && date[2] != '2' && date[2] != '3' && date[2] != '4' && date[2] != '5' && date[2] != '6' && date[2] != '7' && date[2] != '8' && date[2] != '9')\n        return false;\n    \n    if (date[5] != '0' && date[5] != '1' && date[5] != '2' && date[5] != '3' && date[5] != '4' && date[5] != '5' && date[5] != '6' && date[5] != '7' && date[5] != '8' && date[5] != '9')\n        return false;\n    \n    if (date[8] != '0' && date[8] != '1' && date[8] != '2' && date[8] != '3' && date[8] != '4' && date[8] != '5' && date[8] != '6' && date[8] != '7' && date[8] != '8' && date[8] != '9')\n        return false;\n    \n    month = date[0] - '0';\n    day = date[2] - '0';\n    year = date[5] - '0';\n    \n    if (month < 1 || month > 12)\n        \nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpyg52g756.d(58): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyg52g756.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            if(month == 0)\n            {\n                month = 1;\n                i++;\n            }\n            else\n                return false;\n        }\n        else if(date[i] == '/')\n        {\n            if(day == 0)\n            {\n                day = 1;\n                i++;\n            }\n            else\n                return false;\n        }\n        else if(date[i] == ' ')\n        {\n            i++;\n        }\n        else if(date[i] >= '0' && date[i] <= '9')\n        {\n            if(month == 0)\n                month = date[i] - '0';\n            else if(day == 0)\n                day = date[i] - '0';\n            else if(year == 0)\n                year = date[i] - '0';\n            else\n                return false;\n            i++;\n        }\n        else\n            return false;\n    }\n    \n    if(month == 0)\n        return false;\n    else if(day == 0)\n        return false;\n    else if(year == 0)\n        return false;\n    else if(month < 1 || month > 12)\n        return false;\n    else if(day < 1 || day > 31)\n    {\n        if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n            return false;\n        else if(day < 1 || day > 30)\n            return false;\n    }\n    else if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpz6c9vttv.d(30): Error: no property `length` for type `string`\n/tmp/tmpz6c9vttv.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz6c9vttv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(1,2));\n        year = stoi(date.substr(2,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpgt38nog0.d(89): Error: found `unittest` when expecting `(`\n/tmp/tmpgt38nog0.d(110): Error: found `void` when expecting `)`\n/tmp/tmpgt38nog0.d(110): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgt38nog0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            if(i == 0)\n                return false;\n            else if(i == 1)\n                month = 0;\n            else if(i == 2)\n                month = stoi(date.substr(0, i-1));\n            else if(i == 3)\n                day = stoi(date.substr(i-2, date.length()-i));\n            else if(i == 4)\n                year = stoi(date.substr(i-4, date.length()-i));\n            else\n                return false;\n        }\n        else if(date[i] == '/')\n        {\n            if(i == 0)\n                return false;\n            else if(i == 1)\n                month = stoi(date.substr(0, i-1));\n            else if(i == 2)\n                day = stoi(date.substr(i-2, date.length()-i));\n            else if(i == 3)\n                year = stoi(date.substr(i-4, date.length()-i));\n            else\n                return false;\n        }\n        else\n            return false;\n        i++;\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp60e5bk9c.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60e5bk9c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(1,2));\n        year = stoi(date.substr(2,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpgt38nog0.d(89): Error: found `unittest` when expecting `(`\n/tmp/tmpgt38nog0.d(110): Error: found `void` when expecting `)`\n/tmp/tmpgt38nog0.d(110): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgt38nog0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int month_count = 0;\n    int day_count = 0;\n    int year_count = 0;\n    \n    for(int i = 0; i < date.length(); i++)\n    {\n        if(date[i] == '-')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                month = 0;\n                day = 0;\n                year = 0;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                day = 0;\n                year = 0;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n                year = 0;\n            }\n        }\n        else if(date[i] >= '0' && date[i] <= '9')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                month = month * 10 + date[i] - '0';\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                day = day * 10 + date[i] - '0';\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n                year = year * 10 + date[i] - '0';\n            }\n        }\n        else\n            return false;\n    }\n    \n    if(month_count == 0)\n        return false;\n    \n    if(day_count == 0)\n        return false;\n    \n    if(year_count == 0)\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n    {\n        if(month == 2)\n        {\n            if(day < 1 || day > 29)\n                return false;\n        }\n        else if(month == 4 || month == 6 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpcuwla69f.d(106): Error: found `unittest` when expecting `)`\n/tmp/tmpcuwla69f.d(127): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcuwla69f.d(127): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcuwla69f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            month = 0;\n            day = 0;\n            year = 0;\n            i++;\n            continue;\n        }\n        \n        if(month == 0)\n        {\n            month = date[i] - '0';\n            i++;\n            continue;\n        }\n        \n        if(day == 0)\n        {\n            day = date[i] - '0';\n            i++;\n            continue;\n        }\n        \n        if(year == 0)\n        {\n            year = date[i] - '0';\n            i++;\n            continue;\n        }\n        \n        if(month < 1 || month > 12)\n            return false;\n        \n        if(day < 1 || day > 31)\n            return false;\n        \n        if(month == 2)\n        {\n            if(day < 1 || day > 29)\n                return false;\n        }\n        \n        if(month == 4 || month == 6 || month == 9 || month == 11)\n        {\n            if(day < 1 || day > 30)\n                return false;\n        }\n        \n        i++;\n    }\n    \n    if(year < 1900 || year > 2100)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpoiye3ozi.d(30): Error: no property `length` for type `string`\n/tmp/tmpoiye3ozi.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoiye3ozi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 2000 || year > 2040)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmprya6u40m.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprya6u40m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpv5d7ebpo.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmpv5d7ebpo.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5d7ebpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            if(month == 0)\n            {\n                month = 1;\n                i++;\n                continue;\n            }\n            else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n            {\n                if(day == 0)\n                {\n                    day = 1;\n                    i++;\n                    continue;\n                }\n                else if(day > 31)\n                {\n                    return false;\n                }\n            }\n            else if(month == 4 || month == 6 || month == 9 || month == 11)\n            {\n                if(day == 0)\n                {\n                    day = 1;\n                    i++;\n                    continue;\n                }\n                else if(day > 30)\n                {\n                    return false;\n                }\n            }\n            else if(month == 2)\n            {\n                if(day == 0)\n                {\n                    day = 1;\n                    i++;\n                    continue;\n                }\n                else if(day > 29)\n                {\n                    return false;\n                }\n            }\n            else\n            {\n                return false;\n            }\n        }\n        else if(date[i] >= '0' && date[i] <= '9')\n        {\n            if(month == 0)\n            {\n                month = date[i] - '0';\n                i++;\n                continue;\n            }\n            else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n            {\n                if(day == 0)\n                {\n                    day = date[i] - '0';\n                    i++;\n                    continue;\n                }\n                else if(day > 31)\n                {\n                    return false;\n                }\n            }\n            else if(month == 4 || month == 6 ||\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpitetmiz1.d(114): Error: expression expected, not `unittest`\n/tmp/tmpitetmiz1.d(115): Error: found `{` when expecting `)`\n/tmp/tmpitetmiz1.d(135): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpitetmiz1.d(135): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpitetmiz1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(year < 1 || year > 9999)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(year < 1 || year > 9999)\n            return false;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpmq0gcfwj.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmq0gcfwj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    if(date.length() != 10)\n        return false;\n    if(date[2] != '-')\n        return false;\n    if(date[5] != '-')\n        return false;\n    if(date[8] != '-')\n        return false;\n    if(date[0] < '0' || date[0] > '9')\n        return false;\n    if(date[1] < '0' || date[1] > '9')\n        return false;\n    if(date[3] < '0' || date[3] > '9')\n        return false;\n    if(date[4] < '0' || date[4] > '9')\n        return false;\n    if(date[6] < '0' || date[6] > '9')\n        return false;\n    if(date[7] < '0' || date[7] > '9')\n        return false;\n    if(date[9] < '0' || date[9] > '9')\n        return false;\n    if(date[10] < '0' || date[10] > '9')\n        return false;\n    if(date[11] < '0' || date[11] > '9')\n        return false;\n    if(date[0] > '3')\n        return false;\n    if(date[1] > '6')\n        return false;\n    if(date[3] > '9')\n        return false;\n    if(date[4] > '9')\n        return false;\n    if(date[6] > '9')\n        return false;\n    if(date[7] > '9')\n        return false;\n    if(date[9] > '9')\n        return false;\n    if(date[10] > '9')\n        return false;\n    if(date[11] > '9')\n        return false;\n    if(date[2] > '9')\n        return false;\n    if(date[5] > '9')\n        return false;\n    if(date[8\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpglxlfbp_.d(81): Error: found `unittest` when expecting `,`\n/tmp/tmpglxlfbp_.d(102): Error: found `void` when expecting `,`\n/tmp/tmpglxlfbp_.d(102): Error: found `{` when expecting `,`\n/tmp/tmpglxlfbp_.d(102): Error: expression expected, not `}`\n/tmp/tmpglxlfbp_.d(102): Error: found `End of File` when expecting `,`\n/tmp/tmpglxlfbp_.d(102): Error: found `End of File` when expecting `]`\n/tmp/tmpglxlfbp_.d(102): Error: found `End of File` when expecting `)`\n/tmp/tmpglxlfbp_.d(102): Error: found `End of File` instead of statement\n/tmp/tmpglxlfbp_.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpglxlfbp_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() != 10)\n        return false;\n    \n    if(date[2] != '-')\n        return false;\n    \n    if(date[5] != '-')\n        return false;\n    \n    if(date[8] != '-')\n        return false;\n    \n    month = date[0] - '0';\n    day = date[1] - '0';\n    year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 31)\n            return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 30)\n            return false;\n    \n    if(month == 2)\n        if(day < 1 || day > 29)\n            return false;\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpkz0vmbow.d(30): Error: no property `length` for type `string`\n/tmp/tmpkz0vmbow.d(37): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkz0vmbow.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,2));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpetatu04k.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmpetatu04k.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpetatu04k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() != 10)\n        return false;\n    \n    if(date[0] != '0' && date[0] != '1')\n        return false;\n    \n    month = date[0] - '0';\n    day = date[1] - '0';\n    year = date[2] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 31)\n            return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 30)\n            return false;\n    \n    if(month == 2)\n        if(day < 1 || day > 29)\n            return false;\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp2ix0187z.d(30): Error: no property `length` for type `string`\n/tmp/tmp2ix0187z.d(37): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ix0187z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    if(date.length() != 10)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[1] - '0';\n    int year = date[2] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpw7wxgsmc.d(30): Error: no property `length` for type `string`\n/tmp/tmpw7wxgsmc.d(33): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw7wxgsmc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            if(i == 0 || i == date.length() - 1)\n                return false;\n            \n            if(month == 0)\n            {\n                month = date[i + 1] - '0';\n                if(month < 1 || month > 12)\n                    return false;\n                i++;\n            }\n            else if(day == 0)\n            {\n                day = date[i + 1] - '0';\n                if(day < 1 || day > 31)\n                    return false;\n                i++;\n            }\n            else if(year == 0)\n            {\n                year = date[i + 1] - '0';\n                if(year < 0 || year > 9999)\n                    return false;\n                i++;\n            }\n            else\n                return false;\n        }\n        else if(date[i] == '/')\n        {\n            if(i == 0 || i == date.length() - 1)\n                return false;\n            \n            if(month == 0)\n            {\n                month = date[i + 1] - '0';\n                if(month < 1 || month > 12)\n                    return false;\n                i++;\n            }\n            else if(day == 0)\n            {\n                day = date[i + 1] - '0';\n                if(day < 1 || day > 30)\n                    return false;\n                i++;\n            }\n            else if(year == 0)\n            {\n                year = date[i + 1] - '0';\n                if(year < 0 || year > 9999)\n                    return false;\n                i++;\n            }\n            else\n                return false;\n        }\n        else if(date[i] == ' ')\n        {\n            if(i == 0 || i == date.length() - 1)\n                return false;\n            \n            if(day == 0)\n            \nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpexo041ik.d(105): Error: found `unittest` instead of statement\n/tmp/tmpexo041ik.d(126): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpexo041ik.d(126): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpexo041ik.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 2000 || year > 2020)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp9jot94gi.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jot94gi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 30)\n            return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 29)\n            return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpq1r1rigx.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq1r1rigx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    for (; i < date.length(); i++)\n    {\n        if (date[i] == '-')\n        {\n            if (i == 0 || i == date.length() - 1)\n                return false;\n            \n            if (month == 0)\n            {\n                month = i;\n                continue;\n            }\n            \n            if (day == 0)\n            {\n                day = i;\n                continue;\n            }\n            \n            if (year == 0)\n            {\n                year = i;\n                continue;\n            }\n            \n            return false;\n        }\n        \n        if (date[i] < '0' || date[i] > '9')\n            return false;\n    }\n    \n    if (month == 0 || day == 0 || year == 0)\n        return false;\n    \n    if (month < 1 || month > 12)\n        return false;\n    \n    if (day < 1 || day > 31)\n    {\n        if (month == 2)\n        {\n            if (day < 1 || day > 29)\n                return false;\n        }\n        else if (month == 4 || month == 6 || month == 9 || month == 11)\n        {\n            if (day < 1 || day > 30)\n                return false;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    \n    if (year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpa4ddpp0l.d(30): Error: no property `length` for type `string`\n/tmp/tmpa4ddpp0l.d(38): Error: no property `length` for type `string`\n/tmp/tmpa4ddpp0l.d(42): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa4ddpp0l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpuioemyw0.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuioemyw0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            if(month != 0)\n                return false;\n            \n            i++;\n            if(i >= date.length())\n                return false;\n            \n            month = 0;\n            while(i < date.length())\n            {\n                if(date[i] >= '0' && date[i] <= '9')\n                    month = month * 10 + date[i] - '0';\n                else\n                    return false;\n                \n                i++;\n            }\n            \n            if(month < 1 || month > 12)\n                return false;\n            \n            i++;\n        }\n        else if(date[i] >= '0' && date[i] <= '9')\n        {\n            if(day != 0)\n                return false;\n            \n            day = date[i] - '0';\n            i++;\n        }\n        else\n            return false;\n        \n        if(i >= date.length())\n            return false;\n        \n        if(date[i] == '-')\n        {\n            i++;\n            if(i >= date.length())\n                return false;\n            \n            if(date[i] >= '0' && date[i] <= '9')\n            {\n                year = date[i] - '0';\n                i++;\n            }\n            else\n                return false;\n            \n            if(i >= date.length())\n                return false;\n            \n            if(date[i] != '-')\n                return false;\n            \n            i++;\n        }\n        else\n            return false;\n        \n        if(i >= date.length())\n            return false;\n        \n        if(date[i] != '-')\n            return false;\n        \n        i++;\n    }\n    \n    if(month == 0)\n        return false;\n    \n    if(day == 0)\n        \nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmphayxiy1k.d(118): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphayxiy1k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmputxyzhf7.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmputxyzhf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 8)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(4,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp5w7zx34x.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmp5w7zx34x.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5w7zx34x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 30)\n            return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 29)\n            return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpq1r1rigx.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq1r1rigx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,2));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpetatu04k.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmpetatu04k.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpetatu04k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,2));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpetatu04k.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmpetatu04k.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpetatu04k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpecqfh7gg.d(89): Error: found `unittest` when expecting `(`\n/tmp/tmpecqfh7gg.d(110): Error: found `void` when expecting `)`\n/tmp/tmpecqfh7gg.d(110): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecqfh7gg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpecqfh7gg.d(89): Error: found `unittest` when expecting `(`\n/tmp/tmpecqfh7gg.d(110): Error: found `void` when expecting `)`\n/tmp/tmpecqfh7gg.d(110): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecqfh7gg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp4zp6g35l.d(30): Error: no property `length` for type `string`\n/tmp/tmp4zp6g35l.d(37): Error: no property `length` for type `string`\n/tmp/tmp4zp6g35l.d(39): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp4zp6g35l.d(40): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp4zp6g35l.d(41): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp4zp6g35l.d(43): Error: no property `length` for type `string`\n/tmp/tmp4zp6g35l.d(45): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp4zp6g35l.d(46): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp4zp6g35l.d(47): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp4zp6g35l.d(49): Error: no property `length` for type `string`\n/tmp/tmp4zp6g35l.d(51): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp4zp6g35l.d(52): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp4zp6g35l.d(53): Error: undefined identif",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if (date.length() != 10)\n        return false;\n    \n    if (date[0] != '0' && date[0] != '1')\n        return false;\n    \n    month = stoi(date.substr(0,2));\n    day = stoi(date.substr(3,2));\n    year = stoi(date.substr(6,4));\n    \n    if (month < 1 || month > 12)\n        return false;\n    \n    if (day < 1 || day > 31)\n        return false;\n    \n    if (month == 2)\n    {\n        if (day < 1 || day > 29)\n            return false;\n    }\n    \n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if (day < 1 || day > 31)\n            return false;\n    }\n    \n    if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day < 1 || day > 30)\n            return false;\n    }\n    \n    if (month == 1)\n    {\n        if (day < 1 || day > 31)\n            return false;\n    }\n    \n    if (month == 2)\n    {\n        if (day < 1 || day > 29)\n            return false;\n    }\n    \n    if (month == 3 || month == 5 || month == 8 || month == 10)\n    {\n        if (day < 1 || day > 31)\n            return false;\n    }\n    \n    if (month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if (day < 1 || day > 30)\n            return false;\n    }\n    \n    if (month == 7)\n    {\n        if (day < 1 || day > 31)\n            return false;\n    }\n    \n    if (month == 8)\n    {\n\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpdqlywdu8.d(104): Error: found `unittest` instead of statement\n/tmp/tmpdqlywdu8.d(125): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdqlywdu8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    string month_str = date.substr(0,2);\n    string day_str = date.substr(3,2);\n    string year_str = date.substr(6,4);\n    \n    if(month_str.length() != 2)\n        return false;\n    \n    if(day_str.length() != 2)\n        return false;\n    \n    if(year_str.length() != 4)\n        return false;\n    \n    month = stoi(month_str);\n    day = stoi(day_str);\n    year = stoi(year_str);\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 30)\n            return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 29)\n            return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp36gc0gi7.d(30): Error: no property `length` for type `string`\n/tmp/tmp36gc0gi7.d(37): Error: no property `substr` for type `string`\n/tmp/tmp36gc0gi7.d(38): Error: no property `substr` for type `string`\n/tmp/tmp36gc0gi7.d(39): Error: no property `substr` for type `string`\n/tmp/tmp36gc0gi7.d(41): Error: no property `length` for type `string`\n/tmp/tmp36gc0gi7.d(44): Error: no property `length` for type `string`\n/tmp/tmp36gc0gi7.d(47): Error: no property `length` for type `string`\n/tmp/tmp36gc0gi7.d(50): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp36gc0gi7.d(51): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp36gc0gi7.d(52): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp36gc0gi7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(1,2));\n        year = stoi(date.substr(2,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpgt38nog0.d(89): Error: found `unittest` when expecting `(`\n/tmp/tmpgt38nog0.d(110): Error: found `void` when expecting `)`\n/tmp/tmpgt38nog0.d(110): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgt38nog0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            month = 0;\n            day = 0;\n            year = 0;\n            i++;\n            continue;\n        }\n        \n        if(month == 0)\n        {\n            if(date[i] >= '0' && date[i] <= '9')\n            {\n                month = date[i] - '0';\n                i++;\n                continue;\n            }\n            else\n                return false;\n        }\n        \n        if(day == 0)\n        {\n            if(date[i] >= '0' && date[i] <= '9')\n            {\n                day = date[i] - '0';\n                i++;\n                continue;\n            }\n            else\n                return false;\n        }\n        \n        if(year == 0)\n        {\n            if(date[i] >= '0' && date[i] <= '9')\n            {\n                year = date[i] - '0';\n                i++;\n                continue;\n            }\n            else\n                return false;\n        }\n        \n        if(date[i] >= '0' && date[i] <= '9')\n        {\n            i++;\n            continue;\n        }\n        else\n            return false;\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day <\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp7xm9b2vf.d(112): Error: expression expected, not `unittest`\n/tmp/tmp7xm9b2vf.d(113): Error: found `{` when expecting `)`\n/tmp/tmp7xm9b2vf.d(133): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xm9b2vf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    if(date.length() != 10)\n        return false;\n    \n    int month = stoi(date.substr(0,2));\n    int day = stoi(date.substr(3,2));\n    int year = stoi(date.substr(6,4));\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpd41zzzt4.d(30): Error: no property `length` for type `string`\n/tmp/tmpd41zzzt4.d(33): Error: no property `length` for type `string`\n/tmp/tmpd41zzzt4.d(36): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpd41zzzt4.d(37): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpd41zzzt4.d(38): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd41zzzt4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() != 10)\n        return false;\n    \n    if(date[0] < '0' || date[0] > '9')\n        return false;\n    \n    if(date[1] < '0' || date[1] > '9')\n        return false;\n    \n    if(date[2] < '0' || date[2] > '9')\n        return false;\n    \n    if(date[3] < '0' || date[3] > '9')\n        return false;\n    \n    if(date[4] < '0' || date[4] > '9')\n        return false;\n    \n    if(date[5] < '0' || date[5] > '9')\n        return false;\n    \n    if(date[6] < '0' || date[6] > '9')\n        return false;\n    \n    if(date[7] < '0' || date[7] > '9')\n        return false;\n    \n    if(date[8] < '0' || date[8] > '9')\n        return false;\n    \n    if(date[9] < '0' || date[9] > '9')\n        return false;\n    \n    month = date[0] - '0';\n    day = date[1] - '0';\n    year = date[2] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 31)\n            return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day <\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmptjor1wd_.d(89): Error: expression expected, not `unittest`\n/tmp/tmptjor1wd_.d(90): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptjor1wd_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            month = 0;\n            day = 0;\n            year = 0;\n            i++;\n            continue;\n        }\n        \n        if(month == 0)\n        {\n            month = date[i] - '0';\n            i++;\n            continue;\n        }\n        \n        if(day == 0)\n        {\n            day = date[i] - '0';\n            i++;\n            continue;\n        }\n        \n        if(year == 0)\n        {\n            year = date[i] - '0';\n            i++;\n            continue;\n        }\n        \n        if(month < 1 || month > 12)\n            return false;\n        \n        if(day < 1 || day > 31)\n            return false;\n        \n        if(month == 2 && day > 29)\n            return false;\n        \n        if(month == 4 || month == 6 || month == 9 || month == 11)\n        {\n            if(day < 1 || day > 30)\n                return false;\n        }\n        \n        if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        {\n            if(day < 1 || day > 31)\n                return false;\n        }\n        \n        i++;\n    }\n    \n    if(year < 1900 || year > 2100)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmptrnyqfz5.d(30): Error: no property `length` for type `string`\n/tmp/tmptrnyqfz5.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptrnyqfz5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,2));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpetatu04k.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmpetatu04k.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpetatu04k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    if(date.length() != 10)\n        return false;\n    if(date[2] != '-')\n        return false;\n    if(date[5] != '-')\n        return false;\n    if(date[8] != '-')\n        return false;\n    if(date[0] < '0' || date[0] > '9')\n        return false;\n    if(date[1] < '0' || date[1] > '9')\n        return false;\n    if(date[3] < '0' || date[3] > '9')\n        return false;\n    if(date[4] < '0' || date[4] > '9')\n        return false;\n    if(date[6] < '0' || date[6] > '9')\n        return false;\n    if(date[7] < '0' || date[7] > '9')\n        return false;\n    if(date[9] < '0' || date[9] > '9')\n        return false;\n    if(date[10] < '0' || date[10] > '9')\n        return false;\n    if(date[11] < '0' || date[11] > '9')\n        return false;\n    if(date[12] < '0' || date[12] > '9')\n        return false;\n    if(date[13] < '0' || date[13] > '9')\n        return false;\n    if(date[14] < '0' || date[14] > '9')\n        return false;\n    if(date[15] < '0' || date[15] > '9')\n        return false;\n    if(date[16] < '0' || date[16] > '9')\n        return false;\n    if(date[17] < '0' || date[17] > '9')\n        return false;\n    if(date[18] < '0' || date[18] > '9')\n        return false;\n    if(date[19] < '0'\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpdtsyslmd.d(73): Error: found `unittest` when expecting `)`\n/tmp/tmpdtsyslmd.d(94): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdtsyslmd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,2));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    else if(month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp2cwganet.d(87): Error: found `unittest` when expecting `)`\n/tmp/tmp2cwganet.d(108): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2cwganet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() != 10)\n        return false;\n    \n    if(date[0] == '0')\n        return false;\n    \n    if(date[2] != '-')\n        return false;\n    \n    if(date[5] != '-')\n        return false;\n    \n    if(date[8] != '-')\n        return false;\n    \n    if(date[0] < '0' || date[0] > '9')\n        return false;\n    \n    if(date[1] < '0' || date[1] > '9')\n        return false;\n    \n    if(date[3] < '0' || date[3] > '9')\n        return false;\n    \n    if(date[4] < '0' || date[4] > '9')\n        return false;\n    \n    if(date[6] < '0' || date[6] > '9')\n        return false;\n    \n    if(date[7] < '0' || date[7] > '9')\n        return false;\n    \n    if(date[9] < '0' || date[9] > '9')\n        return false;\n    \n    month = date[0] - '0';\n    day = date[1] - '0';\n    year = date[3] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month ==\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpc9qlu1ye.d(96): Error: expression expected, not `unittest`\n/tmp/tmpc9qlu1ye.d(97): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9qlu1ye.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    if(date.length() < 8)\n        return false;\n    if(date.length() > 10)\n        return false;\n    if(date.length() == 10)\n    {\n        if(date[4] != '-' || date[7] != '-')\n            return false;\n    }\n    if(date[0] < '0' || date[0] > '9')\n        return false;\n    if(date[1] < '0' || date[1] > '9')\n        return false;\n    if(date[2] < '0' || date[2] > '9')\n        return false;\n    if(date[3] < '0' || date[3] > '9')\n        return false;\n    if(date[5] < '0' || date[5] > '9')\n        return false;\n    if(date[6] < '0' || date[6] > '9')\n        return false;\n    if(date[8] < '0' || date[8] > '9')\n        return false;\n    if(date[9] < '0' || date[9] > '9')\n        return false;\n    if(date[10] < '0' || date[10] > '9')\n        return false;\n    if(date[1] > '2')\n        return false;\n    if(date[2] > '9')\n        return false;\n    if(date[3] > '9')\n        return false;\n    if(date[5] > '9')\n        return false;\n    if(date[6] > '9')\n        return false;\n    if(date[8] > '9')\n        return false;\n    if(date[9] > '9')\n        return false;\n    if(date[10] > '9')\n        return false;\n    if(date[1] > '9')\n        return false;\n    if(date[2] > '9')\n        return false;\n    if(date[3] > '9')\n        return false;\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpl8rrekyl.d(81): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl8rrekyl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while (i < date.length())\n    {\n        if (date[i] == '-')\n        {\n            month = i + 1;\n            while (i < date.length() && date[i] != '-')\n                i++;\n            i++;\n            while (i < date.length() && date[i] != '-')\n                i++;\n            i++;\n            while (i < date.length() && date[i] != '-')\n                i++;\n            i++;\n            while (i < date.length() && date[i] != '-')\n                i++;\n            i++;\n            while (i < date.length() && date[i] != '-')\n                i++;\n            i++;\n            while (i < date.length() && date[i] != '-')\n                i++;\n            i++;\n            while (i < date.length() && date[i] != '-')\n                i++;\n            i++;\n            while (i < date.length() && date[i] != '-')\n                i++;\n            i++;\n            while (i < date.length() && date[i] != '-')\n                i++;\n            i++;\n            while (i < date.length() && date[i] != '-')\n                i++;\n            i++;\n            while (i < date.length() && date[i] != '-')\n                i++;\n            i++;\n            while (i < date.length() && date[i] != '-')\n                i++;\n            i++;\n            while (i < date.length() && date[i] != '-')\n                i++;\n            i++;\n            while (i < date.length() && date[i] != '-')\n                i++;\n            i++;\n            while (i < date.length() && date[i] != '-')\n                i++;\n            i++;\n            while (i < date.length() && date[i] != '-')\n                i\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpqa0j77pj.d(90): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpqa0j77pj.d(111): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpqa0j77pj.d(111): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpqa0j77pj.d(111): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqa0j77pj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() < 10)\n        return false;\n    \n    if(date.length() > 10)\n        return false;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 1900 || year > 2100)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpxe_d8g2o.d(30): Error: no property `length` for type `string`\n/tmp/tmpxe_d8g2o.d(37): Error: no property `length` for type `string`\n/tmp/tmpxe_d8g2o.d(40): Error: no property `length` for type `string`\n/tmp/tmpxe_d8g2o.d(43): Error: no property `length` for type `string`\n/tmp/tmpxe_d8g2o.d(45): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpxe_d8g2o.d(46): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpxe_d8g2o.d(47): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxe_d8g2o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmp47v2ixfq.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47v2ixfq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp6ryd52wo.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ryd52wo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmputxyzhf7.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmputxyzhf7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmps86wu_mg.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps86wu_mg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int month_count = 0;\n    int day_count = 0;\n    int year_count = 0;\n    \n    for(int i = 0; i < date.length(); i++)\n    {\n        if(date[i] == '-')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n        else if(date[i] >= '0' && date[i] <= '9')\n        {\n            if(month_count == 0)\n            {\n                month = date[i] - '0';\n                month_count = 1;\n            }\n            else if(day_count == 0)\n            {\n                day = date[i] - '0';\n                day_count = 1;\n            }\n            else if(year_count == 0)\n            {\n                year = date[i] - '0';\n                year_count = 1;\n            }\n        }\n    }\n    \n    if(month_count == 0)\n        return false;\n    \n    if(day_count == 0)\n        return false;\n    \n    if(year_count == 0)\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n    {\n        if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        {\n            if(day < 1 || day > 30)\n                return false;\n        }\n        else if(month == 4 || month == 6 || month == 9 || month == 11)\n        {\n            if(day < 1 || day > 29)\n                return false;\n        }\n        \nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp39uizc2z.d(103): Error: found `unittest` instead of statement\n/tmp/tmp39uizc2z.d(124): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp39uizc2z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(year < 0 || year > 9999)\n            return false;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpz7vy_lr8.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz7vy_lr8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if (date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if (date.length() != 10)\n        return false;\n    \n    if (date[0] == '0')\n        return false;\n    \n    if (date[2] != '-')\n        return false;\n    \n    if (date[5] != '-')\n        return false;\n    \n    if (date[8] != '-')\n        return false;\n    \n    if (date[0] < '0' || date[0] > '9')\n        return false;\n    \n    if (date[1] < '0' || date[1] > '9')\n        return false;\n    \n    if (date[3] < '0' || date[3] > '9')\n        return false;\n    \n    if (date[4] < '0' || date[4] > '9')\n        return false;\n    \n    if (date[6] < '0' || date[6] > '9')\n        return false;\n    \n    if (date[7] < '0' || date[7] > '9')\n        return false;\n    \n    if (date[9] < '0' || date[9] > '9')\n        return false;\n    \n    month = date[0] - '0';\n    day = date[1] - '0';\n    year = date[3] - '0';\n    \n    if (month < 1 || month > 12)\n        return false;\n    \n    if (day < 1 || day > 31)\n        return false;\n    \n    if (month == 2 && day > 29)\n        return false;\n    \n    if (month == 4 || month == 6 || month == 9 || month == 11)\n        if (day < 1 || day > 30)\n            return false;\n    \n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if (day < 1 || day > 31)\n            \nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpy5qyyx90.d(93): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy5qyyx90.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpjmohrlow.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmohrlow.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 1)\n    {\n        if(day > 31)\n            return false;\n    }\n    \n    if(month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day > 30)\n            return false;\n    }\n    \n    if(month == 2)\n    {\n        if(day > 29)\n            return false;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpvojbidor.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvojbidor.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmp47v2ixfq.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47v2ixfq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(1,2));\n        year = stoi(date.substr(2,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp0zmd9uc_.d(89): Error: found `unittest` when expecting `(`\n/tmp/tmp0zmd9uc_.d(110): Error: found `void` when expecting `)`\n/tmp/tmp0zmd9uc_.d(110): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0zmd9uc_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            if(i == 0)\n                return false;\n            if(month == 0)\n                month = i;\n            else if(day == 0)\n                day = i;\n            else if(year == 0)\n                year = i;\n            else\n                return false;\n        }\n        else if(date[i] >= '0' && date[i] <= '9')\n        {\n            if(month == 0)\n                month = i;\n            else if(day == 0)\n                day = i;\n            else if(year == 0)\n                year = i;\n            else\n                return false;\n        }\n        else\n            return false;\n        i++;\n    }\n    if(month == 0 || day == 0 || year == 0)\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day > 31)\n        return false;\n    if(month == 2 && day > 29)\n        return false;\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 30)\n            return false;\n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 29)\n            return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpgb4q0omz.d(30): Error: no property `length` for type `string`\n/tmp/tmpgb4q0omz.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgb4q0omz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int month_count = 0;\n    int day_count = 0;\n    int year_count = 0;\n    \n    for(int i = 0; i < date.length(); i++)\n    {\n        if(date[i] == '-')\n        {\n            if(month_count == 0)\n            {\n                month_count++;\n                continue;\n            }\n            else if(day_count == 0)\n            {\n                day_count++;\n                continue;\n            }\n            else if(year_count == 0)\n            {\n                year_count++;\n                continue;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        \n        if(month_count == 0)\n        {\n            if(date[i] < '0' || date[i] > '9')\n                return false;\n            else\n                month = month * 10 + date[i] - '0';\n        }\n        else if(day_count == 0)\n        {\n            if(date[i] < '0' || date[i] > '9')\n                return false;\n            else\n                day = day * 10 + date[i] - '0';\n        }\n        else if(year_count == 0)\n        {\n            if(date[i] < '0' || date[i] > '9')\n                return false;\n            else\n                year = year * 10 + date[i] - '0';\n        }\n        else\n        {\n            return false;\n        }\n    }\n    \n    if(month_count != 3)\n        return false;\n    \n    if(day_count != 2)\n        return false;\n    \n    if(year_count != 4)\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpgk70k596.d(111): Error: found `unittest` when expecting `(`\n/tmp/tmpgk70k596.d(132): Error: found `void` when expecting `)`\n/tmp/tmpgk70k596.d(132): Error: found `{` when expecting `;` following statement\n/tmp/tmpgk70k596.d(132): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgk70k596.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() < 10)\n        return false;\n    \n    if(date.length() > 10)\n        return false;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpwy85dsg3.d(30): Error: no property `length` for type `string`\n/tmp/tmpwy85dsg3.d(37): Error: no property `length` for type `string`\n/tmp/tmpwy85dsg3.d(40): Error: no property `length` for type `string`\n/tmp/tmpwy85dsg3.d(43): Error: no property `length` for type `string`\n/tmp/tmpwy85dsg3.d(45): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpwy85dsg3.d(46): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpwy85dsg3.d(47): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwy85dsg3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(year < 0 || year > 9999)\n            return false;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpz7vy_lr8.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz7vy_lr8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.empty())\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    string month_str = date.substr(0,2);\n    string day_str = date.substr(3,2);\n    string year_str = date.substr(6,4);\n    \n    if(month_str.empty())\n        return false;\n    \n    if(day_str.empty())\n        return false;\n    \n    if(year_str.empty())\n        return false;\n    \n    if(month_str.length() != 2)\n        return false;\n    \n    if(day_str.length() != 2)\n        return false;\n    \n    if(year_str.length() != 4)\n        return false;\n    \n    if(month_str[0] < '0' || month_str[0] > '9')\n        return false;\n    \n    if(day_str[0] < '0' || day_str[0] > '9')\n        return false;\n    \n    if(month_str[1] < '0' || month_str[1] > '9')\n        return false;\n    \n    if(day_str[1] < '0' || day_str[1] > '9')\n        return false;\n    \n    if(month_str[0] > '2' && month_str[0] < '0')\n        return false;\n    \n    if(day_str[0] > '2' && day_str[0] < '0')\n        return false;\n    \n    if(month_str[1] > '2' && month_str[1] < '0')\n        return false;\n    \n    if(day_str[1] > '2' && day_str[1] < '0')\n        return false;\n    \n    if(month_str[0] > '9' || month_str[1] > '9')\n        return false;\n    \n    if(day_str[0] > '9' || day_str[1] > '9\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpx3klw5nr.d(86): Error: unterminated character constant\n/tmp/tmpx3klw5nr.d(87): Error: found `unittest` when expecting `)`\n/tmp/tmpx3klw5nr.d(108): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx3klw5nr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 30)\n            return false;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 29)\n            return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpq1r1rigx.d(30): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq1r1rigx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "/tmp/tmpecqfh7gg.d(89): Error: found `unittest` when expecting `(`\n/tmp/tmpecqfh7gg.d(110): Error: found `void` when expecting `)`\n/tmp/tmpecqfh7gg.d(110): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecqfh7gg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int month_count = 0;\n    int day_count = 0;\n    int year_count = 0;\n    \n    for(int i = 0; i < date.length(); i++)\n    {\n        if(date[i] == '-')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n        else if(date[i] >= '0' && date[i] <= '9')\n        {\n            if(month_count == 0)\n            {\n                month = date[i] - '0';\n                month_count = 1;\n            }\n            else if(day_count == 0)\n            {\n                day = date[i] - '0';\n                day_count = 1;\n            }\n            else if(year_count == 0)\n            {\n                year = date[i] - '0';\n                year_count = 1;\n            }\n        }\n        else\n        {\n            return false;\n        }\n    }\n    \n    if(month_count == 0)\n    {\n        return false;\n    }\n    else if(day_count == 0)\n    {\n        return false;\n    }\n    else if(year_count == 0)\n    {\n        return false;\n    }\n    \n    if(month < 1 || month > 12)\n    {\n        return false;\n    }\n    \n    if(day < 1 || day > 31)\n    {\n        if(month == 2)\n        {\n            if(day < 1 || day > 29)\n            {\n                return false;\n            }\n        }\n        else if(month == 4 || month == 6 || month == 9 || month == 11)\n        {\n            if(\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp2iltdbw3.d(112): Error: expression expected, not `unittest`\n/tmp/tmp2iltdbw3.d(113): Error: found `{` when expecting `)`\n/tmp/tmp2iltdbw3.d(133): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp2iltdbw3.d(133): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2iltdbw3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            if(i == 0)\n                return false;\n            else if(i == 1)\n                month = 0;\n            else if(i == 2)\n                day = 0;\n            else if(i == 4)\n                year = 0;\n            else\n                return false;\n        }\n        else if(date[i] >= '0' && date[i] <= '9')\n        {\n            if(month == 0)\n                month = date[i] - '0';\n            else if(day == 0)\n                day = date[i] - '0';\n            else if(year == 0)\n                year = date[i] - '0';\n            else\n                return false;\n        }\n        else\n            return false;\n        i++;\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day > 31)\n        return false;\n    if(month == 2 && day > 29)\n        return false;\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        if(day < 1 || day > 30)\n            return false;\n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day < 1 || day > 29)\n            return false;\n    if(year < 1 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp5t0dsyno.d(30): Error: no property `length` for type `string`\n/tmp/tmp5t0dsyno.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5t0dsyno.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    string month_str = date.substr(0,2);\n    string day_str = date.substr(3,2);\n    string year_str = date.substr(6,4);\n    \n    if(month_str == \"00\")\n        return false;\n    \n    if(month_str == \"01\")\n        month = 1;\n    else if(month_str == \"02\")\n        month = 2;\n    else if(month_str == \"03\")\n        month = 3;\n    else if(month_str == \"04\")\n        month = 4;\n    else if(month_str == \"05\")\n        month = 5;\n    else if(month_str == \"06\")\n        month = 6;\n    else if(month_str == \"07\")\n        month = 7;\n    else if(month_str == \"08\")\n        month = 8;\n    else if(month_str == \"09\")\n        month = 9;\n    else if(month_str == \"10\")\n        month = 10;\n    else if(month_str == \"11\")\n        month = 11;\n    else if(month_str == \"12\")\n        month = 12;\n    else\n        return false;\n    \n    if(day_str == \"00\")\n        return false;\n    \n    if(day_str == \"01\")\n        day = 1;\n    else if(day_str == \"02\")\n        day = 2;\n    else if(day_str == \"03\")\n        day = 3;\n    else if(day_str == \"04\")\n        day = 4;\n    else if(day_str == \"05\")\n        day = 5;\n    else if(day_str == \"06\")\n        day = 6;\n    else if(day_str == \"07\")\n        day = 7;\n    else if(day_str == \"08\")\n        day = 8;\n    else if(day_str == \"09\")\n        day =\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpca9uwufu.d(92): Error: expression expected, not `unittest`\n/tmp/tmpca9uwufu.d(93): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpca9uwufu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    if(date.length() < 8)\n        return false;\n    if(date.length() > 10)\n        return false;\n    if(date.length() == 10)\n    {\n        if(date.substr(4,2) == \"0\")\n            return false;\n    }\n    if(date.length() == 8)\n    {\n        if(date.substr(2,2) == \"0\")\n            return false;\n    }\n    if(date.length() == 6)\n    {\n        if(date.substr(0,2) == \"0\")\n            return false;\n    }\n    if(date.length() == 4)\n    {\n        if(date.substr(0,1) == \"0\")\n            return false;\n    }\n    if(date.length() == 2)\n    {\n        if(date.substr(0,1) == \"0\")\n            return false;\n    }\n    if(date.length() == 1)\n    {\n        if(date.substr(0,1) == \"0\")\n            return false;\n    }\n    if(date.length() == 10)\n    {\n        if(date.substr(6,2) == \"0\")\n            return false;\n    }\n    if(date.length() == 8)\n    {\n        if(date.substr(4,2) == \"0\")\n            return false;\n    }\n    if(date.length() == 6)\n    {\n        if(date.substr(2,2) == \"0\")\n            return false;\n    }\n    if(date.length() == 4)\n    {\n        if(date.substr(0,1) == \"0\")\n            return false;\n    }\n    if(date.length() == 2)\n    {\n        if(date.substr(0,1) == \"0\")\n            return false;\n    }\n    if(date.length() == 1)\n    {\n        if(date.substr(0,1) == \"0\")\n            return\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpa8zt8qfr.d(95): Error: expression expected, not `unittest`\n/tmp/tmpa8zt8qfr.d(96): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpa8zt8qfr.d(116): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa8zt8qfr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 6)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(4,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(2,2));\n        year = stoi(date.substr(3,4));\n    }\n    else if(date.length() == 2)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(1,1));\n        year = stoi(date.substr(2,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpv5d7ebpo.d(86): Error: found `unittest` when expecting `)`\n/tmp/tmpv5d7ebpo.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5d7ebpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int month_count = 0;\n    int day_count = 0;\n    int year_count = 0;\n    \n    for(int i = 0; i < date.length(); i++)\n    {\n        if(date[i] == '-')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                year_count = 0;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n        else if(date[i] >= '0' && date[i] <= '9')\n        {\n            if(month_count == 0)\n            {\n                month_count = 1;\n                day_count = 0;\n                year_count = 0;\n            }\n            else if(day_count == 0)\n            {\n                day_count = 1;\n                year_count = 0;\n            }\n            else if(year_count == 0)\n            {\n                year_count = 1;\n            }\n        }\n        else\n        {\n            return false;\n        }\n    }\n    \n    if(month_count == 0)\n        return false;\n    \n    if(day_count == 0)\n        return false;\n    \n    if(year_count == 0)\n        return false;\n    \n    if(month_count == 1)\n    {\n        if(day_count == 1)\n        {\n            if(year_count == 4)\n            {\n                if(date[0] == '0')\n                    return false;\n            }\n            else if(year_count == 6)\n            {\n                if(date[0] == '0')\n                    return false;\n            }\n            else if(year_count == 9)\n            {\n                \nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp0hao_6ct.d(111): Error: found `unittest` instead of statement\n/tmp/tmp0hao_6ct.d(132): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0hao_6ct.d(132): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0hao_6ct.d(132): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0hao_6ct.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() != 10)\n        return false;\n    \n    if(date[2] == '-')\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2 && day > 29)\n        return false;\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(year < 1 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp1vwus99a.d(30): Error: no property `length` for type `string`\n/tmp/tmp1vwus99a.d(37): Error: no property `length` for type `string`\n/tmp/tmp1vwus99a.d(42): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp1vwus99a.d(43): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp1vwus99a.d(44): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp1vwus99a.d(48): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp1vwus99a.d(49): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp1vwus99a.d(50): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1vwus99a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    if(date.length() < 8)\n        return false;\n    if(date.length() > 10)\n        return false;\n    if(date[2] != '-')\n        return false;\n    if(date[5] != '-')\n        return false;\n    if(date[8] != '-')\n        return false;\n    if(date[0] < '0' || date[0] > '9')\n        return false;\n    if(date[1] < '0' || date[1] > '9')\n        return false;\n    if(date[3] < '0' || date[3] > '9')\n        return false;\n    if(date[4] < '0' || date[4] > '9')\n        return false;\n    if(date[6] < '0' || date[6] > '9')\n        return false;\n    if(date[7] < '0' || date[7] > '9')\n        return false;\n    if(date[9] < '0' || date[9] > '9')\n        return false;\n    if(date[10] < '0' || date[10] > '9')\n        return false;\n    if(date[11] < '0' || date[11] > '9')\n        return false;\n    if(date[12] < '0' || date[12] > '9')\n        return false;\n    if(date[13] < '0' || date[13] > '9')\n        return false;\n    if(date[14] < '0' || date[14] > '9')\n        return false;\n    if(date[15] < '0' || date[15] > '9')\n        return false;\n    if(date[16] < '0' || date[16] > '9')\n        return false;\n    if(date[17] < '0' || date[17] > '9')\n        return false;\n    if(date[18] < '0' || date[18] > '9')\n\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpriito20g.d(74): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpriito20g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() < 8)\n        return false;\n    \n    if(date.length() > 10)\n        return false;\n    \n    if(date[0] == '0')\n        return false;\n    \n    if(date[2] == '-')\n        return false;\n    \n    if(date[5] == '-')\n        return false;\n    \n    if(date[8] == '-')\n        return false;\n    \n    if(date[0] < '0' || date[0] > '9')\n        return false;\n    \n    if(date[2] < '0' || date[2] > '9')\n        return false;\n    \n    if(date[5] < '0' || date[5] > '9')\n        return false;\n    \n    if(date[8] < '0' || date[8] > '9')\n        return false;\n    \n    if(date[0] > '9')\n        return false;\n    \n    if(date[2] > '9')\n        return false;\n    \n    if(date[5] > '9')\n        return false;\n    \n    if(date[8] > '9')\n        return false;\n    \n    if(date[0] > '2')\n        return false;\n    \n    if(date[2] > '2')\n        return false;\n    \n    if(date[5] > '2')\n        return false;\n    \n    if(date[8] > '2')\n        return false;\n    \n    if(date[0] > '1')\n        return false;\n    \n    if(date[2] > '1')\n        return false;\n    \n    if(date[5] > '1')\n        return false;\n    \n    if(date[8] > '1')\n        return false;\n    \n    if(date[2] > '1')\n        return false;\n\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmphznjtyl_.d(106): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphznjtyl_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    if(date.length() < 8)\n        return false;\n    if(date.length() > 10)\n        return false;\n    if(date.length() == 10)\n    {\n        if(date[4] != '-' || date[7] != '-')\n            return false;\n    }\n    if(date[0] < '0' || date[0] > '9')\n        return false;\n    if(date[1] < '0' || date[1] > '9')\n        return false;\n    if(date[2] < '0' || date[2] > '9')\n        return false;\n    if(date[3] < '0' || date[3] > '9')\n        return false;\n    if(date[5] < '0' || date[5] > '9')\n        return false;\n    if(date[6] < '0' || date[6] > '9')\n        return false;\n    if(date[8] < '0' || date[8] > '9')\n        return false;\n    if(date[9] < '0' || date[9] > '9')\n        return false;\n    if(date[10] < '0' || date[10] > '9')\n        return false;\n    if(date[1] > '2')\n        return false;\n    if(date[2] > '2')\n        return false;\n    if(date[3] > '2')\n        return false;\n    if(date[5] > '2')\n        return false;\n    if(date[6] > '2')\n        return false;\n    if(date[8] > '2')\n        return false;\n    if(date[9] > '2')\n        return false;\n    if(date[10] > '2')\n        return false;\n    if(date[1] > '1')\n        return false;\n    if(date[2] > '1')\n        return false;\n    if(date[3] > '1')\n        return false;\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpt2sre11_.d(81): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2sre11_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    if(date.length() < 8)\n        return false;\n    if(date.length() > 10)\n        return false;\n    if(date.length() == 10)\n    {\n        if(date.substr(4,2) == \"0\")\n            return false;\n    }\n    if(date.length() == 8)\n    {\n        if(date.substr(2,2) == \"0\")\n            return false;\n    }\n    if(date.length() == 6)\n    {\n        if(date.substr(0,2) == \"0\")\n            return false;\n    }\n    if(date.length() == 4)\n    {\n        if(date.substr(0,1) == \"0\")\n            return false;\n    }\n    if(date.length() == 2)\n    {\n        if(date.substr(0,1) == \"0\")\n            return false;\n    }\n    if(date.length() == 1)\n    {\n        if(date.substr(0,1) == \"0\")\n            return false;\n    }\n    if(date.length() == 10)\n    {\n        if(date.substr(6,2) == \"0\")\n            return false;\n    }\n    if(date.length() == 8)\n    {\n        if(date.substr(4,2) == \"0\")\n            return false;\n    }\n    if(date.length() == 6)\n    {\n        if(date.substr(2,2) == \"0\")\n            return false;\n    }\n    if(date.length() == 4)\n    {\n        if(date.substr(0,1) == \"0\")\n            return false;\n    }\n    if(date.length() == 2)\n    {\n        if(date.substr(0,1) == \"0\")\n            return false;\n    }\n    if(date.length() == 1)\n    {\n        if(date.substr(0,1) == \"0\")\n            return\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpa8zt8qfr.d(95): Error: expression expected, not `unittest`\n/tmp/tmpa8zt8qfr.d(96): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpa8zt8qfr.d(116): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa8zt8qfr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int i = 0;\n    while(i < date.length())\n    {\n        if(date[i] == '-')\n        {\n            if(month == 0)\n            {\n                month = 1;\n                i++;\n            }\n            else\n                return false;\n        }\n        else if(date[i] == '/')\n        {\n            if(day == 0)\n            {\n                day = 1;\n                i++;\n            }\n            else\n                return false;\n        }\n        else if(date[i] == ' ')\n        {\n            i++;\n        }\n        else if(date[i] >= '0' && date[i] <= '9')\n        {\n            if(day == 0)\n                day = date[i] - '0';\n            else if(month == 0)\n                month = date[i] - '0';\n            else if(year == 0)\n                year = date[i] - '0';\n            else\n                return false;\n        }\n        else\n            return false;\n        i++;\n    }\n    \n    if(month == 0 || day == 0 || year == 0)\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n    {\n        if(month == 2)\n            return day >= 29;\n        else\n            return day >= 30;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n        return day >= 31;\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n        return day >= 30;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmpx8n24uar.d(30): Error: no property `length` for type `string`\n/tmp/tmpx8n24uar.d(38): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx8n24uar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    if(date.length() == 10)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(6,4));\n    }\n    else if(date.length() == 7)\n    {\n        month = stoi(date.substr(0,2));\n        day = stoi(date.substr(3,2));\n        year = stoi(date.substr(5,4));\n    }\n    else if(date.length() == 4)\n    {\n        month = stoi(date.substr(0,1));\n        day = stoi(date.substr(2,1));\n        year = stoi(date.substr(3,4));\n    }\n    else\n        return false;\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 0 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmprgxim0a7.d(30): Error: no property `length` for type `string`\n/tmp/tmprgxim0a7.d(37): Error: no property `length` for type `string`\n/tmp/tmprgxim0a7.d(39): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmprgxim0a7.d(40): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmprgxim0a7.d(41): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmprgxim0a7.d(43): Error: no property `length` for type `string`\n/tmp/tmprgxim0a7.d(45): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmprgxim0a7.d(46): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmprgxim0a7.d(47): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmprgxim0a7.d(49): Error: no property `length` for type `string`\n/tmp/tmprgxim0a7.d(51): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmprgxim0a7.d(52): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmprgxim0a7.d(53): Error: undefined identif",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYou have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>> valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n    false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n{\n    if(date.length() == 0)\n        return false;\n    \n    int month = 0;\n    int day = 0;\n    int year = 0;\n    \n    int month_index = date.find(\"-\");\n    if(month_index == -1)\n        return false;\n    \n    int day_index = date.find(\"-\", month_index + 1);\n    if(day_index == -1)\n        return false;\n    \n    int year_index = date.find(\"-\", day_index + 1);\n    if(year_index == -1)\n        return false;\n    \n    month = stoi(date.substr(0, month_index));\n    day = stoi(date.substr(month_index + 1, day_index - month_index - 1));\n    year = stoi(date.substr(day_index + 1, year_index - day_index - 1));\n    \n    if(month < 1 || month > 12)\n        return false;\n    \n    if(day < 1 || day > 31)\n        return false;\n    \n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    \n    if(year < 1000 || year > 9999)\n        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "/tmp/tmp388sn2x4.d(30): Error: no property `length` for type `string`\n/tmp/tmp388sn2x4.d(37): Error: no property `find` for type `string`\n/tmp/tmp388sn2x4.d(41): Error: no property `find` for type `string`\n/tmp/tmp388sn2x4.d(45): Error: no property `find` for type `string`\n/tmp/tmp388sn2x4.d(49): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp388sn2x4.d(50): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp388sn2x4.d(51): Error: undefined identifier `stoi`, did you mean import `std`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp388sn2x4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}