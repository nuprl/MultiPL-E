{
  "name": "HumanEval_91_is_bored",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n",
  "tests": "unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp8xc7xlk5.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xc7xlk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n            i++;\n        }\n        else if(S[i] == '.' || S[i] == '?' || S[i] == '!')\n            i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpm_6atfgy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_6atfgy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n            count++;\n        else if(S[i] == '.' || S[i] == '?' || S[i] == '!')\n            count = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp71u4xgjo.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp71u4xgjo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp8xc7xlk5.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xc7xlk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    long len = S.length();\n    for (long i = 0; i < len; i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpvc_hztb6.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvc_hztb6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp8xc7xlk5.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xc7xlk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n            count++;\n        else if(S[i] == '.' || S[i] == '?' || S[i] == '!')\n            count = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp71u4xgjo.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp71u4xgjo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long n = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            n++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp0p8nwz9o.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0p8nwz9o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long n = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            n++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp0p8nwz9o.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0p8nwz9o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long n = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            n++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpooo07y8c.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpooo07y8c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp8xc7xlk5.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xc7xlk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long n = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            n++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp0p8nwz9o.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0p8nwz9o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp8xc7xlk5.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xc7xlk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    long i = 0;\n    while (i < S.length()) {\n        if (S[i] == 'I') {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp0dnrbkyf.d(20): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0dnrbkyf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long n = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            n++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp0p8nwz9o.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0p8nwz9o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp8xc7xlk5.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xc7xlk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp8xc7xlk5.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xc7xlk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    long len = S.length();\n    for(long i = 0; i < len; i++)\n    {\n        if(S[i] == 'I')\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpv4208m2q.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv4208m2q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp8xc7xlk5.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xc7xlk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp8xc7xlk5.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xc7xlk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp8xc7xlk5.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xc7xlk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    long len = S.length();\n    for(long i = 0; i < len; i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpx1g2xxlg.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx1g2xxlg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp8xc7xlk5.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xc7xlk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp8xc7xlk5.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xc7xlk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmph3g01poy.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph3g01poy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    long i = 0;\n    while (i < S.length()) {\n        if (S[i] == 'I') {\n            i++;\n            while (i < S.length() && S[i] != '.' && S[i] != '?' && S[i] != '!') {\n                i++;\n            }\n            if (i < S.length()) {\n                i++;\n            }\n            count++;\n        } else {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpdd620cgg.d(20): Error: no property `length` for type `string`\n/tmp/tmpdd620cgg.d(23): Error: no property `length` for type `string`\n/tmp/tmpdd620cgg.d(26): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdd620cgg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n            count++;\n        else if(S[i] == '.' || S[i] == '?' || S[i] == '!')\n            count = 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp71u4xgjo.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp71u4xgjo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    long len = S.length();\n    for (int i = 0; i < len; i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp0ylag252.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ylag252.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == 'I')\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmp8xc7xlk5.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xc7xlk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpw00an4y1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw00an4y1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293041,
      "stdout": "",
      "stderr": "/tmp/tmpjqv11jp1.d(19): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqv11jp1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}