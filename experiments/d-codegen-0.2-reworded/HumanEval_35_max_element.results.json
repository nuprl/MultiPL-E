{
  "name": "HumanEval_35_max_element",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n",
  "tests": "unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new std.runtime.IndexOutOfBoundsException();\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmpipjjq39f.d(14): Error: undefined identifier `runtime` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpipjjq39f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new Error(\"max_element: empty array\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    return l[0];\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp92oys6c1.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x42808d]\n??:? void tmp92oys6c1.__unittest_L15_C1() [0x427d6f]\n??:? void tmp92oys6c1.__modtest() [0x427e10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430111]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43009d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af55]\n??:? runModuleUnitTests [0x42bec1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428550]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new Error(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Empty array\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmppzgz_5e6.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzgz_5e6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Empty array\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmppzgz_5e6.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzgz_5e6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new IllegalArgumentException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmprvc96cpq.d(14): Error: undefined identifier `IllegalArgumentException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprvc96cpq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    return l[0];\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp92oys6c1.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x42808d]\n??:? void tmp92oys6c1.__unittest_L15_C1() [0x427d6f]\n??:? void tmp92oys6c1.__modtest() [0x427e10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430111]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43009d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af55]\n??:? runModuleUnitTests [0x42bec1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428550]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Empty array\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmppzgz_5e6.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzgz_5e6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new Error(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    return l[0];\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp92oys6c1.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x42808d]\n??:? void tmp92oys6c1.__unittest_L15_C1() [0x427d6f]\n??:? void tmp92oys6c1.__modtest() [0x427e10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430111]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43009d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af55]\n??:? runModuleUnitTests [0x42bec1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428550]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Empty array\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmppzgz_5e6.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzgz_5e6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Empty array\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmppzgz_5e6.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzgz_5e6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++) {\n        if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    return l[0];\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp92oys6c1.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x42808d]\n??:? void tmp92oys6c1.__unittest_L15_C1() [0x427d6f]\n??:? void tmp92oys6c1.__modtest() [0x427e10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430111]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43009d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af55]\n??:? runModuleUnitTests [0x42bec1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428550]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Empty array\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmppzgz_5e6.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzgz_5e6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Empty array\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmppzgz_5e6.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzgz_5e6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++) {\n        if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++) {\n        if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"max_element: empty array\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmpu3sb0rxb.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu3sb0rxb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new IllegalArgumentException(\"Empty array\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmpv2fcxd0d.d(14): Error: undefined identifier `IllegalArgumentException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv2fcxd0d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Empty array\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmppzgz_5e6.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzgz_5e6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new IllegalArgumentException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmprvc96cpq.d(14): Error: undefined identifier `IllegalArgumentException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprvc96cpq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Empty array\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmppzgz_5e6.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzgz_5e6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Empty array\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmppzgz_5e6.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzgz_5e6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Array is empty\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmp9yjxldmy.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yjxldmy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    if (l.length == 0)\n        throw new RuntimeException(\"Empty array\");\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "/tmp/tmppzgz_5e6.d(14): Error: undefined identifier `RuntimeException`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzgz_5e6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}