name: HumanEval_24_largest_divisor
language: humaneval_to_typescript.py
prompt: "//For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n: number):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_divisor;\n  assert.deepEqual(candidate(3),1);\n\
  \  assert.deepEqual(candidate(7),1);\n  assert.deepEqual(candidate(10),5);\n  assert.deepEqual(candidate(100),50);\n\
  \  assert.deepEqual(candidate(49),7);\n}\n\ntest();"
completions: ["  let max_divisor = 1;\n  let max_divisor_p = 0;\n  let max_divisor_p2\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor_p\
    \ = i;\n      let divisor_p2 = i;\n      for (let j = 2; j <= Math.sqrt(i); j++)\
    \ {\n        if (i % j === 0) {\n          divisor_p = j;\n          divisor_p2\
    \ = j;\n          break;\n        }\n      }\n      if (divisor_p2 > max_divisor_p2)\
    \ {\n        max_divisor_p2 = divisor_p2;\n        max_divisor_p = divisor_p;\n\
    \      }\n    }\n  }\n  return max_divisor_p2;\n}\n", "  let max_divisor = 1;\n\
    \  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i ===\
    \ 0) {\n      if (max_divisor < i) {\n        max_divisor = i;\n        max_divisor_p\
    \ = i;\n      }\n    }\n  }\n  return max_divisor_p;\n}\n", "  let max_divisor\
    \ = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n\
    \ % i == 0) {\n      if (max_divisor < i) {\n        max_divisor = i;\n      \
    \  max_divisor_p = i;\n      }\n    }\n  }\n  return max_divisor;\n}\n", "  let\
    \ max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i < n; ++i) {\n\
    \    if (n % i == 0) {\n      if (max_divisor < i) {\n        max_divisor = i;\n\
    \        max_divisor_p = i;\n      }\n    }\n  }\n  return max_divisor;\n}\n",
  "  let max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++)\
    \ {\n    if (n % i == 0) {\n      let divisor_p = i / n;\n      if (divisor_p\
    \ > max_divisor_p) {\n        max_divisor_p = divisor_p;\n        max_divisor\
    \ = i;\n      }\n    }\n  }\n  return max_divisor;\n}\n", "  let max_divisor =\
    \ 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n %\
    \ i == 0) {\n      if (max_divisor < i) {\n        max_divisor = i;\n        max_divisor_p\
    \ = i;\n      }\n    }\n  }\n  return max_divisor;\n}\n", "  let max_divisor =\
    \ 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n %\
    \ i == 0) {\n      if (max_divisor < i) {\n        max_divisor = i;\n        max_divisor_p\
    \ = i;\n      }\n    }\n  }\n  return max_divisor;\n}\n", "  let max_divisor =\
    \ 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n %\
    \ i === 0) {\n      let divisor_p = divisors(i);\n      if (divisor_p > max_divisor_p)\
    \ {\n        max_divisor_p = divisor_p;\n        max_divisor = i;\n      }\n \
    \   }\n  }\n  return max_divisor;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n\
    \  }\n  return max_divisor;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      max_divisor\
    \ = i;\n      max_divisor_p = i;\n    }\n  }\n  return max_divisor;\n}\n", " \
    \ let max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++)\
    \ {\n    if (n % i == 0) {\n      if (max_divisor < i) {\n        max_divisor\
    \ = i;\n        max_divisor_p = i;\n      }\n    }\n  }\n  return max_divisor;\n\
    }\n", "  let max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <=\
    \ n; i++) {\n    if (n % i == 0) {\n      if (max_divisor < i) {\n        max_divisor\
    \ = i;\n        max_divisor_p = i;\n      }\n    }\n  }\n  return max_divisor;\n\
    }\n", "  let max_divisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i\
    \ == 0) {\n      max_divisor = i;\n    }\n  }\n  return max_divisor;\n}\n", " \
    \ let max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++)\
    \ {\n    if (n % i == 0) {\n      if (max_divisor < i) {\n        max_divisor\
    \ = i;\n        max_divisor_p = i;\n      }\n    }\n  }\n  return max_divisor;\n\
    }\n", "  let max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <=\
    \ n; i++) {\n    if (n % i == 0) {\n      if (max_divisor < i) {\n        max_divisor\
    \ = i;\n        max_divisor_p = i;\n      }\n    }\n  }\n  return max_divisor_p;\n\
    }\n", "  let max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <\
    \ n; i++) {\n    if (n % i == 0) {\n      if (max_divisor < i) {\n        max_divisor\
    \ = i;\n        max_divisor_p = i;\n      }\n    }\n  }\n  return max_divisor;\n\
    }\n", "  let max_divisor = 1;\n  let max_divisor_p = 0;\n  let max_divisor_pp\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_p = max_divisor_pp;\n\
    \      }\n      max_divisor_pp = i;\n    }\n  }\n  return max_divisor;\n}\n",
  "  let max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++)\
    \ {\n    if (n % i == 0) {\n      if (max_divisor < i) {\n        max_divisor\
    \ = i;\n        max_divisor_p = i;\n      }\n    }\n  }\n  return max_divisor;\n\
    }\n", "  let max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <=\
    \ n; i++) {\n    if (n % i == 0) {\n      max_divisor = i;\n      max_divisor_p\
    \ = i;\n    }\n  }\n  return max_divisor;\n}\n", "  let max_divisor = 1;\n  let\
    \ max_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n\
    \      let p = Math.floor(n / i);\n      if (p > max_divisor_p) {\n        max_divisor_p\
    \ = p;\n        max_divisor = i;\n      }\n    }\n  }\n  return max_divisor;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
