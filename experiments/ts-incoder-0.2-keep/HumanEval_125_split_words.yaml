completions:
- '  return txt.split(/\s+/);

  }

  '
- "  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) {\n    return\
  \ [];\n  }\n  if (words.length === 1) {\n    return words;\n  }\n  const lowerCaseWords\
  \ = words.map(w => w.toLowerCase());\n  const evenOrderWords = lowerCaseWords.filter(w\
  \ => w.split('').every((c, i) => c === w[i % w.length]));\n  return evenOrderWords.length\
  \ % 2 === 1 ? evenOrderWords : evenOrderWords.map(w => w.split(',').map(w => w.trim()));\n\
  }\n"
- "  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) {\n    return\
  \ words;\n  }\n  const letters = txt.trim().split(/[a-z]+/);\n  if (letters.length\
  \ === 0) {\n    return words;\n  }\n  const evenLetters = letters.filter(letter\
  \ => letter % 2 === 0);\n  const oddLetters = letters.filter(letter => letter %\
  \ 2 === 1);\n  return evenLetters.length % 2 === 1 ? oddLetters : evenLetters;\n\
  }\n"
- "  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) return 0;\n\
  \  if (words.length === 1) return words[0];\n  const letters = words[0].split('');\n\
  \  const letterCount = letters.length;\n  const oddLetters = letters.filter((letter,\
  \ index) => index % 2 === 1);\n  if (oddLetters.length === letterCount) return letterCount;\n\
  \  return letterCount + 1;\n}\n"
- '  return txt.split(/\s+/).filter(Boolean);

  }

  '
- "  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length\
  \ > 0).map(w => w.toLowerCase());\n}\n"
- "  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length\
  \ > 0).map(w => w.toLowerCase());\n}\n"
- "  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) {\n    return\
  \ words;\n  }\n  const hasCommas = words.some((word) => word.includes(','));\n \
  \ if (hasCommas) {\n    return words.map((word) => word.split(',').map((word) =>\
  \ word.toLowerCase()).join(''));\n  }\n  const hasSpaces = words.some((word) =>\
  \ word.includes(' '));\n  if (hasSpaces) {\n    return words.map((word) => word.split('\
  \ ').map((word) => word.toLowerCase()).join(''));\n  }\n  return words.map((word)\
  \ => word.toLowerCase());\n}\n"
- '  return txt.split(/\s+/);

  }

  '
- '  return txt.split(/\s+/).filter(Boolean);

  }

  '
- "  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) {\n    return\
  \ [];\n  }\n  if (words.length === 1) {\n    return words[0];\n  }\n  const lowerCaseWords\
  \ = words.map(word => word.toLowerCase());\n  const evenOrderWords = lowerCaseWords.filter(word\
  \ => word.charCodeAt() % 2 === 0);\n  return evenOrderWords.length % 2 === 1 ? evenOrderWords\
  \ : evenOrderWords.map(word => word.toUpperCase());\n}\n"
- "  let words = txt.trim().split(/\\s+/);\n  if (words.length === 0) {\n    return\
  \ words;\n  }\n  let result = words.map(word => {\n    let lower = word.toLowerCase();\n\
  \    if (lower.includes(',')) {\n      return lower.split(',');\n    }\n    return\
  \ lower.split('');\n  });\n  return result.filter(word => word.length % 2 === 1).length;\n\
  }\n"
- "  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) {\n    return\
  \ [];\n  }\n  if (words.length === 1) {\n    return words;\n  }\n  const lowerCaseWords\
  \ = words.map(word => word.toLowerCase());\n  const evenOrderWords = lowerCaseWords.filter(word\
  \ => word[0] === 'a' && word[1] === 'b' && word[2] === 'c' && word[3] === 'd' &&\
  \ word[4] === 'e' && word[5] === 'f');\n  const oddOrderWords = lowerCaseWords.filter(word\
  \ => word[0] === 'a' && word[1] === 'b' && word[2] === 'c' && word[3] === 'd' &&\
  \ word[4] === 'e' && word[5] === 'f' && word[6] === 'g');\n  return evenOrderWords.length\
  \ % 2 === 1 ? evenOrderWords : oddOrderWords;\n}\n"
- "  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length\
  \ > 0).map(w => w.toLowerCase());\n}\n"
- "  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) return 0;\n\
  \  if (words.length === 1) return words[0];\n  const letters = words[0].split('');\n\
  \  const countLetters = letters.reduce((acc, letter) => {\n    acc[letter] = acc[letter]\
  \ + 1 || 1;\n    return acc;\n  }, {});\n  const countLettersOdd = countLetters.reduce((acc,\
  \ letter) => {\n    acc[letter] = acc[letter] + 1 || 1;\n    if (acc[letter] % 2\
  \ === 1) acc[letter] = acc[letter] - 1;\n    return acc;\n  }, {});\n  const countLettersEven\
  \ = countLetters.reduce((acc, letter) => {\n    acc[letter] = acc[letter] + 1 ||\
  \ 1;\n    if (acc[letter] % 2 === 0) acc[letter] = acc[letter] - 1;\n    return\
  \ acc;\n  }, {});\n  const countLettersOddEven = countLetters.reduce((acc, letter)\
  \ => {\n    acc[letter] = acc[letter] + 1 || 1;\n    if (acc[letter] % 2 === 1)\
  \ acc[letter] = acc[letter] - 1;\n    if (acc[letter] % 2 === 0) acc[letter] = acc[letter]\
  \ - 1;\n    return acc;\n  }, {});\n  const countLettersEvenOdd = countLetters.reduce((acc,\
  \ letter) => {\n    acc[letter] = acc[letter] + 1 || 1;\n    if (acc[letter] % 2\
  \ === 0) acc[letter] = acc[letter] - 1;\n    if (acc[letter] % 2 === 1) acc[letter]\
  \ = acc[letter] - 1;\n    return acc;\n  }, {});\n  const countLettersOddEvenOdd\
  \ = countLetters.reduce((acc, letter) => {\n    acc[letter] = acc[letter] + 1 ||\
  \ 1;\n    if (acc[letter] % 2 === 1) acc[letter] = acc[letter] - 1;\n    if (acc[letter]\
  \ % 2 === 0) acc[letter] = acc[letter] - 1;\n    if (acc[letter] % 2 === 1) acc[letter]\
  \ = acc[letter] - 1;\n    return acc;\n  }, {});\n  const countLettersEvenOddOdd\
  \ = countLetters.reduce((acc, letter) => {\n    acc[letter] = acc[letter] + 1 ||\
  \ 1;\n    if (acc[letter] % 2 === 0) acc[letter] = acc[letter] - 1;\n    if (acc[letter]\
  \ % 2 === 1) acc[letter] = acc[letter] - 1;\n    if (acc[letter] % 2 === 0) acc[letter]\
  \ = acc[letter] - 1;\n    if (acc["
- "  const words = txt.trim().split(/\\s+/);\n  return words.filter(w => w.length\
  \ > 0).map(w => w.toLowerCase());\n}\n"
- '  return txt.split(/\s+/);

  }

  '
- '  return txt.split(/\s+/);

  }

  '
- "  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) {\n    return\
  \ words;\n  }\n  const words_with_commas = words.join(',');\n  const letters = words_with_commas.split('');\n\
  \  const odd_letters = letters.filter((letter) => letter % 2 === 1);\n  return odd_letters.length;\n\
  }\n"
- "  let words = txt.split(/\\s+/);\n  if (words.length === 0) return words.length;\n\
  \  if (words.length === 1) return words[0];\n  let letters = words[0].split('');\n\
  \  let count = 0;\n  for (let i = 1; i < words.length; i++) {\n    let letter =\
  \ words[i].split('')[0];\n    if (letters.indexOf(letter) === -1) {\n      letters.push(letter);\n\
  \      count++;\n    }\n  }\n  return count;\n}\n"
language: ts
name: HumanEval_125_split_words
prompt: "//Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n// should split on commas ',' if no commas\
  \ exists you should return the number of lower-case letters with odd order in the\n\
  // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// split_words(\"\
  Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"Hello,world!\"\
  ) \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") == 3\nfunction split_words(txt:\
  \ string): string[]| number {\n"
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
  \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
  ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
  Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"\
  Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
  aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
  \"),0);\n}\n\ntest();"
