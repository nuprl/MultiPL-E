completions:
- "    let max = 0;\n    let freq = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
  \        if (lst[i] > 0 && lst[i] === lst[max]) {\n            freq++;\n       \
  \ } else {\n            if (freq > max) {\n                max = freq;\n       \
  \     }\n            freq = 1;\n        }\n    }\n    return max;\n}\n</code>\n\
  <|/ a tags=javascript,algorithm,arrays |>\n<| a dscore=0 |>\n<code>"
- "    let max: number = Number.MIN_SAFE_INTEGER;\n    let index: number = -1;\n \
  \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n      \
  \      max = lst[i];\n            index = i;\n        }\n    }\n    return index;\n\
  }\n"
- "    let max: number = -1;\n    let index: number = -1;\n    for (let i = 0; i <\
  \ lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n \
  \           index = i;\n        }\n    }\n    return max;\n}\n"
- "    let max: number = lst[0]\n    let maxCount: number = 0\n    for (let i = 1;\
  \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i]\n\
  \            maxCount = 1\n        } else if (lst[i] == max) {\n            maxCount++\n\
  \        }\n    }\n    return maxCount > lst.length ? -1 : max\n}\n"
- "    let max = 0;\n    let freq = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
  \        if (lst[i] > max) {\n            max = lst[i];\n            freq = 1;\n\
  \        } else if (lst[i] === max) {\n            freq++;\n        }\n    }\n \
  \   return freq > max ? -1 : max;\n}\n</code>\n<|/ a tags=javascript,algorithm,arrays\
  \ |>\n<| a dscore=0 |>\n<code>"
- "  if (lst.length === 0) {\n    return -1;\n  }\n  let maxVal = lst[0];\n  let maxCount\
  \ = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n \
  \     maxVal = lst[i];\n      maxCount = 1;\n    } else if (lst[i] === maxVal) {\n\
  \      maxCount++;\n    }\n  }\n  return maxVal > 0 ? maxVal : -1;\n}\n"
- "  let max: number = -1;\n  let freq: number = 0;\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] ==\
  \ max) {\n      freq++;\n    }\n  }\n  return freq > max ? -1 : max;\n}\n"
- "  let maxVal = lst[0]\n  let maxFreq = lst[0]\n  for (let i = 1; i < lst.length;\
  \ i++) {\n    if (lst[i] > maxVal) {\n      maxVal = lst[i]\n      maxFreq = i\n\
  \    } else if (lst[i] === maxVal && lst[i] > maxFreq) {\n      maxFreq = i\n  \
  \  }\n  }\n  return maxVal\n}\n"
- "  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\
  \  return maxIndex;\n}\n"
- "  let max: number = lst[0]\n  let index: number = 1\n  for (let i = 1; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      index = i\n    }\n\
  \  }\n  return index\n}\n"
- "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
  \ |>\n<code>"
- "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "  let max: number = Number.MAX_SAFE_INTEGER;\n  let index: number = -1;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      index = i;\n    }\n  }\n  return index;\n}\n"
- "    if (lst.length === 0) {\n        return -1;\n    }\n    let max = 0;\n    let\
  \ maxIndex = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
  \ > max) {\n            max = lst[i];\n            maxIndex = i;\n        }\n  \
  \  }\n    if (maxIndex === lst.length - 1) {\n        return max;\n    }\n    return\
  \ -1;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "  let maxVal = lst[0]\n  let maxFreq = lst[0]\n  for (let i = 1; i < lst.length;\
  \ i++) {\n    if (lst[i] > maxVal) {\n      maxVal = lst[i]\n      maxFreq = i\n\
  \    }\n  }\n  return maxVal >= 0 ? maxVal : -1\n}\n"
- "    let max: number = -1;\n    let freq: number = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (lst[i] > 0 && lst[i] === lst[freq]) {\n            freq++;\n\
  \        } else {\n            max = Math.max(max, lst[i]);\n            freq =\
  \ 1;\n        }\n    }\n    return max;\n}\n"
- "    let max: number = -1;\n    let freq: number = 0;\n    for (let num of lst)\
  \ {\n        freq++;\n        if (num > 0) {\n            max = Math.max(max, num);\n\
  \        }\n    }\n    if (freq > 0) {\n        return max;\n    }\n    return -1;\n\
  }\n"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let maxCount: number = 0;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      maxCount = 1;\n    } else if (lst[i] == max) {\n      maxCount++;\n    }\n\
  \  }\n  return maxCount > lst.length ? -1 : max;\n}\n"
- "    let max = 0;\n    let freq = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
  \        if (lst[i] > max) {\n            max = lst[i];\n            freq = 1;\n\
  \        } else if (lst[i] === max) {\n            freq++;\n        }\n    }\n \
  \   return freq > max ? -1 : max;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] === max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    return maxIndex;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "  if (lst.length < 1) return -1;\n  let max = 0;\n  let freq = 0;\n  for (let i\
  \ = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n  \
  \    freq = 1;\n    } else if (lst[i] === max) {\n      freq++;\n    }\n  }\n  return\
  \ freq > max ? -1 : max;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    if (maxIndex > 0) {\n        for (let i = maxIndex;\
  \ i < lst.length; i++) {\n            if (lst[i] > max) {\n                max =\
  \ lst[i];\n                maxIndex = i;\n            }\n        }\n    }\n    return\
  \ maxIndex;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    return maxIndex;\n}\n"
- "    if (lst.length === 0) {\n        return -1;\n    }\n    let max = 0;\n    let\
  \ maxIndex = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
  \ > max) {\n            max = lst[i];\n            maxIndex = i;\n        }\n  \
  \  }\n    return maxIndex;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] === max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "    if (lst.length < 1) {\n        return -1;\n    }\n    let max = 0;\n    let\
  \ maxIndex = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
  \ > max) {\n            max = lst[i];\n            maxIndex = i;\n        }\n  \
  \  }\n    return maxIndex;\n}\n"
- "  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\
  \  return maxIndex;\n}\n"
- "    let max: number = lst[0];\n    let maxCount: number = 1;\n    for (let i =\
  \ 1; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    return maxIndex;\n}\n"
- "    let maxVal = lst[0]\n    let maxCount = 0\n    for (let i = 1; i < lst.length;\
  \ i++) {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i]\n        \
  \    maxCount = 1\n        } else if (lst[i] == maxVal) {\n            maxCount++\n\
  \        }\n    }\n    return maxVal > 0 ? maxVal : -1\n}\n"
- "  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    if (lst[i] > max) {\n      max = lst[i];\n      maxCount = 1;\n    } else if\
  \ (lst[i] == max) {\n      maxCount++;\n    }\n  }\n  if (maxCount > lst.length\
  \ / 2) {\n    return -1;\n  }\n  return max;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] === max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxCount\
  \ = 1;\n        } else if (lst[i] === max) {\n            maxCount++;\n        }\n\
  \    }\n    return maxCount > lst.length ? -1 : max;\n}\n"
- "    let max = 0;\n    let freq = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
  \        if (lst[i] > max) {\n            max = lst[i];\n            freq = 1;\n\
  \        } else if (lst[i] === max) {\n            freq++;\n        }\n    }\n \
  \   return freq > max ? -1 : max;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n\
  <| c |>\nThis solution does not work if you have a negative number in the array.\n\
  <|/ c |>\n<| c |>\nYes, I noticed that and fixed it.\n<|/ c |>\n<| a tags=javascript,arrays\
  \ |>\n<code>"
- "    let max: number = lst[0];\n    let count: number = 1;\n    for (let i = 1;\
  \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n\
  \        }\n    }\n    return count >= max ? -1 : max;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = -1;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] === max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let maxCount: number = 0;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      maxCount = 1;\n    } else if (lst[i] === max) {\n      maxCount++;\n    }\n\
  \  }\n  return max;\n}\n"
- "  if (lst.length === 0) {\n    return -1;\n  }\n  let max = 0;\n  let maxCount\
  \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let item = lst[i];\n    if\
  \ (item > max) {\n      max = item;\n      maxCount = 1;\n    } else if (item ===\
  \ max) {\n      maxCount++;\n    }\n  }\n  return max;\n}\n"
- "    if (lst.length == 0) {\n        return -1;\n    }\n    let max = 0;\n    let\
  \ maxCount = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let item =\
  \ lst[i];\n        let count = lst.filter(x => x == item).length;\n        if (count\
  \ > maxCount) {\n            max = item;\n            maxCount = count;\n      \
  \  }\n    }\n    return max;\n}\n"
- "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        let item = lst[i];\n        if (item > max) {\n            max = item;\n\
  \            maxCount = 1;\n        } else if (item === max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = -1;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let count: number = lst[i];\n        if (count\
  \ > maxCount) {\n            max = i;\n            maxCount = count;\n        }\n\
  \    }\n    return max;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] === max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "  if (lst.length < 1) return -1;\n  let max = 0;\n  let freq = 0;\n  for (let i\
  \ = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n  \
  \    freq = 1;\n    } else if (lst[i] == max) {\n      freq++;\n    }\n  }\n  return\
  \ freq > max ? -1 : max;\n}\n"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let maxCount: number = 0;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      maxCount = 1;\n    } else if (lst[i] == max) {\n      maxCount++;\n    }\n\
  \  }\n  return maxCount > lst.length ? -1 : max;\n}\n"
- "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxCount\
  \ = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n        }\n\
  \    }\n    if (maxCount == lst.length) {\n        return -1;\n    }\n    return\
  \ max;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    if (maxIndex == lst.length - 1) {\n        return\
  \ -1;\n    }\n    return max;\n}\n"
- "    let maxVal = lst[0]\n    let maxCount = 1\n    for (let i = 1; i < lst.length;\
  \ i++) {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i]\n        \
  \    maxCount = 1\n        } else if (lst[i] == maxVal) {\n            maxCount++\n\
  \        }\n    }\n    return maxCount > lst.length ? -1 : maxVal\n}\n"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let maxCount: number = -1;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      maxCount = i;\n    }\n  }\n  return maxCount > -1 ? max : -1;\n}\n"
- "    if (lst.length === 0) {\n        return -1;\n    }\n    let max = 0;\n    let\
  \ maxIndex = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
  \ > max) {\n            max = lst[i];\n            maxIndex = i;\n        }\n  \
  \  }\n    return maxIndex;\n}\n"
- "    let max: number = lst[0];\n    let maxCount: number = 1;\n    for (let i =\
  \ 1; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    if (maxCount >= lst.length) return -1;\n    return max;\n\
  }\n"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let index: number = -1;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      index = i;\n    }\n  }\n  return index > -1 ? index : -1;\n}\n"
- "    let max: number = Number.MIN_SAFE_INTEGER;\n    let index: number = -1;\n \
  \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n      \
  \      max = lst[i];\n            index = i;\n        }\n    }\n    return index;\n\
  }\n"
- "    let max: number = -1;\n    let maxCount: number = -1;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let index: number = -1;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      index = i;\n    }\n  }\n  return index === -1 ? -1 : max;\n}\n"
- "  let max: number = lst[0];\n  let freq: number = 1;\n  for (let i = 1; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    } else if (lst[i] ===\
  \ max) {\n      freq++;\n    }\n  }\n  return freq > max ? -1 : max;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = -1;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let count: number = lst[i];\n        if (count\
  \ > maxCount) {\n            max = i;\n            maxCount = count;\n        }\n\
  \    }\n    return max;\n}\n"
- "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
  \ = lst[i];\n        } else if (lst[i] === max) {\n            maxFreq += lst[i];\n\
  \        }\n    }\n    return maxFreq > 0 ? max : -1;\n}\n"
- "  if (lst.length < 1) return -1;\n  let max = 0;\n  let freq = 0;\n  for (let i\
  \ = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n  \
  \    freq = 1;\n    } else if (lst[i] == max) {\n      freq++;\n    }\n  }\n  return\
  \ freq > max ? -1 : max;\n}\n"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let maxCount: number = 0;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      maxCount = 1;\n    } else if (lst[i] == max) {\n      maxCount++;\n    }\n\
  \  }\n  return maxCount > lst.length ? -1 : max;\n}\n"
- "    let max: number = -1;\n    let index: number = -1;\n    for (let i = 0; i <\
  \ lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n \
  \           index = i;\n        }\n    }\n    return index;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    if (maxIndex >= lst.length) {\n        return -1;\n\
  \    }\n    return maxIndex;\n}\n"
- "    let max = 0;\n    let freq = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
  \        if (lst[i] > 0 && lst[i] === lst[max]) {\n            freq++;\n       \
  \ } else {\n            if (freq > max) {\n                max = freq;\n       \
  \     }\n            freq = 1;\n        }\n    }\n    if (freq > max) {\n      \
  \  return -1;\n    }\n    return max;\n}\n</code>\n<|/ a tags=algorithm,data-structures,javascript\
  \ |>\n<| c |>\nThe question states that `search` should return -1 if no such value\
  \ exists. Your code returns -1 if there is no such value but doesn't return -1 if\
  \ no such value exists. Your code also doesn't return -1 if there are no such values\
  \ but doesn't return -1 if there are multiple such values.\n<|/ c |>\n<| c |>\n\
  I missed that part, thanks for pointing it out. I've updated the answer accordingly.\n\
  <|/ c |>\n<| a dscore=0 |>\n<code>"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let index: number = -1;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      index = i;\n    }\n  }\n  return index > -1 ? index : -1;\n}\n"
- "    let max: number = lst[0]\n    let maxCount: number = 1\n    for (let i = 1;\
  \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i]\n\
  \            maxCount = 1\n        } else if (lst[i] == max) {\n            maxCount++\n\
  \        }\n    }\n    return max\n}\n"
- "    let max: number = Number.MIN_SAFE_INTEGER;\n    let index: number = -1;\n \
  \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n      \
  \      max = lst[i];\n            index = i;\n        }\n    }\n    return index;\n\
  }\n"
- "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "    let max: number = Number.NEGATIVE_INFINITY;\n    let maxCount: number = 0;\n\
  \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n     \
  \       max = lst[i];\n            maxCount = 1;\n        } else if (lst[i] ===\
  \ max) {\n            maxCount++;\n        }\n    }\n    return max;\n}\n"
- "    if (lst.length < 1) return -1;\n    let max = 0;\n    let maxIndex = 0;\n \
  \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n      \
  \      max = lst[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n\
  }\n</code>\n<|/ a |>\n<| a tags=javascript,algorithm |>\n<code>"
- "    let max: number = Number.MIN_SAFE_INTEGER;\n    let maxCount: number = 0;\n\
  \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n     \
  \       max = lst[i];\n            maxCount = 1;\n        } else if (lst[i] == max)\
  \ {\n            maxCount++;\n        }\n    }\n    return max;\n}\n</code>\n<|/\
  \ a tags=algorithm,javascript,arrays |>\n<| c |>\nThis solution doesn't work for\
  \ negative numbers. `search([-4, 1, 2, 2, 3, 1]) == -1`\n<|/ c |>\n<| c |>\nYes,\
  \ I noticed that and fixed it. Thanks for pointing it out.\n<|/ c |>\n<| a tags=algorithm,javascript,arrays\
  \ |>\n<code>"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    return maxIndex;\n}\n"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let maxCount: number = 0;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      maxCount = 1;\n    } else if (lst[i] == max) {\n      maxCount++;\n    }\n\
  \  }\n  return max;\n}\n"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let index: number = -1;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      index = i;\n    }\n  }\n  return index === -1 ? -1 : max;\n}\n"
- "    let max: number = -1;\n    let maxIndex: number = -1;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxIndex = i;\n        } else if (lst[i] === max) {\n            if\
  \ (lst[i] > lst[maxIndex]) {\n                maxIndex = i;\n            }\n   \
  \     }\n    }\n    return maxIndex;\n}\n"
- "    let max = 0;\n    let freq = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
  \        if (lst[i] > max) {\n            max = lst[i];\n            freq = 1;\n\
  \        } else if (lst[i] == max) {\n            freq++;\n        }\n    }\n  \
  \  return freq > max ? -1 : max;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = -1;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "    if (lst.length < 1) {\n        return -1;\n    }\n    let max = 0;\n    let\
  \ maxCount = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
  \ > max) {\n            max = lst[i];\n            maxCount = 1;\n        } else\
  \ if (lst[i] == max) {\n            maxCount++;\n        }\n    }\n    return max;\n\
  }\n"
- "    if (lst.length < 1) return -1;\n    let max = 0;\n    let maxIndex = 0;\n \
  \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n      \
  \      max = lst[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n\
  }\n"
- "    let max: number = Number.MIN_SAFE_INTEGER;\n    let index: number = -1;\n \
  \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n      \
  \      max = lst[i];\n            index = i;\n        }\n    }\n    return index\
  \ === -1 ? -1 : max;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    return maxIndex;\n}\n"
- "  let max: number = -1;\n  let maxCount: number = -1;\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxCount = 1;\n  \
  \  } else if (lst[i] == max) {\n      maxCount++;\n    }\n  }\n  return max;\n}\n"
- "    let max: number = Number.MIN_SAFE_INTEGER;\n    let index: number = -1;\n \
  \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n      \
  \      max = lst[i];\n            index = i;\n        }\n    }\n    return index\
  \ === -1 ? -1 : max;\n}\n"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let index: number = -1;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      index = i;\n    }\n  }\n  return index === -1 ? -1 : max;\n}\n"
- "  if (lst.length == 0) {\n    return -1;\n  }\n  let max: number = lst[0];\n  let\
  \ maxCount: number = 1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i]\
  \ > max) {\n      max = lst[i];\n      maxCount = 1;\n    } else if (lst[i] == max)\
  \ {\n      maxCount++;\n    }\n  }\n  if (maxCount >= lst.length) {\n    return\
  \ -1;\n  }\n  return max;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    if (maxIndex == lst.length - 1) {\n        return\
  \ -1;\n    }\n    return max;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    return maxIndex;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    if (maxIndex >= lst.length - 1) {\n        return\
  \ -1;\n    }\n    return maxIndex;\n}\n"
- "  if (lst.length === 0) {\n    return -1;\n  }\n  let max = 0;\n  let maxCount\
  \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n    \
  \  max = lst[i];\n      maxCount = 1;\n    } else if (lst[i] === max) {\n      maxCount++;\n\
  \    }\n  }\n  return max;\n}\n"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let index: number = -1;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      index = i;\n    }\n  }\n  return index === -1 ? -1 : max;\n}\n"
- "    let max: number = Number.MAX_SAFE_INTEGER;\n    let index: number = -1;\n \
  \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n      \
  \      max = lst[i];\n            index = i;\n        }\n    }\n    return index;\n\
  }\n"
- "    let max: number = Number.MIN_SAFE_INTEGER;\n    let index: number = -1;\n \
  \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n      \
  \      max = lst[i];\n            index = i;\n        }\n    }\n    return index\
  \ === -1 ? -1 : max;\n}\n"
- "  if (lst.length < 1) return -1;\n  let max: number = lst[0];\n  let maxCount:\
  \ number = 1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n\
  \      max = lst[i];\n      maxCount = 1;\n    } else {\n      maxCount++;\n   \
  \ }\n  }\n  return max;\n}\n"
- "  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    if (lst[i] > max) {\n      max = lst[i];\n      maxCount = 1;\n    } else if\
  \ (lst[i] === max) {\n      maxCount++;\n    }\n  }\n  return maxCount > lst.length\
  \ ? -1 : max;\n}\n"
- "    if (lst.length === 0) {\n        return -1;\n    }\n    let max = 0;\n    let\
  \ maxIndex = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
  \ > max) {\n            max = lst[i];\n            maxIndex = i;\n        }\n  \
  \  }\n    if (max >= lst[maxIndex]) {\n        return max;\n    }\n    return -1;\n\
  }\n"
- "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxCount\
  \ = 1;\n        } else if (lst[i] === max) {\n            maxCount++;\n        }\n\
  \    }\n    return max;\n}\n"
- "  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\
  \  return maxIndex;\n}\n"
- "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
  \ = i;\n        }\n    }\n    return max;\n}\n"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let index: number = -1;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      index = i;\n    }\n  }\n  return index > -1 ? index : -1;\n}\n"
- "  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\
  \  return maxIndex;\n}\n"
- "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
  \ = i;\n        }\n    }\n    if (maxFreq >= lst[maxFreq]) {\n        return max;\n\
  \    } else {\n        return -1;\n    }\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    return maxIndex;\n}\n"
- "    if (lst.length <= 0) {\n        return -1;\n    }\n    let max: number = lst[0];\n\
  \    let maxCount: number = 1;\n    for (let i = 1; i < lst.length; i++) {\n   \
  \     if (lst[i] > max) {\n            max = lst[i];\n            maxCount = 1;\n\
  \        } else if (lst[i] == max) {\n            maxCount++;\n        }\n    }\n\
  \    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm\
  \ |>\n<code>"
- "    let max: number = Number.MIN_SAFE_INTEGER;\n    let index: number = -1;\n \
  \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n      \
  \      max = lst[i];\n            index = i;\n        }\n    }\n    return index\
  \ > -1 ? index : -1;\n}\n"
- "  let max: number = -1;\n  let freq: number = 0;\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > 0 && lst[i] === lst[lst.length - i - 1]) {\n      freq++;\n\
  \    } else {\n      if (freq > max) {\n        max = freq;\n      }\n      freq\
  \ = 0;\n    }\n  }\n  return max;\n}\n"
- "  let maxVal = lst[0]\n  let maxCount = 1\n  for (let i = 1; i < lst.length; i++)\
  \ {\n    if (lst[i] > maxVal) {\n      maxVal = lst[i]\n      maxCount = 1\n   \
  \ } else if (lst[i] == maxVal) {\n      maxCount++\n    }\n  }\n  return maxCount\
  \ > lst.length ? -1 : maxVal\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    return maxIndex;\n}\n"
- "    let max: number = -1;\n    let maxIndex: number = -1;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\n"
- "  let maxVal = lst[0]\n  let maxCount = 1\n  for (let i = 1; i < lst.length; i++)\
  \ {\n    if (lst[i] > maxVal) {\n      maxVal = lst[i]\n      maxCount = 1\n   \
  \ } else if (lst[i] == maxVal) {\n      maxCount++\n    }\n  }\n  return maxCount\
  \ >= maxVal ? maxVal : -1\n}\n"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let index: number = -1;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      index = i;\n    }\n  }\n  return index === -1 ? -1 : max;\n}\n"
- "    let max: number = lst[0]\n    for (let i = 1; i < lst.length; i++) {\n    \
  \    if (lst[i] > max) {\n            max = lst[i]\n        }\n    }\n    return\
  \ max\n}\n"
- "  if (lst.length < 1) return -1;\n  let max = 0;\n  let maxCount = 0;\n  for (let\
  \ i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      maxCount = 1;\n    } else if (lst[i] == max) {\n      maxCount++;\n    }\n\
  \  }\n  return max;\n}\n"
- "    if (lst.length === 0) {\n        return -1;\n    }\n    let maxVal = lst[0];\n\
  \    let maxCount = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i]\
  \ > maxVal) {\n            maxVal = lst[i];\n            maxCount = 1;\n       \
  \ } else if (lst[i] === maxVal) {\n            maxCount++;\n        }\n    }\n \
  \   return maxVal;\n}\n"
- "  let maxVal = lst[0]\n  let maxFreq = lst[0]\n  for (let i = 1; i < lst.length;\
  \ i++) {\n    if (lst[i] > maxVal) {\n      maxVal = lst[i]\n      maxFreq = i\n\
  \    } else if (lst[i] === maxVal && lst[i] > maxFreq) {\n      maxFreq = i\n  \
  \  }\n  }\n  return maxVal\n}\n"
- "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] === max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n   \
  \ if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] > 0 && lst[i]\
  \ === max) {\n      freq++;\n    }\n  }\n  return freq > max ? -1 : max;\n}\n"
- "  if (lst.length === 0) {\n    return -1;\n  }\n  let max = 0;\n  let maxCount\
  \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n    \
  \  max = lst[i];\n      maxCount = 1;\n    } else if (lst[i] === max) {\n      maxCount++;\n\
  \    }\n  }\n  return max;\n}\n"
- "  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n   \
  \ if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return\
  \ freq > max ? -1 : max;\n}\n"
- "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxCount\
  \ = 1;\n        } else if (lst[i] === max) {\n            maxCount++;\n        }\n\
  \    }\n    if (maxCount >= lst.length) return -1;\n    return max;\n}\n"
- "  if (lst.length === 0) {\n    return -1;\n  }\n  let max = 0;\n  let maxCount\
  \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n    \
  \  max = lst[i];\n      maxCount = 1;\n    } else if (lst[i] === max) {\n      maxCount++;\n\
  \    }\n  }\n  return max;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = -1;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n</code>\n<|/ a tags=algorithm,arrays,javascript,sorting\
  \ |>\n<| c |>\nThis is not the correct answer. Try search([4, 1, 2, 2, 3, 1]).\n\
  <|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to account for that.\n\
  <|/ c |>\n<| c |>\nThis is not the correct answer. Try search([4, 1, 2, 2, 3, 1]).\n\
  <|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to account for that.\n\
  <|/ c |>\n<| a dscore=0 |>\n<code>"
- "    let max: number = lst[0];\n    let maxCount: number = 1;\n    for (let i =\
  \ 1; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "    if (lst.length < 1) return -1;\n    let max = 0;\n    let freq = 0;\n    for\
  \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max\
  \ = lst[i];\n            freq = 1;\n        } else if (lst[i] == max) {\n      \
  \      freq++;\n        }\n    }\n    return freq > max ? -1 : max;\n}\n"
- "  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\
  \  return maxIndex;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = -1;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let count: number = lst[i];\n        if (count\
  \ > maxCount) {\n            max = i;\n            maxCount = count;\n        }\n\
  \    }\n    return max;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "    let max: number = lst[0];\n    let maxCount: number = 1;\n    for (let i =\
  \ 1; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "    let max: number = -1;\n    let freq: number = 0;\n    for (let num of lst)\
  \ {\n        freq++;\n        if (num > 0) {\n            max = Math.max(max, num);\n\
  \        }\n    }\n    if (freq > 0) {\n        max = Math.max(max, freq);\n   \
  \ }\n    return max;\n}\n"
- "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
  \ = lst[i];\n        } else if (lst[i] === max) {\n            maxFreq += lst[i];\n\
  \        }\n    }\n    return maxFreq > 0 ? max : -1;\n}\n"
- "    if (lst.length <= 0) {\n        return -1;\n    }\n    let max = 0;\n    let\
  \ maxIndex = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
  \ > max) {\n            max = lst[i];\n            maxIndex = i;\n        }\n  \
  \  }\n    return maxIndex;\n}\n</code>\n<|/ a tags=javascript,arrays,algorithm |>\n\
  <| c |>\nThis does not work if the array is empty.\n<|/ c |>\n<| c |>\nYes, I know.\
  \ I just added a note in the answer. Thanks.\n<|/ c |>\n<| a tags=javascript,arrays,algorithm\
  \ |>\n<code>"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let index: number = -1;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      index = i;\n    }\n  }\n  return index === -1 ? -1 : max;\n}\n"
- "  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\
  \  return maxIndex;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    if (maxIndex >= lst.length) {\n        return -1;\n\
  \    }\n    return maxIndex;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    return maxIndex;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    return maxIndex;\n}\n"
- "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxCount\
  \ = 1;\n        } else if (lst[i] === max) {\n            maxCount++;\n        }\n\
  \    }\n    return max;\n}\n"
- "  if (lst.length < 1) return -1;\n  let max = 0;\n  let freq = 0;\n  for (let i\
  \ = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n  \
  \    freq = 1;\n    } else if (lst[i] === max) {\n      freq++;\n    }\n  }\n  return\
  \ freq > max ? -1 : max;\n}\n"
- "  let maxVal = lst[0]\n  let maxCount = 0\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    if (lst[i] > maxVal) {\n      maxVal = lst[i]\n      maxCount = 1\n   \
  \ } else if (lst[i] == maxVal) {\n      maxCount++\n    }\n  }\n  return maxCount\
  \ > lst.length ? -1 : maxVal\n}\n"
- "  let max: number = Number.MAX_SAFE_INTEGER;\n  let index: number = -1;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      index = i;\n    }\n  }\n  return index === -1 ? -1 : max;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = -1;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>"
- "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxCount\
  \ = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n        }\n\
  \    }\n    return max;\n}\n"
- "    let maxVal = lst[0];\n    let maxCount = 1;\n    for (let i = 1; i < lst.length;\
  \ i++) {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n       \
  \     maxCount = 1;\n        } else if (lst[i] == maxVal) {\n            maxCount++;\n\
  \        }\n    }\n    return maxVal > 0 ? maxVal : -1;\n}\n"
- "    let max: number = Number.MIN_SAFE_INTEGER;\n    let index: number = -1;\n \
  \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n      \
  \      max = lst[i];\n            index = i;\n        }\n    }\n    return index;\n\
  }\n"
- "  if (lst.length <= 0) return -1;\n  let max = 0;\n  let freq = 0;\n  for (let\
  \ i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      freq = i;\n    }\n  }\n  return freq > max ? freq : -1;\n}\n"
- "  let maxVal = lst[0]\n  let maxCount = 0\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    if (lst[i] > maxVal) {\n      maxVal = lst[i]\n      maxCount = 1\n   \
  \ } else if (lst[i] == maxVal) {\n      maxCount++\n    }\n  }\n  return maxCount\
  \ > lst.length ? -1 : maxVal\n}\n"
- "  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n   \
  \ if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] === max) {\n \
  \     freq++;\n    }\n  }\n  return freq > max ? -1 : max;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    return maxIndex;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] === max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "    let max: number = 0;\n    let maxCount: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] === max) {\n            maxCount++;\n\
  \        }\n    }\n    return maxCount > lst.length ? -1 : max;\n}\n"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let maxIndex: number = -1;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      maxIndex = i;\n    }\n  }\n  return maxIndex;\n}\n"
- "  if (lst.length === 0) {\n    return -1;\n  }\n  let max = 0;\n  let maxIndex\
  \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n    \
  \  max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n}\n"
- "    if (lst.length < 1) return -1;\n    let max = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n  \
  \  }\n    return max;\n}\n"
- "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxCount\
  \ = 1;\n        } else if (lst[i] === max) {\n            maxCount++;\n        }\n\
  \    }\n    return maxCount > lst.length ? -1 : max;\n}\n"
- "  let max: number = Number.MAX_SAFE_INTEGER;\n  let index: number = -1;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      index = i;\n    }\n  }\n  return index === -1 ? -1 : max;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let index: number = -1;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      index = i;\n    }\n  }\n  return index === -1 ? -1 : max;\n}\n"
- "  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\
  \  return maxIndex;\n}\n"
- "  let maxVal = lst[0]\n  let maxFreq = lst[0]\n  for (let i = 1; i < lst.length;\
  \ i++) {\n    if (lst[i] > maxVal) {\n      maxVal = lst[i]\n      maxFreq = i\n\
  \    }\n  }\n  return maxVal >= 0 ? maxVal : -1\n}\n"
- "    let max: number = -1;\n    let maxCount: number = -1;\n    for (let i = 0;\
  \ i < lst.length; i++) {\n        let count: number = lst[i];\n        if (count\
  \ > maxCount) {\n            max = i;\n            maxCount = count;\n        }\n\
  \    }\n    return max;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    return maxIndex;\n}\n"
- "    let max: number = Number.MIN_SAFE_INTEGER;\n    let index: number = -1;\n \
  \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n      \
  \      max = lst[i];\n            index = i;\n        }\n    }\n    return index;\n\
  }\n"
- "  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\
  \  return maxIndex;\n}\n"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let index: number = -1;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      index = i;\n    }\n  }\n  return index === -1 ? -1 : max;\n}\n"
- "  let max: number = -1;\n  let maxCount: number = -1;\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxCount = 1;\n  \
  \  } else if (lst[i] === max) {\n      maxCount++;\n    }\n  }\n  return max;\n\
  }\n"
- "  if (lst.length === 0) {\n    return -1;\n  }\n  let max: number = lst[0];\n \
  \ let maxCount: number = 1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i]\
  \ > max) {\n      max = lst[i];\n      maxCount = 1;\n    } else if (lst[i] ===\
  \ max) {\n      maxCount++;\n    }\n  }\n  return max;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    return maxIndex;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n</code>\n<|/ a |>\n<| a tags=javascript,arrays\
  \ |>\n<code>"
- "  let max: number = lst[0]\n  let count: number = 0\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      count = 1\n    } else\
  \ if (lst[i] == max) {\n      count += 1\n    }\n  }\n  return count > 0 ? max :\
  \ -1\n}\n"
- "    let max: number = Number.MIN_SAFE_INTEGER;\n    let index: number = -1;\n \
  \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n      \
  \      max = lst[i];\n            index = i;\n        }\n    }\n    return index\
  \ === -1 ? -1 : max;\n}\n"
- "    let max: number = -1;\n    let freq: number = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        if (lst[i] > 0 && lst[i] === lst[lst.length - i - 1]) {\n    \
  \        freq++;\n        } else {\n            if (freq >= max) {\n           \
  \     max = freq;\n            }\n            freq = 0;\n        }\n    }\n    return\
  \ max;\n}\n"
- "    let max: number = lst[0];\n    let maxCount: number = 1;\n    for (let i =\
  \ 1; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    if (lst[i] > max) {\n      max = lst[i];\n      maxCount = 1;\n    } else if\
  \ (lst[i] == max) {\n      maxCount++;\n    }\n  }\n  return max;\n}\n"
- "    if (lst.length === 0) {\n        return -1;\n    }\n    let max = 0;\n    let\
  \ maxIndex = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
  \ > max) {\n            max = lst[i];\n            maxIndex = i;\n        }\n  \
  \  }\n    return maxIndex;\n}\n"
- "  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\
  \  return maxIndex;\n}\n"
- "    let max = 0;\n    let maxCount = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxCount\
  \ = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n        }\n\
  \    }\n    return max;\n}\n"
- "  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\
  \  return maxIndex;\n}\n"
- "    let max: number = -1;\n    let maxCount: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
  \            maxCount = 1;\n        } else if (lst[i] == max) {\n            maxCount++;\n\
  \        }\n    }\n    return max;\n}\n"
- "  let max: number = -1;\n  let maxCount: number = 0;\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxCount = 1;\n  \
  \  } else if (lst[i] == max) {\n      maxCount++;\n    }\n  }\n  return max;\n}\n"
- "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        let freq = lst[i];\n        if (freq > maxFreq) {\n            max\
  \ = i;\n            maxFreq = freq;\n        }\n    }\n    return max;\n}\n"
- "  let max: number = -1;\n  let freq: number = 0;\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > 0 && lst[i] === lst[freq]) {\n      freq++;\n    } else\
  \ {\n      max = Math.max(max, lst[i]);\n    }\n  }\n  return max;\n}\n"
- "  let max: number = -1;\n  let freq: number = 0;\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > 0 && lst[i] === lst[freq]) {\n      freq++;\n    } else\
  \ {\n      max = Math.max(max, lst[i]);\n    }\n  }\n  return max;\n}\n"
- "  let max: number = 0;\n  let freq: number = 0;\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] >\
  \ 0 && lst[i] === max) {\n      freq++;\n    }\n  }\n  return freq > max ? -1 :\
  \ max;\n}\n"
- "  let max: number = -1;\n  let maxCount: number = 0;\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxCount = 1;\n  \
  \  } else if (lst[i] === max) {\n      maxCount++;\n    }\n  }\n  return max;\n\
  }\n"
- "    if (lst.length === 0) {\n        return -1;\n    }\n    let max = 0;\n    let\
  \ maxIndex = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
  \ > max) {\n            max = lst[i];\n            maxIndex = i;\n        }\n  \
  \  }\n    return maxIndex;\n}\n"
- "  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n   \
  \ if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] > 0 && lst[i]\
  \ === max) {\n      freq++;\n    }\n  }\n  return freq > max ? -1 : max;\n}\n"
- "    let max: number = Number.MIN_SAFE_INTEGER;\n    let maxIndex: number = -1;\n\
  \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n     \
  \       max = lst[i];\n            maxIndex = i;\n        }\n    }\n    if (maxIndex\
  \ === -1) {\n        return -1;\n    }\n    return max;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    return maxIndex;\n}\n"
- "  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n\
  \  return maxFreq > maxFreq ? -1 : max;\n}\n"
- "  if (lst.length === 0) {\n    return -1;\n  }\n  let maxVal = lst[0];\n  let maxCount\
  \ = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n \
  \     maxVal = lst[i];\n      maxCount = 1;\n    } else if (lst[i] === maxVal) {\n\
  \      maxCount++;\n    }\n  }\n  return maxCount >= maxVal ? maxVal : -1;\n}\n"
- "    let max = 0;\n    let maxFreq = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxFreq\
  \ = i;\n        }\n    }\n    if (maxFreq >= lst[maxFreq]) {\n        return max;\n\
  \    } else {\n        return -1;\n    }\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    return maxIndex;\n}\n"
- "  let max: number = lst[0]\n  let maxCount: number = 1\n  for (let i = 1; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxCount = 1\n    }\
  \ else if (lst[i] == max) {\n      maxCount++\n    }\n  }\n  return maxCount > lst.length\
  \ ? -1 : max\n}\n"
- "  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n   \
  \ if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] > 0 && lst[i]\
  \ === max) {\n      freq++;\n    }\n  }\n  if (freq > max) {\n    return -1;\n \
  \ }\n  return max;\n}\n"
- "  if (lst.length < 1) return -1;\n  let max: number = lst[0];\n  let count: number\
  \ = 1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n    \
  \  max = lst[i];\n      count = 1;\n    } else if (lst[i] == max) {\n      count++;\n\
  \    }\n  }\n  return count >= max ? max : -1;\n}\n"
- "  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n   \
  \ if (lst[i] > 0 && lst[i] === lst[max]) {\n      freq++;\n    } else {\n      max\
  \ = i;\n      freq = 1;\n    }\n  }\n  return freq > lst[max] ? -1 : max;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    if (maxIndex >= lst.length) return -1;\n    return\
  \ max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>"
- "  let max: number = Number.MIN_SAFE_INTEGER;\n  let index: number = -1;\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
  \      index = i;\n    }\n  }\n  return index === -1 ? -1 : max;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    return maxIndex;\n}\n</code>\n<|/ a tags=javascript,typescript\
  \ |>\n<| a tags=javascript,typescript |>\n<code>"
language: ts
name: HumanEval_69_search
prompt: "//You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n// The frequency of an integer is the number\
  \ of times it appears in the list.\n// If no such a value exist, return -1.\n//\
  \ Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4,\
  \ 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunction search(lst: number[]):\
  \ number {\n"
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = search;\n  assert.deepEqual(candidate([5, 5, 5, 5,\
  \ 1]),1);\n  assert.deepEqual(candidate([4, 1, 4, 1, 4, 4]),4);\n  assert.deepEqual(candidate([3,\
  \ 3]),-1);\n  assert.deepEqual(candidate([8, 8, 8, 8, 8, 8, 8, 8]),8);\n  assert.deepEqual(candidate([2,\
  \ 3, 3, 2, 2]),2);\n  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6,\
  \ 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1);\n  assert.deepEqual(candidate([3, 2,\
  \ 8, 2]),2);\n  assert.deepEqual(candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);\n\
  \  assert.deepEqual(candidate([8, 8, 3, 6, 5, 6, 4]),-1);\n  assert.deepEqual(candidate([6,\
  \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);\n\
  \  assert.deepEqual(candidate([1, 9, 10, 1, 3]),1);\n  assert.deepEqual(candidate([6,\
  \ 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);\n\
  \  assert.deepEqual(candidate([1]),1);\n  assert.deepEqual(candidate([8, 8, 10,\
  \ 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4);\n  assert.deepEqual(candidate([2,\
  \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);\n  assert.deepEqual(candidate([1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);\n  assert.deepEqual(candidate([9, 2, 4,\
  \ 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10,\
  \ 9, 4]),4);\n  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6,\
  \ 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);\n  assert.deepEqual(candidate([9, 8, 6,\
  \ 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);\n  assert.deepEqual(candidate([5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);\n  assert.deepEqual(candidate([10]),-1);\n\
  \  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);\n  assert.deepEqual(candidate([5,\
  \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);\n  assert.deepEqual(candidate([7, 9, 9, 9,\
  \ 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);\n  assert.deepEqual(candidate([3,\
  \ 10, 10, 9, 2]),-1);\n}\n\ntest();"
