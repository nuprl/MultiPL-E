name: HumanEval_19_sort_numbers
language: humaneval_to_typescript.py
prompt: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to\
  \ largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
  \ sort_numbers(numbers: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\
  \");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
  three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five zero\
  \ four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
  six five four three two one zero\"),\"zero one two three four five six\");\n}\n\n\
  test();"
completions: ["  return numbers.split(' ')\n    .map(num => parseInt(num))\n    .sort((a,\
    \ b) => a - b)\n    .map(num => num.toString())\n    .join(' ');\n}\n", "  let\
    \ numbers_array = numbers.split(\" \");\n  numbers_array.sort((a, b) => a - b);\n\
    \  return numbers_array.join(\" \");\n}\n", "  const nums = numbers.split(' ');\n\
    \  nums.sort((a, b) => a - b);\n  return nums.join(' ');\n}\n", "  let numbers_array\
    \ = numbers.split(' ');\n  numbers_array.sort((a, b) => a - b);\n  return numbers_array.join('\
    \ ');\n}\n", "  let nums = numbers.split(\" \");\n  nums = nums.sort((a, b) =>\
    \ a - b);\n  return nums.join(\" \");\n}\n", "  let numbers_array = numbers.split(\"\
    \ \");\n  numbers_array.sort((a, b) => a - b);\n  return numbers_array.join(\"\
    \ \");\n}\n", "  const numbers_array = numbers.split(' ');\n  numbers_array.sort((a,\
    \ b) => a - b);\n  return numbers_array.join(' ');\n}\n", "  return numbers.split('\
    \ ')\n    .map(n => parseInt(n, 10))\n    .sort((a, b) => a - b)\n    .map(n =>\
    \ n < 10 ? '0' + n : n)\n    .join(' ');\n}\n", "  return numbers.split(' ')\n\
    \    .map(n => parseInt(n, 10))\n    .sort((a, b) => a - b)\n    .map(n => n <\
    \ 10 ? '0' + n : n)\n    .join(' ');\n}\n", "  let numbers_array = numbers.split('\
    \ ');\n  numbers_array.sort();\n  return numbers_array.join(' ');\n}\n", "  return\
    \ numbers.split(' ').sort().join(' ');\n}\n", "  const numbers_array = numbers.split('\
    \ ');\n  const sorted_numbers = numbers_array.sort((a, b) => a - b);\n  return\
    \ sorted_numbers.join(' ');\n}\n", "  let numbers_array = numbers.split(\" \"\
    );\n  numbers_array.sort();\n  return numbers_array.join(\" \");\n}\n", "  return\
    \ numbers.split(' ').sort().join(' ');\n}\n", "  let numbers_array = numbers.split('\
    \ ');\n  numbers_array.sort();\n  return numbers_array.join(' ');\n}\n", "  const\
    \ numbers_array = numbers.split(' ');\n  const numbers_sorted = numbers_array.sort((a,\
    \ b) => a - b);\n  return numbers_sorted.join(' ');\n}\n", "  return numbers.split('\
    \ ').sort().join(' ');\n}\n", "  let numbers_array = numbers.split(\" \");\n \
    \ let sorted_numbers = numbers_array.sort();\n  return sorted_numbers.join(\"\
    \ \");\n}\n", "  const numbers_array = numbers.split(' ');\n  const numbers_sorted\
    \ = numbers_array.sort((a, b) => a - b);\n  return numbers_sorted.join(' ');\n\
    }\n", "  return numbers.split(' ').sort().join(' ');\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
