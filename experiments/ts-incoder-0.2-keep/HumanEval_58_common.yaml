completions:
- "  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n\
  \  for (const item of set1) {\n    if (set2.has(item)) {\n      result.push(item);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const l1: number[] = l1.slice();\n  const l2: number[] = l2.slice();\n  const\
  \ result: number[] = [];\n  while (l1.length > 0 && l2.length > 0) {\n    if (l1.shift()\
  \ === l2.shift()) {\n      result.push(l1.shift());\n      l1.length--;\n      l2.length--;\n\
  \    } else {\n      result.push(l1.shift());\n      l2.length--;\n    }\n  }\n\
  \  return result;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n\
  \  let l1: number;\n  let l2: number;\n  let l3: number;\n  let l4: number;\n  let\
  \ l5: number;\n  let l6: number;\n  let l7: number;\n  let l8: number;\n  let l9:\
  \ number;\n  let l10: number;\n  let l11: number;\n  let l12: number;\n  let l13:\
  \ number;\n  let l14: number;\n  let l15: number;\n  let l16: number;\n  let l17:\
  \ number;\n  let l18: number;\n  let l19: number;\n  let l20: number;\n  let l21:\
  \ number;\n  let l22: number;\n  let l23: number;\n  let l24: number;\n  let l25:\
  \ number;\n  let l26: number;\n  let l27: number;\n  let l28: number;\n  let l29:\
  \ number;\n  let l30: number;\n  let l31: number;\n  let l32: number;\n  let l33:\
  \ number;\n  let l34: number;\n  let l35: number;\n  let l36: number;\n  let l37:\
  \ number;\n  let l38: number;\n  let l39: number;\n  let l40: number;\n  let l41:\
  \ number;\n  let l42: number;\n  let l43: number;\n  let l44: number;\n  let l45:\
  \ number;\n  let l46: number;\n  let l47: number;\n  let l48: number;\n  let l49:\
  \ number;\n  let l50: number;\n  let l51: number;\n  let l52: number;\n  let l53:\
  \ number;\n  let l54: number;\n  let l55: number;\n  let l56: number;\n  let l57:\
  \ number;\n  let l58: number;\n  let l59: number;\n  let l60: number;\n  let l61:\
  \ number;\n  let l62: number;\n  let l63: number;\n  let l64: number;\n  let l65:\
  \ number;\n  let l66: number;\n  let l67: number;\n  let l68: number;\n  let l69:\
  \ number;\n  let l70: number;\n  let l71: number;\n  let l72: number;\n  let l73:\
  \ number;\n  let l74: number;\n  let l75: number;\n  let l76: number;\n  let l77:\
  \ number;\n  let l78: number;\n  let l79: number;\n  let l80: number;\n  let l81:\
  \ number;\n  let l82: number;\n  let l83: number;\n  let l84: number;\n  let l85:\
  \ number;\n  let l86: number;\n  let l87: number;\n  let l88: number;\n  let l89:\
  \ number;\n  let l90: number;\n  let l91: number;\n  let l92: number;\n  let l93:\
  \ number;\n  let l94: number;\n  let l95: number;\n  let l96: number;\n  let l97:\
  \ number;\n  let l98: number;"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length &&\
  \ j < l2.length) {\n    if (l1[i] === l2[j]) {\n      l.push(l1[i]);\n      i++;\n\
  \      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n\
  \    }\n  }\n  return l;\n}\n"
- "  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n\
  \  for (let i = 0; i < Math.min(set1.size, set2.size); i++) {\n    if (set1.has(i)\
  \ && set2.has(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n"
- "  const l: number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length)\
  \ {\n    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n\
  \      break;\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  const hash: number[] = [];\n  const hashMap = new\
  \ Map<number, number[]>();\n  for (let i = 0; i < l1.length; i++) {\n    const val\
  \ = l1[i];\n    if (hashMap.has(val)) {\n      hashMap.get(val).push(l1[i]);\n \
  \   } else {\n      hashMap.set(val, [l1[i]]);\n    }\n  }\n  for (let i = 0; i\
  \ < l2.length; i++) {\n    const val = l2[i];\n    if (hashMap.has(val)) {\n   \
  \   hashMap.get(val).push(l2[i]);\n    } else {\n      hashMap.set(val, [l2[i]]);\n\
  \    }\n  }\n  for (let i = 0; i < l1.length; i++) {\n    const val = l1[i];\n \
  \   const vals = hashMap.get(val);\n    for (let j = 0; j < vals.length; j++) {\n\
  \      l.push(val);\n    }\n  }\n  return l;\n}\n"
- "  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j =\
  \ 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n\
  \        break;\n      }\n    }\n  }\n  return result;\n}\n"
- "  const l1 = l1 || [];\n  const l2 = l2 || [];\n  const result = [];\n  let i =\
  \ 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n \
  \     result.push(l1[i]);\n      i++;\n    } else {\n      break;\n    }\n  }\n\
  \  return result;\n}\n"
- "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++)\
  \ {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    l.push(l1[i]);\n\
  \  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  const hash: number[] = [];\n  const hashMap: Map<number,\
  \ number> = new Map();\n  for (let i = 0; i < l1.length; i++) {\n    const val =\
  \ l1[i];\n    if (!hashMap.has(val)) {\n      hashMap.set(val, i);\n      l.push(val);\n\
  \    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    const val = l2[i];\n \
  \   if (!hashMap.has(val)) {\n      hashMap.set(val, i);\n      l.push(val);\n \
  \   }\n  }\n  for (let i = 0; i < l.length; i++) {\n    const val = l[i];\n    const\
  \ index = hashMap.get(val);\n    l.splice(index, 1);\n    hashMap.delete(val);\n\
  \  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n\
  \    if (l1[i] === l2[i]) {\n      result.push(l1[i]);\n      i++;\n    } else {\n\
  \      break;\n    }\n  }\n  return result;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found\
  \ = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
  \ {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n\
  \      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n\
  \  for (let i = 0; i < Math.min(set1.size, set2.size); i++) {\n    if (set1.has(i)\
  \ && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found\
  \ = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
  \ {\n        l.push(l1[i]);\n        found = true;\n        break;\n      }\n  \
  \  }\n    if (!found) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result: number[] = [];\n  const lLen = l1.length;\n  const ljLen = l2.length;\n\
  \  for (let i = 0; i < lLen; i++) {\n    const l1 = l1[i];\n    const l2 = l2[i];\n\
  \    if (l1 === l2) {\n      result.push(l1);\n    } else {\n      for (let j =\
  \ 0; j < ljLen; j++) {\n        if (l1 === l2[j]) {\n          result.push(l1);\n\
  \          break;\n        }\n      }\n    }\n  }\n  return result;\n}\n"
- "  const l: number[] = [];\n  const hashMap = new Map<number, number>();\n  for\
  \ (let i = 0; i < l1.length; i++) {\n    const val = l1[i];\n    if (!hashMap.has(val))\
  \ {\n      l.push(val);\n      hashMap.set(val, 1);\n    } else {\n      hashMap.set(val,\
  \ hashMap.get(val) + 1);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n\
  \    const val = l2[i];\n    if (!hashMap.has(val)) {\n      l.push(val);\n    \
  \  hashMap.set(val, 1);\n    } else {\n      hashMap.set(val, hashMap.get(val) +\
  \ 1);\n    }\n  }\n  return l;\n}\n"
- "  const result = [];\n  let llen = l1.length;\n  let llen2 = l2.length;\n  if (llen\
  \ > llen2) {\n    llen = llen2;\n  }\n  for (let i = 0; i < llen; i++) {\n    for\
  \ (let j = 0; j < llen2; j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n\
  \        break;\n      }\n    }\n  }\n  return result;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  const hashMap = new Map<number, number>();\n  for\
  \ (let i = 0; i < l1.length; i++) {\n    const val = l1[i];\n    if (hashMap.has(val))\
  \ {\n      l.push(hashMap.get(val));\n    } else {\n      l.push(val);\n      hashMap.set(val,\
  \ i);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    const val = l2[i];\n\
  \    if (hashMap.has(val)) {\n      l.push(hashMap.get(val));\n    } else {\n  \
  \    l.push(val);\n      hashMap.set(val, i);\n    }\n  }\n  return l;\n}\n"
- "  const result: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length;\
  \ i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n  \
  \  if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n\
  }\n"
- "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++)\
  \ {\n    if (l2.indexOf(l1[i]) === -1) {\n      l[j] = l1[i];\n      j++;\n    }\n\
  \  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found\
  \ = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
  \ {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n\
  \      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++)\
  \ {\n    if (l2.indexOf(l1[i]) === -1) {\n      l[j] = l1[i];\n      j++;\n    }\n\
  \  }\n  return l;\n}\n"
- "  const result: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length;\
  \ i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n  \
  \  if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n\
  }\n"
- "  const l: number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length)\
  \ {\n    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n\
  \      break;\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length)\
  \ {\n    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n\
  \      break;\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found\
  \ = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
  \ {\n        result.push(l1[i]);\n        found = true;\n        break;\n      }\n\
  \    }\n    if (!found) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n\
  }\n"
- "  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found\
  \ = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
  \ {\n        result.push(l1[i]);\n        found = true;\n        break;\n      }\n\
  \    }\n    if (!found) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n\
  }\n"
- "  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found\
  \ = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
  \ {\n        result.push(l1[i]);\n        found = true;\n        break;\n      }\n\
  \    }\n    if (!found) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n\
  }\n"
- "  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common: number[]\
  \ = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n\
  \      set2.delete(val);\n    }\n  });\n  return common;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found:\
  \ boolean = l2.indexOf(l1[i]) !== -1;\n    if (found) {\n      l.push(l1[i]);\n\
  \    }\n  }\n  return l;\n}\n"
- "  const l1 = l1 || [];\n  const l2 = l2 || [];\n  const result = [];\n  let i =\
  \ 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] ===\
  \ l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i]\
  \ < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n\
  }\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length &&\
  \ j < l2.length) {\n    if (l1[i] === l2[j]) {\n      l.push(l1[i]);\n      i++;\n\
  \      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n\
  \    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l1: number[] = l1.sort();\n  const l2: number[] = l2.sort();\n  const l:\
  \ number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n  for (i\
  \ = 0; i < l1.length; i++) {\n    k = i;\n    for (j = i + 1; j < l2.length; j++)\
  \ {\n      if (l1[k] === l2[j]) {\n        k = j;\n      }\n    }\n    l.push(l1[k]);\n\
  \  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n\
  \  let l1: number;\n  let l2: number;\n  let n1: number;\n  let n2: number;\n  let\
  \ n: number;\n  let found: boolean;\n  for (i = 0; i < l1.length; i++) {\n    l1\
  \ = l1[i];\n    found = false;\n    for (j = 0; j < l2.length; j++) {\n      l2\
  \ = l2[j];\n      n1 = l1;\n      n2 = l2;\n      n = n1 + n2;\n      if (n ===\
  \ l1 + l2) {\n        l.push(n);\n        found = true;\n        break;\n      }\n\
  \      if (n < l1) {\n        n1 = n2;\n      } else {\n        n2 = n1;\n     \
  \ }\n    }\n    if (!found) {\n      l.push(l1);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length)\
  \ {\n    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n\
  \      i++;\n    }\n  }\n  return l;\n}\n"
- "  const l1: number[] = [].concat(l1);\n  const l2: number[] = [].concat(l2);\n\
  \  const result: number[] = [];\n  let j = 0;\n  while (j < l1.length && j < l2.length)\
  \ {\n    if (l1[j] === l2[j]) {\n      result.push(l1[j]);\n      j++;\n    } else\
  \ if (l1[j] < l2[j]) {\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return\
  \ result;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l1: number[] = l1.sort();\n  const l2: number[] = l2.sort();\n  const l:\
  \ number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n  for (i\
  \ = 0; i < l1.length; i++) {\n    k = i;\n    for (j = 0; j < l2.length; j++) {\n\
  \      if (l1[k] === l2[j]) {\n        k = j;\n      }\n    }\n    l.push(l1[k]);\n\
  \  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++)\
  \ {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j\
  \ === l2.length) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l1 = l1 || [];\n  const l2 = l2 || [];\n  const result = [];\n  let j =\
  \ 0;\n  let i = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] ===\
  \ l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i]\
  \ > l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n\
  }\n"
- "  const l: number[] = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length &&\
  \ j < l2.length) {\n    if (l1[i] === l2[j]) {\n      l.push(l1[i]);\n      i++;\n\
  \      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n\
  \    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  const hash: number[] = [];\n  for (let i = 0; i <\
  \ l1.length; i++) {\n    const val = l1[i];\n    if (hash.indexOf(val) === -1) {\n\
  \      l.push(val);\n      hash.push(val);\n    }\n  }\n  for (let i = 0; i < l2.length;\
  \ i++) {\n    const val = l2[i];\n    if (hash.indexOf(val) === -1) {\n      l.push(val);\n\
  \      hash.push(val);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n\
  \  let l1: number;\n  let l2: number;\n  let len1: number;\n  let len2: number;\n\
  \  let min: number;\n  let max: number;\n  let minIndex: number;\n  let maxIndex:\
  \ number;\n  let comp: number;\n  let swap: number;\n  let swapIndex: number;\n\
  \  let swapped: boolean;\n  let swappedIndex: number;\n  let swappedIndex2: number;\n\
  \  let swappedIndex3: number;\n  let swappedIndex4: number;\n  let swappedIndex5:\
  \ number;\n  let swappedIndex6: number;\n  let swappedIndex7: number;\n  let swappedIndex8:\
  \ number;\n  let swappedIndex9: number;\n  let swappedIndex10: number;\n  let swappedIndex11:\
  \ number;\n  let swappedIndex12: number;\n  let swappedIndex13: number;\n  let swappedIndex14:\
  \ number;\n  let swappedIndex15: number;\n  let swappedIndex16: number;\n  let swappedIndex17:\
  \ number;\n  let swappedIndex18: number;\n  let swappedIndex19: number;\n  let swappedIndex20:\
  \ number;\n  let swappedIndex21: number;\n  let swappedIndex22: number;\n  let swappedIndex23:\
  \ number;\n  let swappedIndex24: number;\n  let swappedIndex25: number;\n  let swappedIndex26:\
  \ number;\n  let swappedIndex27: number;\n  let swappedIndex28: number;\n  let swappedIndex29:\
  \ number;\n  let swappedIndex30: number;\n  let swappedIndex31: number;\n  let swappedIndex32:\
  \ number;\n  let swappedIndex33: number;\n  let swappedIndex34: number;\n  let swappedIndex35:\
  \ number;\n  let swappedIndex36: number;\n  let swappedIndex37: number;\n  let swappedIndex38:\
  \ number;\n  let swappedIndex39: number;\n  let swappedIndex40: number;\n  let swappedIndex41:\
  \ number;\n  let swappedIndex42: number;\n  let swappedIndex43: number;\n  let swappedIndex44:\
  \ number;\n  let swappedIndex45: number;\n  let swappedIndex46: number;\n  let swappedIndex47:\
  \ number;\n  let swappedIndex48: number;\n  let swappedIndex49: number;\n  let swappedIndex50:\
  \ number;\n  let swappedIndex51: number;\n  let swappedIndex52: number;\n  let swappedIndex53:\
  \ number;\n  let swappedIndex54: number;\n  let swappedIndex55: number;\n  let swappedIndex56:\
  \ number;\n  let swappedIndex57: number;\n  let swappedIndex58: number;\n  let swappedIndex59:\
  \ number;\n  let swappedIndex60: number;\n  let swappedIndex61: number;\n  let swappedIndex62:\
  \ number;\n  let "
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found\
  \ = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
  \ {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n\
  \      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n\
  \  let l1: number;\n  let l2: number;\n  let len1: number;\n  let len2: number;\n\
  \  let minLen: number;\n  let maxLen: number;\n  let min: number;\n  let max: number;\n\
  \  let mid: number;\n  let res: number[];\n  l1 = l1 || [];\n  l2 = l2 || [];\n\
  \  len1 = l1.length;\n  len2 = l2.length;\n  minLen = Math.min(len1, len2);\n  maxLen\
  \ = Math.max(len1, len2);\n  minLen = Math.min(minLen, maxLen);\n  maxLen = Math.max(minLen,\
  \ maxLen);\n  for (i = 0; i < minLen; i++) {\n    l.push(l1[i]);\n  }\n  for (i\
  \ = minLen; i < maxLen; i++) {\n    l.push(l2[i]);\n  }\n  for (i = maxLen; i >\
  \ minLen; i--) {\n    l.push(l1[i]);\n  }\n  for (i = 0; i < minLen; i++) {\n  \
  \  for (j = i + 1; j < maxLen; j++) {\n      k = l[j];\n      if (l[i] === k) {\n\
  \        l.splice(j, 1);\n      }\n    }\n  }\n  res = [];\n  for (i = 0; i < l.length;\
  \ i++) {\n    res.push(l[i]);\n  }\n  return res;\n}"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result: number[] = [];\n  const hashMap = new Map<number, number>();\n\
  \  for (let i = 0; i < l1.length; i++) {\n    const key = l1[i];\n    if (!hashMap.has(key))\
  \ {\n      hashMap.set(key, l2.indexOf(key));\n    } else {\n      const index =\
  \ hashMap.get(key);\n      result.push(l1[index]);\n      hashMap.delete(key);\n\
  \    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    const key = l2[i];\n \
  \   if (!hashMap.has(key)) {\n      hashMap.set(key, result.length);\n    } else\
  \ {\n      const index = hashMap.get(key);\n      result.push(l2[index]);\n    \
  \  hashMap.delete(key);\n    }\n  }\n  return result;\n}\n"
- "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++)\
  \ {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    l.push(l1[i]);\n\
  \  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l1 = l1 || [];\n  const l2 = l2 || [];\n  const result = [];\n  const hash1\
  \ = {};\n  const hash2 = {};\n  let i1 = 0, i2 = 0;\n  let item;\n  while (i1 <\
  \ l1.length && i2 < l2.length) {\n    item = l1[i1];\n    if (hash1[item] === undefined)\
  \ {\n      hash1[item] = 1;\n      result.push(item);\n      i1++;\n    } else {\n\
  \      hash1[item]++;\n    }\n    item = l2[i2];\n    if (hash2[item] === undefined)\
  \ {\n      hash2[item] = 1;\n      result.push(item);\n      i2++;\n    } else {\n\
  \      hash2[item]++;\n    }\n  }\n  return result;\n}\n"
- "  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n\
  \  for (let i = 0; i < set1.size; i++) {\n    if (set2.has(set1.get(i))) {\n   \
  \   common.push(set1.get(i));\n    }\n  }\n  return common;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if\
  \ (l1.indexOf(l2[i]) !== -1) {\n      result.push(l1[i]);\n    }\n  }\n  return\
  \ result;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result: number[] = [];\n  const hashMap = new Map<number, number>();\n\
  \  for (let i = 0; i < l1.length; i++) {\n    const val = l1[i];\n    if (!hashMap.has(val))\
  \ {\n      hashMap.set(val, 1);\n    } else {\n      hashMap.set(val, hashMap.get(val)\
  \ + 1);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    const val = l2[i];\n\
  \    if (!hashMap.has(val)) {\n      hashMap.set(val, 1);\n    } else {\n      hashMap.set(val,\
  \ hashMap.get(val) + 1);\n    }\n  }\n  for (const [key, value] of hashMap) {\n\
  \    if (value === l1.length && value === l2.length) {\n      result.push(key);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found\
  \ = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
  \ {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n\
  \      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length)\
  \ {\n    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n\
  \      i++;\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  const result: number[] = [];\n  for (let i = 0; i\
  \ < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l.push(l1[i]);\n\
  \    } else {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n\
  \  let l1: number;\n  let l2: number;\n  let len1: number;\n  let len2: number;\n\
  \  let min: number;\n  let max: number;\n  let min1: number;\n  let max1: number;\n\
  \  let min2: number;\n  let max2: number;\n  let mid: number;\n  let mid1: number;\n\
  \  let mid2: number;\n  let mid3: number;\n  let mid4: number;\n  let mid5: number;\n\
  \  let mid6: number;\n  let mid7: number;\n  let mid8: number;\n  let mid9: number;\n\
  \  let mid10: number;\n  let mid11: number;\n  let mid12: number;\n  let mid13:\
  \ number;\n  let mid14: number;\n  let mid15: number;\n  let mid16: number;\n  let\
  \ mid17: number;\n  let mid18: number;\n  let mid19: number;\n  let mid20: number;\n\
  \  let mid21: number;\n  let mid22: number;\n  let mid23: number;\n  let mid24:\
  \ number;\n  let mid25: number;\n  let mid26: number;\n  let mid27: number;\n  let\
  \ mid28: number;\n  let mid29: number;\n  let mid30: number;\n  let mid31: number;\n\
  \  let mid32: number;\n  let mid33: number;\n  let mid34: number;\n  let mid35:\
  \ number;\n  let mid36: number;\n  let mid37: number;\n  let mid38: number;\n  let\
  \ mid39: number;\n  let mid40: number;\n  let mid41: number;\n  let mid42: number;\n\
  \  let mid43: number;\n  let mid44: number;\n  let mid45: number;\n  let mid46:\
  \ number;\n  let mid47: number;\n  let mid48: number;\n  let mid49: number;\n  let\
  \ mid50: number;\n  let mid51: number;\n  let mid52: number;\n  let mid53: number;\n\
  \  let mid54: number;\n  let mid55: number;\n  let mid56: number;\n  let mid57:\
  \ number;\n  let mid58: number;\n  let mid59: number;\n  let mid60: number;\n  let\
  \ mid61: number;\n  let mid62: number;\n  let mid63: number;\n  let mid64: number;\n\
  \  let mid65: number;\n  let mid66: number;\n  let mid67: number;\n  let mid68:\
  \ number;\n  let mid69: number;\n  let mid70: number;\n  let mid71: number;\n  let\
  \ mid72: number;\n  let mid73: number;\n  let mid74: number;\n  let mid75: number;\n\
  \  let mid76: number;\n  let mid77: number;\n  let mid78: number;\n  let mid79:\
  \ number;\n  let mid80: number;\n  let mid81: number;\n  let mid82: number;\n  let\
  \ mid83: number;\n  let mid84: number;\n  let mid85: number;\n  let mid86: number;\n\
  \  let mid87: number;\n  let mid88"
- "  const result: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const\
  \ found = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] ===\
  \ l2[j]) {\n        result.push(l1[i]);\n        found = true;\n        break;\n\
  \      }\n    }\n    if (!found) {\n      result.push(l1[i]);\n    }\n  }\n  return\
  \ result;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l1: number[] = l1.sort();\n  const l2: number[] = l2.sort();\n  const l:\
  \ number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n  for (i\
  \ = 0; i < l1.length; i++) {\n    for (j = i + 1; j < l2.length; j++) {\n      if\
  \ (l1[i] === l2[j]) {\n        l.push(l1[i]);\n      }\n    }\n  }\n  return l;\n\
  }\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n \
  \   while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j ===\
  \ l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n"
- "  const l: number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length)\
  \ {\n    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n\
  \      break;\n    }\n  }\n  return l;\n}\n"
- "  const result: number[] = [];\n  const hashTable: { [key: number]: boolean; }\
  \ = {};\n  for (let i = 0; i < l1.length; i++) {\n    const key = l1[i];\n    if\
  \ (!hashTable[key]) {\n      hashTable[key] = true;\n      result.push(key);\n \
  \   }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    const key = l2[i];\n  \
  \  if (!hashTable[key]) {\n      hashTable[key] = true;\n      result.push(key);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length)\
  \ {\n    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n\
  \      break;\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result = [];\n  const hash1 = new Set();\n  const hash2 = new Set();\n\
  \  for (let i = 0; i < l1.length; i++) {\n    hash1.add(l1[i]);\n  }\n  for (let\
  \ i = 0; i < l2.length; i++) {\n    hash2.add(l2[i]);\n  }\n  for (let i = 0; i\
  \ < l1.length; i++) {\n    if (hash1.has(l1[i]) && hash2.has(l2[i])) {\n      result.push(l1[i]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length &&\
  \ j < l2.length) {\n    if (l1[i] === l2[j]) {\n      l.push(l1[i]);\n      i++;\n\
  \      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n\
  \    }\n  }\n  return l;\n}\n"
- "  const l1: number[] = l1.sort((a, b) => a - b);\n  const l2: number[] = l2.sort((a,\
  \ b) => a - b);\n  let i: number;\n  let j: number;\n  let k: number;\n  let l:\
  \ number;\n  let m: number;\n  let n: number = 0;\n  for (i = 0; i < l1.length;\
  \ i++) {\n    for (j = 0; j < l2.length; j++) {\n      k = l1.indexOf(l1[i]);\n\
  \      l = l2.indexOf(l2[j]);\n      if (k !== -1 && l !== -1) {\n        if (k\
  \ === l) {\n          m = 0;\n        } else {\n          m = k - l;\n        }\n\
  \        n = Math.min(n, m);\n      }\n    }\n  }\n  return l1.slice(0, n);\n}\n"
- "  const l: number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n\
  \  for (i = 0; i < l1.length; i++) {\n    for (j = 0; j < l2.length; j++) {\n  \
  \    if (l1[i] === l2[j]) {\n        l.push(l1[i]);\n        break;\n      }\n \
  \   }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++)\
  \ {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j\
  \ === l2.length) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result = [];\n  let j = 0;\n  let k = 0;\n  while (j < l1.length && k <\
  \ l2.length) {\n    if (l1[j] === l2[k]) {\n      result.push(l1[j]);\n      j++;\n\
  \      k++;\n    } else if (l1[j] < l2[k]) {\n      j++;\n    } else {\n      k++;\n\
  \    }\n  }\n  return result;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n\
  \  for (let i = 0; i < Math.min(set1.size, set2.size); i++) {\n    if (set1.has(i)\
  \ && set2.has(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n"
- "  const l1 = l1 || [];\n  const l2 = l2 || [];\n  const result = [];\n  let j =\
  \ 0;\n  let i = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] ===\
  \ l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i]\
  \ < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n\
  }\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found\
  \ = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
  \ {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n\
  \      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  const hashMap = new Map<number, number>();\n  for\
  \ (let i = 0; i < l1.length; i++) {\n    const key = l1[i];\n    if (hashMap.has(key))\
  \ {\n      l.push(key);\n    } else {\n      hashMap.set(key, l2.indexOf(key));\n\
  \    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length)\
  \ {\n    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n\
  \      break;\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result = [];\n  const hash1 = new Set();\n  const hash2 = new Set();\n\
  \  for (let i = 0; i < l1.length; i++) {\n    hash1.add(l1[i]);\n  }\n  for (let\
  \ i = 0; i < l2.length; i++) {\n    hash2.add(l2[i]);\n  }\n  for (let i = 0; i\
  \ < l1.length; i++) {\n    if (hash1.has(l1[i]) && hash2.has(l2[i])) {\n      result.push(l1[i]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n \
  \   while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j ===\
  \ l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n"
- "  const l: number[] = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length &&\
  \ j < l2.length) {\n    if (l1[i] === l2[j]) {\n      l.push(l1[i]);\n      i++;\n\
  \      j++;\n    } else if (l1[i] > l2[j]) {\n      i++;\n    } else {\n      j++;\n\
  \    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++)\
  \ {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    l.push(l1[i]);\n\
  \  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length)\
  \ {\n    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n\
  \      break;\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length)\
  \ {\n    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n\
  \      i++;\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n\
  \  let l1: number;\n  let l2: number;\n  let len1: number;\n  let len2: number;\n\
  \  let min: number;\n  let max: number;\n  let minIndex: number;\n  let maxIndex:\
  \ number;\n  for (i = 0, len1 = l1.length; i < len1; i++) {\n    l1 = l1[i];\n \
  \   for (j = 0, len2 = l2.length; j < len2; j++) {\n      l2 = l2[j];\n      min\
  \ = Math.min(l1, l2);\n      max = Math.max(l1, l2);\n      if (min === max) {\n\
  \        l.push(min);\n      } else {\n        if (min > max) {\n          l.push(min);\n\
  \          l.push(max);\n        } else {\n          l.push(max);\n          l.push(min);\n\
  \        }\n      }\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n\
  \  let l1: number;\n  let l2: number;\n  let j1: number;\n  let j2: number;\n  let\
  \ k1: number;\n  let k2: number;\n  let l1: number;\n  let l2: number;\n  let j1:\
  \ number;\n  let j2: number;\n  let k1: number;\n  let k2: number;\n  let l1: number;\n\
  \  let l2: number;\n  let j1: number;\n  let j2: number;\n  let k1: number;\n  let\
  \ k2: number;\n  let l1: number;\n  let l2: number;\n  let j1: number;\n  let j2:\
  \ number;\n  let k1: number;\n  let k2: number;\n  let l1: number;\n  let l2: number;\n\
  \  let j1: number;\n  let j2: number;\n  let k1: number;\n  let k2: number;\n  let\
  \ l1: number;\n  let l2: number;\n  let j1: number;\n  let j2: number;\n  let k1:\
  \ number;\n  let k2: number;\n  let l1: number;\n  let l2: number;\n  let j1: number;\n\
  \  let j2: number;\n  let k1: number;\n  let k2: number;\n  let l1: number;\n  let\
  \ l2: number;\n  let j1: number;\n  let j2: number;\n  let k1: number;\n  let k2:\
  \ number;\n  let l1: number;\n  let l2: number;\n  let j1: number;\n  let j2: number;\n\
  \  let k1: number;\n  let k2: number;\n  let l1: number;\n  let l2: number;\n  let\
  \ j1: number;\n  let j2: number;\n  let k1: number;\n  let k2: number;\n  let l1:\
  \ number;\n  let l2: number;\n  let j1: number;\n  let j2: number;\n  let k1: number;\n\
  \  let k2: number;\n  let l1: number;\n  let l2: number;\n  let j1: number;\n  let\
  \ j2: number;\n  let k1: number;\n  let k2: number;\n  let l1: number;\n  let l2:\
  \ number;\n  let j1: number;\n  let j2: number;\n  let k1: number;\n  let k2: number;\n\
  \  let l1: number;\n  let l2: number;\n  let j1: number;\n  let j2: number;\n  let\
  \ k1: number;\n  let k2: number;\n  let l1: number;\n  let l2: number;\n  let j1:\
  \ number;\n  let j2: number;\n  let k1: number;\n  let k2: number;\n  let l1: number;\n\
  \  let l2: number;\n  let j1: number;\n  let j2: number;\n  let k1: number;\n  let\
  \ k2: number;\n  let l1: number;\n  let l2: number;\n  let j1: "
- "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++)\
  \ {\n    if (l2.indexOf(l1[i]) !== -1) {\n      l[j] = l1[i];\n      j++;\n    }\n\
  \  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l1 = l1 || [];\n  const l2 = l2 || [];\n  const result = [];\n  const hash1\
  \ = {};\n  const hash2 = {};\n  for (let i = 0; i < l1.length; i++) {\n    const\
  \ val = l1[i];\n    if (!hash1[val]) {\n      hash1[val] = true;\n      result.push(val);\n\
  \    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    const val = l2[i];\n \
  \   if (!hash2[val]) {\n      hash2[val] = true;\n      result.push(val);\n    }\n\
  \  }\n  return result;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++)\
  \ {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j\
  \ === l2.length) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length;\
  \ i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n  \
  \  if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n\
  }\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length)\
  \ {\n    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n\
  \      break;\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found\
  \ = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
  \ {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n\
  \      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length;\
  \ i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n  \
  \  if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n\
  }\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++)\
  \ {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j\
  \ === l2.length) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found\
  \ = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
  \ {\n        l.push(l1[i]);\n        found = true;\n        break;\n      }\n  \
  \  }\n    if (!found) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n\
  \    if (l1[i] === l2[i]) {\n      result.push(l1[i]);\n      i++;\n    } else {\n\
  \      break;\n    }\n  }\n  return result;\n}\n"
- "  const l1: number[] = l1.slice();\n  const l2: number[] = l2.slice();\n  const\
  \ result: number[] = [];\n  while (l1.length > 0 && l2.length > 0) {\n    if (l1[0]\
  \ === l2[0]) {\n      result.push(l1[0]);\n      l1.shift();\n      l2.shift();\n\
  \    } else {\n      break;\n    }\n  }\n  return result.concat(l1, l2);\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n\
  \  let l1: number;\n  let l2: number;\n  let n1: number;\n  let n2: number;\n  let\
  \ n: number;\n  for (i = 0, n = l1.length; i < n; i++) {\n    l1 = l1[i];\n    l2\
  \ = l2[i];\n    if (l1 === l2) {\n      l.push(l1);\n      continue;\n    }\n  \
  \  for (j = 0, n1 = l1.length; j < n1; j++) {\n      l1 = l1[j];\n      n2 = l2[j];\n\
  \      if (l1 === n2) {\n        l.push(l1);\n        break;\n      }\n      for\
  \ (k = 0, n2 = l2.length; k < n2; k++) {\n        l2 = l2[k];\n        if (l1 ===\
  \ n2) {\n          l.push(l1);\n          break;\n        }\n      }\n    }\n  }\n\
  \  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  const hash: any = {};\n  for (let i = 0; i < l1.length;\
  \ i++) {\n    const val = l1[i];\n    if (hash[val] === undefined) {\n      l.push(val);\n\
  \      hash[val] = 1;\n    } else {\n      hash[val]++;\n    }\n  }\n  for (let\
  \ i = 0; i < l2.length; i++) {\n    const val = l2[i];\n    if (hash[val] === undefined)\
  \ {\n      l.push(val);\n      hash[val] = 1;\n    } else {\n      hash[val]++;\n\
  \    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result = [];\n  const hash1 = new Set();\n  const hash2 = new Set();\n\
  \  for (let i = 0; i < l1.length; i++) {\n    hash1.add(l1[i]);\n  }\n  for (let\
  \ i = 0; i < l2.length; i++) {\n    hash2.add(l2[i]);\n  }\n  for (let i = 0; i\
  \ < l1.length; i++) {\n    if (hash1.has(l1[i]) && hash2.has(l2[i])) {\n      result.push(l1[i]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result = [];\n  const hash1 = new Map();\n  const hash2 = new Map();\n\
  \  for (let i = 0; i < l1.length; i++) {\n    hash1.set(l1[i], i);\n  }\n  for (let\
  \ i = 0; i < l2.length; i++) {\n    hash2.set(l2[i], i);\n  }\n  for (let i = 0;\
  \ i < l1.length; i++) {\n    const key = l1[i];\n    if (hash2.has(key)) {\n   \
  \   result.push(key);\n      hash2.delete(key);\n    }\n  }\n  for (let i = 0; i\
  \ < l2.length; i++) {\n    const key = l2[i];\n    if (hash1.has(key)) {\n     \
  \ result.push(key);\n      hash1.delete(key);\n    }\n  }\n  return result;\n}\n"
- "  const l: number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n\
  \  let l1: number;\n  let l2: number;\n  let len: number;\n  let min: number;\n\
  \  let max: number;\n  let min1: number;\n  let max1: number;\n  let min2: number;\n\
  \  let max2: number;\n  let min3: number;\n  let max3: number;\n  let min4: number;\n\
  \  let max4: number;\n  let min5: number;\n  let max5: number;\n  let min6: number;\n\
  \  let max6: number;\n  let min7: number;\n  let max7: number;\n  let min8: number;\n\
  \  let max8: number;\n  let min9: number;\n  let max9: number;\n  let min10: number;\n\
  \  let max10: number;\n  let min11: number;\n  let max11: number;\n  let min12:\
  \ number;\n  let max12: number;\n  let min13: number;\n  let max13: number;\n  let\
  \ min14: number;\n  let max14: number;\n  let min15: number;\n  let max15: number;\n\
  \  let min16: number;\n  let max16: number;\n  let min17: number;\n  let max17:\
  \ number;\n  let min18: number;\n  let max18: number;\n  let min19: number;\n  let\
  \ max19: number;\n  let min20: number;\n  let max20: number;\n  let min21: number;\n\
  \  let max21: number;\n  let min22: number;\n  let max22: number;\n  let min23:\
  \ number;\n  let max23: number;\n  let min24: number;\n  let max24: number;\n  let\
  \ min25: number;\n  let max25: number;\n  let min26: number;\n  let max26: number;\n\
  \  let min27: number;\n  let max27: number;\n  let min28: number;\n  let max28:\
  \ number;\n  let min29: number;\n  let max29: number;\n  let min30: number;\n  let\
  \ max30: number;\n  let min31: number;\n  let max31: number;\n  let min32: number;\n\
  \  let max32: number;\n  let min33: number;\n  let max33: number;\n  let min34:\
  \ number;\n  let max34: number;\n  let min35: number;\n  let max35: number;\n  let\
  \ min36: number;\n  let max36: number;\n  let min37: number;\n  let max37: number;\n\
  \  let min38: number;\n  let max38: number;\n  let min39: number;\n  let max39:\
  \ number;\n  let min40: number;\n  let max40: number;\n  let min41: number;\n  let\
  \ max41: number;\n  let min42: number;\n  let max42: number;\n  let min43: number;\n\
  \  let max43: number;\n  let min44: number;\n  let max44: number;\n  let min45:\
  \ number;\n  let max45: number;\n  let min46: number;\n  let max46: number;\n  let\
  \ min47: number;\n  let max47: number;"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = new\
  \ Set([...set1].filter(x => set2.has(x)));\n  return [...set1].filter(x => !common.has(x));\n\
  }\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found\
  \ = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
  \ {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n\
  \      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length)\
  \ {\n    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n\
  \      break;\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++)\
  \ {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j\
  \ === l2.length) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length)\
  \ {\n    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n\
  \      break;\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ !== -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const\
  \ found = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] ===\
  \ l2[j]) {\n        result.push(l1[i]);\n        found = true;\n        break;\n\
  \      }\n    }\n    if (!found) {\n      result.push(l1[i]);\n    }\n  }\n  return\
  \ result;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l1 = l1 || [];\n  const l2 = l2 || [];\n  const result = [];\n  let i =\
  \ 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] ===\
  \ l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i]\
  \ < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n\
  }\n"
- "  const l: number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n\
  \  let l1: number;\n  let l2: number;\n  let len: number;\n  let min: number;\n\
  \  let max: number;\n  let mid: number;\n  let a: number;\n  let b: number;\n  let\
  \ c: number;\n  let d: number;\n  let e: number;\n  let f: number;\n  let g: number;\n\
  \  let h: number;\n  let j1: number;\n  let j2: number;\n  let j3: number;\n  let\
  \ j4: number;\n  let j5: number;\n  let j6: number;\n  let j7: number;\n  let j8:\
  \ number;\n  let j9: number;\n  let j10: number;\n  let j11: number;\n  let j12:\
  \ number;\n  let j13: number;\n  let j14: number;\n  let j15: number;\n  let j16:\
  \ number;\n  let j17: number;\n  let j18: number;\n  let j19: number;\n  let j20:\
  \ number;\n  let j21: number;\n  let j22: number;\n  let j23: number;\n  let j24:\
  \ number;\n  let j25: number;\n  let j26: number;\n  let j27: number;\n  let j28:\
  \ number;\n  let j29: number;\n  let j30: number;\n  let j31: number;\n  let j32:\
  \ number;\n  let j33: number;\n  let j34: number;\n  let j35: number;\n  let j36:\
  \ number;\n  let j37: number;\n  let j38: number;\n  let j39: number;\n  let j40:\
  \ number;\n  let j41: number;\n  let j42: number;\n  let j43: number;\n  let j44:\
  \ number;\n  let j45: number;\n  let j46: number;\n  let j47: number;\n  let j48:\
  \ number;\n  let j49: number;\n  let j50: number;\n  let j51: number;\n  let j52:\
  \ number;\n  let j53: number;\n  let j54: number;\n  let j55: number;\n  let j56:\
  \ number;\n  let j57: number;\n  let j58: number;\n  let j59: number;\n  let j60:\
  \ number;\n  let j61: number;\n  let j62: number;\n  let j63: number;\n  let j64:\
  \ number;\n  let j65: number;\n  let j66: number;\n  let j67: number;\n  let j68:\
  \ number;\n  let j69: number;\n  let j70: number;\n  let j71: number;\n  let j72:\
  \ number;\n  let j73: number;\n  let j74: number;\n  let j75: number;\n  let j76:\
  \ number;\n  let j77: number;\n  let j78: number;\n  let j79: number;\n  let j80:\
  \ number;\n  let j81: number;\n  let j82: number;\n  let j83: number;\n  let j84:\
  \ number;\n  let j85: number;\n  let j86: number;\n  let j"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length &&\
  \ j < l2.length) {\n    if (l1[i] === l2[j]) {\n      l.push(l1[i]);\n      i++;\n\
  \      j++;\n    } else if (l1[i] > l2[j]) {\n      i++;\n    } else {\n      j++;\n\
  \    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length)\
  \ {\n    if (l1[i] === l2[i]) {\n      l.push(l1[i]);\n      i++;\n    } else {\n\
  \      i++;\n    }\n  }\n  return l;\n}\n"
- "  const result = [];\n  const hash1 = new Map();\n  const hash2 = new Map();\n\
  \  for (let i = 0; i < l1.length; i++) {\n    const val = l1[i];\n    if (hash1.has(val))\
  \ {\n      hash2.get(val).push(l1[i]);\n    } else {\n      hash1.set(val, [l1[i]]);\n\
  \    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    const val = l2[i];\n \
  \   if (hash2.has(val)) {\n      result.push(...hash2.get(val));\n    } else {\n\
  \      hash2.set(val, [l2[i]]);\n    }\n  }\n  return result;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n\
  \  let l1: number;\n  let l2: number;\n  let len1: number;\n  let len2: number;\n\
  \  let minLen: number;\n  let maxLen: number;\n  let min: number;\n  let max: number;\n\
  \  let mid: number;\n  let cmp: number;\n  for (i = 0, len1 = l1.length; i < len1;\
  \ i++) {\n    l1 = l1[i];\n    l2 = l2[i];\n    minLen = Math.min(l1.length, l2.length);\n\
  \    for (j = 0, len2 = minLen - 1; j < len2; j++) {\n      k = j + 1;\n      cmp\
  \ = l1[k] - l2[k];\n      if (cmp !== 0) {\n        break;\n      }\n    }\n   \
  \ if (cmp < 0) {\n      min = l1[k];\n      minLen = k;\n    } else {\n      max\
  \ = l2[k];\n      maxLen = k;\n    }\n  }\n  if (maxLen < minLen) {\n    min = min;\n\
  \    max = max;\n    minLen = maxLen;\n  }\n  mid = min + ((max - min) / 2) | 0;\n\
  \  l = [];\n  for (i = 0, len1 = l1.length; i < len1; i++) {\n    l[i] = l1[i];\n\
  \  }\n  for (i = 0, len2 = l2.length; i < len2; i++) {\n    l[i + minLen] = l2[i];\n\
  \  }\n  return l;\n}\n"
- "  const result = [];\n  const hash1 = new Set();\n  const hash2 = new Set();\n\
  \  for (let i = 0; i < l1.length; i++) {\n    hash1.add(l1[i]);\n  }\n  for (let\
  \ i = 0; i < l2.length; i++) {\n    hash2.add(l2[i]);\n  }\n  for (let i = 0; i\
  \ < l1.length; i++) {\n    if (hash1.has(l1[i]) && hash2.has(l2[i])) {\n      result.push(l1[i]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const set1Size = set1.size;\n\
  \  const set2Size = set2.size;\n  const commonSet = new Set();\n  for (let i = 0;\
  \ i < set1Size; i++) {\n    if (set2.has(set1.get(i))) {\n      commonSet.add(set1.get(i));\n\
  \    }\n  }\n  return [...commonSet];\n}\n"
- "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++)\
  \ {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    l.push(l1[i]);\n\
  \  }\n  return l;\n}\n"
- "  const result = [];\n  const hash1 = new Set();\n  const hash2 = new Set();\n\
  \  for (let i = 0; i < l1.length; i++) {\n    hash1.add(l1[i]);\n  }\n  for (let\
  \ i = 0; i < l2.length; i++) {\n    hash2.add(l2[i]);\n  }\n  for (let i = 0; i\
  \ < l1.length; i++) {\n    if (hash1.has(l1[i]) && hash2.has(l2[i])) {\n      result.push(l1[i]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++)\
  \ {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j\
  \ === l2.length) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result = [];\n  const hash1 = new Map();\n  const hash2 = new Map();\n\
  \  for (let i = 0; i < l1.length; i++) {\n    const val = l1[i];\n    if (!hash1.has(val))\
  \ {\n      hash1.set(val, i);\n      result.push(val);\n    }\n  }\n  for (let i\
  \ = 0; i < l2.length; i++) {\n    const val = l2[i];\n    if (!hash2.has(val)) {\n\
  \      hash2.set(val, i);\n      result.push(val);\n    }\n  }\n  return result;\n\
  }\n"
- "  const l: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++)\
  \ {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j\
  \ === l2.length) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const result: number[] = [];\n  let j = 0;\n  for (let i = 0; i < l1.length;\
  \ i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n  \
  \  if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n\
  }\n"
- "  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common: number[]\
  \ = [];\n  set1.forEach((val) => {\n    if (set2.has(val)) {\n      common.push(val);\n\
  \      set2.delete(val);\n    }\n  });\n  set2.forEach((val) => {\n    if (set1.has(val))\
  \ {\n      common.push(val);\n      set1.delete(val);\n    }\n  });\n  return common;\n\
  }\n"
- "  const l: number[] = [];\n  const hash: any = {};\n  for (let i = 0; i < l1.length;\
  \ i++) {\n    const val = l1[i];\n    if (!hash[val]) {\n      l.push(val);\n  \
  \    hash[val] = true;\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n  \
  \  const val = l2[i];\n    if (!hash[val]) {\n      l.push(val);\n      hash[val]\
  \ = true;\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])\
  \ === -1) {\n      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found\
  \ = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
  \ {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n\
  \      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found\
  \ = false;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
  \ {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n\
  \      l.push(l1[i]);\n    }\n  }\n  return l;\n}\n"
- "  const l: number[] = [];\n  for (let i = 0; i < l1.length; i++) {\n    const found:\
  \ boolean = l2.indexOf(l1[i]) !== -1;\n    if (!found) {\n      l.push(l1[i]);\n\
  \    }\n  }\n  return l;\n}\n"
language: ts
name: HumanEval_58_common
prompt: '//Return sorted unique common elements for two lists.

  // >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])

  // [1, 5, 653]

  // >>> common([5, 3, 2, 8], [3, 2])

  // [2, 3]

  function common(l1: number[], l2: number[]): number[] {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = common;\n  assert.deepEqual(candidate([1, 4, 3, 34,\
  \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5,\
  \ 3, 2, 8], [3, 2]),[2, 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2,\
  \ 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);\n}\n\ntest();"
