completions:
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    for\
  \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n       \
  \ pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length !== 0;\n\
  }\n"
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    for\
  \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n       \
  \ pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length > 1;\n}\n"
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    let\
  \ pair: number[] = [];\n    for (let j = 0; j < l.length; j++) {\n      if (i !==\
  \ j) {\n        pair[j] = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n\
  \  }\n  let pair: number[][] = [];\n  for (let i = 0; i < pairs.length; i++) {\n\
  \    for (let j = 0; j < pairs[i].length; j++) {\n      if (pairs[i][j] !== 0) {\n\
  \        pair.push(pairs[i][j]);\n      }\n    }\n  }\n  return pair.length !==\
  \ 0;\n}\n"
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    let\
  \ pair: number[] = [];\n    for (let j = i; j < l.length; j++) {\n      if (l[j]\
  \ > 0) {\n        pair.push(l[j]);\n      }\n    }\n    if (pair.length > 0) {\n\
  \      pairs.push(pair);\n    }\n  }\n  if (pairs.length === 0) {\n    return false;\n\
  \  }\n  let pair: number[][] = [];\n  for (let i = 0; i < pairs.length; i++) {\n\
  \    for (let j = 0; j < pairs[i].length; j++) {\n      if (pairs[i][j] === 0) {\n\
  \        return false;\n      }\n    }\n  }\n  return true;\n}\n"
- "  const n = l.length;\n  if (n === 0) return false;\n  if (n === 1) return l[0]\
  \ === 0;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += l[i];\n  \
  \  if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n"
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    for\
  \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n       \
  \ pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length !== 0;\n\
  }\n"
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    for\
  \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n       \
  \ pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length !== 0;\n\
  }\n"
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    for\
  \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n       \
  \ pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length > 0;\n}\n"
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    for\
  \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n       \
  \ pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length > 0;\n}\n"
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    for\
  \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n       \
  \ pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length > 1;\n}\n"
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    for\
  \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n       \
  \ pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length !== 0;\n\
  }\n"
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    for\
  \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n       \
  \ pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length < 2;\n}\n"
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    for\
  \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n       \
  \ pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length > 1;\n}\n"
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    for\
  \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n       \
  \ pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length > 1;\n}\n"
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    let\
  \ pair: number[] = [];\n    for (let j = 0; j < l.length; j++) {\n      if (i !==\
  \ j) {\n        pair[j] = l[i] + l[j];\n      }\n    }\n    pairs.push(pair);\n\
  \  }\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
  \ j++) {\n      if (pairs[i][j] !== 0) {\n        return false;\n      }\n    }\n\
  \  }\n  return true;\n}\n"
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    for\
  \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n       \
  \ pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length !== 0;\n\
  }\n"
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    for\
  \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n       \
  \ pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length !== 0;\n\
  }\n"
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    let\
  \ pair: number[] = [];\n    for (let j = 0; j < l.length; j++) {\n      if (i !==\
  \ j) {\n        pair[j] = (l[i] + l[j]) % 2 === 0;\n      }\n    }\n    pairs.push(pair);\n\
  \  }\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
  \ j++) {\n      if (pairs[i][j]) {\n        return false;\n      }\n    }\n  }\n\
  \  return true;\n}\n"
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    for\
  \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n       \
  \ pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length > 0;\n}\n"
- "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    for\
  \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n       \
  \ pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length > 1;\n}\n"
language: ts
name: HumanEval_43_pairs_sum_to_zero
prompt: '//pairs_sum_to_zero takes a list of integers as an input.

  // it returns True if there are two distinct elements in the list that

  // sum to zero, and False otherwise.

  // >>> pairs_sum_to_zero([1, 3, 5, 0])

  // False

  // >>> pairs_sum_to_zero([1, 3, -2, 1])

  // False

  // >>> pairs_sum_to_zero([1, 2, 3, 7])

  // False

  // >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])

  // True

  // >>> pairs_sum_to_zero([1])

  // False

  function pairs_sum_to_zero(l: number[]): boolean {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
  \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
  \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3, 9,\
  \ -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
  \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
  \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
