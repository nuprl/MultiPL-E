language: ts
name: HumanEval_47_median
results:
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyr_r_ijm.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpyr_r_ijm.js:11:18)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzvy61kyv.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpzvy61kyv.js:11:18)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return\
    \ sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpe1azwl3p.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe1azwl3p.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyr_r_ijm.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpyr_r_ijm.js:11:18)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  return median(l[mid], l[mid-1]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8600d3uo.ts(14,25): error TS2554: Expected 1 arguments,
    but got 2.

    '
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 1) {\n    throw new Error(\"\
    median requires at least one argument\");\n  }\n  if (n === 1) {\n    return l[0];\n\
    \  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp72zrlzhx.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp72zrlzhx.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return left + Math.ceil(right - left);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpcwal36wk.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpcwal36wk.js:14:25)\n    at\
    \ median (/tmp/tmpcwal36wk.js:15:17)\n    at median (/tmp/tmpcwal36wk.js:15:17)\n\
    \    at median (/tmp/tmpcwal36wk.js:15:17)\n    at median (/tmp/tmpcwal36wk.js:15:17)\n\
    \    at median (/tmp/tmpcwal36wk.js:15:17)\n    at median (/tmp/tmpcwal36wk.js:15:17)\n\
    \    at median (/tmp/tmpcwal36wk.js:15:17)\n    at median (/tmp/tmpcwal36wk.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle +\
    \ 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpagw79rvc.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpagw79rvc.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmp5wwwgvw8.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5wwwgvw8.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvi8cwqu9.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpvi8cwqu9.js:11:18)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const half =\
    \ Math.floor(l.length / 2);\n  return l[half];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmp_jv8nnc9.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_jv8nnc9.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmptnhw3tg7.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmptnhw3tg7.js:11:18)\n    at median (/tmp/tmptnhw3tg7.js:13:27)\n\
    \    at median (/tmp/tmptnhw3tg7.js:13:27)\n    at median (/tmp/tmptnhw3tg7.js:13:27)\n\
    \    at median (/tmp/tmptnhw3tg7.js:13:27)\n    at median (/tmp/tmptnhw3tg7.js:13:27)\n\
    \    at median (/tmp/tmptnhw3tg7.js:13:27)\n    at median (/tmp/tmptnhw3tg7.js:13:27)\n\
    \    at median (/tmp/tmptnhw3tg7.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzvy61kyv.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpzvy61kyv.js:11:18)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmps1oie001.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmps1oie001.js:11:25)\n    at\
    \ median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \    at median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \    at median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \    at median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a: number, b: number) => a - b);\n  const len = sorted.length;\n\
    \  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle\
    \ = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 =\
    \ sorted[middle + 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpgxqmt2te.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgxqmt2te.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length\
    \ / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpmyt0l844.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmyt0l844.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpc3dpkwip.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpc3dpkwip.js:11:25)\n    at\
    \ median (/tmp/tmpc3dpkwip.js:12:17)\n    at median (/tmp/tmpc3dpkwip.js:12:17)\n\
    \    at median (/tmp/tmpc3dpkwip.js:12:17)\n    at median (/tmp/tmpc3dpkwip.js:12:17)\n\
    \    at median (/tmp/tmpc3dpkwip.js:12:17)\n    at median (/tmp/tmpc3dpkwip.js:12:17)\n\
    \    at median (/tmp/tmpc3dpkwip.js:12:17)\n    at median (/tmp/tmpc3dpkwip.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpk4dabtdm.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpk4dabtdm.js:8:15)\n    at median (/tmp/tmpk4dabtdm.js:14:16)\n\
    \    at median (/tmp/tmpk4dabtdm.js:14:16)\n    at median (/tmp/tmpk4dabtdm.js:15:17)\n\
    \    at test (/tmp/tmpk4dabtdm.js:21:22)\n    at Object.<anonymous> (/tmp/tmpk4dabtdm.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp3qjtc8mm.js:8\n        throw new Error(\"Cannot compute median\
    \ of an empty list\");\n        ^\n\nError: Cannot compute median of an empty\
    \ list\n    at median (/tmp/tmp3qjtc8mm.js:8:15)\n    at median (/tmp/tmp3qjtc8mm.js:15:16)\n\
    \    at median (/tmp/tmp3qjtc8mm.js:15:16)\n    at median (/tmp/tmp3qjtc8mm.js:16:17)\n\
    \    at test (/tmp/tmp3qjtc8mm.js:22:22)\n    at Object.<anonymous> (/tmp/tmp3qjtc8mm.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpb6tghlbc.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpb6tghlbc.js:14:25)\n    at\
    \ median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \    at median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \    at median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \    at median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
