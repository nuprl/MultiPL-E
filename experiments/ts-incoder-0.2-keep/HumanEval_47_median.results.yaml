language: ts
name: HumanEval_47_median
results:
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyr_r_ijm.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpyr_r_ijm.js:11:18)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzvy61kyv.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpzvy61kyv.js:11:18)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return\
    \ sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpe1azwl3p.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe1azwl3p.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyr_r_ijm.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpyr_r_ijm.js:11:18)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  return median(l[mid], l[mid-1]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8600d3uo.ts(14,25): error TS2554: Expected 1 arguments,
    but got 2.

    '
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 1) {\n    throw new Error(\"\
    median requires at least one argument\");\n  }\n  if (n === 1) {\n    return l[0];\n\
    \  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp72zrlzhx.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp72zrlzhx.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return left + Math.ceil(right - left);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpcwal36wk.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpcwal36wk.js:14:25)\n    at\
    \ median (/tmp/tmpcwal36wk.js:15:17)\n    at median (/tmp/tmpcwal36wk.js:15:17)\n\
    \    at median (/tmp/tmpcwal36wk.js:15:17)\n    at median (/tmp/tmpcwal36wk.js:15:17)\n\
    \    at median (/tmp/tmpcwal36wk.js:15:17)\n    at median (/tmp/tmpcwal36wk.js:15:17)\n\
    \    at median (/tmp/tmpcwal36wk.js:15:17)\n    at median (/tmp/tmpcwal36wk.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle +\
    \ 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpagw79rvc.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpagw79rvc.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmp5wwwgvw8.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5wwwgvw8.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvi8cwqu9.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpvi8cwqu9.js:11:18)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const half =\
    \ Math.floor(l.length / 2);\n  return l[half];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmp_jv8nnc9.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_jv8nnc9.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmptnhw3tg7.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmptnhw3tg7.js:11:18)\n    at median (/tmp/tmptnhw3tg7.js:13:27)\n\
    \    at median (/tmp/tmptnhw3tg7.js:13:27)\n    at median (/tmp/tmptnhw3tg7.js:13:27)\n\
    \    at median (/tmp/tmptnhw3tg7.js:13:27)\n    at median (/tmp/tmptnhw3tg7.js:13:27)\n\
    \    at median (/tmp/tmptnhw3tg7.js:13:27)\n    at median (/tmp/tmptnhw3tg7.js:13:27)\n\
    \    at median (/tmp/tmptnhw3tg7.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzvy61kyv.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpzvy61kyv.js:11:18)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmps1oie001.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmps1oie001.js:11:25)\n    at\
    \ median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \    at median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \    at median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \    at median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a: number, b: number) => a - b);\n  const len = sorted.length;\n\
    \  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle\
    \ = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 =\
    \ sorted[middle + 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpgxqmt2te.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgxqmt2te.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length\
    \ / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpmyt0l844.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmyt0l844.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpc3dpkwip.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpc3dpkwip.js:11:25)\n    at\
    \ median (/tmp/tmpc3dpkwip.js:12:17)\n    at median (/tmp/tmpc3dpkwip.js:12:17)\n\
    \    at median (/tmp/tmpc3dpkwip.js:12:17)\n    at median (/tmp/tmpc3dpkwip.js:12:17)\n\
    \    at median (/tmp/tmpc3dpkwip.js:12:17)\n    at median (/tmp/tmpc3dpkwip.js:12:17)\n\
    \    at median (/tmp/tmpc3dpkwip.js:12:17)\n    at median (/tmp/tmpc3dpkwip.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpk4dabtdm.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpk4dabtdm.js:8:15)\n    at median (/tmp/tmpk4dabtdm.js:14:16)\n\
    \    at median (/tmp/tmpk4dabtdm.js:14:16)\n    at median (/tmp/tmpk4dabtdm.js:15:17)\n\
    \    at test (/tmp/tmpk4dabtdm.js:21:22)\n    at Object.<anonymous> (/tmp/tmpk4dabtdm.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp3qjtc8mm.js:8\n        throw new Error(\"Cannot compute median\
    \ of an empty list\");\n        ^\n\nError: Cannot compute median of an empty\
    \ list\n    at median (/tmp/tmp3qjtc8mm.js:8:15)\n    at median (/tmp/tmp3qjtc8mm.js:15:16)\n\
    \    at median (/tmp/tmp3qjtc8mm.js:15:16)\n    at median (/tmp/tmp3qjtc8mm.js:16:17)\n\
    \    at test (/tmp/tmp3qjtc8mm.js:22:22)\n    at Object.<anonymous> (/tmp/tmp3qjtc8mm.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpb6tghlbc.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpb6tghlbc.js:14:25)\n    at\
    \ median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \    at median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \    at median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \    at median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return median(l[mid],\
    \ l[mid-1]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2182lbkn.ts(14,25): error TS2554: Expected 1 arguments,
    but got 2.

    '
  timestamp: 1659746592
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return median(l[mid],\
    \ l[mid-1]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptqkuyvyg.ts(14,25): error TS2554: Expected 1 arguments,
    but got 2.

    '
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzvy61kyv.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpzvy61kyv.js:11:18)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return\
    \ sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpe1azwl3p.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe1azwl3p.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzagyhza0.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpzagyhza0.js:8:15)\n    at median (/tmp/tmpzagyhza0.js:14:16)\n\
    \    at median (/tmp/tmpzagyhza0.js:14:16)\n    at median (/tmp/tmpzagyhza0.js:15:17)\n\
    \    at test (/tmp/tmpzagyhza0.js:21:22)\n    at Object.<anonymous> (/tmp/tmpzagyhza0.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right\
    \ = median(l.slice(mid));\n  return l.length % 2 ? left + (right - left) / 2 :\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpt8krp8m5.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpt8krp8m5.js:11:25)\n    at\
    \ median (/tmp/tmpt8krp8m5.js:12:17)\n    at median (/tmp/tmpt8krp8m5.js:12:17)\n\
    \    at median (/tmp/tmpt8krp8m5.js:12:17)\n    at median (/tmp/tmpt8krp8m5.js:12:17)\n\
    \    at median (/tmp/tmpt8krp8m5.js:12:17)\n    at median (/tmp/tmpt8krp8m5.js:12:17)\n\
    \    at median (/tmp/tmpt8krp8m5.js:12:17)\n    at median (/tmp/tmpt8krp8m5.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid+1])\
    \ {\n    return l[mid];\n  }\n  return l[mid+1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpuwf_spzv.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpuwf_spzv.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n === 1) {\n\
    \    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2)\
    \ | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpc24wpt1t.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpc24wpt1t.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpr8fwxrsj.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpr8fwxrsj.js:8:15)\n    at median (/tmp/tmpr8fwxrsj.js:15:16)\n\
    \    at median (/tmp/tmpr8fwxrsj.js:15:16)\n    at median (/tmp/tmpr8fwxrsj.js:16:17)\n\
    \    at test (/tmp/tmpr8fwxrsj.js:22:22)\n    at Object.<anonymous> (/tmp/tmpr8fwxrsj.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n \
    \ const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp0aybj9iu.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmp0aybj9iu.js:11:18)\n    at median (/tmp/tmp0aybj9iu.js:13:27)\n\
    \    at median (/tmp/tmp0aybj9iu.js:13:27)\n    at median (/tmp/tmp0aybj9iu.js:13:27)\n\
    \    at median (/tmp/tmp0aybj9iu.js:13:27)\n    at median (/tmp/tmp0aybj9iu.js:13:27)\n\
    \    at median (/tmp/tmp0aybj9iu.js:13:27)\n    at median (/tmp/tmp0aybj9iu.js:13:27)\n\
    \    at median (/tmp/tmp0aybj9iu.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const\
    \ right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1lfcrgdr.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmp1lfcrgdr.js:11:18)\n    at median (/tmp/tmp1lfcrgdr.js:13:27)\n\
    \    at median (/tmp/tmp1lfcrgdr.js:13:27)\n    at median (/tmp/tmp1lfcrgdr.js:13:27)\n\
    \    at median (/tmp/tmp1lfcrgdr.js:13:27)\n    at median (/tmp/tmp1lfcrgdr.js:13:27)\n\
    \    at median (/tmp/tmp1lfcrgdr.js:13:27)\n    at median (/tmp/tmp1lfcrgdr.js:13:27)\n\
    \    at median (/tmp/tmp1lfcrgdr.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle +\
    \ 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpagw79rvc.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpagw79rvc.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzui261vi.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpzui261vi.js:8:15)\n    at median (/tmp/tmpzui261vi.js:14:16)\n\
    \    at median (/tmp/tmpzui261vi.js:14:16)\n    at median (/tmp/tmpzui261vi.js:15:17)\n\
    \    at test (/tmp/tmpzui261vi.js:21:22)\n    at Object.<anonymous> (/tmp/tmpzui261vi.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return left + Math.abs(right - left);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp88jysn59.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp88jysn59.js:15:25)\n    at\
    \ median (/tmp/tmp88jysn59.js:16:17)\n    at median (/tmp/tmp88jysn59.js:16:17)\n\
    \    at median (/tmp/tmp88jysn59.js:16:17)\n    at median (/tmp/tmp88jysn59.js:16:17)\n\
    \    at median (/tmp/tmp88jysn59.js:16:17)\n    at median (/tmp/tmp88jysn59.js:16:17)\n\
    \    at median (/tmp/tmp88jysn59.js:16:17)\n    at median (/tmp/tmp88jysn59.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len\
    \ / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const medianOfMiddle\
    \ = median(sorted.slice(0, middle));\n  const medianOfRest = median(sorted.slice(middle));\n\
    \  return medianOfMiddle + medianOfRest;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpktfmvzrn.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpktfmvzrn.js:8:15)\n    at median (/tmp/tmpktfmvzrn.js:16:26)\n\
    \    at median (/tmp/tmpktfmvzrn.js:16:26)\n    at median (/tmp/tmpktfmvzrn.js:17:24)\n\
    \    at test (/tmp/tmpktfmvzrn.js:23:22)\n    at Object.<anonymous> (/tmp/tmpktfmvzrn.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length\n  if (n < 1) return NaN\n  if (n\
    \ === 1) return l[0]\n  const mid = n >> 1\n  const a = median(l.slice(0, mid))\n\
    \  const b = median(l.slice(mid))\n  return ((a + b) / 2)\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.625\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmphs7lj0su.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphs7lj0su.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.625,\n \
    \ expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len\
    \ / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmp18sl2nua.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp18sl2nua.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return\
    \ sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpe1azwl3p.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe1azwl3p.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute\
    \ median of an empty list');\n  }\n  const n = l.length;\n  if (n === 1) {\n \
    \   return l[0];\n  }\n  const half = n / 2;\n  if (n % 2) {\n    return median(l[half])\
    \ < median(l[half - 1]) ? l[half] : l[half - 1];\n  }\n  return median(l[half]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5km4foq5.ts(16,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmp5km4foq5.ts(16,37): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmp5km4foq5.ts(18,17): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2\
    \ - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const\
    \ right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy23tt43u.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpy23tt43u.js:11:18)\n    at median (/tmp/tmpy23tt43u.js:13:27)\n\
    \    at median (/tmp/tmpy23tt43u.js:13:27)\n    at median (/tmp/tmpy23tt43u.js:13:27)\n\
    \    at median (/tmp/tmpy23tt43u.js:13:27)\n    at median (/tmp/tmpy23tt43u.js:13:27)\n\
    \    at median (/tmp/tmpy23tt43u.js:13:27)\n    at median (/tmp/tmpy23tt43u.js:13:27)\n\
    \    at median (/tmp/tmpy23tt43u.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left < right) ? left : right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz4vx3y0t.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpz4vx3y0t.js:11:25)\n    at\
    \ median (/tmp/tmpz4vx3y0t.js:12:17)\n    at median (/tmp/tmpz4vx3y0t.js:12:17)\n\
    \    at median (/tmp/tmpz4vx3y0t.js:12:17)\n    at median (/tmp/tmpz4vx3y0t.js:12:17)\n\
    \    at median (/tmp/tmpz4vx3y0t.js:12:17)\n    at median (/tmp/tmpz4vx3y0t.js:12:17)\n\
    \    at median (/tmp/tmpz4vx3y0t.js:12:17)\n    at median (/tmp/tmpz4vx3y0t.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjwcy73yq.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpjwcy73yq.js:8:15)\n    at median (/tmp/tmpjwcy73yq.js:14:16)\n\
    \    at median (/tmp/tmpjwcy73yq.js:14:16)\n    at median (/tmp/tmpjwcy73yq.js:15:17)\n\
    \    at test (/tmp/tmpjwcy73yq.js:21:22)\n    at Object.<anonymous> (/tmp/tmpjwcy73yq.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpv_epqpd9.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpv_epqpd9.js:14:25)\n    at\
    \ median (/tmp/tmpv_epqpd9.js:15:17)\n    at median (/tmp/tmpv_epqpd9.js:15:17)\n\
    \    at median (/tmp/tmpv_epqpd9.js:15:17)\n    at median (/tmp/tmpv_epqpd9.js:15:17)\n\
    \    at median (/tmp/tmpv_epqpd9.js:15:17)\n    at median (/tmp/tmpv_epqpd9.js:15:17)\n\
    \    at median (/tmp/tmpv_epqpd9.js:15:17)\n    at median (/tmp/tmpv_epqpd9.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpsju8k30c.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpsju8k30c.js:11:25)\n    at\
    \ median (/tmp/tmpsju8k30c.js:12:17)\n    at median (/tmp/tmpsju8k30c.js:12:17)\n\
    \    at median (/tmp/tmpsju8k30c.js:12:17)\n    at median (/tmp/tmpsju8k30c.js:12:17)\n\
    \    at median (/tmp/tmpsju8k30c.js:12:17)\n    at median (/tmp/tmpsju8k30c.js:12:17)\n\
    \    at median (/tmp/tmpsju8k30c.js:12:17)\n    at median (/tmp/tmpsju8k30c.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzagyhza0.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpzagyhza0.js:8:15)\n    at median (/tmp/tmpzagyhza0.js:14:16)\n\
    \    at median (/tmp/tmpzagyhza0.js:14:16)\n    at median (/tmp/tmpzagyhza0.js:15:17)\n\
    \    at test (/tmp/tmpzagyhza0.js:21:22)\n    at Object.<anonymous> (/tmp/tmpzagyhza0.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const middle = l.length / 2;\n  if (middle\
    \ === 0) {\n    return l[middle];\n  }\n  if (middle === 1) {\n    return l[middle\
    \ - 1];\n  }\n  const medianValue = l[middle];\n  const leftMedian = median(l.slice(0,\
    \ middle));\n  const rightMedian = median(l.slice(middle + 1));\n  return medianValue\
    \ + Math.max(leftMedian, rightMedian);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpam8nvibt.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpam8nvibt.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const midIndex = Math.floor(sortedList.length / 2);\n  return\
    \ sortedList[midIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmphfvbre3a.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphfvbre3a.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: -1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw Error('Cannot calculate\
    \ median of an empty list');\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n\
    \    return l[(n - 1) / 2] as number;\n  }\n  const half = n / 2;\n  let i = 0;\n\
    \  let m = 0;\n  while (i < half) {\n    m = l[i];\n    if (m > l[half]) {\n \
    \     i++;\n    }\n    else if (m === l[half]) {\n      i++;\n      m++;\n   \
    \ }\n    else {\n      m++;\n    }\n  }\n  return m / 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659746607
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  const sorted\
    \ = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return\
    \ sorted[mid];\n  }\n  const medianOfMiddle = Math.floor(mid / 2);\n  return sorted[medianOfMiddle];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp0h_fuqlt.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0h_fuqlt.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746594
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = Math.floor(l.length / 2);\n  const left = l.slice(0,\
    \ middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfy7kb1ov.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpfy7kb1ov.js:11:18)\n    at median (/tmp/tmpfy7kb1ov.js:13:27)\n\
    \    at median (/tmp/tmpfy7kb1ov.js:13:27)\n    at median (/tmp/tmpfy7kb1ov.js:13:27)\n\
    \    at median (/tmp/tmpfy7kb1ov.js:13:27)\n    at median (/tmp/tmpfy7kb1ov.js:13:27)\n\
    \    at median (/tmp/tmpfy7kb1ov.js:13:27)\n    at median (/tmp/tmpfy7kb1ov.js:13:27)\n\
    \    at median (/tmp/tmpfy7kb1ov.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746594
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp73vs8o8a.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp73vs8o8a.js:15:25)\n    at\
    \ median (/tmp/tmp73vs8o8a.js:16:17)\n    at median (/tmp/tmp73vs8o8a.js:16:17)\n\
    \    at median (/tmp/tmp73vs8o8a.js:16:17)\n    at median (/tmp/tmp73vs8o8a.js:16:17)\n\
    \    at median (/tmp/tmp73vs8o8a.js:16:17)\n    at median (/tmp/tmp73vs8o8a.js:16:17)\n\
    \    at median (/tmp/tmp73vs8o8a.js:16:17)\n    at median (/tmp/tmp73vs8o8a.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyr_r_ijm.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpyr_r_ijm.js:11:18)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1b27m25b.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp1b27m25b.js:11:25)\n    at\
    \ median (/tmp/tmp1b27m25b.js:12:17)\n    at median (/tmp/tmp1b27m25b.js:12:17)\n\
    \    at median (/tmp/tmp1b27m25b.js:12:17)\n    at median (/tmp/tmp1b27m25b.js:12:17)\n\
    \    at median (/tmp/tmp1b27m25b.js:12:17)\n    at median (/tmp/tmp1b27m25b.js:12:17)\n\
    \    at median (/tmp/tmp1b27m25b.js:12:17)\n    at median (/tmp/tmp1b27m25b.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return left + right + l[mid];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjee69dul.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpjee69dul.js:8:15)\n    at median (/tmp/tmpjee69dul.js:15:16)\n\
    \    at median (/tmp/tmpjee69dul.js:15:16)\n    at median (/tmp/tmpjee69dul.js:16:17)\n\
    \    at test (/tmp/tmpjee69dul.js:22:22)\n    at Object.<anonymous> (/tmp/tmpjee69dul.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length\n  if (n < 2) return NaN\n  const\
    \ mid = ~~(n / 2)\n  const a = l[mid]\n  const b = l[n - 1]\n  const c = l[mid]\n\
    \  const d = l[n - 1]\n  return ((a + b + c + d) / 4).toFixed(2) // toFixed returns\
    \ string, not number\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxjv0xjyn.ts(14,3): error TS2322: Type ''string''
    is not assignable to type ''number''.

    '
  timestamp: 1659746594
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length\
    \ / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((l[mid] + l[mid-1] + l[mid+1] + right) / 4) as number;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpjo4rpv6z.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjo4rpv6z.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpujq_15yd.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpujq_15yd.js:11:25)\n    at\
    \ median (/tmp/tmpujq_15yd.js:12:17)\n    at median (/tmp/tmpujq_15yd.js:12:17)\n\
    \    at median (/tmp/tmpujq_15yd.js:12:17)\n    at median (/tmp/tmpujq_15yd.js:12:17)\n\
    \    at median (/tmp/tmpujq_15yd.js:12:17)\n    at median (/tmp/tmpujq_15yd.js:12:17)\n\
    \    at median (/tmp/tmpujq_15yd.js:12:17)\n    at median (/tmp/tmpujq_15yd.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute\
    \ median of an empty list');\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n\
    \    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left =\
    \ median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpdfiu7gf8.js:8\n        throw new Error('Cannot compute median of\
    \ an empty list');\n        ^\n\nError: Cannot compute median of an empty list\n\
    \    at median (/tmp/tmpdfiu7gf8.js:8:15)\n    at median (/tmp/tmpdfiu7gf8.js:15:16)\n\
    \    at median (/tmp/tmpdfiu7gf8.js:15:16)\n    at median (/tmp/tmpdfiu7gf8.js:16:17)\n\
    \    at test (/tmp/tmpdfiu7gf8.js:22:22)\n    at Object.<anonymous> (/tmp/tmpdfiu7gf8.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzui261vi.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpzui261vi.js:8:15)\n    at median (/tmp/tmpzui261vi.js:14:16)\n\
    \    at median (/tmp/tmpzui261vi.js:14:16)\n    at median (/tmp/tmpzui261vi.js:15:17)\n\
    \    at test (/tmp/tmpzui261vi.js:21:22)\n    at Object.<anonymous> (/tmp/tmpzui261vi.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length\n  if (n < 2) {\n    return l[0]\n\
    \  }\n  const half = Math.floor(n / 2)\n  const left = median(l[half])\n  const\
    \ right = median(l[n - half])\n  return (left + right) / 2\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0z0i95jt.ts(12,23): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmp0z0i95jt.ts(13,24): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpv_epqpd9.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpv_epqpd9.js:14:25)\n    at\
    \ median (/tmp/tmpv_epqpd9.js:15:17)\n    at median (/tmp/tmpv_epqpd9.js:15:17)\n\
    \    at median (/tmp/tmpv_epqpd9.js:15:17)\n    at median (/tmp/tmpv_epqpd9.js:15:17)\n\
    \    at median (/tmp/tmpv_epqpd9.js:15:17)\n    at median (/tmp/tmpv_epqpd9.js:15:17)\n\
    \    at median (/tmp/tmpv_epqpd9.js:15:17)\n    at median (/tmp/tmpv_epqpd9.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvi8cwqu9.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpvi8cwqu9.js:11:18)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n === 1) {\n\
    \    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  if (n % 2) {\n   \
    \ return median(l[mid]);\n  }\n  return median(l[mid], l[n - 1]);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgapk_txd.ts(16,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpgapk_txd.ts(18,25): error TS2554: Expected 1 arguments,
    but got 2.

    '
  timestamp: 1659746595
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length\n  if (n < 2) return l[0]\n  const\
    \ half = n / 2\n  const i = half\n  const a = l[half]\n  const b = l[n - 1]\n\
    \  let c = l[n - 2]\n  let d = l[n - 3]\n  let m\n  if (a > b && a > c) m = a\n\
    \  else if (b > c && b > d) m = b\n  else m = c\n  if (m === 0) return 0\n  else\
    \ if (m === 1) return l[n - 1]\n  else if (m === 2) return l[n - 2]\n  else if\
    \ (m === 3) return l[n - 3]\n  else if (m === 4) return l[n - 4]\n  else if (m\
    \ === 5) return l[n - 5]\n  else if (m === 6) return l[n - 6]\n  else if (m ===\
    \ 7) return l[n - 7]\n  else if (m === 8) return l[n - 8]\n  else if (m === 9)\
    \ return l[n - 9]\n  else if (m === 10) return l[n - 10]\n  else if (m === 11)\
    \ return l[n - 11]\n  else if (m === 12) return l[n - 12]\n  else if (m === 13)\
    \ return l[n - 13]\n  else if (m === 14) return l[n - 14]\n  else if (m === 15)\
    \ return l[n - 15]\n  else if (m === 16) return l[n - 16]\n  else if (m === 17)\
    \ return l[n - 17]\n  else if (m === 18) return l[n - 18]\n  else if (m === 19)\
    \ return l[n - 19]\n  else if (m === 20) return l[n - 20]\n  else if (m === 21)\
    \ return l[n - 21]\n  else if (m === 22) return l[n - 22]\n  else if (m === 23)\
    \ return l[n - 23]\n  else if (m === 24) return l[n - 24]\n  else if (m === 25)\
    \ return l[n - 25]\n  else if (m === 26) return l[n - 26]\n  else if (m === 27)\
    \ return l[n - 27]\n  else if (m === 28) return l[n - 28]\n  else if (m === 29)\
    \ return l[n - 29]\n  else if (m === 30) return l[n - 30]\n  else if (m === 31)\
    \ return l[n - 31]\n  else if (m === 32) return l[n - 32]\n  else if (m === 33)\
    \ return l[n - 33]\n  else if (m === 34) return l[n - 34]\n  else if (m === 35)\
    \ return l[n - 35]\n  else if (m === 36) return l[n - 36]\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppqswilx3.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjwcy73yq.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpjwcy73yq.js:8:15)\n    at median (/tmp/tmpjwcy73yq.js:14:16)\n\
    \    at median (/tmp/tmpjwcy73yq.js:14:16)\n    at median (/tmp/tmpjwcy73yq.js:15:17)\n\
    \    at test (/tmp/tmpjwcy73yq.js:21:22)\n    at Object.<anonymous> (/tmp/tmpjwcy73yq.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp0mscl44t.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp0mscl44t.js:11:25)\n    at\
    \ median (/tmp/tmp0mscl44t.js:12:17)\n    at median (/tmp/tmp0mscl44t.js:12:17)\n\
    \    at median (/tmp/tmp0mscl44t.js:12:17)\n    at median (/tmp/tmp0mscl44t.js:12:17)\n\
    \    at median (/tmp/tmp0mscl44t.js:12:17)\n    at median (/tmp/tmp0mscl44t.js:12:17)\n\
    \    at median (/tmp/tmp0mscl44t.js:12:17)\n    at median (/tmp/tmp0mscl44t.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpb6tghlbc.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpb6tghlbc.js:14:25)\n    at\
    \ median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \    at median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \    at median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \    at median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle =\
    \ Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmpt56g4gkp.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt56g4gkp.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq52bd4wf.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpq52bd4wf.js:11:25)\n    at\
    \ median (/tmp/tmpq52bd4wf.js:12:17)\n    at median (/tmp/tmpq52bd4wf.js:12:17)\n\
    \    at median (/tmp/tmpq52bd4wf.js:12:17)\n    at median (/tmp/tmpq52bd4wf.js:12:17)\n\
    \    at median (/tmp/tmpq52bd4wf.js:12:17)\n    at median (/tmp/tmpq52bd4wf.js:12:17)\n\
    \    at median (/tmp/tmpq52bd4wf.js:12:17)\n    at median (/tmp/tmpq52bd4wf.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid =\
    \ l.length / 2;\n  if (mid % 1 !== 0) {\n    return l[mid];\n  }\n  const lower\
    \ = [];\n  const upper = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i\
    \ < mid) {\n      lower.push(l[i]);\n    } else {\n      upper.push(l[i]);\n \
    \   }\n  }\n  return median(lower) + median(upper);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpxq357diy.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxq357diy.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedArr = l.slice().sort((a, b)\
    \ => a - b);\n  const mid = Math.floor(sortedArr.length / 2);\n  if (sortedArr.length\
    \ % 2 === 0) {\n    return sortedArr[mid];\n  }\n  return sortedArr[mid - 1] +\
    \ sortedArr[mid];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpe3yok69y.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe3yok69y.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  if (l.length === 1) {\n    return l[0];\n\
    \  }\n  const middle = Math.floor(l.length / 2);\n  const medianOfMiddle = median(l.slice(0,\
    \ middle));\n  const medianOfRest = median(l.slice(middle));\n  return medianOfMiddle\
    \ + medianOfRest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp15_zh4qk.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp15_zh4qk.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return median(l.slice(0,\
    \ mid), l.slice(mid));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnbhr9uxi.ts(14,34): error TS2554: Expected 1 arguments,
    but got 2.

    '
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const middle = Math.floor(sortedList.length / 2);\n  return sortedList[middle];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmp8swx1ga1.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8swx1ga1.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle - 1];\n  const median2 = sorted[middle];\n\
    \  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp_y_2l90i.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_y_2l90i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmppacf9f05.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppacf9f05.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len\
    \ / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const medianOfMiddle\
    \ = median(sorted.slice(0, middle));\n  const medianOfRest = median(sorted.slice(middle));\n\
    \  return medianOfMiddle + medianOfRest;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpbzl5trzi.js:8\n        throw new Error(\"Cannot compute median\
    \ of an empty list\");\n        ^\n\nError: Cannot compute median of an empty\
    \ list\n    at median (/tmp/tmpbzl5trzi.js:8:15)\n    at median (/tmp/tmpbzl5trzi.js:16:26)\n\
    \    at median (/tmp/tmpbzl5trzi.js:16:26)\n    at median (/tmp/tmpbzl5trzi.js:17:24)\n\
    \    at test (/tmp/tmpbzl5trzi.js:23:22)\n    at Object.<anonymous> (/tmp/tmpbzl5trzi.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left > right) ? left : right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmph6xr4six.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmph6xr4six.js:11:25)\n    at\
    \ median (/tmp/tmph6xr4six.js:12:17)\n    at median (/tmp/tmph6xr4six.js:12:17)\n\
    \    at median (/tmp/tmph6xr4six.js:12:17)\n    at median (/tmp/tmph6xr4six.js:12:17)\n\
    \    at median (/tmp/tmph6xr4six.js:12:17)\n    at median (/tmp/tmph6xr4six.js:12:17)\n\
    \    at median (/tmp/tmph6xr4six.js:12:17)\n    at median (/tmp/tmph6xr4six.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = Math.floor(l.length / 2);\n  if (l.length % 2) {\n    return l[mid];\n\
    \  }\n  return median(l[mid], l[mid-1]);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp799tol9h.ts(14,25): error TS2554: Expected 1 arguments,
    but got 2.

    '
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpb6tghlbc.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpb6tghlbc.js:14:25)\n    at\
    \ median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \    at median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \    at median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \    at median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list.\");\n  }\n  const n = l.length;\n  if (n === 1) {\n\
    \    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  if (n % 2) {\n   \
    \ return median(l[mid]);\n  }\n  return median(l[mid], l[n - 1]);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5jqlhx25.ts(16,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmp5jqlhx25.ts(18,25): error TS2554: Expected 1 arguments,
    but got 2.

    '
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n \
    \ const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp0aybj9iu.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmp0aybj9iu.js:11:18)\n    at median (/tmp/tmp0aybj9iu.js:13:27)\n\
    \    at median (/tmp/tmp0aybj9iu.js:13:27)\n    at median (/tmp/tmp0aybj9iu.js:13:27)\n\
    \    at median (/tmp/tmp0aybj9iu.js:13:27)\n    at median (/tmp/tmp0aybj9iu.js:13:27)\n\
    \    at median (/tmp/tmp0aybj9iu.js:13:27)\n    at median (/tmp/tmp0aybj9iu.js:13:27)\n\
    \    at median (/tmp/tmp0aybj9iu.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzvy61kyv.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpzvy61kyv.js:11:18)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp659pa79t.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp659pa79t.js:15:25)\n    at\
    \ median (/tmp/tmp659pa79t.js:16:17)\n    at median (/tmp/tmp659pa79t.js:16:17)\n\
    \    at median (/tmp/tmp659pa79t.js:16:17)\n    at median (/tmp/tmp659pa79t.js:16:17)\n\
    \    at median (/tmp/tmp659pa79t.js:16:17)\n    at median (/tmp/tmp659pa79t.js:16:17)\n\
    \    at median (/tmp/tmp659pa79t.js:16:17)\n    at median (/tmp/tmp659pa79t.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid =\
    \ l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return\
    \ (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp45gc7t9j.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp45gc7t9j.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjwcy73yq.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpjwcy73yq.js:8:15)\n    at median (/tmp/tmpjwcy73yq.js:14:16)\n\
    \    at median (/tmp/tmpjwcy73yq.js:14:16)\n    at median (/tmp/tmpjwcy73yq.js:15:17)\n\
    \    at test (/tmp/tmpjwcy73yq.js:21:22)\n    at Object.<anonymous> (/tmp/tmpjwcy73yq.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return l.length % 2 === 0\n\
    \    ? left + right\n    : (left + right) / 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmq_6by_v.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpmq_6by_v.js:8:15)\n    at median (/tmp/tmpmq_6by_v.js:14:16)\n\
    \    at median (/tmp/tmpmq_6by_v.js:14:16)\n    at median (/tmp/tmpmq_6by_v.js:15:17)\n\
    \    at test (/tmp/tmpmq_6by_v.js:23:22)\n    at Object.<anonymous> (/tmp/tmpmq_6by_v.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const middle = Math.floor(sortedList.length / 2);\n  if (sortedList.length\
    \ % 2 === 0) {\n    return sortedList[middle];\n  }\n  return sortedList[middle\
    \ - 1] + sortedList[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpz7nwmrjl.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz7nwmrjl.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle =\
    \ len / 2;\n  const left = sorted[middle - 1];\n  const right = sorted[middle];\n\
    \  return ((right - left) / 2 + left);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp20c31edv.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp20c31edv.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  if (l.length === 1) {\n    return l[0];\n\
    \  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n \
    \ const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.625\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpuws5iy9d.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpuws5iy9d.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.625,\n \
    \ expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return\
    \ sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpe1azwl3p.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe1azwl3p.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjwcy73yq.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpjwcy73yq.js:8:15)\n    at median (/tmp/tmpjwcy73yq.js:14:16)\n\
    \    at median (/tmp/tmpjwcy73yq.js:14:16)\n    at median (/tmp/tmpjwcy73yq.js:15:17)\n\
    \    at test (/tmp/tmpjwcy73yq.js:21:22)\n    at Object.<anonymous> (/tmp/tmpjwcy73yq.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n \
    \ const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp0aybj9iu.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmp0aybj9iu.js:11:18)\n    at median (/tmp/tmp0aybj9iu.js:13:27)\n\
    \    at median (/tmp/tmp0aybj9iu.js:13:27)\n    at median (/tmp/tmp0aybj9iu.js:13:27)\n\
    \    at median (/tmp/tmp0aybj9iu.js:13:27)\n    at median (/tmp/tmp0aybj9iu.js:13:27)\n\
    \    at median (/tmp/tmp0aybj9iu.js:13:27)\n    at median (/tmp/tmp0aybj9iu.js:13:27)\n\
    \    at median (/tmp/tmp0aybj9iu.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const mid = sortedList.length / 2;\n  if (sortedList.length %\
    \ 2) {\n    return sortedList[mid];\n  }\n  return (sortedList[mid - 1] + sortedList[mid])\
    \ / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpc89kdb6r.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpc89kdb6r.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle =\
    \ Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmpt56g4gkp.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt56g4gkp.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right\
    \ = median(l.slice(mid));\n  return l.length % 2 ? left + (right - left) / 2 :\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpt8krp8m5.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpt8krp8m5.js:11:25)\n    at\
    \ median (/tmp/tmpt8krp8m5.js:12:17)\n    at median (/tmp/tmpt8krp8m5.js:12:17)\n\
    \    at median (/tmp/tmpt8krp8m5.js:12:17)\n    at median (/tmp/tmpt8krp8m5.js:12:17)\n\
    \    at median (/tmp/tmpt8krp8m5.js:12:17)\n    at median (/tmp/tmpt8krp8m5.js:12:17)\n\
    \    at median (/tmp/tmpt8krp8m5.js:12:17)\n    at median (/tmp/tmpt8krp8m5.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid =\
    \ l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return\
    \ (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp45gc7t9j.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp45gc7t9j.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return left + Math.abs(right - left);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpc_669xis.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpc_669xis.js:14:25)\n    at\
    \ median (/tmp/tmpc_669xis.js:15:17)\n    at median (/tmp/tmpc_669xis.js:15:17)\n\
    \    at median (/tmp/tmpc_669xis.js:15:17)\n    at median (/tmp/tmpc_669xis.js:15:17)\n\
    \    at median (/tmp/tmpc_669xis.js:15:17)\n    at median (/tmp/tmpc_669xis.js:15:17)\n\
    \    at median (/tmp/tmpc_669xis.js:15:17)\n    at median (/tmp/tmpc_669xis.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2\
    \ - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const\
    \ right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy23tt43u.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpy23tt43u.js:11:18)\n    at median (/tmp/tmpy23tt43u.js:13:27)\n\
    \    at median (/tmp/tmpy23tt43u.js:13:27)\n    at median (/tmp/tmpy23tt43u.js:13:27)\n\
    \    at median (/tmp/tmpy23tt43u.js:13:27)\n    at median (/tmp/tmpy23tt43u.js:13:27)\n\
    \    at median (/tmp/tmpy23tt43u.js:13:27)\n    at median (/tmp/tmpy23tt43u.js:13:27)\n\
    \    at median (/tmp/tmpy23tt43u.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmzwftwtj.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpmzwftwtj.js:8:15)\n    at median (/tmp/tmpmzwftwtj.js:14:16)\n\
    \    at median (/tmp/tmpmzwftwtj.js:14:16)\n    at median (/tmp/tmpmzwftwtj.js:15:17)\n\
    \    at test (/tmp/tmpmzwftwtj.js:21:22)\n    at Object.<anonymous> (/tmp/tmpmzwftwtj.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmps1oie001.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmps1oie001.js:11:25)\n    at\
    \ median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \    at median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \    at median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \    at median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length\
    \ / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpmyt0l844.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmyt0l844.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list.\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmp5l7vv9.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list.\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list.\n    at median (/tmp/tmpmp5l7vv9.js:8:15)\n    at median (/tmp/tmpmp5l7vv9.js:15:16)\n\
    \    at median (/tmp/tmpmp5l7vv9.js:15:16)\n    at median (/tmp/tmpmp5l7vv9.js:16:17)\n\
    \    at test (/tmp/tmpmp5l7vv9.js:22:22)\n    at Object.<anonymous> (/tmp/tmpmp5l7vv9.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmppacf9f05.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppacf9f05.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnwnjbj1s.js:8\n        throw new Error(\"Cannot compute median\
    \ of an empty list\");\n        ^\n\nError: Cannot compute median of an empty\
    \ list\n    at median (/tmp/tmpnwnjbj1s.js:8:15)\n    at median (/tmp/tmpnwnjbj1s.js:15:16)\n\
    \    at median (/tmp/tmpnwnjbj1s.js:15:16)\n    at median (/tmp/tmpnwnjbj1s.js:16:17)\n\
    \    at test (/tmp/tmpnwnjbj1s.js:22:22)\n    at Object.<anonymous> (/tmp/tmpnwnjbj1s.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746598
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvi8cwqu9.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpvi8cwqu9.js:11:18)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length\
    \ / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((l[mid] + l[mid-1] + l[mid+1] + right) / 4) as number;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpjo4rpv6z.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjo4rpv6z.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n \
    \ const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp0aybj9iu.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmp0aybj9iu.js:11:18)\n    at median (/tmp/tmp0aybj9iu.js:13:27)\n\
    \    at median (/tmp/tmp0aybj9iu.js:13:27)\n    at median (/tmp/tmp0aybj9iu.js:13:27)\n\
    \    at median (/tmp/tmp0aybj9iu.js:13:27)\n    at median (/tmp/tmp0aybj9iu.js:13:27)\n\
    \    at median (/tmp/tmp0aybj9iu.js:13:27)\n    at median (/tmp/tmp0aybj9iu.js:13:27)\n\
    \    at median (/tmp/tmp0aybj9iu.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle +\
    \ 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpagw79rvc.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpagw79rvc.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid ===\
    \ 0) {\n    return l[mid];\n  }\n  if (mid === 1) {\n    return l[mid];\n  }\n\
    \  return median(l[mid], l[mid - 1], l[mid]);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphm9kwyjn.ts(17,25): error TS2554: Expected 1 arguments,
    but got 3.

    '
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid =\
    \ l.length / 2;\n  if (mid % 1 !== 0) {\n    return l[mid];\n  }\n  const lower\
    \ = [];\n  const upper = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i\
    \ < mid) {\n      lower.push(l[i]);\n    } else {\n      upper.push(l[i]);\n \
    \   }\n  }\n  return median(lower) + median(upper);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpxq357diy.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxq357diy.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpf5qvalhh.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpf5qvalhh.js:11:18)\n    at median (/tmp/tmpf5qvalhh.js:13:27)\n\
    \    at median (/tmp/tmpf5qvalhh.js:13:27)\n    at median (/tmp/tmpf5qvalhh.js:13:27)\n\
    \    at median (/tmp/tmpf5qvalhh.js:13:27)\n    at median (/tmp/tmpf5qvalhh.js:13:27)\n\
    \    at median (/tmp/tmpf5qvalhh.js:13:27)\n    at median (/tmp/tmpf5qvalhh.js:13:27)\n\
    \    at median (/tmp/tmpf5qvalhh.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle +\
    \ 1];\n  return (median1 + median2) / 2;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp8vd9fy9v.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8vd9fy9v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmzwftwtj.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpmzwftwtj.js:8:15)\n    at median (/tmp/tmpmzwftwtj.js:14:16)\n\
    \    at median (/tmp/tmpmzwftwtj.js:14:16)\n    at median (/tmp/tmpmzwftwtj.js:15:17)\n\
    \    at test (/tmp/tmpmzwftwtj.js:21:22)\n    at Object.<anonymous> (/tmp/tmpmzwftwtj.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyr_r_ijm.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpyr_r_ijm.js:11:18)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw Error('Cannot compute\
    \ median of an empty list');\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n\
    \    return l[(n - 1) / 2] as number;\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + Math.abs(right - left);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpg3641b7l.js:8\n        throw Error('Cannot compute median of an\
    \ empty list');\n        ^\n\nError: Cannot compute median of an empty list\n\
    \    at median (/tmp/tmpg3641b7l.js:8:15)\n    at median (/tmp/tmpg3641b7l.js:15:16)\n\
    \    at median (/tmp/tmpg3641b7l.js:15:16)\n    at median (/tmp/tmpg3641b7l.js:16:17)\n\
    \    at test (/tmp/tmpg3641b7l.js:22:22)\n    at Object.<anonymous> (/tmp/tmpg3641b7l.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746598
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyr_r_ijm.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpyr_r_ijm.js:11:18)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return left + Math.abs(right\
    \ - left);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpi5t8tijk.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpi5t8tijk.js:11:25)\n    at\
    \ median (/tmp/tmpi5t8tijk.js:12:17)\n    at median (/tmp/tmpi5t8tijk.js:12:17)\n\
    \    at median (/tmp/tmpi5t8tijk.js:12:17)\n    at median (/tmp/tmpi5t8tijk.js:12:17)\n\
    \    at median (/tmp/tmpi5t8tijk.js:12:17)\n    at median (/tmp/tmpi5t8tijk.js:12:17)\n\
    \    at median (/tmp/tmpi5t8tijk.js:12:17)\n    at median (/tmp/tmpi5t8tijk.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmppacf9f05.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppacf9f05.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  if (l.length === 1) {\n    return l[0];\n\
    \  }\n  const mid = Math.floor(l.length / 2);\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return l.length % 2 ? left\
    \ + ((right - left) / 2) : left + right;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4.75\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpv08fkzfd.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv08fkzfd.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4.75,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjwcy73yq.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpjwcy73yq.js:8:15)\n    at median (/tmp/tmpjwcy73yq.js:14:16)\n\
    \    at median (/tmp/tmpjwcy73yq.js:14:16)\n    at median (/tmp/tmpjwcy73yq.js:15:17)\n\
    \    at test (/tmp/tmpjwcy73yq.js:21:22)\n    at Object.<anonymous> (/tmp/tmpjwcy73yq.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[len - 1 -\
    \ middle];\n  return median1 + median2 / (len / 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4.2\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpbgmoo9vk.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbgmoo9vk.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4.2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746598
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const middle = Math.floor(l.length / 2);\n  const left = l.slice(0,\
    \ middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpj3ofytes.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpj3ofytes.js:11:18)\n    at median (/tmp/tmpj3ofytes.js:13:27)\n\
    \    at median (/tmp/tmpj3ofytes.js:13:27)\n    at median (/tmp/tmpj3ofytes.js:13:27)\n\
    \    at median (/tmp/tmpj3ofytes.js:13:27)\n    at median (/tmp/tmpj3ofytes.js:13:27)\n\
    \    at median (/tmp/tmpj3ofytes.js:13:27)\n    at median (/tmp/tmpj3ofytes.js:13:27)\n\
    \    at median (/tmp/tmpj3ofytes.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746599
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle - 1];\n  const median2 = sorted[middle];\n\
    \  return median1 + median2 / (len / 2 - 1);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp989cznio.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp989cznio.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746600
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid =\
    \ l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return\
    \ (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp45gc7t9j.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp45gc7t9j.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp73vs8o8a.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp73vs8o8a.js:15:25)\n    at\
    \ median (/tmp/tmp73vs8o8a.js:16:17)\n    at median (/tmp/tmp73vs8o8a.js:16:17)\n\
    \    at median (/tmp/tmp73vs8o8a.js:16:17)\n    at median (/tmp/tmp73vs8o8a.js:16:17)\n\
    \    at median (/tmp/tmp73vs8o8a.js:16:17)\n    at median (/tmp/tmp73vs8o8a.js:16:17)\n\
    \    at median (/tmp/tmp73vs8o8a.js:16:17)\n    at median (/tmp/tmp73vs8o8a.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyr_r_ijm.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpyr_r_ijm.js:11:18)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpr8fwxrsj.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpr8fwxrsj.js:8:15)\n    at median (/tmp/tmpr8fwxrsj.js:15:16)\n\
    \    at median (/tmp/tmpr8fwxrsj.js:15:16)\n    at median (/tmp/tmpr8fwxrsj.js:16:17)\n\
    \    at test (/tmp/tmpr8fwxrsj.js:22:22)\n    at Object.<anonymous> (/tmp/tmpr8fwxrsj.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjwcy73yq.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpjwcy73yq.js:8:15)\n    at median (/tmp/tmpjwcy73yq.js:14:16)\n\
    \    at median (/tmp/tmpjwcy73yq.js:14:16)\n    at median (/tmp/tmpjwcy73yq.js:15:17)\n\
    \    at test (/tmp/tmpjwcy73yq.js:21:22)\n    at Object.<anonymous> (/tmp/tmpjwcy73yq.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute\
    \ median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a\
    \ - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmphtuvqn_i.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphtuvqn_i.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746599
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const middle = Math.floor(l.length / 2);\n\
    \  if (middle === 0) {\n    return l[0];\n  }\n  if (middle === 1) {\n    return\
    \ l[l.length - 1];\n  }\n  if (middle > 1) {\n    return median(l[middle - 1]\
    \ + l[middle]);\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbjp3qu0w.ts(18,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659746599
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpijmbcnm5.js:8\n        throw new Error(\"Cannot compute median\
    \ of an empty list\");\n        ^\n\nError: Cannot compute median of an empty\
    \ list\n    at median (/tmp/tmpijmbcnm5.js:8:15)\n    at median (/tmp/tmpijmbcnm5.js:14:16)\n\
    \    at median (/tmp/tmpijmbcnm5.js:14:16)\n    at median (/tmp/tmpijmbcnm5.js:15:17)\n\
    \    at test (/tmp/tmpijmbcnm5.js:21:22)\n    at Object.<anonymous> (/tmp/tmpijmbcnm5.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746599
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const middle = Math.floor(l.length / 2);\n\
    \  if (middle === 0) {\n    return l[0];\n  }\n  if (middle === 1) {\n    return\
    \ l[l.length - 1];\n  }\n  if (middle > 1) {\n    return median(l[middle - 1]\
    \ + l[middle]);\n  }\n  return median(l[middle - 1]);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr6ok_6pa.ts(18,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpr6ok_6pa.ts(20,17): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659746599
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const middle = l.length / 2;\n  if (middle\
    \ === 0) {\n    return l[0];\n  }\n  if (middle === 1) {\n    return l[l.length\
    \ - 1];\n  }\n  const medianValue = median(l);\n  const leftMedian = median(l.slice(0,\
    \ middle));\n  const rightMedian = median(l.slice(middle + 1));\n  return ((leftMedian\
    \ + rightMedian) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphmhhdme0.js:7\n    if (l.length === 0) {\n          ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at median (/tmp/tmphmhhdme0.js:7:11)\n\
    \    at median (/tmp/tmphmhhdme0.js:17:23)\n    at median (/tmp/tmphmhhdme0.js:17:23)\n\
    \    at median (/tmp/tmphmhhdme0.js:17:23)\n    at median (/tmp/tmphmhhdme0.js:17:23)\n\
    \    at median (/tmp/tmphmhhdme0.js:17:23)\n    at median (/tmp/tmphmhhdme0.js:17:23)\n\
    \    at median (/tmp/tmphmhhdme0.js:17:23)\n    at median (/tmp/tmphmhhdme0.js:17:23)\n\
    \    at median (/tmp/tmphmhhdme0.js:17:23)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746600
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp73vs8o8a.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp73vs8o8a.js:15:25)\n    at\
    \ median (/tmp/tmp73vs8o8a.js:16:17)\n    at median (/tmp/tmp73vs8o8a.js:16:17)\n\
    \    at median (/tmp/tmp73vs8o8a.js:16:17)\n    at median (/tmp/tmp73vs8o8a.js:16:17)\n\
    \    at median (/tmp/tmp73vs8o8a.js:16:17)\n    at median (/tmp/tmp73vs8o8a.js:16:17)\n\
    \    at median (/tmp/tmp73vs8o8a.js:16:17)\n    at median (/tmp/tmp73vs8o8a.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n === 1) {\n\
    \    return l[0];\n  }\n  const half = n / 2;\n  if (n % 2) {\n    return median(l[half])\
    \ < median(l[half - 1]) ? l[half] : l[half - 1];\n  }\n  return median(l[half]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm68n5rs9.ts(16,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpm68n5rs9.ts(16,37): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpm68n5rs9.ts(18,17): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659746599
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle =\
    \ Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmpt56g4gkp.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt56g4gkp.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n === 1) {\n\
    \    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2)\
    \ | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpzb83j5ey.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzb83j5ey.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746600
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpc540ugid.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpc540ugid.js:14:25)\n    at\
    \ median (/tmp/tmpc540ugid.js:15:17)\n    at median (/tmp/tmpc540ugid.js:15:17)\n\
    \    at median (/tmp/tmpc540ugid.js:15:17)\n    at median (/tmp/tmpc540ugid.js:15:17)\n\
    \    at median (/tmp/tmpc540ugid.js:15:17)\n    at median (/tmp/tmpc540ugid.js:15:17)\n\
    \    at median (/tmp/tmpc540ugid.js:15:17)\n    at median (/tmp/tmpc540ugid.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746600
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const left = sorted[middle - 1];\n  const right = sorted[middle];\n\
    \  return ((right - left) / 2 + left);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpn6miedgo.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn6miedgo.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746600
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = Math.floor(l.length / 2);\n  const left = l.slice(0, mid);\n  const right\
    \ = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpys22eggu.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpys22eggu.js:11:18)\n    at median (/tmp/tmpys22eggu.js:13:27)\n\
    \    at median (/tmp/tmpys22eggu.js:13:27)\n    at median (/tmp/tmpys22eggu.js:13:27)\n\
    \    at median (/tmp/tmpys22eggu.js:13:27)\n    at median (/tmp/tmpys22eggu.js:13:27)\n\
    \    at median (/tmp/tmpys22eggu.js:13:27)\n    at median (/tmp/tmpys22eggu.js:13:27)\n\
    \    at median (/tmp/tmpys22eggu.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746600
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpc540ugid.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpc540ugid.js:14:25)\n    at\
    \ median (/tmp/tmpc540ugid.js:15:17)\n    at median (/tmp/tmpc540ugid.js:15:17)\n\
    \    at median (/tmp/tmpc540ugid.js:15:17)\n    at median (/tmp/tmpc540ugid.js:15:17)\n\
    \    at median (/tmp/tmpc540ugid.js:15:17)\n    at median (/tmp/tmpc540ugid.js:15:17)\n\
    \    at median (/tmp/tmpc540ugid.js:15:17)\n    at median (/tmp/tmpc540ugid.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746600
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2\
    \ - 1]\n  }\n  const middle = Math.floor(l.length / 2)\n  const left = l.slice(0,\
    \ middle)\n  const right = l.slice(middle)\n  return median(left) + median(right)\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpi5vyx9nc.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpi5vyx9nc.js:11:18)\n    at median (/tmp/tmpi5vyx9nc.js:13:27)\n\
    \    at median (/tmp/tmpi5vyx9nc.js:13:27)\n    at median (/tmp/tmpi5vyx9nc.js:13:27)\n\
    \    at median (/tmp/tmpi5vyx9nc.js:13:27)\n    at median (/tmp/tmpi5vyx9nc.js:13:27)\n\
    \    at median (/tmp/tmpi5vyx9nc.js:13:27)\n    at median (/tmp/tmpi5vyx9nc.js:13:27)\n\
    \    at median (/tmp/tmpi5vyx9nc.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746600
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1b27m25b.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp1b27m25b.js:11:25)\n    at\
    \ median (/tmp/tmp1b27m25b.js:12:17)\n    at median (/tmp/tmp1b27m25b.js:12:17)\n\
    \    at median (/tmp/tmp1b27m25b.js:12:17)\n    at median (/tmp/tmp1b27m25b.js:12:17)\n\
    \    at median (/tmp/tmp1b27m25b.js:12:17)\n    at median (/tmp/tmp1b27m25b.js:12:17)\n\
    \    at median (/tmp/tmp1b27m25b.js:12:17)\n    at median (/tmp/tmp1b27m25b.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvi8cwqu9.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpvi8cwqu9.js:11:18)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  if (l.length === 1) {\n    return l[0];\n\
    \  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n \
    \ const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.625\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpielwjz86.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpielwjz86.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.625,\n \
    \ expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746600
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpb6tghlbc.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpb6tghlbc.js:14:25)\n    at\
    \ median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \    at median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \    at median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \    at median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return l.length % 2 ? left\
    \ + right : Math.max(left, right);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp7hh5l2j6.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmp7hh5l2j6.js:8:15)\n    at median (/tmp/tmp7hh5l2j6.js:14:16)\n\
    \    at median (/tmp/tmp7hh5l2j6.js:14:16)\n    at median (/tmp/tmp7hh5l2j6.js:15:17)\n\
    \    at test (/tmp/tmp7hh5l2j6.js:21:22)\n    at Object.<anonymous> (/tmp/tmp7hh5l2j6.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746600
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmps1oie001.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmps1oie001.js:11:25)\n    at\
    \ median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \    at median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \    at median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \    at median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 1) {\n    throw new Error(\"\
    Cannot calculate median of an empty list\");\n  }\n  const mid = Math.floor(n\
    \ / 2);\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return\
    \ median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpumgd3afw.js:9\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpumgd3afw.js:9:15)\n    at median (/tmp/tmpumgd3afw.js:14:12)\n\
    \    at median (/tmp/tmpumgd3afw.js:14:12)\n    at median (/tmp/tmpumgd3afw.js:14:12)\n\
    \    at test (/tmp/tmpumgd3afw.js:19:22)\n    at Object.<anonymous> (/tmp/tmpumgd3afw.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746600
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 1) {\n    throw new Error(\"\
    median requires at least one argument\");\n  }\n  if (n === 1) {\n    return l[0];\n\
    \  }\n  const middle = Math.floor(n / 2);\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp546slvrl.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp546slvrl.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746600
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length\
    \ / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpmyt0l844.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmyt0l844.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = Math.floor(l.length / 2);\n  const left = l.slice(0, mid);\n  const right\
    \ = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpys22eggu.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpys22eggu.js:11:18)\n    at median (/tmp/tmpys22eggu.js:13:27)\n\
    \    at median (/tmp/tmpys22eggu.js:13:27)\n    at median (/tmp/tmpys22eggu.js:13:27)\n\
    \    at median (/tmp/tmpys22eggu.js:13:27)\n    at median (/tmp/tmpys22eggu.js:13:27)\n\
    \    at median (/tmp/tmpys22eggu.js:13:27)\n    at median (/tmp/tmpys22eggu.js:13:27)\n\
    \    at median (/tmp/tmpys22eggu.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746600
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a: number, b: number) => a - b);\n  const len = sorted.length;\n\
    \  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle\
    \ = Math.floor(len / 2);\n  const median1 = sorted[middle - 1];\n  const median2\
    \ = sorted[middle];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpl5ag4d3m.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl5ag4d3m.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746600
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvi8cwqu9.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpvi8cwqu9.js:11:18)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\
    \    at median (/tmp/tmpvi8cwqu9.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzvy61kyv.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpzvy61kyv.js:11:18)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    return l[0];\n\
    \  }\n  const mid = Math.floor((n - 1) / 2);\n  if (l[mid] >= l[mid + 1]) {\n\
    \    return l[mid];\n  }\n  return l[mid + 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpq7k4cd8c.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpq7k4cd8c.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746600
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  const medianOfLeft = getMedian(left);\n  const medianOfRight = getMedian(right);\n\
    \  return medianOfLeft + medianOfRight;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6xf9tr17.ts(13,24): error TS2304: Cannot find name
    ''getMedian''.

    ../../../../../tmp/tmp6xf9tr17.ts(14,25): error TS2304: Cannot find name ''getMedian''.

    '
  timestamp: 1659746600
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const middle = Math.floor(l.length / 2);\n\
    \  if (middle === 0) {\n    return l[0];\n  }\n  if (middle === 1) {\n    return\
    \ l[l.length - 1];\n  }\n  const medianValue = median(l[middle]);\n  return l.slice(0,\
    \ middle).concat([medianValue]).concat(l.slice(middle + 1));\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0yhzeveu.ts(17,30): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmp0yhzeveu.ts(18,3): error TS2322: Type ''number[]'' is not
    assignable to type ''number''.

    '
  timestamp: 1659746600
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  if (l.length === 1) {\n    return l[0];\n\
    \  }\n  const mid = Math.floor(l.length / 2);\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp92m5j2_n.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp92m5j2_n.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746600
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length\
    \ / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left > right) ? left : right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpgwms9k0j.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgwms9k0j.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746601
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b)\
    \ => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return\
    \ sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpe1azwl3p.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe1azwl3p.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left < right) ? left : right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2j9l_88s.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp2j9l_88s.js:14:25)\n    at\
    \ median (/tmp/tmp2j9l_88s.js:15:17)\n    at median (/tmp/tmp2j9l_88s.js:15:17)\n\
    \    at median (/tmp/tmp2j9l_88s.js:15:17)\n    at median (/tmp/tmp2j9l_88s.js:15:17)\n\
    \    at median (/tmp/tmp2j9l_88s.js:15:17)\n    at median (/tmp/tmp2j9l_88s.js:15:17)\n\
    \    at median (/tmp/tmp2j9l_88s.js:15:17)\n    at median (/tmp/tmp2j9l_88s.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746602
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzvy61kyv.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpzvy61kyv.js:11:18)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n    at median (/tmp/tmpzvy61kyv.js:13:27)\n\
    \    at median (/tmp/tmpzvy61kyv.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 2
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list.\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = Math.floor(n / 2);\n\
    \  return median(l[half], l[n - half]);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr071702z.ts(15,26): error TS2554: Expected 1 arguments,
    but got 2.

    '
  timestamp: 1659746601
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  return sorted[middle - 1] + sorted[middle];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmptqp3y23j.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptqp3y23j.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746602
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpydotk5cx.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpydotk5cx.js:8:15)\n    at median (/tmp/tmpydotk5cx.js:15:16)\n\
    \    at median (/tmp/tmpydotk5cx.js:15:16)\n    at median (/tmp/tmpydotk5cx.js:16:17)\n\
    \    at test (/tmp/tmpydotk5cx.js:22:22)\n    at Object.<anonymous> (/tmp/tmpydotk5cx.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746601
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len\
    \ / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const medianOfMiddle\
    \ = median(sorted.slice(0, middle));\n  const medianOfRest = median(sorted.slice(middle));\n\
    \  return medianOfMiddle + medianOfRest;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpktfmvzrn.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpktfmvzrn.js:8:15)\n    at median (/tmp/tmpktfmvzrn.js:16:26)\n\
    \    at median (/tmp/tmpktfmvzrn.js:16:26)\n    at median (/tmp/tmpktfmvzrn.js:17:24)\n\
    \    at test (/tmp/tmpktfmvzrn.js:23:22)\n    at Object.<anonymous> (/tmp/tmpktfmvzrn.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpms9jx9lr.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpms9jx9lr.js:8:15)\n    at median (/tmp/tmpms9jx9lr.js:15:16)\n\
    \    at median (/tmp/tmpms9jx9lr.js:15:16)\n    at median (/tmp/tmpms9jx9lr.js:16:17)\n\
    \    at test (/tmp/tmpms9jx9lr.js:22:22)\n    at Object.<anonymous> (/tmp/tmpms9jx9lr.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746602
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyr_r_ijm.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpyr_r_ijm.js:11:18)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\
    \    at median (/tmp/tmpyr_r_ijm.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l);\n  const right = median(l.slice(half));\n\
    \  return half\n    ? Math.max(left, right) < Math.abs(left - right) ? left :\
    \ right\n    : left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1jfi86yv.js:7\n    if (l.length === 0) {\n          ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at median (/tmp/tmp1jfi86yv.js:7:11)\n\
    \    at median (/tmp/tmp1jfi86yv.js:15:16)\n    at median (/tmp/tmp1jfi86yv.js:15:16)\n\
    \    at median (/tmp/tmp1jfi86yv.js:15:16)\n    at median (/tmp/tmp1jfi86yv.js:15:16)\n\
    \    at median (/tmp/tmp1jfi86yv.js:15:16)\n    at median (/tmp/tmp1jfi86yv.js:15:16)\n\
    \    at median (/tmp/tmp1jfi86yv.js:15:16)\n    at median (/tmp/tmp1jfi86yv.js:15:16)\n\
    \    at median (/tmp/tmp1jfi86yv.js:15:16)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746602
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const middle = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[middle];\n  }\n  const left = l.slice(0,\
    \ middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmptp7st8xd.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmptp7st8xd.js:8:15)\n    at median (/tmp/tmptp7st8xd.js:16:12)\n\
    \    at median (/tmp/tmptp7st8xd.js:16:12)\n    at median (/tmp/tmptp7st8xd.js:16:27)\n\
    \    at test (/tmp/tmptp7st8xd.js:21:22)\n    at Object.<anonymous> (/tmp/tmptp7st8xd.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746602
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle +\
    \ 1];\n  return (median1 + median2) / 2;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp8vd9fy9v.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8vd9fy9v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const leftMedian = median(l.slice(0,\
    \ mid));\n  const rightMedian = median(l.slice(mid));\n  return leftMedian + rightMedian\
    \ / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpf1433jl_.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpf1433jl_.js:8:15)\n    at median (/tmp/tmpf1433jl_.js:14:22)\n\
    \    at median (/tmp/tmpf1433jl_.js:14:22)\n    at median (/tmp/tmpf1433jl_.js:15:23)\n\
    \    at test (/tmp/tmpf1433jl_.js:21:22)\n    at Object.<anonymous> (/tmp/tmpf1433jl_.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746602
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length\
    \ / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return l.length % 2 ? Math.max(left, right) : left + right;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmptebfozvg.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptebfozvg.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746602
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpf5qvalhh.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpf5qvalhh.js:11:18)\n    at median (/tmp/tmpf5qvalhh.js:13:27)\n\
    \    at median (/tmp/tmpf5qvalhh.js:13:27)\n    at median (/tmp/tmpf5qvalhh.js:13:27)\n\
    \    at median (/tmp/tmpf5qvalhh.js:13:27)\n    at median (/tmp/tmpf5qvalhh.js:13:27)\n\
    \    at median (/tmp/tmpf5qvalhh.js:13:27)\n    at median (/tmp/tmpf5qvalhh.js:13:27)\n\
    \    at median (/tmp/tmpf5qvalhh.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpb6tghlbc.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpb6tghlbc.js:14:25)\n    at\
    \ median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \    at median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \    at median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \    at median (/tmp/tmpb6tghlbc.js:15:17)\n    at median (/tmp/tmpb6tghlbc.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzagyhza0.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpzagyhza0.js:8:15)\n    at median (/tmp/tmpzagyhza0.js:14:16)\n\
    \    at median (/tmp/tmpzagyhza0.js:14:16)\n    at median (/tmp/tmpzagyhza0.js:15:17)\n\
    \    at test (/tmp/tmpzagyhza0.js:21:22)\n    at Object.<anonymous> (/tmp/tmpzagyhza0.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp73vs8o8a.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp73vs8o8a.js:15:25)\n    at\
    \ median (/tmp/tmp73vs8o8a.js:16:17)\n    at median (/tmp/tmp73vs8o8a.js:16:17)\n\
    \    at median (/tmp/tmp73vs8o8a.js:16:17)\n    at median (/tmp/tmp73vs8o8a.js:16:17)\n\
    \    at median (/tmp/tmp73vs8o8a.js:16:17)\n    at median (/tmp/tmp73vs8o8a.js:16:17)\n\
    \    at median (/tmp/tmp73vs8o8a.js:16:17)\n    at median (/tmp/tmp73vs8o8a.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746595
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return ((left < right) ? left : right);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpubrl69hh.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpubrl69hh.js:15:25)\n    at\
    \ median (/tmp/tmpubrl69hh.js:16:17)\n    at median (/tmp/tmpubrl69hh.js:16:17)\n\
    \    at median (/tmp/tmpubrl69hh.js:16:17)\n    at median (/tmp/tmpubrl69hh.js:16:17)\n\
    \    at median (/tmp/tmpubrl69hh.js:16:17)\n    at median (/tmp/tmpubrl69hh.js:16:17)\n\
    \    at median (/tmp/tmpubrl69hh.js:16:17)\n    at median (/tmp/tmpubrl69hh.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746602
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle - 1];\n  const median2 = sorted[middle];\n\
    \  return median1 + median2 / (len / 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.2\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpvqg2clwq.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvqg2clwq.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746602
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle +\
    \ 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpagw79rvc.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpagw79rvc.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmps1oie001.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmps1oie001.js:11:25)\n    at\
    \ median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \    at median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \    at median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \    at median (/tmp/tmps1oie001.js:12:17)\n    at median (/tmp/tmps1oie001.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738218
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    return l[0];\n\
    \  }\n  const mid = n / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpd2nrvo2u.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd2nrvo2u.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746602
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp4lnd8mhp.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmp4lnd8mhp.js:8:15)\n    at median (/tmp/tmp4lnd8mhp.js:15:16)\n\
    \    at median (/tmp/tmp4lnd8mhp.js:15:16)\n    at median (/tmp/tmp4lnd8mhp.js:16:17)\n\
    \    at test (/tmp/tmp4lnd8mhp.js:22:22)\n    at Object.<anonymous> (/tmp/tmp4lnd8mhp.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746602
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len\
    \ / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmp18sl2nua.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp18sl2nua.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = l.slice(0,\
    \ mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpg7ah2fu5.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpg7ah2fu5.js:11:18)\n    at median (/tmp/tmpg7ah2fu5.js:13:27)\n\
    \    at median (/tmp/tmpg7ah2fu5.js:13:27)\n    at median (/tmp/tmpg7ah2fu5.js:13:27)\n\
    \    at median (/tmp/tmpg7ah2fu5.js:13:27)\n    at median (/tmp/tmpg7ah2fu5.js:13:27)\n\
    \    at median (/tmp/tmpg7ah2fu5.js:13:27)\n    at median (/tmp/tmpg7ah2fu5.js:13:27)\n\
    \    at median (/tmp/tmpg7ah2fu5.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746602
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpc540ugid.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpc540ugid.js:14:25)\n    at\
    \ median (/tmp/tmpc540ugid.js:15:17)\n    at median (/tmp/tmpc540ugid.js:15:17)\n\
    \    at median (/tmp/tmpc540ugid.js:15:17)\n    at median (/tmp/tmpc540ugid.js:15:17)\n\
    \    at median (/tmp/tmpc540ugid.js:15:17)\n    at median (/tmp/tmpc540ugid.js:15:17)\n\
    \    at median (/tmp/tmpc540ugid.js:15:17)\n    at median (/tmp/tmpc540ugid.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746600
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzui261vi.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpzui261vi.js:8:15)\n    at median (/tmp/tmpzui261vi.js:14:16)\n\
    \    at median (/tmp/tmpzui261vi.js:14:16)\n    at median (/tmp/tmpzui261vi.js:15:17)\n\
    \    at test (/tmp/tmpzui261vi.js:21:22)\n    at Object.<anonymous> (/tmp/tmpzui261vi.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len\
    \ / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpv3apye80.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv3apye80.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746602
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const\
    \ left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpn6_lon7d.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpn6_lon7d.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746602
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const leftMedian = median(l.slice(0,\
    \ mid));\n  const rightMedian = median(l.slice(mid));\n  return leftMedian + rightMedian\
    \ / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp76gptpih.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmp76gptpih.js:8:15)\n    at median (/tmp/tmp76gptpih.js:14:22)\n\
    \    at median (/tmp/tmp76gptpih.js:14:22)\n    at median (/tmp/tmp76gptpih.js:15:23)\n\
    \    at test (/tmp/tmp76gptpih.js:21:22)\n    at Object.<anonymous> (/tmp/tmp76gptpih.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746602
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2\
    \ - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const\
    \ right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy23tt43u.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpy23tt43u.js:11:18)\n    at median (/tmp/tmpy23tt43u.js:13:27)\n\
    \    at median (/tmp/tmpy23tt43u.js:13:27)\n    at median (/tmp/tmpy23tt43u.js:13:27)\n\
    \    at median (/tmp/tmpy23tt43u.js:13:27)\n    at median (/tmp/tmpy23tt43u.js:13:27)\n\
    \    at median (/tmp/tmpy23tt43u.js:13:27)\n    at median (/tmp/tmpy23tt43u.js:13:27)\n\
    \    at median (/tmp/tmpy23tt43u.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzagyhza0.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpzagyhza0.js:8:15)\n    at median (/tmp/tmpzagyhza0.js:14:16)\n\
    \    at median (/tmp/tmpzagyhza0.js:14:16)\n    at median (/tmp/tmpzagyhza0.js:15:17)\n\
    \    at test (/tmp/tmpzagyhza0.js:21:22)\n    at Object.<anonymous> (/tmp/tmpzagyhza0.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length\
    \ / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((l[mid] + l[mid]) / 2) < left ? (left + right) / 2 : left;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpnu4lytee.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnu4lytee.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746602
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjwcy73yq.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpjwcy73yq.js:8:15)\n    at median (/tmp/tmpjwcy73yq.js:14:16)\n\
    \    at median (/tmp/tmpjwcy73yq.js:14:16)\n    at median (/tmp/tmpjwcy73yq.js:15:17)\n\
    \    at test (/tmp/tmpjwcy73yq.js:21:22)\n    at Object.<anonymous> (/tmp/tmpjwcy73yq.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return left + Math.abs(right - left);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpc_669xis.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpc_669xis.js:14:25)\n    at\
    \ median (/tmp/tmpc_669xis.js:15:17)\n    at median (/tmp/tmpc_669xis.js:15:17)\n\
    \    at median (/tmp/tmpc_669xis.js:15:17)\n    at median (/tmp/tmpc_669xis.js:15:17)\n\
    \    at median (/tmp/tmpc_669xis.js:15:17)\n    at median (/tmp/tmpc_669xis.js:15:17)\n\
    \    at median (/tmp/tmpc_669xis.js:15:17)\n    at median (/tmp/tmpc_669xis.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzagyhza0.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ list\n    at median (/tmp/tmpzagyhza0.js:8:15)\n    at median (/tmp/tmpzagyhza0.js:14:16)\n\
    \    at median (/tmp/tmpzagyhza0.js:14:16)\n    at median (/tmp/tmpzagyhza0.js:15:17)\n\
    \    at test (/tmp/tmpzagyhza0.js:21:22)\n    at Object.<anonymous> (/tmp/tmpzagyhza0.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const middle = Math.floor(l.length / 2);\n  const left = l.slice(0,\
    \ middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpj3ofytes.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpj3ofytes.js:11:18)\n    at median (/tmp/tmpj3ofytes.js:13:27)\n\
    \    at median (/tmp/tmpj3ofytes.js:13:27)\n    at median (/tmp/tmpj3ofytes.js:13:27)\n\
    \    at median (/tmp/tmpj3ofytes.js:13:27)\n    at median (/tmp/tmpj3ofytes.js:13:27)\n\
    \    at median (/tmp/tmpj3ofytes.js:13:27)\n    at median (/tmp/tmpj3ofytes.js:13:27)\n\
    \    at median (/tmp/tmpj3ofytes.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746599
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpv_epqpd9.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpv_epqpd9.js:14:25)\n    at\
    \ median (/tmp/tmpv_epqpd9.js:15:17)\n    at median (/tmp/tmpv_epqpd9.js:15:17)\n\
    \    at median (/tmp/tmpv_epqpd9.js:15:17)\n    at median (/tmp/tmpv_epqpd9.js:15:17)\n\
    \    at median (/tmp/tmpv_epqpd9.js:15:17)\n    at median (/tmp/tmpv_epqpd9.js:15:17)\n\
    \    at median (/tmp/tmpv_epqpd9.js:15:17)\n    at median (/tmp/tmpv_epqpd9.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746592
