name: HumanEval_42_incr_list
language: humaneval_to_typescript.py
prompt: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
  // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4,\
  \ 4, 10, 1, 124]\nfunction incr_list(l: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
  \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
completions: ["  let ret: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n\
    \    ret[i] = l[i] + 1;\n  }\n  return ret;\n}\n", "  let r = [];\n  for (let\
    \ i = 0; i < l.length; i++) {\n    r[i] = l[i] + 1;\n  }\n  return r;\n}\n", " \
    \ let result: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i]\
    \ + 1);\n  }\n  return result;\n}\n", "    let result: number[] = [];\n    for\
    \ (let i = 0; i < l.length; i++) {\n        result.push(l[i] + 1);\n    }\n  \
    \  return result;\n}\n", "  let result: number[] = [];\n  for (let i = 0; i <\
    \ l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n}\n", " \
    \ let result: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i]\
    \ + 1);\n  }\n  return result;\n}\n", "  let ret: number[] = [];\n  for (let i\
    \ = 0; i < l.length; i++) {\n    ret[i] = l[i] + 1;\n  }\n  return ret;\n}\n",
  "  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i]\
    \ + 1;\n  }\n  return l;\n}\n", "  let i = 0;\n  let new_l: number[] = [];\n \
    \ while (i < l.length) {\n    new_l.push(l[i++]);\n  }\n  return new_l;\n}\n",
  "  let result: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i]\
    \ + 1);\n  }\n  return result;\n}\n", "    let result: number[] = [];\n    for\
    \ (let i = 0; i < l.length; i++) {\n        result.push(l[i] + 1);\n    }\n  \
    \  return result;\n}\n", "  let i = 0;\n  while (i < l.length) {\n    l[i] +=\
    \ 1;\n    i += 1;\n  }\n  return l;\n}\n", "  let ret: number[] = [];\n  for (let\
    \ i = 0; i < l.length; i++) {\n    ret[i] = l[i] + 1;\n  }\n  return ret;\n}\n",
  "  let ret: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    ret[i] =\
    \ l[i] + 1;\n  }\n  return ret;\n}\n", "  let result: number[] = [];\n  for (let\
    \ i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n\
    }\n", "    let result: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        result.push(l[i] + 1);\n    }\n    return result;\n}\n", "    let\
    \ result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        result.push(l[i]\
    \ + 1);\n    }\n    return result;\n}\n", "  let r = [];\n  for (let i = 0; i\
    \ < l.length; i++) {\n    r[i] = l[i] + 1;\n  }\n  return r;\n}\n", "  let result:\
    \ number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i]\
    \ + 1);\n  }\n  return result;\n}\n", "  let result: number[] = [];\n  for (let\
    \ i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
