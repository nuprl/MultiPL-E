name: HumanEval_92_any_int
language: humaneval_to_typescript.py
prompt: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  // Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n\
  // any_int(3, 2, 2) \u279E False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6,\
  \ -2.2, 2) \u279E False\nfunction any_int(x: number, y: number, z: number): boolean\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
  \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
  \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
  \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
  \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
  \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
completions: ["  return x === y || x === z || y === z;\n}\n", "  if (x === y || x\
    \ === z) {\n    return true;\n  }\n  if (y === z) {\n    return false;\n  }\n\
    \  if (x < 0 || y < 0 || z < 0) {\n    return false;\n  }\n  if (x > y || y >\
    \ z) {\n    return false;\n  }\n  if (x === 0 || y === 0) {\n    return true;\n\
    \  }\n  if (x === 0 || z === 0) {\n    return true;\n  }\n  if (y === 0 || z ===\
    \ 0) {\n    return false;\n  }\n  if (x === y) {\n    return any_int(x - z, z,\
    \ z);\n  }\n  if (x === z) {\n    return any_int(x - y, y, z);\n  }\n  if (z ===\
    \ y) {\n    return any_int(x - x, x, z);\n  }\n  if (z === x) {\n    return any_int(y\
    \ - x, x, z);\n  }\n}\n", "  return x === y || x === z || y === z;\n}\n", "  \
    \  if (x < 0 || y < 0 || z < 0) {\n        return false;\n    }\n    if (x ===\
    \ y && x === z) {\n        return true;\n    }\n    if (x === y) {\n        return\
    \ true;\n    }\n    if (x === z) {\n        return true;\n    }\n    return false;\n\
    }\n", "  return x === y || x === z || y === z;\n}\n", "  return ((typeof x ===\
    \ \"number\" && typeof y === \"number\" && typeof z === \"number\") &&\n     \
    \     (x === y || x === z || y === z));\n}\n", "  if (x < 0 || y < 0 || z < 0)\
    \ {\n    return false;\n  }\n  if (x > y || y > z) {\n    return false;\n  }\n\
    \  if (x === y) {\n    return true;\n  }\n  if (x === z) {\n    return true;\n\
    \  }\n  return false;\n}\n", "  if (x === y || x === z) {\n    return true;\n\
    \  }\n  if (y === z) {\n    return false;\n  }\n  return x !== x && y !== y &&\
    \ z !== z;\n}\n", "  return x === y || x === z || y === z;\n}\n", "  return x\
    \ === y || x === z || y === z;\n}\n", "  if (x === y || x === z) {\n    return\
    \ true;\n  }\n  if (y === z) {\n    return false;\n  }\n  if (x < y && x < z)\
    \ {\n    return true;\n  }\n  if (y < z) {\n    return false;\n  }\n  return false;\n\
    }\n", "  return ((typeof x === 'number') && (typeof y === 'number') && (typeof\
    \ z === 'number')) &&\n    (x === y || x === z || y === z);\n}\n", "  return any_int_helper(x,\
    \ y, z);\n}\n", "  if (x < 0 || y < 0 || z < 0) {\n    return false;\n  }\n  if\
    \ (x === y && x === z) {\n    return true;\n  }\n  if (x === y) {\n    return\
    \ true;\n  }\n  if (x === z) {\n    return true;\n  }\n  return false;\n}\n",
  "  if (x === y || x === z) {\n    return true;\n  }\n  if (y === z) {\n    return\
    \ false;\n  }\n  if (x < 0 || y < 0 || z < 0) {\n    return false;\n  }\n  if\
    \ (x > y && x > z) {\n    return true;\n  }\n  if (y > z) {\n    return false;\n\
    \  }\n  return true;\n}\n", "  if (x === y || x === z) {\n    return true;\n \
    \ }\n  if (y === z) {\n    return false;\n  }\n  if (x < y && x < z) {\n    return\
    \ true;\n  }\n  if (y < z) {\n    return false;\n  }\n  return false;\n}\n", " \
    \   if (x === y || x === z) {\n        return true;\n    }\n    if (y === z) {\n\
    \        return true;\n    }\n    return false;\n}\n", "  return x === y || x\
    \ === z || y === z;\n}\n", "  return ((x === y) && (x === z) && (y === z));\n\
    }\n", "  if (x === y || x === z) {\n    return true;\n  }\n  if (y === z) {\n\
    \    return false;\n  }\n  if (x < y && x < z) {\n    return true;\n  }\n  if\
    \ (y < z) {\n    return false;\n  }\n  if (x < y) {\n    return false;\n  }\n\
    \  if (x < z) {\n    return true;\n  }\n  return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
