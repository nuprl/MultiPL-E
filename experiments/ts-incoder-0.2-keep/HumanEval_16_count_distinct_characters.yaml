name: HumanEval_16_count_distinct_characters
language: humaneval_to_typescript.py
prompt: "//Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
  // 4\nfunction count_distinct_characters(string: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = count_distinct_characters;\n  assert.deepEqual(candidate(\"\
  \"),0);\n  assert.deepEqual(candidate(\"abcde\"),5);\n  assert.deepEqual(candidate(\"\
  abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"\
  Jerry jERRY JeRRRY\"),5);\n}\n\ntest();"
completions: ["\tlet chars: number[] = [];\n\tfor (let i = 0; i < string.length; i++)\
    \ {\n\t\tchars.push(string.charCodeAt(i));\n\t}\n\tlet uniqueChars: number[] =\
    \ [];\n\tfor (let i = 0; i < chars.length; i++) {\n\t\tlet char = chars[i];\n\t\
    \tif (uniqueChars.indexOf(char) === -1) {\n\t\t\tuniqueChars.push(char);\n\t\t\
    }\n\t}\n\treturn uniqueChars.length;\n}\n", "  const chars = string.split('');\n\
    \  const charsLength = chars.length;\n  const distinctCharsLength = {};\n  for\
    \ (let i = 0; i < charsLength; i++) {\n    const char = chars[i];\n    if (!distinctCharsLength[char])\
    \ {\n      distinctCharsLength[char] = 1;\n    } else {\n      distinctCharsLength[char]++;\n\
    \    }\n  }\n  return Object.keys(distinctCharsLength).length;\n}\n", "    let\
    \ count = 0;\n    for (let i = 0; i < string.length; i++) {\n        const char\
    \ = string[i];\n        if (char.toLowerCase() !== char) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "\tlet distinctCharacterCount = 0;\n\
    \tfor (let i = 0; i < string.length; i++) {\n\t\tlet currentChar = string[i];\n\
    \t\tlet lowerCaseChar = string[i].toLowerCase();\n\t\tlet upperCaseChar = string[i].toUpperCase();\n\
    \t\tif (currentChar === lowerCaseChar || currentChar === upperCaseChar) {\n\t\t\
    \tdistinctCharacterCount++;\n\t\t}\n\t}\n\treturn distinctCharacterCount;\n}\n",
  "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char =\
    \ string[i];\n    if (char.toLowerCase() === char.toUpperCase()) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "\tlet count = 1;\n\tlet char: string;\n\t\
    for (let i = 0; i < string.length; i++) {\n\t\tchar = string[i];\n\t\tif (char.toLowerCase()\
    \ !== char) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "  let count\
    \ = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)\
    \ !== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n\
    \    const char = string[i];\n    if (char.toLowerCase() !== char) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  const chars = string.split('');\n  const\
    \ charsLength = chars.length;\n  let distinctCharsCount = 0;\n  for (let i = 0;\
    \ i < charsLength; i++) {\n    if (chars.indexOf(chars[i]) !== i) {\n      distinctCharsCount++;\n\
    \    }\n  }\n  return distinctCharsCount;\n}\n", "  let count = 0;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()\
    \ === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n}\n",
  "    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        const\
    \ char = string[i];\n        if (char === char.toUpperCase()) {\n            count++;\n\
    \        }\n        else if (char === char.toLowerCase()) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "    let chars = string.split('');\n\
    \    let char_count: number = 0;\n    for (let i = 0; i < chars.length; i++) {\n\
    \        if (chars.indexOf(chars[i]) !== chars.lastIndexOf(chars[i])) {\n    \
    \        char_count++;\n        }\n    }\n    return char_count;\n}\n", "\tlet\
    \ count = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst char = string[i];\n\
    \t\tif (char.toLowerCase() !== char.toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t\
    }\n\treturn count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    const char = string[i];\n    if (char === char.toLowerCase()) {\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()\
    \ !== char) {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let count\
    \ = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\
    \    if (char.toLowerCase() === char.toUpperCase()) {\n      count++;\n    }\n\
    \  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    if (string[i] === string[i].toLowerCase()) {\n      count++;\n \
    \   }\n  }\n  return count;\n}\n", "  let chars = string.split('');\n  let count\
    \ = 1;\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.indexOf(chars[i])\
    \ !== i) {\n      count++;\n    }\n  }\n  return count;\n}\n", "  const chars\
    \ = string.split('');\n  const charsLength = chars.length;\n  const distinctCharsLength\
    \ = {};\n  for (let i = 0; i < charsLength; i++) {\n    const char = chars[i];\n\
    \    if (distinctCharsLength[char]) {\n      distinctCharsLength[char] += 1;\n\
    \    } else {\n      distinctCharsLength[char] = 1;\n    }\n  }\n  return Object.keys(distinctCharsLength).length;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ char = string[i];\n    if (char.toLowerCase() !== char) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
