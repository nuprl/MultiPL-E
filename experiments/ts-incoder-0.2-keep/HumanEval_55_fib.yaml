completions:
- "  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"
language: ts
name: HumanEval_55_fib
prompt: '//Return n-th Fibonacci number.

  // >>> fib(10)

  // 55

  // >>> fib(1)

  // 1

  // >>> fib(8)

  // 21

  function fib(n: number): number {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
  \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n \
  \ assert.deepEqual(candidate(12),144);\n}\n\ntest();"
