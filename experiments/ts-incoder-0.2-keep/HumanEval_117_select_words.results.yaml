language: ts
name: HumanEval_117_select_words
results:
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index =\
    \ 0;\n\twhile (index < s.length && n > 0) {\n\t\tif (s[index] === \" \") {\n\t\
    \t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \".\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"?\") {\n\t\t\tindex++;\n\t\t\t\
    continue;\n\t\t}\n\t\tif (s[index] === \"!\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (s[index] === \"-\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\
    \t\tif (s[index] === \"_\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif\
    \ (s[index] === \"/\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index]\
    \ === \"(\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"\
    )\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \":\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"[\") {\n\t\t\t\
    index++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"]\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"{\") {\n\t\t\tindex++;\n\t\t\t\
    continue;\n\t\t}\n\t\tif (s[index] === \"}\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (s[index] === \"<\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\
    \t\tif (s[index] === \">\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif\
    \ (s[index] === \"|\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index]\
    \ === \"\\\\\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] ===\
    \ \"'\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"\\\"\
    \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"%\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"&\") {\n\t\t\t\
    index++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"$\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"@\") {\n\t\t\tindex++;\n\t\t\t\
    continue;\n\t\t}\n\t\tif (s[index] === \"~\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (s[index] === \"`\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\
    \t\tif (s[index] === \"=\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif\
    \ (s[index] === \"*\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index]\
    \ === \"+\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"\
    -\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] === \"^\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm_uwyes8.ts(141,1): error TS1005: '']'' expected.

    ../../../../../tmp/tmpm_uwyes8.ts(156,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659739083
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result = [];\n    let i = 0;\n    while\
    \ (i < s.length) {\n        let word = s.substr(i, n);\n        if (word.length\
    \ == n) {\n            result.push(word);\n            i += n;\n        }\n  \
    \      else {\n            i++;\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpmi4wpinf.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmi4wpinf.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739083
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  let result: string[] = [];\n  for (let i =\
    \ 0; i < s.length; i++) {\n    let char = s[i];\n    if (char.match(/[aeiou]/))\
    \ {\n      result.push(char);\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpn_fi6189.js:25:12)\n    at Object.<anonymous> (/tmp/tmpn_fi6189.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739083
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  let result: string[] = [];\n  let index =\
    \ 0;\n  while (index < s.length && n > 0) {\n    if (s[index] === \" \") {\n \
    \     index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index]\
    \ === \"!\" || s[index] === \"?\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\" || s[index]\
    \ === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n    if\
    \ (s[index] === \"h\" || s[index] === \"e\" || s[index] === \"l\" || s[index]\
    \ === \"l\" || s[index] === \"o\" || s[index] === \"u\") {\n      index++;\n \
    \     continue;\n    }\n    if (s[index] === \"n\" || s[index] === \"o\" || s[index]\
    \ === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    a\" || s[index] === \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index]\
    \ === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    y\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"h\" ||\
    \ s[index] === \"e\" || s[index] === \"l\" || s[index] === \"l\" || s[index] ===\
    \ \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n    }\n   \
    \ if (s[index] === \"n\" || s[index] === \"o\" || s[index] === \"u\") {\n    \
    \  index++;\n      continue;\n    }\n    if (s[index] === \"a\" || s[index] ===\
    \ \"e\" || s[index] === \"i\" || s[index] === \"o\" || s[index] === \"u\") {\n\
    \      index++;\n      continue;\n    }\n    if (s[index] === \"y\") {\n     \
    \ index++;\n      continue;\n    }\n    if (s[index] === \"h\" || s[index] ===\
    \ \"e\" || s[index] === \"l\" || s[index] === \"l\" || s[index] === \"o\" || s[index]\
    \ === \"u\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    n\" || s[index] === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \"a\" || s[index] === \"e\" || s[index] === \"i\"\
    \ || s[index] === \"o\" || s[index] === \"u\") {\n      index++;\n      continue;\n\
    \    }\n    if (s[index] === \"y\") {\n      index++;\n      continue;\n    }\n\
    \    if (s[index] === \"h\" || s[index] === \"e\" || s[index] === \"l\" || s[index]\
    \ === \"l\" || s[index] === \"o\" || s[index] === \"u\") {\n      index++;\n \
    \     continue;\n    }\n    if (s[index] === \"n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphmse_fgo.ts(84,24): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmphmse_fgo.ts(85,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmphmse_fgo.ts(100,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659739083
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    for (let\
    \ i = 0; i < s.length; i++) {\n        let word = s.substr(i, n);\n        if\
    \ (word.length == n) {\n            result.push(word);\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp2pmhfi00.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2pmhfi00.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739083
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  let result: string[] = [];\n  for (let i =\
    \ 0; i < s.length; i++) {\n    let word = s[i];\n    for (let j = 0; j < word.length;\
    \ j++) {\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n   \
    \   if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j)\
    \ == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n\
    \        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n\
    \      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n   \
    \   if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j)\
    \ == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n\
    \        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n\
    \      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n   \
    \   if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j)\
    \ == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n\
    \        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n\
    \      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n   \
    \   if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j)\
    \ == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n\
    \        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n\
    \      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n   \
    \   if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j)\
    \ == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n\
    \        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n\
    \      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n   \
    \   if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j)\
    \ == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n\
    \        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n\
    \      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n   \
    \   if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j)\
    \ == ' ') {\n        continue;\n      }\n      if (word.charAt(j) == ' ') {\n\
    \        continue;\n      }\n      if (word.charAt(j) == ' ') {\n        continue;\n\
    \      }\n      if (word.charAt(j) == ' ') {\n        continue;\n      }\n   \
    \   if (word.charAt(j) == ' ') {\n        continue;\n      }\n      if (word.charAt(j)\
    \ == ' ') {\n        \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp27jx2egt.ts(145,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659739083
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet i = 0;\n\
    \twhile (i < s.length) {\n\t\tlet j = 0;\n\t\twhile (j < n) {\n\t\t\tif (s[i]\
    \ !== s[j]) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (j === n) {\n\
    \t\t\tresult.push(s.substring(i, i + n));\n\t\t\ti += n;\n\t\t}\n\t\telse {\n\t\
    \t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpsjaxrv2i.js:36:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpsjaxrv2i.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739083
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words: string[] = [];\n    let index\
    \ = 0;\n    let count = 0;\n    while (index < s.length && count < n) {\n    \
    \    if (s[index] === \" \") {\n            count++;\n        }\n        else\
    \ {\n            words.push(s[index]);\n            count++;\n        }\n    \
    \    index++;\n    }\n    return words;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'a',\n\
    \  'r',\n  'y'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmp4ycsfql1.js:31:12)\n    at Object.<anonymous> (/tmp/tmp4ycsfql1.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a',\
    \ 'r', 'y' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659739083
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    \n    if\
    \ (s.length === 0) {\n        return result;\n    }\n    \n    let i = 0;\n  \
    \  while (i < s.length) {\n        if (s.charAt(i) === ' ') {\n            i++;\n\
    \        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n      \
    \  }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n \
    \       else if (s.charAt(i) === ' ') {\n            i++;\n        }\n       \
    \ else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if\
    \ (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i)\
    \ === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === '\
    \ ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n\
    \            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n      \
    \      i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n\
    \        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n      \
    \  }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n \
    \       else if (s.charAt(i) === ' ') {\n            i++;\n        }\n       \
    \ else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if\
    \ (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i)\
    \ === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === '\
    \ ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n\
    \            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n      \
    \      i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n\
    \        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n      \
    \  }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n \
    \       else if (s.charAt(i) === ' ') {\n            i++;\n        }\n       \
    \ else if (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if\
    \ (s.charAt(i) === ' ') {\n            i++;\n        }\n        else if (s.charAt(i)\
    \ === ' ') {\n            i++;\n        }\n        else if (s.charAt(i) === '\
    \ ') {\n            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n\
    \            i++;\n        }\n        else if (s.charAt(i) === ' ') {\n      \
    \      i++;\n        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n\
    \        }\n        else if (s.charAt(i) === ' ') {\n            i++;\n      \
    \  }\n        else if (s.charAt(i) === ' ') {\n            i++;\n        }\n \
    \       else if (s.charAt(i) === ' ') {\n            i++;\n        }\n       \
    \ else if (s.charAt(i) === ' ') {\n            i++\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpum7o0t05.ts(140,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659739083
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  let words: string[] = [];\n  let index = 0;\n\
    \  while (index < s.length && n > 0) {\n    if (s[index] === \" \") {\n      index++;\n\
    \      continue;\n    }\n    if (s[index] === \".\" || s[index] === \",\") {\n\
    \      index++;\n      continue;\n    }\n    if (s[index] === \" \") {\n     \
    \ index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index] ===\
    \ \",\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \" \"\
    ) {\n      index++;\n      continue;\n    }\n    if (s[index] === \".\" || s[index]\
    \ === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    \ \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \".\" ||\
    \ s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    .\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    .\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    .\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    .\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    .\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    .\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    .\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    .\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    .\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \"\
    .\" || s[index] === \",\") {\n      index++;\n      continue;\n    }\n    if (s[index]\
    \ === \" \") {\n      index++;\n      continue;\n    }\n    if (s[index] === \n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: "/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:75701\n\
    \                throw e;\n                ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'kind')\n    at Object.isBlock (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:11249:21)\n\
    \    at emitEmbeddedStatement (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:73130:20)\n\
    \    at emitIfStatement (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:72093:13)\n\
    \    at pipelineEmitWithHint (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:71146:32)\n\
    \    at pipelineEmitWithComments (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:73893:17)\n\
    \    at pipelineEmitWithSubstitution (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:71384:13)\n\
    \    at emitNodeWithNotification (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:69978:21)\n\
    \    at pipelineEmitWithNotification (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:71006:13)\n\
    \    at emit (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:70962:13)\n\
    \    at emitNodeList (/home/a.guha/.conda/envs/polyglot-codegen-evaluation/lib/node_modules/typescript/lib/tsc.js:73302:21)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739083
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let words: string[] = [];\n    let index\
    \ = 0;\n    let count = 0;\n    while (index < s.length && count < n) {\n    \
    \    if (s[index] === 'a' || s[index] === 'e' || s[index] === 'i' || s[index]\
    \ === 'o' || s[index] === 'u') {\n            words.push(s[index]);\n        \
    \    count++;\n        }\n        index++;\n    }\n    return words;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpvlj170oa.js:28:12)\n    at Object.<anonymous> (/tmp/tmpvlj170oa.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659739083
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  let result = [];\n  let i = 0;\n  while (i\
    \ < s.length) {\n    let word = s.substr(i, n);\n    if (word.length == n) {\n\
    \      result.push(word);\n      i += n;\n    } else {\n      i++;\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpxmogc031.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxmogc031.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739083
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n\tlet result: string[] = [];\n\tlet index =\
    \ 0;\n\twhile (index < s.length) {\n\t\tlet char = s[index];\n\t\tif (char ===\
    \ \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\" ||\
    \ char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n\t\t\
    \tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"i\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"i\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"o\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"u\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"y\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"i\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"o\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"u\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"n\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\
    \t\t\tindex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa1uvd12g.ts(158,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659739083
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n\tlet words: string[] = [];\n\tlet index = 0;\n\
    \twhile (index < s.length) {\n\t\tlet word = s.substring(index, index+n);\n\t\t\
    if (word.length == n) {\n\t\t\twords.push(word);\n\t\t\tindex += n;\n\t\t}\n\t\
    \telse {\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn words;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpsot77v1c.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsot77v1c.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739083
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  let words: string[] = [];\n  \n  for (let\
    \ i = 0; i < s.length; i++) {\n    let letter = s[i];\n    let count = 0;\n  \
    \  for (let j = 0; j < letter.length; j++) {\n      if (letter[j] === \"a\" ||\
    \ letter[j] === \"e\" || letter[j] === \"i\" || letter[j] === \"o\" || letter[j]\
    \ === \"u\") {\n        count++;\n      }\n    }\n    if (count === n) {\n   \
    \   words.push(letter);\n    }\n  }\n  \n  return words;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpkku84i27.js:31:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpkku84i27.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739083
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  if (s == \"\") {\n    return [];\n  }\n  let\
    \ words: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    let char\
    \ = s[i];\n    if (char.match(/[aeiou]/i)) {\n      continue;\n    }\n    let\
    \ count = 0;\n    for (let j = 0; j < s.length; j++) {\n      if (s[j] == char)\
    \ {\n        count++;\n      }\n    }\n    if (count == n) {\n      words.push(char);\n\
    \    }\n  }\n  return words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ' ',\n  '\
    \ ',\n  ' ',\n  ' '\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at\
    \ test (/tmp/tmpkykb2hoa.js:37:12)\n    at Object.<anonymous> (/tmp/tmpkykb2hoa.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ', ' ',\
    \ ' ', ' ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659739083
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  if (s == \"\") {\n    return [];\n  }\n  let\
    \ words: string[] = [];\n  let index = 0;\n  while (index < s.length && n > 0)\
    \ {\n    if (s[index] === \" \") {\n      index++;\n    }\n    if (s[index] ===\
    \ \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n\
    \      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" || s[index]\
    \ === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\"\
    ) {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" ||\
    \ s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\"\
    ) {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" ||\
    \ s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\"\
    ) {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" ||\
    \ s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\"\
    ) {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" ||\
    \ s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\"\
    ) {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" ||\
    \ s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\"\
    ) {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" ||\
    \ s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\"\
    ) {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" ||\
    \ s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \" || s[index] === \".\" || s[index] === \"!\" || s[index] === \"?\"\
    ) {\n      index++;\n    }\n    if (s[index] === \" \" || s[index] === \".\" ||\
    \ s[index] === \"!\" || s[index] === \"?\") {\n      index++;\n    }\n    if (s[index]\
    \ === \" \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmn_x3n5k.ts(76,24): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpmn_x3n5k.ts(77,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpmn_x3n5k.ts(92,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659739083
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  let result: string[] = [];\n  if (s.length\
    \ === 0) {\n    return result;\n  }\n  let words: string[] = s.split(' ');\n \
    \ for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length\
    \ >= n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'little',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n \
    \   at test (/tmp/tmp6iggbgko.js:29:12)\n    at Object.<anonymous> (/tmp/tmp6iggbgko.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'little', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739083
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n    let result: string[] = [];\n    let index\
    \ = 0;\n    while (index < s.length && n > 0) {\n        if (s[index] === \" \"\
    ) {\n            index++;\n        }\n        if (s[index] === \" \" || s[index]\
    \ === \".\" || s[index] === \"!\" || s[index] === \"?\") {\n            result.push(s[index]);\n\
    \            index++;\n            n--;\n        }\n        index++;\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpv1nv4d3y.js:31:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpv1nv4d3y.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739083
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s:\
    \ string, n: number): string[] {\n  let words: string[] = [];\n  \n  if (s.length\
    \ === 0) {\n    return words;\n  }\n  \n  let word = \"\";\n  let count = 0;\n\
    \  \n  for (let i = 0; i < s.length; i++) {\n    if (s[i] !== \" \") {\n     \
    \ word += s[i];\n    } else {\n      if (count === n) {\n        words.push(word);\n\
    \        word = \"\";\n        count = 0;\n      }\n      \n      count++;\n \
    \   }\n  }\n  \n  return words;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp9sfntqzk.js:37:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp9sfntqzk.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659739083
