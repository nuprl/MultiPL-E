language: ts
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n  if (lst1.length === lst2.length) return lst1;\n\
    \  let result: string[] = [];\n  for (let i = 0; i < lst1.length; i++) {\n   \
    \ if (lst1[i].length >= lst2[i].length) result.push(lst1[i]);\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmpcylk51uq.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcylk51uq.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738897
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n  const arr1 = lst1.sort();\n  const arr2 = lst2.sort();\n\
    \  const len = Math.min(arr1.length, arr2.length);\n  let i = 0;\n  let j = 0;\n\
    \  const result = [];\n  while (i < len && j < len) {\n    if (arr1[i] < arr2[j])\
    \ {\n      i++;\n    } else if (arr1[i] > arr2[j]) {\n      j++;\n    } else {\n\
    \      result.push(arr1[i]);\n      i++;\n      j++;\n    }\n  }\n  return result.concat(arr1.slice(i)).concat(arr2.slice(j));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'admin',\n\
    \  'hi',\n  'hi',\n  'project'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n\
    \  'admin'\n]\n    at test (/tmp/tmpwq86k6fd.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwq86k6fd.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'admin',\
    \ 'hi', 'hi', 'project' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738897
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n  let result: string[] = [];\n  for (let i = 0;\
    \ i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n     \
    \ if (lst1[i].length < lst2[j].length) {\n        result.push(lst1[i]);\n    \
    \    break;\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test (/tmp/tmpozhfhzgi.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpozhfhzgi.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738898
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n  let result: string[] = [];\n  for (let i = 0;\
    \ i < lst1.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst2.length;\
    \ j++) {\n      if (lst1[i] === lst2[j]) {\n        count++;\n      }\n    }\n\
    \    if (count < lst2.length) {\n      result.push(lst1[i]);\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'admin'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test (/tmp/tmpq5enandb.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpq5enandb.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738897
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n  let result: string[] = [];\n  for (let i = 0;\
    \ i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n     \
    \ if (lst1[i].length >= lst2[j].length) {\n        result.push(lst1[i]);\n   \
    \     break;\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmpvhr_vtam.js:26:12)\n    at Object.<anonymous> (/tmp/tmpvhr_vtam.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738897
- exit_code: 2
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n  let arr1 = lst1.map(x => x.split(\"\").filter(y\
    \ => y != \" \").length);\n  let arr2 = lst2.map(x => x.split(\"\").filter(y =>\
    \ y != \" \").length);\n  let arr3 = arr1.filter(x => arr2.indexOf(x) == -1);\n\
    \  return arr3.concat(arr2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpgvs9d8w7.ts(14,3): error TS2322: Type 'number[]'\
    \ is not assignable to type 'string[]'.\n  Type 'number' is not assignable to\
    \ type 'string'.\n"
  timestamp: 1659738897
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n  let result: string[] = [];\n  for (let i = 0;\
    \ i < lst1.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst2.length;\
    \ j++) {\n      if (lst1[i] === lst2[j]) {\n        count++;\n      }\n    }\n\
    \    if (count < lst2.length) {\n      result.push(lst1[i]);\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'admin'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test (/tmp/tmpq5enandb.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpq5enandb.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738897
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n  let result: string[] = [];\n  for (let i = 0;\
    \ i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i]) < 0) {\n      result.push(lst1[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'admin'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test (/tmp/tmpep9q5ikg.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpep9q5ikg.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738897
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n  if (lst1.length === lst2.length) {\n    return\
    \ lst1;\n  }\n  return lst1.filter(x => lst2.indexOf(x) < 0);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n \
    \ assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"\
    hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmpwy3mcdwp.js:20:12)\n    at Object.<anonymous> (/tmp/tmpwy3mcdwp.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738898
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n    if (lst1.length == 0 || lst2.length == 0) {\n\
    \        return [];\n    }\n    if (lst1.length == lst2.length) {\n        return\
    \ lst1;\n    }\n    let result = [];\n    let maxLen = Math.max(lst1.length, lst2.length);\n\
    \    for (let i = 0; i < maxLen; i++) {\n        if (lst1[i] < lst2[i]) {\n  \
    \          result.push(lst1[i]);\n        }\n        if (lst2[i] < lst1[i]) {\n\
    \            result.push(lst2[i]);\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmpe68nw45n.js:33:12)\n    at Object.<anonymous> (/tmp/tmpe68nw45n.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738897
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n    let result: string[] = [];\n    for (let i\
    \ = 0; i < lst1.length; i++) {\n        let count = 0;\n        for (let j = 0;\
    \ j < lst2.length; j++) {\n            if (lst1[i] === lst2[j]) {\n          \
    \      count++;\n            }\n        }\n        if (count < lst2.length) {\n\
    \            result.push(lst1[i]);\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'admin'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test (/tmp/tmpk0xaimea.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpk0xaimea.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738897
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n    let result: string[] = [];\n    lst1.forEach(element\
    \ => {\n        lst2.forEach(element2 => {\n            if (element < element2)\
    \ {\n                result.push(element);\n            }\n        });\n    });\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'admin',\n\
    \  'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmpon1bw20y.js:25:12)\n    at Object.<anonymous> (/tmp/tmpon1bw20y.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'admin',\
    \ 'admin' ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738897
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n    if (lst1.length == lst2.length) {\n       \
    \ return lst1;\n    }\n    let result: string[] = [];\n    for (let i = 0; i <\
    \ lst1.length; i++) {\n        if (lst1[i].length >= lst2[i].length) {\n     \
    \       result.push(lst1[i]);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmpp3cveee_.js:26:12)\n    at Object.<anonymous> (/tmp/tmpp3cveee_.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738897
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n    if (lst1.length == lst2.length){\n        return\
    \ lst1;\n    }\n    let result = [];\n    for (let i = 0; i < lst1.length; i++){\n\
    \        let count = 0;\n        for (let j = 0; j < lst2.length; j++){\n    \
    \        if (lst1[i] === lst2[j]){\n                count++;\n            }\n\
    \        }\n        if (count < lst2.length){\n            result.push(lst1[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmppx39lzr8.js:32:12)\n    at Object.<anonymous> (/tmp/tmppx39lzr8.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738898
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n    if (lst1.length == lst2.length) {\n       \
    \ return lst1;\n    }\n    let result: string[] = [];\n    for (let i = 0; i <\
    \ lst1.length; i++) {\n        let count = 0;\n        for (let j = 0; j < lst2.length;\
    \ j++) {\n            if (lst1[i] == lst2[j]) {\n                count++;\n  \
    \          }\n        }\n        if (count < lst2.length) {\n            result.push(lst1[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmpoz2r56ob.js:32:12)\n    at Object.<anonymous> (/tmp/tmpoz2r56ob.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738897
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n  if(lst1.length === 0 || lst2.length === 0) return\
    \ lst1;\n  if(lst1.length === lst2.length) return lst1;\n  if(lst1.length < lst2.length)\
    \ return lst1;\n  return lst2;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmp1jwfu3ad.js:23:12)\n    at Object.<anonymous> (/tmp/tmp1jwfu3ad.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738897
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n  return lst1.filter(x => lst2.indexOf(x) < lst2.indexOf(x)).concat(lst2.filter(x\
    \ => lst1.indexOf(x) < lst1.indexOf(x)))\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test (/tmp/tmpxldf0uug.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxldf0uug.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738897
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n  return lst1.filter(x => lst2.indexOf(x) < lst2.indexOf(x)).concat(lst1.filter(x\
    \ => lst2.indexOf(x) >= lst2.indexOf(x)));\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hi',\n \
    \ 'admin'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test\
    \ (/tmp/tmps_3jibix.js:17:12)\n    at Object.<anonymous> (/tmp/tmps_3jibix.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hi', 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738897
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n    let result: string[] = [];\n    lst1.forEach((item)\
    \ => {\n        if (lst2.indexOf(item) < 0) {\n            result.push(item);\n\
    \        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'admin'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test (/tmp/tmpev5he94m.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpev5he94m.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738897
- exit_code: 1
  program: "//Write a function that accepts two lists of strings and returns the list\
    \ that has \n// total number of chars in the all strings of the list less than\
    \ the other list.\n// if the two lists have the same number of chars, return the\
    \ first list.\n// Examples\n// total_match([], []) \u279E []\n// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunction total_match(lst1: string[],\
    \ lst2: string[]): string[] {\n  let result: string[] = [];\n  for (let i = 0;\
    \ i < lst1.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst2.length;\
    \ j++) {\n      if (lst1[i] === lst2[j]) {\n        count++;\n      }\n    }\n\
    \    if (count < lst2.length) {\n      result.push(lst1[i]);\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'admin'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'hi'\n]\n    at test (/tmp/tmpq5enandb.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpq5enandb.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'admin'\
    \ ],\n  expected: [ 'hi', 'hi' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738897
