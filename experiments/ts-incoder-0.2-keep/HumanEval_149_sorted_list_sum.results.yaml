language: ts
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 1
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n    const result: string[] = [];\n    let maxLength =\
    \ 0;\n    let maxLengthIndex = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i].length > maxLength) {\n            maxLength = lst[i].length;\n\
    \            maxLengthIndex = i;\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i].length == maxLength) {\n            result.push(lst[i]);\n\
    \        }\n    }\n    for (let i = maxLengthIndex + 1; i < lst.length; i++) {\n\
    \        result.push(lst[i]);\n    }\n    return result.sort();\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\"\
    , \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"\
    d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\"\
    , \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'aaa'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'aa'\n]\n    at test (/tmp/tmp53bsqrxh.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmp53bsqrxh.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'aaa' ],\n\
    \  expected: [ 'aa' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738685
- exit_code: 2
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n\tconst result: string[] = [];\n\tlet sorted: boolean\
    \ = false;\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tconst word = lst[i];\n\
    \t\tif (word.length % 2 === 0) {\n\t\t\tresult.push(word);\n\t\t\tsorted = true;\n\
    \t\t} else {\n\t\t\tconst index = result.findIndex(x => x === word);\n\t\t\tif\
    \ (index > -1) {\n\t\t\t\tresult.splice(index, 1);\n\t\t\t}\n\t\t}\n\t}\n\tif\
    \ (sorted) {\n\t\tresult.sort();\n\t}\n\treturn result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"\
    aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"\
    AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"\
    c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"\
    a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"\
    au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1f29o0o1.ts(23,25): error TS2339: Property ''findIndex''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738685
- exit_code: 1
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n  const result: string[] = [];\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    const item = lst[i];\n    if (result.length && item.length\
    \ > result[result.length - 1].length) {\n      result.push(item);\n    } else\
    \ {\n      result.push(item);\n    }\n  }\n  return result.sort((a, b) => a.length\
    \ - b.length);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"\
    aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"\
    AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"\
    d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\"\
    , \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'aa',\n\
    \  'aaa'\n]\n\nshould loosely deep-equal\n\n[\n  'aa'\n]\n    at test (/tmp/tmp_vwot6vd.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_vwot6vd.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'aa',\
    \ 'aaa' ],\n  expected: [ 'aa' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738685
- exit_code: 2
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n  let sorted_lst: string[] = [];\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    let word = lst[i];\n    let index = sorted_lst.findIndex(x\
    \ => x === word);\n    if (index === -1) {\n      sorted_lst.push(word);\n   \
    \ } else {\n      sorted_lst[index] = word;\n    }\n  }\n  return sorted_lst.sort();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"\
    aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"\
    AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"\
    d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\"\
    , \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp46snofkx.ts(18,28): error TS2339: Property ''findIndex''
    does not exist on type ''string[]''.

    '
  timestamp: 1659738685
- exit_code: 2
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n\tlet new_lst: string[] = [];\n\tlet sorted_lst: string[]\
    \ = [];\n\tlet sorted_lst_len: number[] = [];\n\tlet sorted_lst_len_max: number\
    \ = 0;\n\tlet sorted_lst_len_min: number = 0;\n\tfor (let i = 0; i < lst.length;\
    \ i++) {\n\t\tlet cur_len = lst[i].length;\n\t\tsorted_lst_len.push(cur_len);\n\
    \t\tif (cur_len > sorted_lst_len_max) {\n\t\t\tsorted_lst_len_max = cur_len;\n\
    \t\t}\n\t\tif (cur_len < sorted_lst_len_min) {\n\t\t\tsorted_lst_len_min = cur_len;\n\
    \t\t}\n\t}\n\tfor (let i = 0; i < sorted_lst_len.length; i++) {\n\t\tlet cur_len\
    \ = sorted_lst_len[i];\n\t\tfor (let j = 0; j < sorted_lst_len.length; j++) {\n\
    \t\t\tif (j == i) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (cur_len == sorted_lst_len[j])\
    \ {\n\t\t\t\tlet cur_lst = lst[i];\n\t\t\t\tlet cur_lst_len = cur_lst.length;\n\
    \t\t\t\tlet cur_lst_len_max = sorted_lst_len_max;\n\t\t\t\tlet cur_lst_len_min\
    \ = sorted_lst_len_min;\n\t\t\t\tlet cur_lst_len_diff = cur_lst_len - cur_lst_len_max;\n\
    \t\t\t\tlet cur_lst_len_diff_max = cur_lst_len_max - cur_lst_len_min;\n\t\t\t\t\
    let cur_lst_len_diff_min = cur_lst_len_min - cur_lst_len_max;\n\t\t\t\tlet cur_lst_len_diff_max\
    \ = cur_lst_len_max - cur_lst_len_min;\n\t\t\t\tlet cur_lst_len_diff_min = cur_lst_len_min\
    \ - cur_lst_len_max;\n\t\t\t\tlet cur_lst_len_diff_max = cur_lst_len_max - cur_lst_len_min;\n\
    \t\t\t\tlet cur_lst_len_diff_min = cur_lst_len_min - cur_lst_len_max;\n\t\t\t\t\
    let cur_lst_len_diff_max = cur_lst_len_max - cur_lst_len_min;\n\t\t\t\tlet cur_lst_len_diff_min\
    \ = cur_lst_len_min - cur_lst_len_max;\n\t\t\t\tlet cur_lst_len_diff_max = cur_lst_len_max\
    \ - cur_lst_len_min;\n\t\t\t\tlet cur_lst_len_diff_min = cur_lst_len_min - cur_lst_len_max;\n\
    \t\t\t\tlet cur_lst_len_diff_max = cur_lst_len_max - cur_lst_len_min;\n\t\t\t\t\
    let cur_lst_len_diff_min = cur_lst_len_min - cur_lst_len_max;\n\t\t\t\tlet cur_lst_len_diff_max\
    \ = cur_lst_len_max - cur_lst_len_min;\n\t\t\t\tlet cur_l\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"\
    aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"\
    AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"\
    c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"\
    a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"\
    au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpifd_stjl.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738685
- exit_code: 1
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n  let sorted_list: string[] = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i].length == lst[i + 1].length) {\n    \
    \  sorted_list.push(lst[i]);\n    }\n  }\n  sorted_list.sort();\n  return sorted_list;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"\
    aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"\
    AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"\
    d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\"\
    , \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\
    \ntest();"
  status: Exception
  stderr: "/tmp/tmpqdsylbqk.js:17\n        if (lst[i].length == lst[i + 1].length)\
    \ {\n                                        ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'length')\n    at sorted_list_sum (/tmp/tmpqdsylbqk.js:17:41)\n\
    \    at test (/tmp/tmpqdsylbqk.js:27:22)\n    at Object.<anonymous> (/tmp/tmpqdsylbqk.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738685
- exit_code: 1
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n  const sorted = lst.sort((a, b) => {\n    if (a.length\
    \ < b.length) {\n      return -1;\n    }\n    if (a.length > b.length) {\n   \
    \   return 1;\n    }\n    return 0;\n  });\n  return sorted;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"\
    a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"\
    d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\"\
    , \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'aa',\n\
    \  'aaa'\n]\n\nshould loosely deep-equal\n\n[\n  'aa'\n]\n    at test (/tmp/tmpyhfpjo8g.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyhfpjo8g.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'aa',\
    \ 'aaa' ],\n  expected: [ 'aa' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738685
- exit_code: 1
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n\tlet new_lst: string[] = [];\n\tlet sorted_lst: string[]\
    \ = [];\n\tlet sorted_index = 0;\n\tlet index = 0;\n\tfor (let i = 0; i < lst.length;\
    \ i++) {\n\t\tlet word = lst[i];\n\t\tif (new_lst.length < sorted_index) {\n\t\
    \t\tnew_lst.push(word);\n\t\t\tsorted_index = new_lst.length - 1;\n\t\t} else\
    \ {\n\t\t\tif (new_lst.length == sorted_index) {\n\t\t\t\tnew_lst.push(word);\n\
    \t\t\t\tsorted_index = new_lst.length - 1;\n\t\t\t} else {\n\t\t\t\tnew_lst[sorted_index]\
    \ = word;\n\t\t\t\tsorted_index++;\n\t\t\t}\n\t\t}\n\t}\n\tfor (let i = 0; i <\
    \ new_lst.length; i++) {\n\t\tsorted_lst.push(new_lst[i]);\n\t}\n\treturn sorted_lst;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"\
    aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"\
    AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"\
    d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\"\
    , \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'aaa'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'aa'\n]\n    at test (/tmp/tmp7sv4824i.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7sv4824i.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'aaa'\
    \ ],\n  expected: [ 'aa' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738685
- exit_code: 1
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n  const newList: string[] = [];\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (lst[i].length % 2 !== 0) {\n      newList.push(lst[i]);\n\
    \    }\n  }\n  newList.sort();\n  return newList;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"\
    aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"\
    AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"\
    c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"\
    a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"\
    au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'aaa'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'aa'\n]\n    at test (/tmp/tmp04ugdr9v.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp04ugdr9v.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'aaa'\
    \ ],\n  expected: [ 'aa' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738685
- exit_code: 1
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n  const sorted = lst.sort((a, b) => {\n    const aLen\
    \ = a.length;\n    const bLen = b.length;\n    if (aLen === bLen) {\n      return\
    \ a.localeCompare(b);\n    }\n    return aLen - bLen;\n  });\n  return sorted;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"\
    aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"\
    AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"\
    d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\"\
    , \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'aa',\n\
    \  'aaa'\n]\n\nshould loosely deep-equal\n\n[\n  'aa'\n]\n    at test (/tmp/tmpukdj3tei.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpukdj3tei.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'aa',\
    \ 'aaa' ],\n  expected: [ 'aa' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738685
- exit_code: 2
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n    const result: string[] = [];\n    const map = new\
    \ Map<string, number>();\n    for (const item of lst) {\n        const key = item.split(\"\
    \").sort().join(\"\");\n        if (!map.has(key)) {\n            result.push(item);\n\
    \            map.set(key, 1);\n        } else {\n            map.set(key, map.get(key)\
    \ + 1);\n        }\n    }\n    for (const item of map.keys()) {\n        if (map.get(item)\
    \ % 2 !== 0) {\n            result.push(item);\n        }\n    }\n    return result.sort();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"\
    aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"\
    AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"\
    d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\"\
    , \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe9w9izwx.ts(16,21): error TS2552: Cannot find name
    ''Map''. Did you mean ''map''?

    '
  timestamp: 1659738685
- exit_code: 1
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n  const newList: string[] = [];\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (lst[i].length % 2 !== 0) {\n      newList.push(lst[i]);\n\
    \    }\n  }\n  newList.sort();\n  return newList;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"\
    aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"\
    AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"\
    c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"\
    a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"\
    au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'aaa'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'aa'\n]\n    at test (/tmp/tmp04ugdr9v.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp04ugdr9v.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'aaa'\
    \ ],\n  expected: [ 'aa' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738685
- exit_code: 1
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n  const newList: string[] = [];\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (lst[i].length % 2 !== 0) {\n      newList.push(lst[i]);\n\
    \    }\n  }\n  newList.sort();\n  return newList;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"\
    aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"\
    AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"\
    c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"\
    a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"\
    au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'aaa'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'aa'\n]\n    at test (/tmp/tmp04ugdr9v.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp04ugdr9v.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'aaa'\
    \ ],\n  expected: [ 'aa' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738685
- exit_code: 1
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n  const result: string[] = [];\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    const word = lst[i];\n    if (result.length && result[result.length\
    \ - 1].length < word.length) {\n      result.push(word);\n    } else {\n     \
    \ result.push(word);\n    }\n  }\n  result.sort((a, b) => a.length - b.length);\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"\
    aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"\
    AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"\
    d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\"\
    , \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'aa',\n\
    \  'aaa'\n]\n\nshould loosely deep-equal\n\n[\n  'aa'\n]\n    at test (/tmp/tmpbbhui9ke.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbbhui9ke.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'aa',\
    \ 'aaa' ],\n  expected: [ 'aa' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738685
- exit_code: 1
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n\tlet sorted_lst: string[] = [];\n\tfor (let i = 0; i\
    \ < lst.length; i++) {\n\t\tlet word = lst[i];\n\t\tlet index = sorted_lst.indexOf(word);\n\
    \t\tif (index === -1) {\n\t\t\tsorted_lst.push(word);\n\t\t} else {\n\t\t\tsorted_lst[index]\
    \ = word;\n\t\t}\n\t}\n\treturn sorted_lst.sort();\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"\
    aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"\
    AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"\
    c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"\
    a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"\
    au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'aa',\n\
    \  'aaa'\n]\n\nshould loosely deep-equal\n\n[\n  'aa'\n]\n    at test (/tmp/tmpcl7pet5u.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcl7pet5u.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'aa',\
    \ 'aaa' ],\n  expected: [ 'aa' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738685
- exit_code: 1
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n  const sortedList: string[] = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    const word = lst[i];\n    if (sortedList.indexOf(word)\
    \ === -1) {\n      sortedList.push(word);\n    }\n  }\n  return sortedList.sort();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"\
    aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"\
    AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"\
    d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\"\
    , \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'aa',\n\
    \  'aaa'\n]\n\nshould loosely deep-equal\n\n[\n  'aa'\n]\n    at test (/tmp/tmpj9wuq91e.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpj9wuq91e.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'aa',\
    \ 'aaa' ],\n  expected: [ 'aa' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738685
- exit_code: 1
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n  let sorted_list: string[] = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i].length % 2 !== 0) {\n      sorted_list.push(lst[i]);\n\
    \    }\n  }\n  sorted_list.sort();\n  return sorted_list;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"\
    aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"\
    AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"\
    c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"\
    a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"\
    au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'aaa'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'aa'\n]\n    at test (/tmp/tmph0g9ntj6.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmph0g9ntj6.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'aaa'\
    \ ],\n  expected: [ 'aa' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738685
- exit_code: 1
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n  const result: string[] = [];\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    const word = lst[i];\n    const index = result.indexOf(word);\n\
    \    if (index === -1) {\n      result.push(word);\n    } else {\n      result.splice(index,\
    \ 1);\n    }\n  }\n  result.sort();\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"\
    aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"\
    AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"\
    c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"\
    a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"\
    au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'aa',\n\
    \  'aaa'\n]\n\nshould loosely deep-equal\n\n[\n  'aa'\n]\n    at test (/tmp/tmpzxthphv4.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzxthphv4.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'aa',\
    \ 'aaa' ],\n  expected: [ 'aa' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738685
- exit_code: 2
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n\tlet sorted: number[] = [];\n\tlet sortedList: string[]\
    \ = [];\n\tlet sortedListIndex: number[] = [];\n\tlet sortedListIndex2: number[]\
    \ = [];\n\tlet sortedListIndex3: number[] = [];\n\tlet sortedListIndex4: number[]\
    \ = [];\n\tlet sortedListIndex5: number[] = [];\n\tlet sortedListIndex6: number[]\
    \ = [];\n\tlet sortedListIndex7: number[] = [];\n\tlet sortedListIndex8: number[]\
    \ = [];\n\tlet sortedListIndex9: number[] = [];\n\tlet sortedListIndex10: number[]\
    \ = [];\n\tlet sortedListIndex11: number[] = [];\n\tlet sortedListIndex12: number[]\
    \ = [];\n\tlet sortedListIndex13: number[] = [];\n\tlet sortedListIndex14: number[]\
    \ = [];\n\tlet sortedListIndex15: number[] = [];\n\tlet sortedListIndex16: number[]\
    \ = [];\n\tlet sortedListIndex17: number[] = [];\n\tlet sortedListIndex18: number[]\
    \ = [];\n\tlet sortedListIndex19: number[] = [];\n\tlet sortedListIndex20: number[]\
    \ = [];\n\tlet sortedListIndex21: number[] = [];\n\tlet sortedListIndex22: number[]\
    \ = [];\n\tlet sortedListIndex23: number[] = [];\n\tlet sortedListIndex24: number[]\
    \ = [];\n\tlet sortedListIndex25: number[] = [];\n\tlet sortedListIndex26: number[]\
    \ = [];\n\tlet sortedListIndex27: number[] = [];\n\tlet sortedListIndex28: number[]\
    \ = [];\n\tlet sortedListIndex29: number[] = [];\n\tlet sortedListIndex30: number[]\
    \ = [];\n\tlet sortedListIndex31: number[] = [];\n\tlet sortedListIndex32: number[]\
    \ = [];\n\tlet sortedListIndex33: number[] = [];\n\tlet sortedListIndex34: number[]\
    \ = [];\n\tlet sortedListIndex35: number[] = [];\n\tlet sortedListIndex36: number[]\
    \ = [];\n\tlet sortedListIndex37: number[] = [];\n\tlet sortedListIndex38: number[]\
    \ = [];\n\tlet sortedListIndex39: number[] = [];\n\tlet sortedListIndex40: number[]\
    \ = [];\n\tlet sortedListIndex41: number[] = [];\n\tlet sortedListIndex42: number[]\
    \ = [];\n\tlet sortedListIndex43: number[] = [];\n\tlet sortedListIndex44: number[]\
    \ = [];\n\tlet sortedListIndex45: number[] = [];\n\tlet sortedListIndex46\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\"\
    , \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"\
    d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\"\
    , \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd_t6t5mr.ts(78,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738685
- exit_code: 1
  program: "//Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst:\
    \ string[]): string[] {\n  const newList: string[] = [];\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (lst[i].length % 2 !== 0) {\n      newList.push(lst[i]);\n\
    \    }\n  }\n  newList.sort();\n  return newList;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"\
    aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"\
    AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"\
    c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"\
    a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"\
    au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'aaa'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'aa'\n]\n    at test (/tmp/tmp04ugdr9v.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp04ugdr9v.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'aaa'\
    \ ],\n  expected: [ 'aa' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738685
