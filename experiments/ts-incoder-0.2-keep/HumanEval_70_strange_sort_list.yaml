completions:
- "  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n\
  }\n"
- "  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i <\
  \ lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if\
  \ (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n\
  \  while (min < max) {\n    result.push(min);\n    min = min + 1;\n  }\n  while\
  \ (min > max) {\n    result.push(max);\n    max = max - 1;\n  }\n  return result;\n\
  }\n"
- "  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min\
  \ = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len\
  \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return\
  \ strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n"
- "  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n\
  }\n"
- "  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min\
  \ = lst[0];\n  const max = lst[len - 1];\n  const middle = Math.floor((len - 1)\
  \ / 2);\n  const left = strange_sort_list(lst.slice(0, middle));\n  const right\
  \ = strange_sort_list(lst.slice(middle + 1));\n  return left.concat(right).concat([min],\
  \ max);\n}\n"
- "  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min\
  \ = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
  \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
  \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n"
- "  const sorted = lst.sort((a, b) => a - b);\n  return sorted.reverse();\n}\n"
- "  const sorted_list = lst.slice();\n  sorted_list.sort((a, b) => a - b);\n  return\
  \ sorted_list;\n}\n"
- "  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i <\
  \ lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    } else if\
  \ (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n\
  \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n\
  \    } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n\
  \  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n\
  \  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return\
  \ strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n"
- "  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = lst[0];\n  const\
  \ max = lst.reduce((max, x) => Math.max(max, x), 0);\n\n  return lst.sort((a, b)\
  \ => {\n    if (a < min) {\n      return -1;\n    }\n    if (a > max) {\n      return\
  \ 1;\n    }\n    if (b < min) {\n      return -1;\n    }\n    if (b > max) {\n \
  \     return 1;\n    }\n    return 0;\n  });\n}\n"
- "  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 1; i <\
  \ lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    } else if\
  \ (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n\
  \  while (min < max) {\n    result.push(min);\n    min = min + 1;\n  }\n  while\
  \ (min > max) {\n    result.push(max);\n    max = max - 1;\n  }\n  return result;\n\
  }\n"
- "  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n\
  }\n"
- "  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min\
  \ = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len\
  \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return\
  \ strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n"
- "  const len = lst.length;\n  const minVal = lst[0];\n  const maxVal = lst[len -\
  \ 1];\n  for (let i = 1; i < len; i++) {\n    const curVal = lst[i];\n    if (curVal\
  \ < minVal) {\n      lst[i] = minVal;\n    } else if (curVal > maxVal) {\n     \
  \ lst[i] = maxVal;\n    }\n  }\n  return lst;\n}\n"
- "  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min\
  \ = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
  \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
  \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n"
- "  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const min\
  \ = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
  \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
  \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n"
- "  if (lst.length === 0) {\n    return [];\n  }\n\n  const min = Math.min(...lst);\n\
  \  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n\
  \n  return strange_sort_list(\n    lst.slice(0, middle).concat(min).concat(max,\
  \ strange_sort_list(lst.slice(middle)))\n  );\n}\n"
- "  const sorted_list = lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n\
  \    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return\
  \ sorted_list;\n}\n"
- "  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i = 0; i <\
  \ lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if\
  \ (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result: number[] = [];\n\
  \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      result.push(min);\n\
  \    } else if (lst[i] > max) {\n      result.push(max);\n    } else {\n      result.push(lst[i]);\n\
  \    }\n  }\n  return result;\n}\n"
language: ts
name: HumanEval_70_strange_sort_list
prompt: '//Given list of integers, return list in strange order.

  // Strange sorting, is when you start with the minimum value,

  // then maximum of the remaining integers, then minimum and so on.

  // Examples:

  // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]

  // strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]

  // strange_sort_list([]) == []

  function strange_sort_list(lst: number[]): number[] {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
  \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
  \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
  \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
  \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
  }\n\ntest();"
