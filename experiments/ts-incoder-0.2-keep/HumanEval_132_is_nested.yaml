name: HumanEval_132_is_nested
language: humaneval_to_typescript.py
prompt: "//Create a function that takes a string as input which contains only square\
  \ brackets.\n// The function should return True if and only if there is a valid\
  \ subsequence of brackets \n// where at least one bracket in the subsequence is\
  \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
  \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n//\
  \ is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
  \ is_nested(string: string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
  ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
  [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
  [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
  [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
  []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
  [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
  [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\ntest();"
completions: ["    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === ']') {\n            if (stack.length === 0)\
    \ {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ == '[') {\n            stack.push('[');\n        } else if (string[i] == ']')\
    \ {\n            if (stack.length == 0) {\n                return false;\n   \
    \         }\n            if (stack[stack.length - 1] != '[') {\n             \
    \   return false;\n            }\n            stack.pop();\n        } else if\
    \ (string[i] == '[' || string[i] == ']') {\n            if (stack.length == 0)\
    \ {\n                return false;\n            }\n            if (stack[stack.length\
    \ - 1] != '[' && stack[stack.length - 1] != ']') {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n", "\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[]\
    \ = [];\n\tlet open_brackets_stack: number[] = [];\n\tlet close_brackets_stack:\
    \ number[] = [];\n\tlet open_parenthesis: number[] = [];\n\tlet close_parenthesis:\
    \ number[] = [];\n\tlet open_parenthesis_stack: number[] = [];\n\tlet close_parenthesis_stack:\
    \ number[] = [];\n\tlet open_parenthesis_stack_index: number = 0;\n\tlet close_parenthesis_stack_index:\
    \ number = 0;\n\tlet open_parenthesis_stack_string: string = \"\";\n\tlet close_parenthesis_stack_string:\
    \ string = \"\";\n\tlet open_parenthesis_stack_string_index: number = 0;\n\tlet\
    \ close_parenthesis_stack_string_index: number = 0;\n\tlet open_parenthesis_stack_string_index2:\
    \ number = 0;\n\tlet close_parenthesis_stack_string_index2: number = 0;\n\tlet\
    \ open_parenthesis_stack_string_index3: number = 0;\n\tlet close_parenthesis_stack_string_index3:\
    \ number = 0;\n\tlet open_parenthesis_stack_string_index4: number = 0;\n\tlet\
    \ close_parenthesis_stack_string_index4: number = 0;\n\tlet open_parenthesis_stack_string_index5:\
    \ number = 0;\n\tlet close_parenthesis_stack_string_index5: number = 0;\n\tlet\
    \ open_parenthesis_stack_string_index6: number = 0;\n\tlet close_parenthesis_stack_string_index6:\
    \ number = 0;\n\tlet open_parenthesis_stack_string_index7: number = 0;\n\tlet\
    \ close_parenthesis_stack_string_index7: number = 0;\n\tlet open_parenthesis_stack_string_index8:\
    \ number = 0;\n\tlet close_parenthesis_stack_string_index8: number = 0;\n\tlet\
    \ open_parenthesis_stack_string_index9: number = 0;\n\tlet close_parenthesis_stack_string_index9:\
    \ number = 0;\n\tlet open_parenthesis_stack_string_index10: number = 0;\n\tlet\
    \ close_parenthesis_stack_string_index10: number = 0;\n\tlet open_parenthesis_stack_string_index11:\
    \ number = 0;\n\tlet close_parenthesis_stack_string_index11: number = 0;\n\tlet\
    \ open_parenthesis_stack_string_index12: number = 0;\n\tlet close_parenthesis_stack_string_index12:\
    \ number = 0;\n\tlet open_parenthesis_stack_string_index13: number = 0;\n\tlet\
    \ close_parenthesis_stack_string_index13: number = 0;\n\tlet open_parenthesis_stack_string_index14:\
    \ number = 0;\n\tlet close_parenthesis_", "    let stack: string[] = [];\n   \
    \ for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n \
    \       if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            let openBracket = stack.pop();\n        \
    \    if (openBracket !== '[') {\n                return false;\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '[') {\n            stack.push('[');\n        } else if (string[i] === ']')\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          }\n            stack.pop();\n        } else if (string[i] === '[' &&\
    \ stack.length > 0) {\n            stack.push('[');\n        } else if (string[i]\
    \ === ']' && stack.length > 0) {\n            if (stack[stack.length - 1] ===\
    \ '[') {\n                stack.pop();\n            } else {\n               \
    \ return false;\n            }\n        }\n    }\n    if (stack.length === 0)\
    \ {\n        return true;\n    }\n    return false;\n}\n", "\tlet open_brackets:\
    \ number[] = [];\n\tlet close_brackets: number[] = [];\n\tlet open_brackets_stack:\
    \ number[] = [];\n\tlet close_brackets_stack: number[] = [];\n\n\tfor (let i =\
    \ 0; i < string.length; i++) {\n\t\tlet char = string[i];\n\t\tif (char === '[')\
    \ {\n\t\t\topen_brackets.push(open_brackets_stack.length);\n\t\t\topen_brackets_stack.push(char);\n\
    \t\t} else if (char === ']') {\n\t\t\tclose_brackets.push(close_brackets_stack.length);\n\
    \t\t\tclose_brackets_stack.push(char);\n\t\t} else if (char === '[') {\n\t\t\t\
    open_brackets_stack.push(char);\n\t\t} else if (char === ']') {\n\t\t\tclose_brackets_stack.push(char);\n\
    \t\t}\n\t}\n\n\tif (open_brackets.length !== close_brackets.length) {\n\t\treturn\
    \ false;\n\t}\n\n\tfor (let i = 0; i < open_brackets.length; i++) {\n\t\tlet open_bracket\
    \ = open_brackets[i];\n\t\tlet close_bracket = close_brackets[i];\n\t\tif (open_bracket\
    \ === close_bracket) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet open_brackets_index\
    \ = open_brackets_stack.length - 1;\n\t\tlet close_brackets_index = close_brackets_stack.length\
    \ - 1;\n\t\twhile (open_brackets_index >= 0 && close_brackets_index >= 0) {\n\t\
    \t\tif (open_brackets_stack[open_brackets_index] === close_brackets_stack[close_brackets_index])\
    \ {\n\t\t\t\topen_brackets_index--;\n\t\t\t\tclose_brackets_index--;\n\t\t\t}\
    \ else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (open_brackets_index < 0 ||\
    \ close_brackets_index < 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (open_brackets_stack[open_brackets_index]\
    \ === close_brackets_stack[close_brackets_index]) {\n\t\t\topen_brackets_index--;\n\
    \t\t\tclose_brackets_index--;\n\t\t}\n\n\t\tif (open_brackets_index >= 0 && close_brackets_index\
    \ >= 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n", "\tlet open_brackets\
    \ = 0;\n\tlet closed_brackets = 0;\n\tfor (let i = 0; i < string.length; i++)\
    \ {\n\t\tif (string[i] == '[') {\n\t\t\topen_brackets++;\n\t\t} else if (string[i]\
    \ == ']') {\n\t\t\tclosed_brackets++;\n\t\t}\n\t\tif (open_brackets == closed_brackets)\
    \ {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (stack.length\
    \ > 0 && string[i] === '[') {\n            stack.push(string[i]);\n        } else\
    \ if (stack.length > 0 && string[i] === ']') {\n            if (stack[stack.length\
    \ - 1] === '[') {\n                stack.pop();\n            } else {\n      \
    \          return false;\n            }\n        } else if (stack.length > 0 &&\
    \ string[i] === '[' && stack[stack.length - 1] === ']') {\n            return\
    \ false;\n        } else {\n            stack.push(string[i]);\n        }\n  \
    \  }\n    return stack.length === 0;\n}\n", "    let stack: string[] = [];\n \
    \   for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[')\
    \ {\n            stack.push(string[i]);\n        } else if (string[i] === ']')\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === ']') {\n            if (stack.length === 0)\
    \ {\n                return false;\n            }\n            let openBracket\
    \ = stack.pop();\n            if (openBracket !== string[i]) {\n             \
    \   return false;\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    if (string === '') {\n        return false;\n    }\n    let open_brackets\
    \ = 0;\n    let closed_brackets = 0;\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === '[') {\n            open_brackets++;\n        }\
    \ else if (string[i] === ']') {\n            closed_brackets++;\n        }\n \
    \       if (open_brackets === closed_brackets) {\n            return true;\n \
    \       }\n    }\n    return false;\n}\n", "    let brackets = string.match(/\\\
    [.*?\\]/g);\n    if (brackets == null) {\n        return false;\n    }\n    let\
    \ count = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ == '[') {\n            count++;\n        } else if (brackets[i] == ']') {\n\
    \            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "  const stack: string[] =\
    \ [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[')\
    \ {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n     \
    \ if (stack.length === 0) {\n        return false;\n      }\n      const openBracket\
    \ = stack.pop();\n      if (openBracket !== string[i]) {\n        return false;\n\
    \      }\n    }\n  }\n  return stack.length === 0;\n}\n", "\tlet stack: string[]\
    \ = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets: number[] =\
    \ [];\n\tlet open_curly: number[] = [];\n\tlet close_curly: number[] = [];\n\t\
    let open_paren: number[] = [];\n\tlet close_paren: number[] = [];\n\tlet open_curly_brackets:\
    \ number[] = [];\n\tlet close_curly_brackets: number[] = [];\n\tlet open_paren_brackets:\
    \ number[] = [];\n\tlet close_paren_brackets: number[] = [];\n\tlet open_curly_paren:\
    \ number[] = [];\n\tlet close_curly_paren: number[] = [];\n\tlet open_paren_curly:\
    \ number[] = [];\n\tlet close_paren_curly: number[] = [];\n\tlet open_paren_curly_brackets:\
    \ number[] = [];\n\tlet close_paren_curly_brackets: number[] = [];\n\tlet open_paren_curly_paren:\
    \ number[] = [];\n\tlet close_paren_curly_paren: number[] = [];\n\tlet open_curly_paren_brackets:\
    \ number[] = [];\n\tlet close_curly_paren_brackets: number[] = [];\n\tlet open_paren_curly_paren_brackets:\
    \ number[] = [];\n\tlet close_paren_curly_paren_brackets: number[] = [];\n\tlet\
    \ open_curly_brackets_brackets: number[] = [];\n\tlet close_curly_brackets_brackets:\
    \ number[] = [];\n\tlet open_paren_brackets_brackets: number[] = [];\n\tlet close_paren_brackets_brackets:\
    \ number[] = [];\n\tlet open_paren_brackets_brackets_brackets: number[] = [];\n\
    \tlet close_paren_brackets_brackets_brackets: number[] = [];\n\tlet open_paren_curly_brackets_brackets_brackets:\
    \ number[] = [];\n\tlet close_paren_curly_brackets_brackets_brackets: number[]\
    \ = [];\n\tlet open_paren_curly_brackets_brackets_brackets_brackets: number[]\
    \ = [];\n\tlet close_paren_curly_brackets_brackets_brackets_brackets: number[]\
    \ = [];\n\tlet open_paren_curly_brackets_brackets_brackets_brackets_brackets:\
    \ number[] = [];\n\tlet close_paren_curly_brackets_brackets_brackets_brackets_brackets:\
    \ number[] = [];\n\tlet open_paren_curly_brackets_brackets_brackets_brackets_brackets_brackets:\
    \ number[] = [];\n\tlet close_paren_curly_brackets_brackets_brackets_brackets_brackets_bracket",
  "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] == '[') {\n            stack.push('[');\n        } else\
    \ if (string[i] == ']') {\n            if (stack.length == 0) {\n            \
    \    return false;\n            }\n            stack.pop();\n        } else if\
    \ (stack.length != 0) {\n            stack.push(string[i]);\n        }\n    }\n\
    \    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n\
    }\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n  \
    \      } else if (string[i] === ']') {\n            if (stack.length === 0) {\n\
    \                return false;\n            }\n            stack.pop();\n    \
    \    }\n    }\n    return stack.length === 0;\n}\n", "  let stack: string[] =\
    \ [];\n  let open_brackets: number[] = [];\n  let close_brackets: number[] = [];\n\
    \  let open_brackets_stack: number[] = [];\n  let close_brackets_stack: number[]\
    \ = [];\n  let open_brackets_stack_index: number = 0;\n  let close_brackets_stack_index:\
    \ number = 0;\n  let open_brackets_stack_string: string = \"\";\n  let close_brackets_stack_string:\
    \ string = \"\";\n  let open_brackets_stack_string_index: number = 0;\n  let close_brackets_stack_string_index:\
    \ number = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]\
    \ === \"[\") {\n      open_brackets_stack.push(open_brackets_stack_index);\n \
    \     open_brackets_stack_string = open_brackets_stack_string.concat(string[i]);\n\
    \      open_brackets_stack_string_index++;\n    } else if (string[i] === \"]\"\
    ) {\n      close_brackets_stack.push(close_brackets_stack_index);\n      close_brackets_stack_string\
    \ = close_brackets_stack_string.concat(string[i]);\n      close_brackets_stack_string_index++;\n\
    \    } else if (string[i] === \"[\") {\n      open_brackets_stack_string = open_brackets_stack_string.concat(string[i]);\n\
    \      open_brackets_stack_string_index++;\n    } else if (string[i] === \"]\"\
    ) {\n      close_brackets_stack_string = close_brackets_stack_string.concat(string[i]);\n\
    \      close_brackets_stack_string_index++;\n    }\n    if (open_brackets_stack_string_index\
    \ === open_brackets_stack.length && close_brackets_stack_string_index === close_brackets_stack.length)\
    \ {\n      if (open_brackets_stack_string_index === close_brackets_stack_string_index)\
    \ {\n        if (open_brackets_stack[open_brackets_stack_index] === close_brackets_stack[close_brackets_stack_index])\
    \ {\n          open_brackets_stack_index++;\n          close_brackets_stack_index++;\n\
    \        } else {\n          return false;\n        }\n      } else {\n      \
    \  return false;\n      }\n    }\n  }\n  return true;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            if (stack.length !== 0) {\n                let\
    \ open = stack.pop();\n                if (open !== '[') {\n                 \
    \   return false;\n                }\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    const stack: string[] = [];\n    for (let i\
    \ = 0; i < string.length; i++) {\n        const char = string[i];\n        if\
    \ (char === '[') {\n            stack.push(char);\n        } else if (char ===\
    \ ']') {\n            if (stack.length === 0) {\n                return false;\n\
    \            }\n            const top = stack.pop();\n            if (top !==\
    \ '[' || stack.length === 0) {\n                return false;\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "\tlet stack: string[]\
    \ = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[]\
    \ = [];\n\tlet opening_curly_brackets: number[] = [];\n\tlet closing_curly_brackets:\
    \ number[] = [];\n\tlet opening_square_brackets: number[] = [];\n\tlet closing_square_brackets:\
    \ number[] = [];\n\tlet opening_curly_brackets_stack: string[] = [];\n\tlet closing_curly_brackets_stack:\
    \ string[] = [];\n\tlet opening_square_brackets_stack: string[] = [];\n\tlet closing_square_brackets_stack:\
    \ string[] = [];\n\tlet opening_curly_brackets_stack_string: string[] = [];\n\t\
    let closing_curly_brackets_stack_string: string[] = [];\n\tlet opening_square_brackets_stack_string:\
    \ string[] = [];\n\tlet closing_square_brackets_stack_string: string[] = [];\n\
    \tlet opening_curly_brackets_stack_string_string: string[] = [];\n\tlet closing_curly_brackets_stack_string_string:\
    \ string[] = [];\n\tlet opening_square_brackets_stack_string_string: string[]\
    \ = [];\n\tlet closing_square_brackets_stack_string_string: string[] = [];\n\t\
    let opening_curly_brackets_stack_string_string_string: string[] = [];\n\tlet closing_curly_brackets_stack_string_string_string:\
    \ string[] = [];\n\tlet opening_square_brackets_stack_string_string_string: string[]\
    \ = [];\n\tlet closing_square_brackets_stack_string_string_string: string[] =\
    \ [];\n\tlet opening_curly_brackets_stack_string_string_string_string: string[]\
    \ = [];\n\tlet closing_curly_brackets_stack_string_string_string_string: string[]\
    \ = [];\n\tlet opening_square_brackets_stack_string_string_string_string: string[]\
    \ = [];\n\tlet closing_square_brackets_stack_string_string_string_string: string[]\
    \ = [];\n\tlet opening_curly_brackets_stack_string_string_string_string: string[]\
    \ = [];\n\tlet closing_curly_brackets_stack_string_string_string_string: string[]\
    \ = [];\n\tlet opening_square_brackets_stack_string_string_string_string: string[]\
    \ = [];\n\tlet closing_square_brackets_stack_string_string_string_string: string[]\
    \ = [];\n\tlet opening_curly_brackets_stack_string_string_string_string: string[]\
    \ = [];\n\tlet closing_curly_brackets_stack_string_string_string_string: string[]\
    \ = [];\n\tlet opening_square_brackets_stack_string_string_string_string: string[]\
    \ = [];\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
