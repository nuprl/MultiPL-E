language: ts
name: HumanEval_31_is_prime
results:
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0)\
    \ {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n\
    \ % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6q98_ktu.js:50:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6q98_ktu.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  var sqrt_n = Math.sqrt(n);\n\
    \  for (var i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  var sqrt_n = Math.sqrt(n);\n\
    \  for (var i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    if (n % 3 === 0) {\n        return true;\n    }\n    const m = Math.sqrt(n);\n\
    \    for (let i = 3; i <= m; i += 2) {\n        if (n % i === 0) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    var sqrt_n = Math.sqrt(n);\n    for (var i = 3; i <= sqrt_n; i +=\
    \ 2) {\n        if (n % i === 0) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    if (n % 3 === 0) {\n        return true;\n    }\n    let i = 5 - Math.floor(Math.sqrt(n));\n\
    \    for (let j = 2; j < i; j++) {\n        if (n % j === 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4vmse7zb.js:50:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4vmse7zb.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0)\
    \ {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if\
    \ (n % 7 === 0) {\n    return true;\n  }\n  if (n % 11 === 0) {\n    return false;\n\
    \  }\n  if (n % 13 === 0) {\n    return true;\n  }\n  if (n % 17 === 0) {\n  \
    \  return false;\n  }\n  if (n % 19 === 0) {\n    return true;\n  }\n  if (n %\
    \ 23 === 0) {\n    return false;\n  }\n  if (n % 29 === 0) {\n    return true;\n\
    \  }\n  if (n % 37 === 0) {\n    return false;\n  }\n  if (n % 43 === 0) {\n \
    \   return true;\n  }\n  if (n % 53 === 0) {\n    return false;\n  }\n  if (n\
    \ % 63 === 0) {\n    return true;\n  }\n  if (n % 73 === 0) {\n    return false;\n\
    \  }\n  if (n % 83 === 0) {\n    return true;\n  }\n  if (n % 93 === 0) {\n  \
    \  return false;\n  }\n  if (n % 103 === 0) {\n    return true;\n  }\n  if (n\
    \ % 113 === 0) {\n    return false;\n  }\n  if (n % 123 === 0) {\n    return true;\n\
    \  }\n  if (n % 133 === 0) {\n    return true;\n  }\n  if (n % 143 === 0) {\n\
    \    return false;\n  }\n  if (n % 153 === 0) {\n    return true;\n  }\n  if (n\
    \ % 163 === 0) {\n    return false;\n  }\n  if (n % 173 === 0) {\n    return true;\n\
    \  }\n  if (n % 183 === 0) {\n    return false;\n  }\n  if (n % 193 === 0) {\n\
    \    return true;\n  }\n  if (n % 203 === 0) {\n    return false;\n  }\n  if (n\
    \ % 213 === 0) {\n    return true;\n  }\n  if (n % 223 === 0) {\n    return false;\n\
    \  }\n  if (n % 233 === 0) {\n    return true;\n  }\n  if (n % 243 === 0) {\n\
    \    return false;\n  }\n  if (n % 253 === 0) {\n    return true;\n  }\n  if (n\
    \ % 263 === 0) {\n    return false;\n  }\n  if (n % 273 === 0) {\n    return true;\n\
    \  }\n  if (n % 283 === 0) {\n    return false;\n  }\n  if (n % 293 === 0) {\n\
    \    return true;\n  }\n  if (n % 303 === 0) {\n    return false;\n  }\n  if (n\
    \ % 313 === 0) {\n    return true;\n  }\n  if (n % 323 === 0) {\n    return false;\n\
    \  }\n  if (n % 333 === 0) {\n    return true;\n  }\n  if (n % 343 === 0) {\n\
    \    return false;\n  }\n  if (n % 353 === 0) {\n    return true;\n  }\n  if (n\
    \ % 363 === 0) {\n    return false;\n  }\n  if (n % 373 === 0) {\n    return true;\n\
    \  }\n  if (n % 383 === 0) {\n    return false;\n  }\n  if (n % 393 === 0) {\n\
    \    return true;\n  }\n  if (n % 403 === 0) {\n    return false;\n  }\n  if (n\
    \ % 413 === 0) {\n    return true;\n  }\n  if (n % 423 === 0) {\n    return false;\n\
    \  }\n  if (n % 433 === 0) {\n    return true;\n  }\n  if (n % \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvate0xyn.ts(177,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpvate0xyn.ts(198,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738180
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.floor(Math.sqrt(n));\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    if (n % 3 === 0) {\n        return true;\n    }\n    let i = 5\n \
    \   while (i < n / 3) {\n        if (n % i === 0) {\n            return false;\n\
    \        }\n        i += 6\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_fmxpui3.js:53:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_fmxpui3.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return\
    \ true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt_n\
    \ = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i ===\
    \ 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return\
    \ true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt_n\
    \ = Math.sqrt(n);\n\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i ===\
    \ 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792783
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0)\
    \ {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if\
    \ (n % 7 === 0) {\n    return true;\n  }\n  if (n % 11 === 0 && n % 13 === 0)\
    \ {\n    return true;\n  }\n  if (n % 17 === 0 && n % 19 === 0) {\n    return\
    \ true;\n  }\n  if (n % 23 === 0) {\n    return true;\n  }\n  if (n % 29 === 0\
    \ && n % 31 === 0) {\n    return true;\n  }\n  if (n % 37 === 0) {\n    return\
    \ true;\n  }\n  if (n % 43 === 0) {\n    return true;\n  }\n  if (n % 49 === 0\
    \ && n % 71 === 0) {\n    return true;\n  }\n  if (n % 97 === 0) {\n    return\
    \ true;\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpp3pv36sr.js:65:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp3pv36sr.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792783
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  // Trial division algorithm\
    \ to determine if n is prime.\n  // https://en.wikipedia.org/wiki/Trial_division\n\
    \  // If n is less than 2, then return false immediately.\n  if (n < 2) {\n  \
    \  return false;\n  }\n\n  // Trial division algorithm to determine if n is prime.\n\
    \  // https://en.wikipedia.org/wiki/Trial_division\n  // If n is less than 2,\
    \ then return false immediately.\n  if (n < 2) {\n    return false;\n  }\n\n \
    \ // Trial division algorithm to determine if n is prime.\n  // https://en.wikipedia.org/wiki/Trial_division\n\
    \  // If n is less than 2, then return false immediately.\n  if (n < 2) {\n  \
    \  return false;\n  }\n\n  // Trial division algorithm to determine if n is prime.\n\
    \  // https://en.wikipedia.org/wiki/Trial_division\n  // If n is less than 2,\
    \ then return false immediately.\n  if (n < 2) {\n    return false;\n  }\n\n \
    \ // Trial division algorithm to determine if n is prime.\n  // https://en.wikipedia.org/wiki/Trial_division\n\
    \  // If n is less than 2, then return false immediately.\n  if (n < 2) {\n  \
    \  return false;\n  }\n\n  // Trial division algorithm to determine if n is prime.\n\
    \  // https://en.wikipedia.org/wiki/Trial_division\n  // If n is less than 2,\
    \ then return false immediately.\n  if (n < 2) {\n    return false;\n  }\n\n \
    \ // Trial division algorithm to determine if n is prime.\n  // https://en.wikipedia.org/wiki/Trial_division\n\
    \  // If n is less than 2, then return false immediately.\n  if (n < 2) {\n  \
    \  return false;\n  }\n\n  // Trial division algorithm to determine if n is prime.\n\
    \  // https://en.wikipedia.org/wiki/Trial_division\n  // If n is less than 2,\
    \ then return false immediately.\n  if (n < 2) {\n    return false;\n  }\n\n \
    \ // Trial division algorithm to determine if n is prime.\n  // https://en.wikipedia.org/wiki/Trial_division\n\
    \  // If n is less than 2, then return false immediately.\n  if (n < 2) {\n  \
    \  return false;\n  }\n\n  // Trial division algorithm to determine if n is prime.\n\
    \  // https://en.wikipedia.org/wiki/Trial_division\n  // If n is less than 2,\
    \ then return false immediately.\n  if (n < 2) {\n    return false;\n  }\n\n \
    \ // Trial division algorithm to determine if n is prime.\n  // https://en.wikipedia.org/wiki/Trial_division\n\
    \  // If n is less than 2, then return false immediately.\n  if (n < 2) {\n  \
    \  return false;\n  }\n\n  // Trial division algorithm to determine if n is prime.\n\
    \  // https://en.wikipedia.org/wiki/Trial_division\n  // If n is less than 2,\
    \ then return false immediately.\n  if (n < 2) {\n    return false;\n  }\n\n \
    \ // Trial division algorithm to determine if n is prime.\n  // https://en.wikipedia.org/wiki/Trial_division\n\
    \  // If n is \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps0qlw0qg.ts(129,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659792782
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0)\
    \ {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n\
    \ % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6q98_ktu.js:50:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6q98_ktu.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.floor(Math.sqrt(n));\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    if (n % 3 === 0) {\n        return true;\n    }\n    let i = 5\n \
    \   while (i < n / 3) {\n        if (n % i === 0) {\n            return false;\n\
    \        }\n        i += 6\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_fmxpui3.js:53:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_fmxpui3.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.floor(Math.sqrt(n));\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    var sqrt_n = Math.sqrt(n);\n    for (var i = 3; i <= sqrt_n; i +=\
    \ 2) {\n        if (n % i === 0) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n\n  return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjxljuou8.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjxljuou8.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792783
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n  if (n < 4) return true;\n  if (n %\
    \ 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  for (var i = 5; (i\
    \ * i) <= n; i += 6) {\n    if (n % i == 0) return false;\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9569lcum.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9569lcum.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return\
    \ true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt_n\
    \ = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i ===\
    \ 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.floor(Math.sqrt(n));\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n  if (n < 4) return true;\n  if (n %\
    \ 2 == 0) return false;\n  if (n % 3 == 0) return true;\n  if (n % 5 == 0) return\
    \ false;\n  if (n % 7 == 0) return true;\n  for (let i = 8; i * i <= n; i += 7)\
    \ {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpp50lfux4.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp50lfux4.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792783
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.floor(Math.sqrt(n));\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    const sqrt_n = Math.sqrt(n);\n    for (let i = 3; i <= sqrt_n; i +=\
    \ 2) {\n        if (n % i === 0) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792783
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    if (n % 3 === 0) {\n        return true;\n    }\n    let i = 5 - Math.floor(Math.sqrt(n));\n\
    \    for (let j = 0; j < i; j++) {\n        if (n % i === 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdorrf8p5.js:49:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdorrf8p5.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  // Trial division algorithm\
    \ to determine if n is prime.\n  // https://en.wikipedia.org/wiki/Trial_division\n\
    \  // If n is less than 2, then n is certainly not prime.\n  if (n < 3) {\n  \
    \  return false;\n  }\n\n  // Trial division algorithm to determine if n is prime.\n\
    \  // https://en.wikipedia.org/wiki/Trial_division\n  // If n is less than 3,\
    \ then n is certainly not prime.\n  if (n % 2 === 0) {\n    return false;\n  }\n\
    \n  // If n is greater than 3, then n is prime if n is odd and prime if n is even.\n\
    \  // If n is greater than 3, then n is prime if n is odd and prime if n is even.\n\
    \  // If n is greater than 3, then n is prime if n is odd and prime if n is even.\n\
    \  // If n is greater than 3, then n is prime if n is odd and prime if n is even.\n\
    \  // If n is greater than 3, then n is prime if n is odd and prime if n is even.\n\
    \  // If n is greater than 3, then n is prime if n is odd and prime if n is even.\n\
    \  // If n is greater than 3, then n is prime if n is odd and prime if n is even.\n\
    \  // If n is greater than 3, then n is prime if n is odd and prime if n is even.\n\
    \  // If n is greater than 3, then n is prime if n is odd and prime if n is even.\n\
    \  // If n is greater than 3, then n is prime if n is odd and prime if n is even.\n\
    \  // If n is greater than 3, then n is prime if n is odd and prime if n is even.\n\
    \  // If n is greater than 3, then n is prime if n is odd and prime if n is even.\n\
    \  // If n is greater than 3, then n is prime if n is odd and prime if n is even.\n\
    \  // If n is greater than 3, then n is prime if n is odd and prime if n is even.\n\
    \  // If n is greater than 3, then n is prime if n is odd and prime if n is even.\n\
    \  // If n is greater than 3, then n is prime if n is odd and prime if n is even.\n\
    \  // If n is greater than 3, then n is prime if n is odd and prime if n is even.\n\
    \  // If n is greater than 3, then n is prime if n is odd and prime if n is even.\n\
    \  // If n is greater than 3, then n is prime if n is odd and prime if n is even\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpymbb9gax.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.floor(Math.sqrt(n));\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  var sqrt_n = Math.sqrt(n);\n\
    \  for (var i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  var sqrt_n = Math.sqrt(n);\n\
    \  for (var i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  for (let i = 2; i <=\
    \ Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n \
    \ }\n\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792783
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    if (n % 3 === 0) {\n        return true;\n    }\n    if (n % 5 ===\
    \ 0) {\n        return false;\n    }\n    const i = Math.floor(Math.sqrt(n));\n\
    \    for (let k = i; k >= 2; k--) {\n        if (n % k === 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpb9ch2zci.js:50:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb9ch2zci.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792783
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  // Trial division algorithm\
    \ from https://en.wikipedia.org/wiki/Primality_test#Trial_division_of_a_number\n\
    \  // Trial division algorithm is very fast and reliable for numbers in the range\
    \ of 10^5 to 10^15.\n  // It will work for all prime numbers up to 10^15.\n  //\
    \ For numbers less than 10^5, the best we can do is test whether a number is prime\
    \ by dividing by all primes less than 10^5.\n  // For numbers less than 10^5,\
    \ the best we can do is test whether a number is prime by dividing by all primes\
    \ less than 10^5.\n  // For numbers less than 10^5, the best we can do is test\
    \ whether a number is prime by dividing by all primes less than 10^5.\n  // For\
    \ numbers less than 10^5, the best we can do is test whether a number is prime\
    \ by dividing by all primes less than 10^5.\n  // For numbers less than 10^5,\
    \ the best we can do is test whether a number is prime by dividing by all primes\
    \ less than 10^5.\n  // For numbers less than 10^5, the best we can do is test\
    \ whether a number is prime by dividing by all primes less than 10^5.\n  // For\
    \ numbers less than 10^5, the best we can do is test whether a number is prime\
    \ by dividing by all primes less than 10^5.\n  // For numbers less than 10^5,\
    \ the best we can do is test whether a number is prime by dividing by all primes\
    \ less than 10^5.\n  // For numbers less than 10^5, the best we can do is test\
    \ whether a number is prime by dividing by all primes less than 10^5.\n  // For\
    \ numbers less than 10^5, the best we can do is test whether a number is prime\
    \ by dividing by all primes less than 10^5.\n  // For numbers less than 10^5,\
    \ the best we can do is test whether a number is prime by dividing by all primes\
    \ less than 10^5.\n  // For numbers less than 10^5, the best we can do is test\
    \ whether a number is prime by dividing by all primes less than 10^5.\n  // For\
    \ numbers less than 10^5, the best we can do is test whether a number is prime\
    \ by dividing by all primes less than 10^5.\n  // For numbers less than 10^5,\
    \ the best we can do is test whether a number is prime by dividing by all primes\
    \ less than 10^5.\n  // For numbers less than 10^5, the best we can do is test\
    \ whether a number is prime by dividing by all primes less than 10^5.\n  // For\
    \ numbers less than 10^5, the best we can do is test whether a number is prime\
    \ by dividing by all primes less than 10^5.\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_8c5ad8a.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  var sqrt_n = Math.sqrt(n);\n\
    \  for (var i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  var sqrt_n = Math.sqrt(n);\n\
    \  for (var i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n  if (n < 3) return true;\n  if (n %\
    \ 2 == 0) return false;\n  if (n % 3 == 0) return true;\n  for (let i = 5; i *\
    \ i <= n; i += 6) {\n    if (n % i == 0 || n % (i + 2) == 0) return false;\n \
    \ }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  const sqrt: number =\
    \ Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0)\
    \ {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9iczj1y4.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9iczj1y4.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792783
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return\
    \ true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt_n\
    \ = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i ===\
    \ 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    if (n % 3 === 0) {\n        return true;\n    }\n    let i = 5 - Math.floor(Math.sqrt(n));\n\
    \    for (let j = 2; j < i; j++) {\n        if (n % j === 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4vmse7zb.js:50:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4vmse7zb.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n\n    const sqrt:\
    \ number = Math.sqrt(n);\n    for (let i = 2; i <= sqrt; i++) {\n        if (n\
    \ % i === 0) {\n            return false;\n        }\n    }\n\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792783
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return\
    \ true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt_n\
    \ = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i ===\
    \ 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    if (n % 3 === 0) {\n        return true;\n    }\n    let i = 5\n \
    \   while (i < n / 3) {\n        if (n % i === 0) {\n            return false;\n\
    \        }\n        i += 6\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_fmxpui3.js:53:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_fmxpui3.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792782
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n\
    \ % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0)\
    \ return false;\n  if (n % 7 === 0) return true;\n  if (n % 11 !== 0) return false;\n\
    \  if (n % 13 !== 0) return true;\n  if (n % 17 === 0) return false;\n  if (n\
    \ % 19 === 0) return true;\n  if (n % 23 !== 0) return false;\n  if (n % 25 !==\
    \ 0) return true;\n  if (n % 31 !== 0) return false;\n  if (n % 37 !== 0) return\
    \ true;\n  if (n % 39 !== 0) return false;\n  if (n % 43 !== 0) return true;\n\
    \  if (n % 47 !== 0) return false;\n  if (n % 51 !== 0) return true;\n  if (n\
    \ % 55 !== 0) return false;\n  if (n % 59 !== 0) return true;\n  if (n % 63 !==\
    \ 0) return false;\n  if (n % 67 !== 0) return true;\n  if (n % 71 !== 0) return\
    \ false;\n  if (n % 73 !== 0) return true;\n  if (n % 79 !== 0) return false;\n\
    \  if (n % 83 !== 0) return true;\n  if (n % 87 !== 0) return false;\n  if (n\
    \ % 97 !== 0) return true;\n  if (n % 101 !== 0) return false;\n  if (n % 103\
    \ !== 0) return true;\n  if (n % 105 !== 0) return false;\n  if (n % 107 !== 0)\
    \ return true;\n  if (n % 109 !== 0) return false;\n  if (n % 113 !== 0) return\
    \ true;\n  if (n % 117 !== 0) return false;\n  if (n % 121 !== 0) return true;\n\
    \  if (n % 127 !== 0) return false;\n  if (n % 131 !== 0) return true;\n  if (n\
    \ % 137 !== 0) return false;\n  if (n % 143 !== 0) return true;\n  if (n % 147\
    \ !== 0) return false;\n  if (n % 151 !== 0) return true;\n  if (n % 157 !== 0)\
    \ return false;\n  if (n % 163 !== 0) return true;\n  if (n % 167 !== 0) return\
    \ false;\n  if (n % 173 !== 0) return true;\n  if (n % 179 !== 0) return false;\n\
    \  if (n % 183 !== 0) return true;\n  if (n % 189 !== 0) return false;\n  if (n\
    \ % 193 !== 0) return true;\n  if (n % 197 !== 0) return false;\n  if (n % 201\
    \ !== 0) return true;\n  if (n % 207 !== 0) return false;\n  if (n % 211 !== 0)\
    \ return true;\n  if (n % 217 !== 0) return false;\n  if (n % 223 !== 0) return\
    \ true;\n  if (n % 227 !== 0) return false;\n  if (n % 235 !== 0) return true;\n\
    \  if (n % 239 !== 0) return false;\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl_qo95cy.ts(97,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return\
    \ true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt_n\
    \ = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i ===\
    \ 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  var sqrt_n = Math.sqrt(n);\n\
    \  for (var i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    const sqrt_n = Math.sqrt(n);\n    for (let i = 3; i <= sqrt_n; i +=\
    \ 2) {\n        if (n % i === 0) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792783
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  var sqrt_n = Math.sqrt(n);\n\
    \  for (var i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    if (n % 3 === 0) {\n        return true;\n    }\n    let i = 5; //\
    \ i \u2261 2\n    while (i > 1) {\n        if (n % i === 0) {\n            return\
    \ false;\n        }\n        i += 2;\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqduzy28g.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqduzy28g.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792783
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return\
    \ true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt_n\
    \ = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i ===\
    \ 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.floor(Math.sqrt(n));\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  for (let i = 2; i <=\
    \ Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n \
    \ }\n\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792783
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  var sqrt_n = Math.sqrt(n);\n\
    \  for (var i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    if (n % 3 === 0) {\n        return true;\n    }\n    const i = 5 -\
    \ Math.sqrt(n).toFixed(1);\n    for (let j = 2; j < i; j++) {\n        if (n %\
    \ j === 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp81b_yfj_.ts(29,19): error TS2363: The right-hand
    side of an arithmetic operation must be of type ''any'', ''number'', ''bigint''
    or an enum type.

    '
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  var sqrt_n = Math.sqrt(n);\n\
    \  for (var i = 0; i < primes.length; i++) {\n    var p = primes[i];\n    if (p\
    \ > sqrt_n) {\n      break;\n    }\n    if (n % p === 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdwi8_xuc.ts(27,23): error TS2304: Cannot find name
    ''primes''.

    ../../../../../tmp/tmpdwi8_xuc.ts(28,13): error TS2304: Cannot find name ''primes''.

    '
  timestamp: 1659792783
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    let i = Math.floor(Math.sqrt(n));\n    for (let x = 2; x < i; x++)\
    \ {\n        if (n % x === 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792783
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  var sqrt_n = Math.sqrt(n);\n\
    \  for (var i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  var sqrt_n = Math.sqrt(n);\n\
    \  for (var i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0)\
    \ {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if\
    \ (n % 7 === 0) {\n    return true;\n  }\n  if (n % 11 === 0 && n % 13 === 0 &&\
    \ n % 17 === 0 && n % 19 === 0 && n % 23 === 0 && n % 29 === 0 && n % 31 === 0)\
    \ {\n    return true;\n  }\n  if (n % 13 === 0 && n % 17 === 0 && n % 19 === 0\
    \ && n % 23 === 0 && n % 29 === 0 && n % 31 === 0) {\n    return false;\n  }\n\
    \  if (n % 17 === 0 && n % 19 === 0 && n % 23 === 0 && n % 29 === 0 && n % 31\
    \ === 0) {\n    return true;\n  }\n  if (n % 19 === 0 && n % 23 === 0 && n % 29\
    \ === 0 && n % 31 === 0) {\n    return false;\n  }\n  if (n % 23 === 0 && n %\
    \ 29 === 0 && n % 31 === 0) {\n    return true;\n  }\n  if (n % 29 === 0 && n\
    \ % 31 === 0) {\n    return false;\n  }\n  if (n % 31 === 0) {\n    return true;\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfdvtx34y.js:62:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfdvtx34y.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792784
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.floor(Math.sqrt(n));\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    if (n % 3 === 0) {\n        return true;\n    }\n    let i = 5 - Math.floor(Math.sqrt(n));\n\
    \    for (let j = 2; j < i; j++) {\n        if (n % j === 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4vmse7zb.js:50:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4vmse7zb.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    let i = Math.floor(Math.sqrt(n));\n    for (let x = 2; x < i; x++)\
    \ {\n        if (n % x === 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792783
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0)\
    \ {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if\
    \ (n % 7 === 0) {\n    return true;\n  }\n  if (n % 11 === 0) {\n    return false;\n\
    \  }\n  if (n % 13 === 0) {\n    return true;\n  }\n  if (n % 17 === 0) {\n  \
    \  return false;\n  }\n  if (n % 19 === 0) {\n    return true;\n  }\n  if (n %\
    \ 23 === 0) {\n    return false;\n  }\n  if (n % 29 === 0) {\n    return true;\n\
    \  }\n  if (n % 31 === 0) {\n    return false;\n  }\n  if (n % 37 === 0) {\n \
    \   return true;\n  }\n  if (n % 43 === 0) {\n    return false;\n  }\n  if (n\
    \ % 53 === 0) {\n    return true;\n  }\n  if (n % 63 === 0) {\n    return true;\n\
    \  }\n  if (n % 73 === 0) {\n    return false;\n  }\n  if (n % 83 === 0) {\n \
    \   return true;\n  }\n  if (n % 93 === 0) {\n    return false;\n  }\n  if (n\
    \ % 103 === 0) {\n    return true;\n  }\n  if (n % 113 === 0) {\n    return false;\n\
    \  }\n  if (n % 123 === 0) {\n    return true;\n  }\n  if (n % 133 === 0) {\n\
    \    return true;\n  }\n  if (n % 143 === 0) {\n    return false;\n  }\n  if (n\
    \ % 153 === 0) {\n    return true;\n  }\n  if (n % 163 === 0) {\n    return false;\n\
    \  }\n  if (n % 173 === 0) {\n    return true;\n  }\n  if (n % 183 === 0) {\n\
    \    return false;\n  }\n  if (n % 193 === 0) {\n    return true;\n  }\n  if (n\
    \ % 203 === 0) {\n    return false;\n  }\n  if (n % 213 === 0) {\n    return true;\n\
    \  }\n  if (n % 223 === 0) {\n    return false;\n  }\n  if (n % 233 === 0) {\n\
    \    return true;\n  }\n  if (n % 243 === 0) {\n    return false;\n  }\n  if (n\
    \ % 253 === 0) {\n    return true;\n  }\n  if (n % 263 === 0) {\n    return false;\n\
    \  }\n  if (n % 273 === 0) {\n    return true;\n  }\n  if (n % 283 === 0) {\n\
    \    return false;\n  }\n  if (n % 293 === 0) {\n    return true;\n  }\n  if (n\
    \ % 303 === 0) {\n    return false;\n  }\n  if (n % 313 === 0) {\n    return true;\n\
    \  }\n  if (n % 323 === 0) {\n    return false;\n  }\n  if (n % 333 === 0) {\n\
    \    return true;\n  }\n  if (n % 343 === 0) {\n    return false;\n  }\n  if (n\
    \ % 353 === 0) {\n    return true;\n  }\n  if (n % 363 === 0) {\n    return false;\n\
    \  }\n  if (n % 373 === 0) {\n    return true;\n  }\n  if (n % 383 === 0) {\n\
    \    return false;\n  }\n  if (n % 393 === 0) {\n    return true;\n  }\n  if (n\
    \ % 403 === 0) {\n    return false;\n  }\n  if (n % 413 === 0) {\n    return true;\n\
    \  }\n  if (n % 423 === 0) {\n    return false;\n  }\n  if (n % \ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuq_qbv8f.ts(177,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpuq_qbv8f.ts(198,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659792784
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    const sqrt_n = Math.sqrt(n);\n    for (let i = 3; i <= sqrt_n; i +=\
    \ 2) {\n        if (n % i === 0) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792783
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.floor(Math.sqrt(n));\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.floor(Math.sqrt(n));\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return\
    \ true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  let i = Math.floor(Math.sqrt(n));\n\
    \  for (let j = 2; j < i; j++) {\n    if (n % j === 0) {\n      return false;\n\
    \    }\n  }\n\n  return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792784
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  var sqrt_n = Math.sqrt(n);\n\
    \  for (var i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  // Trial division algorithm\
    \ from https://en.wikipedia.org/wiki/Primality_test#Trial_division_of_a_composite\n\
    \  // Test for divisibility by 2, 3, 5, 7, 11, and 13\n  if (n % 2 === 0 || n\
    \ % 3 === 0 || n % 5 === 0 || n % 7 === 0 || n % 11 === 0 || n % 13 === 0) {\n\
    \    return false;\n  }\n\n  // Test for divisibility by 5 and 11\n  if (n % 5\
    \ === 0 || n % 11 === 0) {\n    return false;\n  }\n\n  // If n is evenly divisible\
    \ by 5, then it can only be prime if its only divisor is 5.\n  if (n % 5 === 0)\
    \ {\n    return n % 11 === 0;\n  }\n\n  // If n is evenly divisible by 11, then\
    \ it can only be prime if its only divisor is 11.\n  if (n % 11 === 0) {\n   \
    \ return n % 13 === 0;\n  }\n\n  // If n is evenly divisible by 13, then it can\
    \ only be prime if its only divisor is 13.\n  if (n % 13 === 0) {\n    return\
    \ true;\n  }\n\n  // If n is divisible by 2, then n can only be prime if its only\
    \ divisor is 2.\n  if (n % 2 === 0) {\n    return n % 10 === 0;\n  }\n\n  // If\
    \ n is divisible by 3, then n can only be prime if its only divisor is 3.\n  if\
    \ (n % 3 === 0) {\n    return n % 9 === 0;\n  }\n\n  // If n is divisible by 5,\
    \ then n can only be prime if its only divisor is 5.\n  if (n % 5 === 0) {\n \
    \   return n % 8 === 0;\n  }\n\n  // If n is divisible by 7, then n can only be\
    \ prime if its only divisor is 7.\n  if (n % 7 === 0) {\n    return n % 6 ===\
    \ 0;\n  }\n\n  // If n is divisible by 11, then n can only be prime if its only\
    \ divisor is 11.\n  if (n % 11 === 0) {\n    return n % 12 === 0;\n  }\n\n  //\
    \ If n is divisible by 13, then n can only be prime if its only divisor is 13.\n\
    \  if (n % 13 === 0) {\n    return true;\n  }\n\n  // If n is divisible by 15,\
    \ then n can only be prime if its only divisor is 15.\n  if (n % 15 === 0) {\n\
    \    return n % 14 === 0;\n  }\n\n  // If n is divisible by 17, then n can only\
    \ be prime if its only divisor is 17.\n  if (n % 17 === 0) {\n    return n % 16\
    \ === 0;\n  }\n\n  // If n is divisible by 19, then n can only be prime if its\
    \ only divisor is 19.\n  if (n % 19 === 0) {\n    return n % 18 === 0;\n  }\n\n\
    \  // If n is divisible by 20, then n can only be prime if its only divisor is\
    \ 20.\n  if (n % \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3jnsoz05.ts(94,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmp3jnsoz05.ts(115,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659792784
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  // Trial division algorithm\
    \ to determine if n is prime.\n  // https://en.wikipedia.org/wiki/Trial_division\n\
    \  // If n is less than or equal to 2 then n is prime.\n  if (n <= 2) {\n    return\
    \ true;\n  }\n\n  // Check all the numbers from 2 to sqrt(n).\n  for (let i =\
    \ 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n\
    \    }\n  }\n\n  return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792784
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    if (n % 3 === 0) {\n        return true;\n    }\n    if (n % 5 ===\
    \ 0) {\n        return false;\n    }\n    if (n % 7 === 0) {\n        return true;\n\
    \    }\n    if (n % 11 === 0) {\n        return false;\n    }\n    if (n % 13\
    \ === 0) {\n        return true;\n    }\n    if (n % 17 === 0) {\n        return\
    \ false;\n    }\n    if (n % 19 === 0) {\n        return true;\n    }\n    if\
    \ (n % 23 === 0) {\n        return false;\n    }\n    if (n % 29 === 0) {\n  \
    \      return true;\n    }\n    if (n % 31 === 0) {\n        return false;\n \
    \   }\n    if (n % 37 === 0) {\n        return true;\n    }\n    if (n % 43 ===\
    \ 0) {\n        return false;\n    }\n    if (n % 53 === 0) {\n        return\
    \ true;\n    }\n    if (n % 63 === 0) {\n        return false;\n    }\n    if\
    \ (n % 73 === 0) {\n        return true;\n    }\n    if (n % 83 === 0) {\n   \
    \     return false;\n    }\n    if (n % 93 === 0) {\n        return true;\n  \
    \  }\n    if (n % 103 === 0) {\n        return false;\n    }\n    if (n % 113\
    \ === 0) {\n        return true;\n    }\n    if (n % 123 === 0) {\n        return\
    \ false;\n    }\n    if (n % 133 === 0) {\n        return true;\n    }\n    if\
    \ (n % 143 === 0) {\n        return false;\n    }\n    if (n % 153 === 0) {\n\
    \        return true;\n    }\n    if (n % 163 === 0) {\n        return false;\n\
    \    }\n    if (n % 173 === 0) {\n        return true;\n    }\n    if (n % 183\
    \ === 0) {\n        return false;\n    }\n    if (n % 193 === 0) {\n        return\
    \ true;\n    }\n    if (n % 203 === 0) {\n        return false;\n    }\n    if\
    \ (n % 213 === 0) {\n        return true;\n    }\n    if (n % 223 === 0) {\n \
    \       return false;\n    }\n    if (n % 233 === 0) {\n        return true;\n\
    \    }\n    if (n % 243 === 0) {\n        return false;\n    }\n    if (n % 253\
    \ === 0) {\n        return true;\n    }\n    if (n % 263 === 0) {\n        return\
    \ false;\n    }\n    if (n % 273 === 0) {\n        return true;\n    }\n    if\
    \ (n % 283 === 0) {\n        return false;\n    }\n    if (n % 293 === 0) {\n\
    \        return true;\n    }\n    if (n % 303 === 0) {\n        return false;\n\
    \    }\n    if (n % 313 === 0) {\n        return true;\n    }\n    if (n % 323\
    \ === 0) {\n        return false;\n    }\n    if (n % 333 === 0) {\n        return\
    \ true;\n    }\n    if (n % 343 === 0) {\n        return false;\n    }\n    if\
    \ (n % 353 === 0) {\n        return true;\n    }\n    if (n % 363 === 0) {\n \
    \       return false;\n    }\n    if (n % 373 === 0) {\n        return true;\n\
    \    }\n    if (n % 383 === 0) {\n        return false;\n    }\n    if (n % 393\
    \ === 0) {\n        return true;\n    }\n    if (n % 403 === 0) {\n        return\
    \ false;\n    }\n    if (n % 413 === 0) {\n        return true;\n    }\n    if\
    \ (n % 423 === 0) {\n        return false;\n    }\n    if (n % \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpykt9_03z.ts(177,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpykt9_03z.ts(198,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659792784
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0)\
    \ {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if\
    \ (n % 7 === 0) {\n    return true;\n  }\n  if (n % 11 === 0) {\n    return false;\n\
    \  }\n  if (n % 13 === 0) {\n    return true;\n  }\n  if (n % 17 === 0) {\n  \
    \  return false;\n  }\n  if (n % 19 === 0) {\n    return true;\n  }\n  if (n %\
    \ 23 === 0) {\n    return false;\n  }\n  if (n % 29 === 0) {\n    return true;\n\
    \  }\n  if (n % 37 === 0) {\n    return false;\n  }\n  if (n % 43 === 0) {\n \
    \   return true;\n  }\n  if (n % 53 === 0) {\n    return false;\n  }\n  if (n\
    \ % 63 === 0) {\n    return true;\n  }\n  if (n % 73 === 0) {\n    return false;\n\
    \  }\n  if (n % 83 === 0) {\n    return true;\n  }\n  if (n % 93 === 0) {\n  \
    \  return false;\n  }\n  if (n % 103 === 0) {\n    return true;\n  }\n  if (n\
    \ % 113 === 0) {\n    return false;\n  }\n  if (n % 123 === 0) {\n    return true;\n\
    \  }\n  if (n % 133 === 0) {\n    return true;\n  }\n  if (n % 143 === 0) {\n\
    \    return false;\n  }\n  if (n % 153 === 0) {\n    return true;\n  }\n  if (n\
    \ % 163 === 0) {\n    return false;\n  }\n  if (n % 173 === 0) {\n    return true;\n\
    \  }\n  if (n % 183 === 0) {\n    return false;\n  }\n  if (n % 193 === 0) {\n\
    \    return true;\n  }\n  if (n % 203 === 0) {\n    return false;\n  }\n  if (n\
    \ % 213 === 0) {\n    return true;\n  }\n  if (n % 223 === 0) {\n    return false;\n\
    \  }\n  if (n % 233 === 0) {\n    return true;\n  }\n  if (n % 243 === 0) {\n\
    \    return false;\n  }\n  if (n % 253 === 0) {\n    return true;\n  }\n  if (n\
    \ % 263 === 0) {\n    return false;\n  }\n  if (n % 273 === 0) {\n    return true;\n\
    \  }\n  if (n % 283 === 0) {\n    return false;\n  }\n  if (n % 293 === 0) {\n\
    \    return true;\n  }\n  if (n % 303 === 0) {\n    return false;\n  }\n  if (n\
    \ % 313 === 0) {\n    return true;\n  }\n  if (n % 323 === 0) {\n    return false;\n\
    \  }\n  if (n % 333 === 0) {\n    return true;\n  }\n  if (n % 343 === 0) {\n\
    \    return false;\n  }\n  if (n % 353 === 0) {\n    return true;\n  }\n  if (n\
    \ % 363 === 0) {\n    return false;\n  }\n  if (n % 373 === 0) {\n    return true;\n\
    \  }\n  if (n % 383 === 0) {\n    return false;\n  }\n  if (n % 393 === 0) {\n\
    \    return true;\n  }\n  if (n % 403 === 0) {\n    return false;\n  }\n  if (n\
    \ % 413 === 0) {\n    return true;\n  }\n  if (n % 423 === 0) {\n    return false;\n\
    \  }\n  if (n % 433 === 0) {\n    return true;\n  }\n  if (n % \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvate0xyn.ts(177,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpvate0xyn.ts(198,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738180
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  const sqrt: number =\
    \ Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n\
    \      return false;\n    }\n  }\n\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792784
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  if\
    \ (n % 3 == 0) return false;\n  if (n % 5 == 0) return false;\n  if (n % 7 ==\
    \ 0) return false;\n  if (n % 11 == 0) return false;\n  if (n % 13 == 0) return\
    \ false;\n  if (n % 17 == 0) return false;\n  if (n % 19 == 0) return false;\n\
    \  if (n % 23 == 0) return false;\n  if (n % 29 == 0) return false;\n  if (n %\
    \ 31 == 0) return false;\n  if (n % 37 == 0) return false;\n  if (n % 41 == 0)\
    \ return false;\n  if (n % 43 == 0) return false;\n  if (n % 47 == 0) return false;\n\
    \  if (n % 53 == 0) return false;\n  if (n % 59 == 0) return false;\n  if (n %\
    \ 61 == 0) return false;\n  if (n % 67 == 0) return false;\n  if (n % 71 == 0)\
    \ return false;\n  if (n % 73 == 0) return false;\n  if (n % 79 == 0) return false;\n\
    \  if (n % 83 == 0) return false;\n  if (n % 89 == 0) return false;\n  if (n %\
    \ 97 == 0) return false;\n  if (n % 101 == 0) return false;\n  if (n % 103 ==\
    \ 0) return false;\n  if (n % 107 == 0) return false;\n  if (n % 111 == 0) return\
    \ false;\n  if (n % 127 == 0) return false;\n  if (n % 131 == 0) return false;\n\
    \  if (n % 139 == 0) return false;\n  if (n % 147 == 0) return false;\n  if (n\
    \ % 151 == 0) return false;\n  if (n % 157 == 0) return false;\n  if (n % 163\
    \ == 0) return false;\n  if (n % 169 == 0) return false;\n  if (n % 177 == 0)\
    \ return false;\n  if (n % 181 == 0) return false;\n  if (n % 191 == 0) return\
    \ false;\n  if (n % 197 == 0) return false;\n  if (n % 211 == 0) return false;\n\
    \  if (n % 223 == 0) return false;\n  if (n % 229 == 0) return false;\n  if (n\
    \ % 233 == 0) return false;\n  if (n % 239 == 0) return false;\n  if (n % 241\
    \ == 0) return false;\n  if (n % 257 == 0) return false;\n  if (n % 261 == 0)\
    \ return false;\n  if (n % 263 == 0) return false;\n  if (n % 269 == 0) return\
    \ false;\n  if (n % 271 == 0) return false;\n  if (n % 277 == 0) return false;\n\
    \  if (n % 281 == 0) return false;\n  if (n % 283 == 0) return false;\n  if (n\
    \ % 293 == 0) return false;\n  if (n % 307 == 0) return false;\n  if (n % 311\
    \ == 0) return false;\n  if (n % 313 == 0) return false;\n  if (n % 315 == 0)\
    \ return false;\n  if (n % 317 == 0) return false;\n  if (n % 321 == 0) return\
    \ false;\n  if (n % 323 == 0) return false;\n  if (n % 329 == \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp64l7sk5p.ts(82,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmp64l7sk5p.ts(103,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659792784
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n  if (n < 4) return true;\n  if (n %\
    \ 2 == 0) return false;\n  if (n % 3 == 0) return true;\n  if (n % 5 == 0) return\
    \ false;\n  if (n % 7 == 0) return true;\n  for (let i = 8; i * i <= n; i += 7)\
    \ {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpp50lfux4.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp50lfux4.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792783
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  var sqrt_n = Math.sqrt(n);\n\
    \  for (var i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n  if (n < 4) return n === 2;\n  if (n\
    \ % 2 === 0) return false;\n  if (n % 4 === 0) return n === 2;\n  if (n % 6 ===\
    \ 0) return n === 3;\n  if (n % 8 === 0) return n === 5;\n  if (n % 10 === 0)\
    \ return n === 7;\n  if (n % 12 === 0) return n === 11;\n  if (n % 14 === 0) return\
    \ n === 15;\n  if (n % 16 === 0) return n === 17;\n  if (n % 18 === 0) return\
    \ n === 19;\n  if (n % 20 === 0) return n === 23;\n  if (n % 24 === 0) return\
    \ n === 27;\n  if (n % 26 === 0) return n === 31;\n  if (n % 28 === 0) return\
    \ n === 35;\n  if (n % 30 === 0) return n === 37;\n  if (n % 32 === 0) return\
    \ n === 39;\n  if (n % 34 === 0) return n === 41;\n  if (n % 36 === 0) return\
    \ n === 43;\n  if (n % 38 === 0) return n === 45;\n  if (n % 40 === 0) return\
    \ n === 47;\n  if (n % 42 === 0) return n === 49;\n  if (n % 44 === 0) return\
    \ n === 51;\n  if (n % 46 === 0) return n === 53;\n  if (n % 48 === 0) return\
    \ n === 55;\n  if (n % 50 === 0) return n === 57;\n  if (n % 52 === 0) return\
    \ n === 59;\n  if (n % 54 === 0) return n === 61;\n  if (n % 56 === 0) return\
    \ n === 63;\n  if (n % 58 === 0) return n === 65;\n  if (n % 60 === 0) return\
    \ n === 67;\n  if (n % 62 === 0) return n === 69;\n  if (n % 64 === 0) return\
    \ n === 71;\n  if (n % 66 === 0) return n === 73;\n  if (n % 68 === 0) return\
    \ n === 75;\n  if (n % 70 === 0) return n === 77;\n  if (n % 72 === 0) return\
    \ n === 79;\n  if (n % 76 === 0) return n === 81;\n  if (n % 78 === 0) return\
    \ n === 83;\n  if (n % 80 === 0) return n === 85;\n  if (n % 82 === 0) return\
    \ n === 87;\n  if (n % 84 === 0) return n === 89;\n  if (n % 86 === 0) return\
    \ n === 91;\n  if (n % 88 === 0) return n === 93;\n  if (n % 90 === 0) return\
    \ n === 95;\n  if (n % 92 === 0) return n === 97;\n  if (n % 96 === 0) return\
    \ n === 99;\n  if (n % 100 === 0) return n === 101;\n  if (n % 102 === 0) return\
    \ n === 103;\n  if (n % 104 === 0) return n === 105;\n  if (n % 106 === 0) return\
    \ n === 107;\n  if (n % 108 === 0) return n === 109;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplsajbka4.ts(90,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659792784
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  // Trial division algorithm\
    \ to find out if n is prime.\n  // https://en.wikipedia.org/wiki/Trial_division\n\
    \  // https://primes.utm.edu/notes/faq/probabilistic-prime-numbers/\n  // http://primes.utm.edu/notes/faq/probabilistic-prime-numbers/implementation-notes/\n\
    \  // http://stackoverflow.com/questions/15609/how-can-i-test-if-a-number-is-a-prime-number-in-javascript\n\
    \  var a = Math.floor(Math.sqrt(n));\n  var b = Math.ceil(Math.sqrt(n));\n  var\
    \ c = Math.floor(Math.sqrt(n));\n  var d = Math.ceil(Math.sqrt(n));\n\n  // If\
    \ n is less than or equal to 1, then n is certainly not prime.\n  if (n <= 1)\
    \ {\n    return false;\n  }\n\n  // If n is even and greater than 1, then n is\
    \ certainly prime.\n  if (n % 2 === 0) {\n    return true;\n  }\n\n  // If n is\
    \ odd, then n is not prime.\n  if (n % 2 === 1) {\n    return false;\n  }\n\n\
    \  // If n is greater than the square root of 2, then n is certainly prime.\n\
    \  if (n > 1 && n % Math.floor(n) === 0) {\n    return true;\n  }\n\n  // If n\
    \ is greater than the square root of 2, then n is not prime.\n  if (n > 1 && n\
    \ % Math.floor(n) === 0) {\n    return false;\n  }\n\n  // If n is divisible by\
    \ 2, then n is certainly prime.\n  if (n % 2 === 0) {\n    return true;\n  }\n\
    \n  // If n is divisible by 2, then n is not prime.\n  if (n % 2 === 0) {\n  \
    \  return false;\n  }\n\n  // If n is divisible by 3, then n is certainly prime.\n\
    \  if (n % 3 === 0) {\n    return true;\n  }\n\n  // If n is divisible by 3, then\
    \ n is not prime.\n  if (n % 3 === 0) {\n    return false;\n  }\n\n  // If n is\
    \ divisible by 5, then n is certainly prime.\n  if (n % 5 === 0) {\n    return\
    \ true;\n  }\n\n  // If n is divisible by 5, then n is not prime.\n  if (n % 5\
    \ === 0) {\n    return false;\n  }\n\n  // If n is divisible by 7, then n is certainly\
    \ prime.\n  if (n % 7 === 0) {\n    return true;\n  }\n\n  // If n is divisible\
    \ by 7, then n is not prime.\n  if (n % 7 === 0) {\n    return false;\n  }\n\n\
    \  // If n is divisible by 11, then n is certainly prime.\n  if (n % 11 === 0)\
    \ {\n    return true;\n  }\n\n  // If n is divisible by 11, then n is not prime.\n\
    \  if (n % 11 === 0) {\n    return false;\n  }\n\n  // If n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz0hnnnmr.ts(128,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659792784
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.floor(Math.sqrt(n));\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0)\
    \ {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n\
    \ % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6q98_ktu.js:50:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6q98_ktu.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  for (let i = 2; i < n;\
    \ i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792784
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    if (n % 3 === 0) {\n        return true;\n    }\n    let i = 5; //\
    \ Prime numbers are only tested up to sqrt of n\n    while (i < Math.sqrt(n))\
    \ {\n        if (n % i === 0) {\n            return false;\n        }\n      \
    \  i += 2;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792784
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.floor(Math.sqrt(n));\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    if (n % 3 === 0) {\n        return true;\n    }\n    let i = 5\n \
    \   while (i < n) {\n        if (n % i === 0) {\n            return false;\n \
    \       }\n        i += 6\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqrvam360.js:53:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqrvam360.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659792784
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    if (n % 3 === 0) {\n        return true;\n    }\n    let i = 5; //\
    \ i will be incremented by 2 each time a prime is found\n    while (i < n / 2)\
    \ {\n        if (n % i === 0) {\n            return false;\n        }\n      \
    \  i += 2;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792784
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    let sqrt_n = Math.sqrt(n);\n    for (let i = 3; i <= sqrt_n; i +=\
    \ 2) {\n        if (n % i === 0) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792784
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    let sqrt_n = Math.sqrt(n);\n    for (let i = 3; i <= sqrt_n; i +=\
    \ 2) {\n        if (n % i === 0) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792784
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    var sqrt_n = Math.sqrt(n);\n    for (var i = 3; i <= sqrt_n; i +=\
    \ 2) {\n        if (n % i === 0) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738181
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return\
    \ true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt_n\
    \ = Math.sqrt(n);\n  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i ===\
    \ 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792782
