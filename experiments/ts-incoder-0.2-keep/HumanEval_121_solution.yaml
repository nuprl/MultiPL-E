completions:
- "  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
  \ 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\n"
- "    let evenSum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
  \ % 2 === 0) {\n            evenSum += lst[i];\n        }\n    }\n    return evenSum;\n\
  }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>"
- "  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
  \ 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\n"
- "  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
  \ 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\n"
- "  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
  \ 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\n"
- "  const evens = lst.filter((val) => val % 2 === 0);\n  const odds = lst.filter((val)\
  \ => val % 2 !== 0);\n  return evens.reduce((acc, val) => acc + val, 0) + odds.reduce((acc,\
  \ val) => acc + val, 0);\n}\n"
- '  return lst.filter((x, i) => i % 2 === 1).reduce((a, b) => a + b, 0);

  }

  '
- '  return lst.filter((item, index) => index % 2 === 1).reduce((a, b) => a + b, 0);

  }

  '
- "  const evens = lst.filter((num) => num % 2 === 0);\n  const odds = lst.filter((num)\
  \ => num % 2 !== 0);\n  return evens.reduce((acc, val) => acc + val, 0) + odds.reduce((acc,\
  \ val) => acc + val, 0);\n}\n"
- "  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
  \ 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\n"
- "  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
  \ 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0)\
  \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"
- "  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
  \ 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\n"
- "  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
  \ 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\n"
- "  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
  \ 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\n"
- "  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
  \ 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\n"
- "  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
  \ 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0)\
  \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"
- "  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
  \ 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\n"
- '  return lst.filter((v, i) => i % 2 === 1).reduce((acc, v) => acc + v, 0);

  }

  '
language: ts
name: HumanEval_121_solution
prompt: '//Given a non-empty list of integers, return the sum of all of the odd elements
  that are in even positions.

  // Examples

  // solution([5, 8, 7, 1]) ==> 12

  // solution([3, 3, 3, 3, 3]) ==> 9

  // solution([30, 13, 24, 321]) ==>0

  function solution(lst: number[]): number {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
  \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
  \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
  \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
  \ 13, 2, 9]),3);\n}\n\ntest();"
