completions:
- "  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i]\
  \ ^ b[i]);\n  }\n  return result;\n}\n"
- '    return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- '  return binary_xor(binary_to_binary(a), binary_to_binary(b));

  }

  '
- "  return a.split('').map(function(c) {\n    return c ^ b.charAt(0);\n  }).join('');\n\
  }\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- "  let res = \"\";\n  for (let i = 0; i < a.length; i++) {\n    res += (parseInt(a[i],\
  \ 2) ^ parseInt(b[i], 2));\n  }\n  return res;\n}\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- '  return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i]\
  \ ^ b[i]);\n  }\n  return result;\n}\n"
- "  return a.split('').map(function(c) {\n    return c ^ b.charAt(0);\n  }).join('');\n\
  }\n"
- '  return a + string_xor(b, a);

  }

  '
- '    return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- "  var result = '';\n  var i = 0;\n  while (i < a.length && i < b.length) {\n  \
  \  var c = a.charCodeAt(i) & b.charCodeAt(i);\n    result += String.fromCharCode(c);\n\
  \    i++;\n  }\n  while (i < a.length) {\n    result += a.charAt(i);\n    i++;\n\
  \  }\n  while (i < b.length) {\n    result += b.charAt(i);\n    i++;\n  }\n  return\
  \ result;\n}\n"
- '  return a ^ b;

  }

  '
- '  return a ^ b;

  }

  '
- '    return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charCodeAt(i)\
  \ ^ b.charCodeAt(i);\n  }\n  return result;\n}\n"
language: ts
name: HumanEval_11_string_xor
prompt: '//Input are two strings a and b consisting only of 1s and 0s.

  // Perform binary XOR on these inputs and return result also as a string.

  // >>> string_xor(''010'', ''110'')

  // ''100''

  function string_xor(a: string, b: string): string {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
  , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
  \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
