completions:
- "  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i]\
  \ ^ b[i]);\n  }\n  return result;\n}\n"
- '    return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- '  return binary_xor(binary_to_binary(a), binary_to_binary(b));

  }

  '
- "  return a.split('').map(function(c) {\n    return c ^ b.charAt(0);\n  }).join('');\n\
  }\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- "  let res = \"\";\n  for (let i = 0; i < a.length; i++) {\n    res += (parseInt(a[i],\
  \ 2) ^ parseInt(b[i], 2));\n  }\n  return res;\n}\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- '  return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i]\
  \ ^ b[i]);\n  }\n  return result;\n}\n"
- "  return a.split('').map(function(c) {\n    return c ^ b.charAt(0);\n  }).join('');\n\
  }\n"
- '  return a + string_xor(b, a);

  }

  '
- '    return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- "  var result = '';\n  var i = 0;\n  while (i < a.length && i < b.length) {\n  \
  \  var c = a.charCodeAt(i) & b.charCodeAt(i);\n    result += String.fromCharCode(c);\n\
  \    i++;\n  }\n  while (i < a.length) {\n    result += a.charAt(i);\n    i++;\n\
  \  }\n  while (i < b.length) {\n    result += b.charAt(i);\n    i++;\n  }\n  return\
  \ result;\n}\n"
- '  return a ^ b;

  }

  '
- '  return a ^ b;

  }

  '
- '    return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charCodeAt(i)\
  \ ^ b.charCodeAt(i);\n  }\n  return result;\n}\n"
- '  return a ^ b;

  }

  '
- "  return binary_xor(binary_to_int(a), binary_to_int(b));\n}\n"
- '  return a ^ b;

  }

  '
- "  return a + b.split('').map(function (c) { return c === '1' ? '0' : '1'; }).join('');\n\
  }\n"
- "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charCodeAt(i)\
  \ ^ b.charCodeAt(i);\n  }\n  return result;\n}\n"
- "  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(parseInt(a[i],\
  \ 2) ^ parseInt(b[i], 2));\n  }\n  return result;\n}\n"
- '  return a ^ b;

  }

  '
- '  return a + string_xor(b, a);

  }

  '
- "  let xorResult = '';\n  for (let i = 0; i < a.length; i++) {\n    xorResult +=\
  \ String.fromCharCode(a.charCodeAt(i) ^ b.charCodeAt(i));\n  }\n  return xorResult;\n\
  }\n"
- "  var result = '';\n  var i = 0;\n  var j = 0;\n  while (i < a.length && j < b.length)\
  \ {\n    var c = a.charCodeAt(i) & b.charCodeAt(j);\n    result += String.fromCharCode(c);\n\
  \    i += 1;\n    j += 1;\n  }\n  while (i < a.length) {\n    result += a.charAt(i);\n\
  \    i += 1;\n  }\n  while (j < b.length) {\n    result += b.charAt(j);\n    j +=\
  \ 1;\n  }\n  return result;\n}\n"
- '  return a ^ b;

  }

  '
- "  return a + b.split('').map(c => c === '1' ? '0' : '1').join('');\n}\n"
- "  return a + b.split('').map(function (c: string) { return c === '1' ? '0' : '1';\
  \ }).join('');\n}\n"
- "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charCodeAt(i)\
  \ ^ b.charCodeAt(i);\n  }\n  return result;\n}\n"
- "  const aArr = a.split('');\n  const bArr = b.split('');\n  const result = '';\n\
  \  for (let i = 0; i < Math.max(aArr.length, bArr.length); i++) {\n    const aVal\
  \ = aArr[i] === '1';\n    const bVal = bArr[i] === '1';\n    const xorVal = aVal\
  \ ^ bVal;\n    result += xorVal === 0 ? '0' : '1';\n  }\n  return result;\n}\n"
- "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i]\
  \ ^ b[i]);\n  }\n  return result;\n}\n"
- '  return a ^ b;

  }

  '
- '  return a ^ b;

  }

  '
- "  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]\
  \ ^ b[i]);\n  }\n  return result.join('');\n}\n"
- "  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]\
  \ ^ b[i]);\n  }\n  return result.join('');\n}\n"
- '  return a ^ b;

  }

  '
- "  return a + b;\n}\n"
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- "  return a.split('').map(function (c: string) { return c ^ b; }).join('');\n}\n"
- "  return a.split('').map((c) => c ^ b).join('');\n}\n"
- '  return a ^ b;

  }

  '
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- "  return bin2hex(xor_binary(hex2bin(a), hex2bin(b)));\n}\n"
- '  return a ^ b;

  }

  '
- '  return a ^ b;

  }

  '
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- "  return bin2hex(xor_binary(a, b));\n}\n"
- '  return a ^ b;

  }

  '
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- '    return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- "  return bin2hex(binxor_binary(a, b));\n}\n"
- '  return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- "  return bin2hex(binxor_binary(a, b));\n}\n"
- "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charCodeAt(i)\
  \ ^ b.charCodeAt(i);\n  }\n  return result;\n}\n"
- "  return bin2hex(xor_binary(a, b));\n}\n"
- '  return a ^ b;

  }

  '
- "  return a.split('').map(function (c: string) {\n    return c ^ b;\n  }).join('');\n\
  }\n"
- '  return a ^ b;

  }

  '
- "  return bin2hex(binxor_binary(a, b));\n}\n"
- "  return bin2hex(binxor_binary(a, b));\n}\n"
- "  return a.split('').map((x, i) => x ^ b[i]).join('');\n}\n"
- "  return bin2hex(binxor_binary(a, b));\n}\n"
- "  return bin2hex(binxor_binary(a, b));\n}\n"
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- "    return binary_xor(binary_to_int(a), binary_to_int(b));\n}\n"
- "  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(parseInt(a[i],\
  \ 2) ^ parseInt(b[i], 2));\n  }\n  return result;\n}\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- "  return bin2hex(xor_binary(a, b));\n}\n"
- "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i]\
  \ ^ b[i]);\n  }\n  return result;\n}\n"
- "  const a_arr = a.split('');\n  const b_arr = b.split('');\n  const result = '';\n\
  \  for (let i = 0; i < Math.min(a.length, b.length); i++) {\n    result += a_arr[i]\
  \ ^ b_arr[i];\n  }\n  return result;\n}\n"
- "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i]\
  \ ^ b[i]);\n  }\n  return result;\n}\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i]\
  \ ^ b[i]);\n  }\n  return result;\n}\n"
- "  return a + b.split('').map(function (c: string) { return c === '1' ? '0' : '1';\
  \ }).join('');\n}\n"
- '  return a ^ b;

  }

  '
- '  return a ^ b;

  }

  '
- "    return a.split('').map(function (c: string) { return c ^ b; }).join('');\n\
  }\n"
- '  return a ^ b;

  }

  '
- '  return a + string_xor(b, a);

  }

  '
- "  let xorResult = '';\n  for (let i = 0; i < a.length; i++) {\n    xorResult +=\
  \ (a[i] ^ b[i]);\n  }\n  return xorResult;\n}\n"
- '  return a ^ b;

  }

  '
- "  return a.split('').map(function (c: string) {\n    return c ^ b\n  }).join('')\n\
  }\n"
- "  return a.split('').map(function (c) { return c ^ b[b.length - 1 - a.indexOf(c)];\
  \ }).join('');\n}\n"
- "  return a + b.split('').map(function(c) {\n    return String.fromCharCode(c.charCodeAt(0)\
  \ ^ 32);\n  }).join('');\n}\n"
- "  return bin2hex(binxor_binary(a, b));\n}\n"
- "  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]\
  \ ^ b[i]);\n  }\n  return result.join('');\n}\n"
- "  var result = '';\n  var i = 0;\n  while (i < a.length && i < b.length) {\n  \
  \  result += a.charCodeAt(i) ^ b.charCodeAt(i);\n    i++;\n  }\n  return result;\n\
  }\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- "  const aArr = a.split('');\n  const bArr = b.split('');\n  let res = '';\n  for\
  \ (let i = 0; i < aArr.length; i++) {\n    res += aArr[i] ^ bArr[i];\n  }\n  return\
  \ res;\n}\n"
- '    return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- "  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    const aChar =\
  \ a.charCodeAt(i);\n    const bChar = b.charCodeAt(i);\n    const xor = (aChar ^\
  \ bChar);\n    result += String.fromCharCode(xor);\n  }\n  return result;\n}\n"
- "  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i]\
  \ ^ b[i]);\n  }\n  return result;\n}\n"
- "  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]\
  \ ^ b[i]);\n  }\n  return result.join('');\n}\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- "  return bin2hex(xor_binary(hex2bin(a), hex2bin(b)));\n}\n"
- "  return bin2hex(bin2bin(bin2bin(a, 2) ^ bin2bin(b, 2)));\n}\n"
- '  return a ^ b;

  }

  '
- "  return a.split('').map(function(c) {\n    return c ^ b\n  }).join('')\n}\n"
- '  return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- "  return a.split('').map(function(c) {\n    return c ^ b.charAt(0);\n  }).join('');\n\
  }\n"
- "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i]\
  \ ^ b[i]);\n  }\n  return result;\n}\n"
- "  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] ^ b[i]);\n\
  \  }\n  return res;\n}\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i]\
  \ ^ b[i]);\n  }\n  return result;\n}\n"
- "  const a_arr = a.split('');\n  const b_arr = b.split('');\n  let res = '';\n \
  \ for (let i = 0; i < a_arr.length; i++) {\n    res += a_arr[i] ^ b_arr[i];\n  }\n\
  \  return res;\n}\n"
- "    return String.fromCharCode(\n        (a.charCodeAt(0) ^ b.charCodeAt(0)) &\
  \ 0xff\n    );\n}\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- "  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] ^ b[i]);\n\
  \  }\n  return res;\n}\n"
- "  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]\
  \ ^ b[i]);\n  }\n  return result.join('');\n}\n"
- "  return bin2hex(binxor_binary(a, b));\n}\n"
- '    return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- "  return bin2hex(binxor_binary(a, b));\n}\n"
- "  let res = \"\";\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] ^ b[i]);\n\
  \  }\n  return res;\n}\n"
- '  return a + string_xor(b, a);

  }

  '
- "  const xor = (a.length === b.length) ? a : b;\n  return xor.split('').map(c =>\
  \ c === '0' ? '1' : '0').join('');\n}\n"
- '  return a ^ b;

  }

  '
- '  return a ^ b;

  }

  '
- "  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    const c = a.charCodeAt(i);\n\
  \    const d = b.charCodeAt(i);\n    result += String.fromCharCode(c ^ d);\n  }\n\
  \  return result;\n}\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- '  return a ^ b;

  }

  '
- "  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(\n\
  \      (a.charCodeAt(i) ^ b.charCodeAt(i)) & 0xff);\n  }\n  return result;\n}\n"
- '  return a ^ b;

  }

  '
- "  return a.split('').map((x, i) => x ^ b[i]).join('');\n}\n"
- "  return bin2hex(bin2bin(bin2bin(a) ^ bin2bin(b)));\n}\n"
- "  return `${a}${b}`.split('').map(c => c === '0' ? '1' : '0').join('');\n}\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- '  return a ^ b;

  }

  '
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- "  return bin2hex(binxor_binary(hex2bin(a), hex2bin(b)));\n}\n"
- "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i]\
  \ ^ b[i]);\n  }\n  return result;\n}\n"
- '  return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- "  return a + b.split('').map(c => c === '0' ? '1' : '0').join('');\n}\n"
- '  return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- "  var result = '';\n  var i = 0;\n  var j = 0;\n  while (i < a.length && j < b.length)\
  \ {\n    var c = a.charCodeAt(i) & b.charCodeAt(j);\n    result += String.fromCharCode(c);\n\
  \    i++;\n    j++;\n  }\n  while (i < a.length) {\n    result += a.charAt(i);\n\
  \    i++;\n  }\n  while (j < b.length) {\n    result += b.charAt(j);\n    j++;\n\
  \  }\n  return result;\n}\n"
- "  return a.split('').map(function (c) { return c ^ b[c]; }).join('');\n}\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- "  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]\
  \ ^ b[i]);\n  }\n  return result.join('');\n}\n"
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- "  const aArr = a.split('');\n  const bArr = b.split('');\n  const result = '';\n\
  \  for (let i = 0; i < aArr.length; i++) {\n    result += aArr[i] ^ bArr[i];\n \
  \ }\n  return result;\n}\n"
- "  return bin2hex(binxor_binary(a, b));\n}\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- '  return a + string_xor(b, a);

  }

  '
- "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i]\
  \ ^ b[i]);\n  }\n  return result;\n}\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- "  const a_array = a.split('');\n  const b_array = b.split('');\n  const result\
  \ = '';\n  for (let i = 0; i < a_array.length; i++) {\n    result += a_array[i]\
  \ ^ b_array[i];\n  }\n  return result;\n}\n"
- "  return bin2hex(binxor_binary(a, b));\n}\n"
- "  return bin2hex(xor_binary(a, b));\n}\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- "  return `${a}${b}`.split('').map(c => c === '0' ? '1' : '0').join('');\n}\n"
- '  return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(parseInt(a[i],\
  \ 2) ^ parseInt(b[i], 2));\n  }\n  return result;\n}\n"
- '  return a ^ b;

  }

  '
- "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(parseInt(a[i],\
  \ 2) ^ parseInt(b[i], 2));\n  }\n  return result;\n}\n"
- "  return bin2hex(xor_binary(a, b));\n}\n"
- "  const result: string = a.split('').map((x, i) => x ^ b[i]).join('');\n  return\
  \ result;\n}\n"
- '  return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- '  return binary_xor(binary_to_binary(a), binary_to_binary(b));

  }

  '
- "  return bin2hex(xor_binary(hex2bin(a), hex2bin(b)));\n}\n"
- '  return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- "  return bin2hex(binxor_binary(a, b));\n}\n"
- "  return a.split('').map((x, i) => x ^ b[i]).join('');\n}\n"
- "  return a.split('').map(function(c) {\n    return c ^ b.charAt(0);\n  }).join('');\n\
  }\n"
- "  return a.split('').map(function (c) { return c ^ b[c]; }).join('');\n}\n"
- "    return String.fromCharCode(\n        (a.charCodeAt(0) ^ b.charCodeAt(0)) &\
  \ 0xff\n    );\n}\n"
- '  return a ^ b;

  }

  '
- "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(parseInt(a[i],\
  \ 2) ^ parseInt(b[i], 2));\n  }\n  return result;\n}\n"
- "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
  \  );\n}\n"
- "    return bin2hex(xor_binary(a, b));\n}\n"
- '  return a + string_xor(b, a);

  }

  '
- "  return bin2hex(xor_binary(a, b));\n}\n"
- '  return binary_xor(parseInt(a, 2), parseInt(b, 2));

  }

  '
- "  return bin2hex(bin2bin(bin2bin(a) ^ bin2bin(b)));\n}\n"
- "  return bin2hex(binXor(hex2bin(a), hex2bin(b)));\n}\n"
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- "  return `${a}${b}`.split('').map(c => c ^ 1).join('');\n}\n"
- '  return bin2hex(bin2bin(a) ^ bin2bin(b));

  }

  '
- "  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(parseInt(a[i],\
  \ 2) ^ parseInt(b[i], 2));\n  }\n  return result;\n}\n"
language: ts
name: HumanEval_11_string_xor
prompt: '//Input are two strings a and b consisting only of 1s and 0s.

  // Perform binary XOR on these inputs and return result also as a string.

  // >>> string_xor(''010'', ''110'')

  // ''100''

  function string_xor(a: string, b: string): string {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
  , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
  \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
