name: HumanEval_68_pluck
language: humaneval_to_typescript.py
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// Input: [1,2,3]\n\
  // Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index. \n// Example 3:\n// Input: []\n// Output: []\n// Example 4:\n\
  // Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation: 0 is the smallest\
  \ value, but  there are two zeros,\n// so we will choose the first zero, which has\
  \ the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0\
  \ <= node.value\nfunction pluck(arr: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
  \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n\
  \  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
  \ 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["    let evenValues = arr.filter(n => n % 2 === 0);\n    if (evenValues.length\
    \ === 0) return [];\n    let min = evenValues[0];\n    let minIndex = 0;\n   \
    \ for (let i = 1; i < evenValues.length; i++) {\n        if (evenValues[i] < min)\
    \ {\n            min = evenValues[i];\n            minIndex = i;\n        }\n\
    \    }\n    return [min, minIndex];\n}\n", "    const even = arr.filter(n => n\
    \ % 2 === 0);\n    if (even.length === 0) {\n        return [];\n    }\n    const\
    \ min = even.sort((a, b) => a - b)[0];\n    const index = even.indexOf(min);\n\
    \    return [min, index];\n}\n", "  const evenValues = arr.filter((_, i) => i\
    \ % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const sortedEvenValues\
    \ = evenValues.sort((a, b) => a - b);\n  const smallestEvenValue = sortedEvenValues[0];\n\
    \  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
    \ smallestIndex];\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n  for\
    \ (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const min = evenValues.reduce((a, b) => a < b ? a : b);\n\
    \  const index = evenValues.indexOf(min);\n  return [min, index];\n}\n", "  const\
    \ result = [];\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n\
    \      minIndex = i;\n    }\n  }\n  result.push(minValue, minIndex);\n  return\
    \ result;\n}\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) {\n    return [];\n  }\n  return evenValues.reduce((acc, curr, index)\
    \ => {\n    if (acc === null || curr < acc) {\n      return curr;\n    }\n   \
    \ return acc;\n  }, null);\n}\n", "  const result = [];\n  const map = new Map();\n\
    \  for (let i = 0; i < arr.length; i++) {\n    const value = arr[i];\n    if (map.has(value))\
    \ {\n      const index = map.get(value);\n      result.push([value, index]);\n\
    \    } else {\n      map.set(value, i);\n    }\n  }\n  return result;\n}\n", " \
    \   let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
    \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n \
    \           minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n\
    }\n", "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr)\
    \ => Math.min(prev, curr));\n  const index = evenValues.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\n", "    const even = arr.filter(item\
    \ => item % 2 === 0);\n    const index = even.findIndex(item => item < Math.max(...even));\n\
    \    return even.filter(item => item === Math.max(...even))[index];\n}\n", " \
    \   let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
    \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n \
    \           minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n\
    }\n", "  const result = [];\n  let minIndex = 0;\n  let minValue = arr[0];\n \
    \ for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === minValue) {\n   \
    \   minIndex = i;\n    }\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n\
    \      minIndex = i;\n    }\n  }\n  result.push(minValue, minIndex);\n  return\
    \ result;\n}\n", "  let minIndex = -1;\n  let minValue = arr[0];\n  for (let i\
    \ = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue =\
    \ arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n",
  "    const evenValues = arr.filter(v => v % 2 === 0);\n    if (evenValues.length\
    \ === 0) return [];\n    const minIndex = evenValues.reduce((acc, val, index)\
    \ => {\n        if (val < acc) return index;\n        return acc;\n    }, Number.MAX_SAFE_INTEGER);\n\
    \    return evenValues.map(v => [v,minIndex]);\n}\n", "  const evenValues = arr.filter(n\
    \ => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const\
    \ smallestEvenValue = evenValues[0];\n  const smallestIndex = 0;\n  for (let i\
    \ = 1; i < evenValues.length; i++) {\n    if (evenValues[i] < smallestEvenValue)\
    \ {\n      smallestEvenValue = evenValues[i];\n      smallestIndex = i;\n    }\n\
    \  }\n  return [smallestEvenValue, smallestIndex];\n}\n", "  const map = new Map();\n\
    \  for (let i = 0; i < arr.length; i++) {\n    const value = arr[i];\n    if (!map.has(value))\
    \ {\n      map.set(value, i);\n    }\n  }\n  const result = [];\n  for (const\
    \ [key, value] of map) {\n    if (value % 2 === 0) {\n      result.push(value);\n\
    \    }\n  }\n  return result;\n}\n", "  const result = [];\n  const evenValues\
    \ = new Set<number>();\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ % 2 === 0) {\n      evenValues.add(arr[i]);\n    }\n  }\n  const smallestEvenValue\
    \ = Math.min(...evenValues);\n  const smallestIndex = 0;\n  for (let i = 0; i\
    \ < arr.length; i++) {\n    if (arr[i] === smallestEvenValue) {\n      result.push([smallestEvenValue,\
    \ i]);\n    }\n    if (arr[i] === smallestEvenValue && arr[i] < smallestEvenValue)\
    \ {\n      smallestIndex = i;\n    }\n  }\n  return result;\n}\n", "  const evenValues\
    \ = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) {\n    return\
    \ [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n  const smallestIndex\
    \ = getIndex(arr, smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n\
    }\n", "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length\
    \ === 0) return [];\n  const minIndex = evenValues.reduce((acc, curr, i) => {\n\
    \    if (curr < acc) return i;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n\
    \  return evenValues.filter(n => n === minIndex)[0];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
