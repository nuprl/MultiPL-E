completions:
- "    let evenValues = arr.filter(n => n % 2 === 0);\n    if (evenValues.length ===\
  \ 0) return [];\n    let min = evenValues[0];\n    let minIndex = 0;\n    for (let\
  \ i = 1; i < evenValues.length; i++) {\n        if (evenValues[i] < min) {\n   \
  \         min = evenValues[i];\n            minIndex = i;\n        }\n    }\n  \
  \  return [min, minIndex];\n}\n"
- "    const even = arr.filter(n => n % 2 === 0);\n    if (even.length === 0) {\n\
  \        return [];\n    }\n    const min = even.sort((a, b) => a - b)[0];\n   \
  \ const index = even.indexOf(min);\n    return [min, index];\n}\n"
- "  const evenValues = arr.filter((_, i) => i % 2 === 0);\n  if (evenValues.length\
  \ === 0) return [];\n  const sortedEvenValues = evenValues.sort((a, b) => a - b);\n\
  \  const smallestEvenValue = sortedEvenValues[0];\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n\
  \  return [smallestEvenValue, smallestIndex];\n}\n"
- "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
  \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const min = evenValues.reduce((a, b) => a < b ? a : b);\n  const\
  \ index = evenValues.indexOf(min);\n  return [min, index];\n}\n"
- "  const result = [];\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let\
  \ i = 0; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue =\
  \ arr[i];\n      minIndex = i;\n    }\n  }\n  result.push(minValue, minIndex);\n\
  \  return result;\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) {\n    return [];\n  }\n  return evenValues.reduce((acc, curr, index) => {\n\
  \    if (acc === null || curr < acc) {\n      return curr;\n    }\n    return acc;\n\
  \  }, null);\n}\n"
- "  const result = [];\n  const map = new Map();\n  for (let i = 0; i < arr.length;\
  \ i++) {\n    const value = arr[i];\n    if (map.has(value)) {\n      const index\
  \ = map.get(value);\n      result.push([value, index]);\n    } else {\n      map.set(value,\
  \ i);\n    }\n  }\n  return result;\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
  \ === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr)\
  \ => Math.min(prev, curr));\n  const index = evenValues.indexOf(smallestEvenValue);\n\
  \  return [smallestEvenValue, index];\n}\n"
- "    const even = arr.filter(item => item % 2 === 0);\n    const index = even.findIndex(item\
  \ => item < Math.max(...even));\n    return even.filter(item => item === Math.max(...even))[index];\n\
  }\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const result = [];\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let\
  \ i = 0; i < arr.length; i++) {\n    if (arr[i] === minValue) {\n      minIndex\
  \ = i;\n    }\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  result.push(minValue, minIndex);\n  return result;\n}\n"
- "  let minIndex = -1;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
  \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n"
- "    const evenValues = arr.filter(v => v % 2 === 0);\n    if (evenValues.length\
  \ === 0) return [];\n    const minIndex = evenValues.reduce((acc, val, index) =>\
  \ {\n        if (val < acc) return index;\n        return acc;\n    }, Number.MAX_SAFE_INTEGER);\n\
  \    return evenValues.map(v => [v,minIndex]);\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) {\n    return [];\n  }\n  const smallestEvenValue = evenValues[0];\n  const\
  \ smallestIndex = 0;\n  for (let i = 1; i < evenValues.length; i++) {\n    if (evenValues[i]\
  \ < smallestEvenValue) {\n      smallestEvenValue = evenValues[i];\n      smallestIndex\
  \ = i;\n    }\n  }\n  return [smallestEvenValue, smallestIndex];\n}\n"
- "  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const value\
  \ = arr[i];\n    if (!map.has(value)) {\n      map.set(value, i);\n    }\n  }\n\
  \  const result = [];\n  for (const [key, value] of map) {\n    if (value % 2 ===\
  \ 0) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n"
- "  const result = [];\n  const evenValues = new Set<number>();\n  for (let i = 0;\
  \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evenValues.add(arr[i]);\n\
  \    }\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n  const smallestIndex\
  \ = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === smallestEvenValue)\
  \ {\n      result.push([smallestEvenValue, i]);\n    }\n    if (arr[i] === smallestEvenValue\
  \ && arr[i] < smallestEvenValue) {\n      smallestIndex = i;\n    }\n  }\n  return\
  \ result;\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) {\n    return [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n\
  \  const smallestIndex = getIndex(arr, smallestEvenValue);\n  return [smallestEvenValue,\
  \ smallestIndex];\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const minIndex = evenValues.reduce((acc, curr, i) => {\n    if\
  \ (curr < acc) return i;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n  return\
  \ evenValues.filter(n => n === minIndex)[0];\n}\n"
- "    const evenNodes = arr.filter(node => node % 2 === 0);\n    if (evenNodes.length\
  \ === 0) return [];\n    const minIndex = evenNodes.reduce((prev, curr) => Math.min(prev,\
  \ curr), 0);\n    const minValue = evenNodes[minIndex];\n    const result = [minValue,\
  \ minIndex];\n    evenNodes.splice(minIndex, 1);\n    return evenNodes.reduce((prev,\
  \ curr) => [...prev, curr], result);\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(x => x % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const smallestEvenValue = evenValues[0];\n  const smallestIndex\
  \ = 0;\n  for (let i = 1; i < evenValues.length; i++) {\n    if (evenValues[i] <\
  \ smallestEvenValue) {\n      smallestEvenValue = evenValues[i];\n      smallestIndex\
  \ = i;\n    }\n  }\n  return [smallestEvenValue, smallestIndex];\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
  \ === 0) return [];\n  const minValue = evenValues.reduce((prev, curr) => Math.min(prev,\
  \ curr));\n  const minIndex = evenValues.indexOf(minValue);\n  return [minValue,\
  \ minIndex];\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "    const evenValues = arr.filter(n => n % 2 === 0);\n    if (evenValues.length\
  \ === 0) {\n        return [];\n    }\n    const minIndex = evenValues.reduce((prev,\
  \ curr) => {\n        return Math.min(prev, curr);\n    });\n    const minValue\
  \ = evenValues[minIndex];\n    const result = [minValue, minIndex];\n    return\
  \ evenValues.reduce((prev, curr) => {\n        if (prev === minValue) {\n      \
  \      result.push(curr);\n        }\n        return prev;\n    }, []);\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const minIndex = evenValues.reduce((acc, curr, index) => {\n\
  \    if (curr < acc) return index;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n\
  \  const minValue = evenValues[minIndex];\n  return evenValues.filter(n => n !==\
  \ minValue).map(n => [n, minIndex]);\n}\n"
- "    const evenValues = arr.filter(n => n % 2 === 0);\n    if (evenValues.length\
  \ === 0) {\n        return [];\n    }\n    const minIndex = evenValues.reduce((acc,\
  \ curr, i, arr) => {\n        if (curr < arr[i]) {\n            return i;\n    \
  \    }\n        return acc;\n    }, -1);\n    const minValue = evenValues[minIndex];\n\
  \    const result = [minValue, minIndex];\n    return result;\n}\n"
- "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
  \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const sortedEvenValues = evenValues.sort((a, b) => a - b);\n\
  \  return sortedEvenValues.reduce((acc, curr, i, arr) => {\n    if (i === 0) return\
  \ [curr, arr[i]];\n    if (arr[i] === arr[0]) return [curr, arr[i]];\n    return\
  \ acc;\n  }, []);\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
  \ curr));\n  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
  \ index];\n}\n"
- "  const result = [];\n  const minIndex = arr.findIndex(node => node % 2 === 0);\n\
  \  if (minIndex === -1) {\n    return result;\n  }\n  const minValue = arr[minIndex];\n\
  \  const minIndexes = arr.filter(node => node % 2 === 0).map(node => node - minValue);\n\
  \  const minIndexesSorted = [...minIndexes].sort((a, b) => a - b);\n  const minIndexesSortedIndex\
  \ = minIndexesSorted.findIndex(i => i === minIndex);\n  result.push(minValue);\n\
  \  result.push(minIndexesSorted[minIndexesSortedIndex]);\n  return result;\n}\n"
- "    const evenValues = arr.filter(n => n % 2 === 0);\n    if (evenValues.length\
  \ === 0) {\n        return [];\n    }\n    const minValue = Math.min(...evenValues);\n\
  \    const index = evenValues.indexOf(minValue);\n    return [minValue, index];\n\
  }\n"
- "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
  \ === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr)\
  \ => Math.min(prev, curr));\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n\
  \  return [smallestEvenValue, smallestIndex];\n}\n"
- "  let minIndex = -1;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
  \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n"
- "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
  \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n"
- "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
  \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const minIndex = evenValues.reduce((acc, curr, i) => {\n    if\
  \ (curr < acc) return curr;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n \
  \ const minValue = evenValues[minIndex];\n  return evenValues.filter(n => n ===\
  \ minValue);\n}\n"
- "    const evenValues = arr.filter(n => n % 2 === 0);\n    if (evenValues.length\
  \ === 0) return [];\n    const smallestEvenValue = evenValues[0];\n    const smallestIndex\
  \ = 0;\n    for (let i = 1; i < evenValues.length; i++) {\n        if (evenValues[i]\
  \ < smallestEvenValue) {\n            smallestEvenValue = evenValues[i];\n     \
  \       smallestIndex = i;\n        }\n    }\n    return [smallestEvenValue, smallestIndex];\n\
  }\n"
- "  const result = [];\n  let minIndex = -1;\n  let minValue = arr[0];\n  for (let\
  \ i = 1; i < arr.length; i++) {\n    if (arr[i] === minValue) {\n      minIndex\
  \ = i;\n      minValue = arr[i];\n    } else if (arr[i] === minValue && minIndex\
  \ === -1) {\n      minIndex = i;\n      minValue = arr[i];\n    }\n  }\n  if (minIndex\
  \ === -1) {\n    return result;\n  }\n  result.push(minValue, minIndex);\n  return\
  \ result;\n}\n"
- "  const result = [];\n  let minIndex = -1;\n  let minValue = arr[0];\n  for (let\
  \ i = 1; i < arr.length; i++) {\n    if (arr[i] === minValue) {\n      minIndex++;\n\
  \    }\n    if (arr[i] === minValue && minIndex > 0) {\n      result.push([minValue,\
  \ minIndex]);\n      minIndex = -1;\n      minValue = arr[i];\n    }\n  }\n  return\
  \ result;\n}\n"
- "  const evenValues = arr.filter((value, index) => value % 2 === 0);\n  if (evenValues.length\
  \ === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr,\
  \ index) => {\n    if (curr < prev) return curr;\n    return prev;\n  }, Number.MAX_SAFE_INTEGER);\n\
  \  const smallestIndexes = evenValues.reduce((prev, curr, index) => {\n    if (curr\
  \ < prev) return index;\n    return prev;\n  }, -1);\n  return [smallestEvenValue,\
  \ smallestIndexes];\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const minIndex = evenValues.reduce((acc, curr, i) => {\n    if\
  \ (curr < acc) return i;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n  const\
  \ minValue = evenValues[minIndex];\n  return evenValues.filter(n => n === minValue);\n\
  }\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const index\
  \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
  }\n"
- "  let evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0)\
  \ {\n    return [];\n  }\n  let minIndex = evenValues.reduce((a, b) => Math.min(a,\
  \ b));\n  let minValue = evenValues[minIndex];\n  let result = [];\n  for (let i\
  \ = 0; i < evenValues.length; i++) {\n    if (evenValues[i] === minValue) {\n  \
  \    result.push([minValue, i]);\n    }\n  }\n  return result;\n}\n"
- "    const map = new Map();\n    for (let i = 0; i < arr.length; i++) {\n      \
  \  const val = arr[i];\n        if (!map.has(val)) {\n            map.set(val, i);\n\
  \        }\n    }\n    const result = [];\n    map.forEach((val, index) => {\n \
  \       const even = val % 2 === 0;\n        if (even) {\n            result.push(val);\n\
  \        }\n    });\n    return result.sort((a, b) => a - b);\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const minIndex = evenValues.reduce((acc, curr, i, arr) => {\n\
  \    if (curr < arr[i - 1]) return i;\n    return acc;\n  }, -1);\n  return evenValues.filter(n\
  \ => n === minIndex)[0];\n}\n"
- "    const result = [];\n    let minIndex = -1;\n    let minValue = arr[0];\n  \
  \  for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === minValue) {\n\
  \            minIndex = i;\n        }\n        if (arr[i] === minValue && arr[i]\
  \ % 2 === 0) {\n            minIndex = i;\n        }\n    }\n    if (minIndex >=\
  \ 0) {\n        result.push(minValue, minIndex);\n    }\n    return result;\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const minIndex = evenValues.reduce((acc, cur, index) => {\n \
  \   if (cur < acc) return cur;\n    return index;\n  }, Number.MAX_SAFE_INTEGER);\n\
  \  return evenValues.map(n => [n, minIndex]);\n}\n"
- "    const map = new Map<number, number>();\n    for (let i = 0; i < arr.length;\
  \ i++) {\n        const val = arr[i];\n        if (map.has(val)) {\n           \
  \ const index = map.get(val);\n            map.set(val, index + 1);\n        } else\
  \ {\n            map.set(val, 1);\n        }\n    }\n    const result = [];\n  \
  \  for (let [key, val] of map) {\n        if (val % 2 === 0) {\n            result.push(key);\n\
  \        }\n    }\n    return result;\n}\n"
- "    let evenValues = arr.filter(n => n % 2 === 0);\n    if (evenValues.length ===\
  \ 0) return [];\n    let minIndex = evenValues.reduce((a, b) => a < b ? a : b);\n\
  \    let minValue = evenValues[minIndex];\n    let result = [minValue, minIndex];\n\
  \    for (let i = minIndex + 1; i < evenValues.length; i++) {\n        if (evenValues[i]\
  \ < minValue) {\n            minValue = evenValues[i];\n            result[1] =\
  \ i;\n        }\n    }\n    return result;\n}\n"
- "  const result = [];\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let\
  \ i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue =\
  \ arr[i];\n      minIndex = i;\n    }\n  }\n  result.push(minValue, minIndex);\n\
  \  return result;\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const index\
  \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
  }\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
  \ === 0) {\n    return [];\n  }\n  const smallestEvenValue = evenValues[0];\n  const\
  \ smallestIndex = 0;\n  for (let i = 1; i < evenValues.length; i++) {\n    if (evenValues[i]\
  \ < smallestEvenValue) {\n      smallestEvenValue = evenValues[i];\n      smallestIndex\
  \ = i;\n    }\n  }\n  return [smallestEvenValue, smallestIndex];\n}\n"
- "  const even = arr.filter(item => item % 2 === 0);\n  if (even.length === 0) return\
  \ [];\n  const min = even.reduce((a, b) => Math.min(a, b));\n  const index = even.indexOf(min);\n\
  \  return [min, index];\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) {\n    return [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n\
  \  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
  \ index];\n}\n"
- "    const evenValues = arr.filter(n => n % 2 === 0);\n    if (evenValues.length\
  \ === 0) {\n        return [];\n    }\n    const minIndex = evenValues.reduce((prev,\
  \ curr) => Math.min(prev, curr), 0);\n    const minValue = evenValues[minIndex];\n\
  \    const result = evenValues.filter(n => n !== minValue);\n    return [minValue,\
  \ minIndex];\n}\n"
- "  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const node\
  \ = arr[i];\n    if (map.has(node)) {\n      const [val, index] = map.get(node);\n\
  \      if (val > arr[i]) {\n        map.set(node, [arr[i], i]);\n      }\n    }\
  \ else {\n      map.set(node, [arr[i], i]);\n    }\n  }\n  const result = [];\n\
  \  for (const [key, value] of map) {\n    if (value[0] % 2 === 0) {\n      result.push(value);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const node\
  \ = arr[i];\n    if (map.has(node)) {\n      const val = map.get(node);\n      if\
  \ (val[0] < node) continue;\n      map.set(node, val);\n    } else {\n      map.set(node,\
  \ [node, i]);\n    }\n  }\n  return Array.from(map.values());\n}\n"
- "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const smallestEvenValue = evenValues.reduce((a, b) => Math.min(a,\
  \ b));\n  const index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
  \ index];\n}\n"
- "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
  \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  return evenValues.reduce((acc, val, index) => {\n    if (val\
  \ < acc.min) {\n      acc.min = val;\n      acc.index = index;\n    }\n    return\
  \ acc;\n  }, { min: Number.MAX_SAFE_INTEGER, index: -1 });\n}\n"
- "    let evenIndex = 0;\n    let evenValue = arr[0];\n    let evenSmallestIndex\
  \ = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] % 2 === 0)\
  \ {\n            if (evenValue < arr[i]) {\n                evenSmallestIndex =\
  \ i;\n                evenValue = arr[i];\n            }\n        } else {\n   \
  \         if (evenSmallestIndex < i) {\n                evenSmallestIndex = i;\n\
  \                evenValue = arr[i];\n            }\n        }\n    }\n    return\
  \ [evenValue, evenSmallestIndex];\n}\n"
- "  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const val\
  \ = arr[i];\n    if (map.has(val)) {\n      const index = map.get(val);\n      map.set(val,\
  \ index + 1);\n    } else {\n      map.set(val, 1);\n    }\n  }\n  const result\
  \ = [];\n  for (const [key, value] of map) {\n    if (value % 2 === 0) {\n     \
  \ result.push(key);\n    }\n  }\n  return result;\n}\n"
- "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length ===\
  \ 0) {\n    return [];\n  }\n  const minIndex = evenValues.reduce((acc, curr, i)\
  \ => {\n    if (curr < acc) {\n      return curr;\n    }\n    return acc;\n  },\
  \ Number.MAX_SAFE_INTEGER);\n  const minValue = evenValues[minIndex];\n  const result\
  \ = [minValue, minIndex];\n  return result;\n}\n"
- "    const evenValues = arr.filter(n => n % 2 === 0);\n    if (evenValues.length\
  \ === 0) return [];\n    const sortedEvenValues = evenValues.sort((a, b) => a -\
  \ b);\n    const smallestEvenValue = sortedEvenValues[0];\n    const smallestIndex\
  \ = arr.indexOf(smallestEvenValue);\n    return [smallestEvenValue, smallestIndex];\n\
  }\n"
- "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const sortedEvenValues = evenValues.sort((a, b) => a - b);\n\
  \  return sortedEvenValues.reduce((acc, val, i) => {\n    if (val === 0) return\
  \ [val, i];\n    if (val === sortedEvenValues[i - 1]) return [val, i];\n    return\
  \ acc;\n  }, []);\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const index\
  \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
  }\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const smallestEvenValue = evenValues[0];\n  const smallestIndex\
  \ = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n\
  }\n"
- "  const map = new Map<number, number>();\n  for (let i = 0; i < arr.length; i++)\
  \ {\n    const value = arr[i];\n    if (map.has(value)) {\n      const index = map.get(value);\n\
  \      map.set(value, index + 1);\n    } else {\n      map.set(value, 1);\n    }\n\
  \  }\n  const result = [];\n  for (const [key, value] of map) {\n    if (value %\
  \ 2 === 0) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n"
- "  let minIndex = -1;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
  \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const minIndex = evenValues.reduce((acc, curr, i) => {\n    if\
  \ (curr < acc) return i;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n  const\
  \ minValue = evenValues[minIndex];\n  const result = [minValue, minIndex];\n  return\
  \ result;\n}\n"
- "  let evenArr = [];\n  let evenIndex = [];\n  let minIndex = 0;\n  let minVal =\
  \ arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n\
  \      evenArr.push(arr[i]);\n      evenIndex.push(i);\n    }\n    if (arr[i] <\
  \ minVal) {\n      minVal = arr[i];\n      minIndex = i;\n    }\n  }\n  if (evenArr.length\
  \ === 0) {\n    return [];\n  }\n  let minEven = evenArr[evenArr.length - 1];\n\
  \  let minIndex = evenIndex[evenArr.length - 1];\n  for (let i = 0; i < evenArr.length;\
  \ i++) {\n    if (evenArr[i] === minEven) {\n      minIndex = evenIndex[i];\n  \
  \  }\n  }\n  return [minVal, minIndex];\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const min = evenValues.reduce((a, b) => a < b ? a : b);\n  const\
  \ index = evenValues.indexOf(min);\n  return [min, index];\n}\n"
- "  const result = [];\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let\
  \ i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue =\
  \ arr[i];\n      minIndex = i;\n    }\n  }\n  result.push(minValue, minIndex);\n\
  \  return result;\n}\n"
- "  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const value\
  \ = arr[i];\n    if (map.has(value)) {\n      const index = map.get(value);\n  \
  \    map.set(value, index + 1);\n    } else {\n      map.set(value, 1);\n    }\n\
  \  }\n  const result = [];\n  for (let [key, value] of map) {\n    if (value % 2\
  \ === 0) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n"
- "  const result = [];\n  const evenValues = new Set();\n  for (let i = 0; i < arr.length;\
  \ i++) {\n    if (arr[i] % 2 === 0) {\n      evenValues.add(arr[i]);\n    }\n  }\n\
  \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      const\
  \ index = evenValues.has(arr[i]) ? evenValues.delete(arr[i]) : result.push(arr[i]);\n\
  \      evenValues.add(arr[i]);\n    }\n  }\n  return result;\n}\n"
- "    const evenValues = arr.filter(x => x % 2 === 0);\n    if (evenValues.length\
  \ === 0) return [];\n    const minValue = evenValues.reduce((prev, curr) => Math.min(prev,\
  \ curr));\n    const minIndex = evenValues.indexOf(minValue);\n    return [minValue,\
  \ minIndex];\n}\n"
- "    const evenValues = arr.filter((value, index) => value % 2 === 0);\n    if (evenValues.length\
  \ === 0) {\n        return [];\n    }\n    const sortedEvenValues = evenValues.sort((a,\
  \ b) => a - b);\n    const smallestEvenValue = sortedEvenValues[0];\n    const smallestIndex\
  \ = evenValues.indexOf(smallestEvenValue);\n    return [smallestEvenValue, smallestIndex];\n\
  }\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) {\n    return [];\n  }\n  const minIndex = evenValues.reduce((acc, curr, index)\
  \ => {\n    return curr ? Math.min(acc, index) : acc;\n  }, -1);\n  const minValue\
  \ = evenValues[minIndex];\n  return evenValues.filter(n => n !== minValue);\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const value\
  \ = arr[i];\n    const index = map.get(value);\n    if (index === undefined) {\n\
  \      map.set(value, i);\n    } else {\n      map.set(value, index + 1);\n    }\n\
  \  }\n  const result = [];\n  for (const [key, value] of map) {\n    if (value %\
  \ 2 === 0) {\n      result.push([key, value]);\n    }\n  }\n  return result;\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) {\n    return [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n\
  \  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
  \ index];\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) {\n    return [];\n  }\n  const smallestEvenValue = evenValues[0];\n  const\
  \ smallestIndex = 0;\n  for (let i = 1; i < evenValues.length; i++) {\n    if (evenValues[i]\
  \ < smallestEvenValue) {\n      smallestEvenValue = evenValues[i];\n      smallestIndex\
  \ = i;\n    }\n  }\n  return [smallestEvenValue, smallestIndex];\n}\n"
- "  const result = [];\n  let minIndex = -1;\n  let minValue = arr[0];\n  for (let\
  \ i = 1; i < arr.length; i++) {\n    if (arr[i] === minValue) {\n      minIndex++;\n\
  \    }\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex =\
  \ i;\n    }\n  }\n  result.push(minValue, minIndex);\n  return result;\n}\n"
- "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
  \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n"
- "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
  \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const sortedEvenValues = evenValues.sort((a, b) => a - b);\n\
  \  const smallestEvenValue = sortedEvenValues[0];\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n\
  \  return [smallestEvenValue, smallestIndex];\n}\n"
- "  let evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0)\
  \ return [];\n  let minIndex = evenValues.reduce((acc, curr, i, arr) => {\n    if\
  \ (curr < arr[0]) return i;\n    return acc;\n  }, -1);\n  return evenValues.map(n\
  \ => [n, minIndex]);\n}\n"
- "    const evenValues = arr.filter(n => n % 2 === 0);\n    if (evenValues.length\
  \ === 0) {\n        return [];\n    }\n    const minIndex = evenValues.reduce((acc,\
  \ curr, i, arr) => {\n        if (curr < arr[i]) {\n            return i;\n    \
  \    }\n        return acc;\n    }, 0);\n    return [evenValues[minIndex], minIndex];\n\
  }\n"
- "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const minValue = Math.min(...evenValues);\n  const minIndex =\
  \ evenValues.indexOf(minValue);\n  return [minValue, minIndex];\n}\n"
- "    const evenValues = arr.filter(n => n % 2 === 0);\n    if (evenValues.length\
  \ === 0) return [];\n    const sortedEvenValues = evenValues.sort((a, b) => a -\
  \ b);\n    const smallestEvenValue = sortedEvenValues[0];\n    const smallestIndex\
  \ = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === smallestEvenValue)\
  \ {\n            smallestIndex = i;\n            break;\n        }\n    }\n    return\
  \ [smallestEvenValue, smallestIndex];\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "    const result = [];\n    let minIndex = -1;\n    let minValue = arr[0];\n  \
  \  for (let i = 1; i < arr.length; i++) {\n        if (arr[i] === minValue) {\n\
  \            minIndex++;\n        } else {\n            if (minIndex === -1) {\n\
  \                minIndex = minValue;\n                minValue = arr[i];\n    \
  \        } else {\n                if (arr[i] < minValue) {\n                  \
  \  minValue = arr[i];\n                    minIndex = minValue;\n              \
  \  }\n            }\n        }\n    }\n    if (minIndex === -1) {\n        return\
  \ [];\n    }\n    result.push(minValue, minIndex);\n    return result;\n}\n"
- "    const evenValues = arr.filter(v => v % 2 === 0);\n    if (evenValues.length\
  \ === 0) {\n        return [];\n    }\n    const minIndex = evenValues.reduce((acc,\
  \ curr, i, arr) => {\n        if (curr < arr[i]) {\n            return i;\n    \
  \    }\n        return acc;\n    }, 0);\n    return [evenValues[minIndex], minIndex];\n\
  }\n"
- "  const evenNodes = arr.filter(node => node % 2 === 0);\n  if (evenNodes.length\
  \ === 0) return [];\n  const smallestEven = evenNodes.reduce((prev, curr) => Math.min(prev,\
  \ curr));\n  const smallestIndex = evenNodes.indexOf(smallestEven);\n  return [smallestEven,\
  \ smallestIndex];\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  return evenValues.sort((a, b) => a - b).slice(0, 1);\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
  \ curr));\n  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
  \ index];\n}\n"
- "  const result = [];\n  const map = new Map<number, number>();\n  for (let i =\
  \ 0; i < arr.length; i++) {\n    const node = arr[i];\n    if (map.has(node)) {\n\
  \      const index = map.get(node);\n      result.push(node);\n      map.delete(node);\n\
  \      map.set(arr[index], index);\n    } else {\n      map.set(node, i);\n    }\n\
  \  }\n  return result;\n}\n"
- "    let minIndex = arr.findIndex(x => x % 2 === 0);\n    if (minIndex === -1) {\n\
  \        return [];\n    }\n    let minValue = arr[minIndex];\n    let minIndexes\
  \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === minValue)\
  \ {\n            minIndexes.push(i);\n        }\n    }\n    if (minIndexes.length\
  \ === 1) {\n        return [minValue, minIndexes[0]];\n    }\n    let minIndexesValues\
  \ = minIndexes.map(i => arr[i]);\n    let minIndexesValuesAndMinIndex = minIndexesValues.map(x\
  \ => [x, i]);\n    let minIndexesValuesAndMinIndexSorted = minIndexesValuesAndMinIndex.sort((a,\
  \ b) => a[0] - b[0]);\n    let minIndexesValuesAndMinIndexSortedAndMinValue = minIndexesValuesAndMinIndexSorted.map(x\
  \ => x[1]);\n    let minIndexesValuesAndMinIndexSortedAndMinValueAndIndex = minIndexesValuesAndMinIndexSortedAndMinValue.map(x\
  \ => [x[0], x[2]]);\n    let minIndexesValuesAndMinIndexSortedAndMinValueAndIndexSorted\
  \ = minIndexesValuesAndMinIndexSortedAndMinValueAndIndex.sort((a, b) => a[0] - b[0]);\n\
  \    let minIndexesValuesAndMinIndexSortedAndMinValueAndIndexSortedAndMinValue =\
  \ minIndexesValuesAndMinIndexSortedAndMinValueAndIndexSorted.map(x => x[1]);\n \
  \   let minIndexesValuesAndMinIndexSortedAndMinValueAndIndexSortedAndMinValueAndIndex\
  \ = minIndexesValuesAndMinIndexSortedAndMinValueAndIndexSortedAndMinValue.map(x\
  \ => [x[0], x[2]]);\n    let minIndexesValuesAndMinIndexSortedAndMinValueAndIndexSortedAndMinValueAndIndexSorted\
  \ = minIndexesValuesAndMinIndexSortedAndMinValueAndIndexSortedAndMinValue.map(x\
  \ => [x[0], x[2]]);\n    return minIndexesValuesAndMinIndexSortedAndMinValueAndIndexSortedAndMinValueAndIndexSorted;\n\
  }\n"
- "    const result = [];\n    let minIndex = 0;\n    let minValue = arr[0];\n   \
  \ for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < minValue) {\n   \
  \         minValue = arr[i];\n            minIndex = i;\n        }\n    }\n    result.push(minValue);\n\
  \    result.push(minIndex);\n    return result;\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const node\
  \ = arr[i];\n    if (map.has(node)) {\n      const index = map.get(node);\n    \
  \  map.set(node, index + 1);\n    } else {\n      map.set(node, 1);\n    }\n  }\n\
  \  const result = [];\n  for (const [key, value] of map) {\n    if (value % 2 ===\
  \ 0) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n"
- "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
  \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n"
- "  const result = [];\n  const map = new Map();\n  for (let i = 0; i < arr.length;\
  \ i++) {\n    const val = arr[i];\n    if (!map.has(val)) {\n      map.set(val,\
  \ i);\n      result.push(val);\n    }\n  }\n  return result;\n}\n"
- "  const result = [];\n  const map = new Map();\n  for (let i = 0; i < arr.length;\
  \ i++) {\n    const node = arr[i];\n    if (map.has(node)) {\n      const index\
  \ = map.get(node);\n      result.push(arr[index]);\n    } else {\n      map.set(node,\
  \ i);\n    }\n  }\n  return result;\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const smallestEvenValue = evenValues.reduce((a, b) => Math.min(a,\
  \ b));\n  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
  \ index];\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const minIndex = evenValues.reduce((acc, val, i) => {\n    if\
  \ (val < acc) return i;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n  return\
  \ evenValues.filter(n => n === minIndex)[0];\n}\n"
- "    let minIndex = -1;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const minIndex = evenValues.reduce((acc, curr, index) => {\n\
  \    if (curr < acc) return index;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n\
  \  return evenValues.map(n => [n, minIndex]);\n}\n"
- "  const result = [];\n  let minIndex = -1;\n  let minValue = arr[0];\n  for (let\
  \ i = 0; i < arr.length; i++) {\n    if (arr[i] === minValue) {\n      minIndex\
  \ = i;\n    }\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  result.push(minValue, minIndex);\n  return result;\n}\n"
- "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
  \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n"
- "  const map = new Map<number, number>();\n  for (let i = 0; i < arr.length; i++)\
  \ {\n    const node = arr[i];\n    if (map.has(node)) {\n      map.set(node, map.get(node)\
  \ + 1);\n    } else {\n      map.set(node, 1);\n    }\n  }\n  const result = [];\n\
  \  for (const [key, value] of map) {\n    if (value % 2 === 0) {\n      result.push(key);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const result = [];\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let\
  \ i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue =\
  \ arr[i];\n      minIndex = i;\n    }\n  }\n  result.push(minValue, minIndex);\n\
  \  return result;\n}\n"
- "  const evenValues = arr.filter(x => x % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr) => Math.min(prev,\
  \ curr));\n  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
  \ index];\n}\n"
- "  const evenValues = arr.filter((val) => val % 2 === 0);\n  if (evenValues.length\
  \ === 0) return [];\n  const minIndex = evenValues.reduce((acc, curr, index) =>\
  \ {\n    if (curr < acc) return index;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n\
  \  return evenValues.filter((val, index) => index === minIndex)[0];\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) {\n    return [];\n  }\n  const min = evenValues[0];\n  const minIndex = evenValues.indexOf(min);\n\
  \  return evenValues.filter(n => n !== min).map(n => [n, minIndex]);\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const index\
  \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
  }\n"
- "  let evenIndexes = [];\n  let evenValues = [];\n  for (let i = 0; i < arr.length;\
  \ i++) {\n    if (arr[i] % 2 === 0) {\n      evenIndexes.push(i);\n      evenValues.push(arr[i]);\n\
  \    }\n  }\n  if (evenIndexes.length === 0) {\n    return [];\n  }\n  let minIndex\
  \ = evenIndexes[0];\n  let minValue = evenValues[0];\n  for (let i = 1; i < evenIndexes.length;\
  \ i++) {\n    if (evenValues[i] < minValue) {\n      minValue = evenValues[i];\n\
  \      minIndex = evenIndexes[i];\n    }\n  }\n  return [minValue, minIndex];\n\
  }\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const map = new Map<number, number>();\n  for (let i = 0; i < arr.length; i++)\
  \ {\n    const value = arr[i];\n    if (map.has(value)) {\n      const index = map.get(value);\n\
  \      map.set(value, index + 1);\n    } else {\n      map.set(value, 1);\n    }\n\
  \  }\n  const result = [];\n  for (const [key, value] of map) {\n    if (value %\
  \ 2 === 0) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n"
- "  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const node\
  \ = arr[i];\n    if (!map.has(node)) {\n      map.set(node, i);\n    }\n  }\n  const\
  \ result = [];\n  for (const [key, value] of map) {\n    if (value % 2 === 0) {\n\
  \      result.push(value);\n    }\n  }\n  return result;\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) {\n    return [];\n  }\n  return evenValues.reduce((prev, curr, i, arr) =>\
  \ {\n    if (curr < prev) {\n      return curr;\n    }\n    if (curr === prev) {\n\
  \      return i;\n    }\n    return prev;\n  }, evenValues[0]);\n}\n"
- "    const result = [];\n    let minIndex = -1;\n    let minValue = arr[0];\n  \
  \  for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === minValue) {\n\
  \            if (minIndex === -1) {\n                minIndex = i;\n           \
  \ } else if (arr[i] !== minValue) {\n                minIndex = i;\n           \
  \ }\n        }\n    }\n    if (minIndex === -1) {\n        return [];\n    }\n \
  \   result.push(minValue);\n    result.push(minIndex);\n    return result;\n}\n"
- "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  return evenValues.reduce((acc, v, i) => {\n    if (v < acc[0])\
  \ {\n      return [v, i];\n    }\n    return acc;\n  }, evenValues[0]);\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter((val) => val % 2 === 0);\n  if (evenValues.length\
  \ === 0) {\n    return [];\n  }\n  const smallestEvenValue = Math.min(...evenValues);\n\
  \  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
  \ smallestIndex];\n}\n"
- "    const result = [];\n    let minIndex = 0;\n    let minValue = arr[0];\n   \
  \ for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < minValue) {\n   \
  \         minValue = arr[i];\n            minIndex = i;\n        }\n    }\n    result.push(minValue,\
  \ minIndex);\n    return result;\n}\n"
- "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
  \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n"
- "    const result = [];\n    let minValue = arr[0];\n    let minIndex = 0;\n   \
  \ for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < minValue) {\n   \
  \         minValue = arr[i];\n            minIndex = i;\n        }\n    }\n    result.push(minValue,\
  \ minIndex);\n    return result;\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const smallestIndex\
  \ = getIndex(arr, smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n\
  }\n"
- "  const result = [];\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let\
  \ i = 0; i < arr.length; i++) {\n    if (arr[i] === minValue) {\n      minIndex\
  \ = i;\n    }\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  result.push(minValue, minIndex);\n  return result;\n}\n"
- "  const map = new Map<number, number>();\n  for (let i = 0; i < arr.length; i++)\
  \ {\n    const node = arr[i];\n    if (map.has(node)) {\n      const value = map.get(node);\n\
  \      if (value < node) map.set(node, value);\n    } else {\n      map.set(node,\
  \ i);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map) {\n \
  \   if (value % 2 === 0) {\n      result.push(value);\n    }\n  }\n  return result;\n\
  }\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter((n) => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const sortedEvenValues = evenValues.sort((a, b) => a - b);\n\
  \  const index = sortedEvenValues.findIndex((n) => n % 2 === 0);\n  return [sortedEvenValues[index],\
  \ index];\n}\n"
- "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
  \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const result = [];\n  const map = new Map();\n  for (let i = 0; i < arr.length;\
  \ i++) {\n    const node = arr[i];\n    if (!map.has(node)) {\n      map.set(node,\
  \ i);\n    }\n  }\n  for (let [key, value] of map) {\n    if (value % 2 === 0) {\n\
  \      result.push(value);\n    }\n  }\n  return result;\n}\n"
- "    const evenValues = arr.filter(x => x % 2 === 0);\n    if (evenValues.length\
  \ === 0) {\n        return [];\n    }\n    const minIndex = evenValues.reduce((acc,\
  \ curr, i) => {\n        if (curr < arr[acc]) {\n            return i;\n       \
  \ }\n        return acc;\n    }, 0);\n    return [evenValues[minIndex], minIndex];\n\
  }\n"
- "  const result = [];\n  const minIndex = [];\n  let minVal = arr[0];\n  for (let\
  \ i = 0; i < arr.length; i++) {\n    if (arr[i] === minVal) {\n      minIndex.push(i);\n\
  \    }\n    if (arr[i] < minVal) {\n      minVal = arr[i];\n      minIndex = i;\n\
  \    }\n  }\n  if (minIndex.length > 0) {\n    result.push(minVal);\n    result.push(minIndex);\n\
  \  }\n  return result;\n}\n"
- "    const result = [];\n    let minIndex = -1;\n    let minValue = arr[0];\n  \
  \  for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < minValue) {\n  \
  \          minValue = arr[i];\n            minIndex = i;\n        }\n    }\n   \
  \ result.push(minValue, minIndex);\n    return result;\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const index\
  \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n\
  }\n"
- "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
  \ === 0) return [];\n  const minIndex = evenValues.reduce((prev, curr, index) =>\
  \ {\n    if (prev === undefined || curr < prev) {\n      return curr;\n    }\n \
  \   return index;\n  }, undefined);\n  return [evenValues[minIndex], minIndex];\n\
  }\n"
- "    const evenValues = arr.filter(v => v % 2 === 0);\n    if (evenValues.length\
  \ === 0) return [];\n    const minValue = evenValues.reduce((a, b) => Math.min(a,\
  \ b));\n    const minIndex = evenValues.indexOf(minValue);\n    return [minValue,\
  \ minIndex];\n}\n"
- "  let minIndex = -1;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
  \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n"
- "    const result = [];\n    let minIndex = 0;\n    let minValue = arr[0];\n   \
  \ for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < minValue) {\n   \
  \         minValue = arr[i];\n            minIndex = i;\n        }\n    }\n    result.push(minValue,\
  \ minIndex);\n    return result;\n}\n"
- "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const min = evenValues.reduce((a, b) => Math.min(a, b));\n  const\
  \ index = evenValues.indexOf(min);\n  return [min, index];\n}\n"
- "  const result = [];\n  const map = new Map();\n  for (let i = 0; i < arr.length;\
  \ i++) {\n    const node = arr[i];\n    if (map.has(node)) {\n      map.set(node,\
  \ map.get(node) + 1);\n    } else {\n      map.set(node, 1);\n    }\n  }\n  for\
  \ (let [key, value] of map) {\n    if (value === 1) {\n      result.push(key);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const result = [];\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let\
  \ i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue =\
  \ arr[i];\n      minIndex = i;\n    }\n  }\n  result.push(minValue, minIndex);\n\
  \  return result;\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) {\n    return [];\n  }\n  return evenValues.reduce((acc, cur, idx) => {\n \
  \   if (acc === null || cur < acc) {\n      return cur;\n    }\n    return acc;\n\
  \  }, null);\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const smallestEvenValue = evenValues.sort((a, b) => a - b)[0];\n\
  \  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
  \ smallestIndex];\n}\n"
- "    const evens = arr.filter(n => n % 2 === 0);\n    if (evens.length === 0) {\n\
  \        return [];\n    }\n    const min = evens.reduce((a, b) => Math.min(a, b));\n\
  \    const index = evens.indexOf(min);\n    return [min, index];\n}\n"
- "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const min = evenValues.reduce((a, b) => a < b ? a : b);\n  const\
  \ index = evenValues.indexOf(min);\n  return [min, index];\n}\n"
- "    const evenValues = arr.filter(n => n % 2 === 0);\n    if (evenValues.length\
  \ === 0) return [];\n    const smallestEvenValue = Math.min(...evenValues);\n  \
  \  const index = evenValues.indexOf(smallestEvenValue);\n    return [smallestEvenValue,\
  \ index];\n}\n"
- "    const result = [];\n    let minIndex = 0;\n    let minValue = arr[0];\n   \
  \ for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < minValue) {\n   \
  \         minValue = arr[i];\n            minIndex = i;\n        }\n    }\n    result.push(minValue,\
  \ minIndex);\n    return result;\n}\n"
- "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
  \ === 0) return [];\n  const smallestEvenValue = evenValues.reduce((prev, curr)\
  \ => Math.min(prev, curr));\n  const index = evenValues.indexOf(smallestEvenValue);\n\
  \  return [smallestEvenValue, index];\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  let minIndex = arr.findIndex(node => node % 2 === 0);\n  if (minIndex === -1)\
  \ {\n    return [];\n  }\n  let minValue = arr[minIndex];\n  let result = [];\n\
  \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === minValue && arr[i]\
  \ % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n"
- "    const result = [];\n    let minValue = arr[0];\n    let minIndex = 0;\n   \
  \ for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < minValue) {\n   \
  \         minValue = arr[i];\n            minIndex = i;\n        }\n    }\n    result.push(minValue,\
  \ minIndex);\n    return result;\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const sortedEvenValues = evenValues.sort((a, b) => a - b);\n\
  \  return sortedEvenValues.reduce((acc, cur, idx) => {\n    if (idx === 0) return\
  \ [cur, 0];\n    if (cur === sortedEvenValues[idx - 1]) return [cur, idx];\n   \
  \ return [cur, idx];\n  }, []);\n}\n"
- "    const evenValues = arr.filter((_, i) => i % 2 === 0);\n    if (evenValues.length\
  \ === 0) {\n        return [];\n    }\n    const minIndex = evenValues.reduce((acc,\
  \ curr, i) => {\n        if (curr < acc) {\n            return curr;\n        }\n\
  \        return acc;\n    }, Number.MAX_SAFE_INTEGER);\n    const minValue = evenValues[minIndex];\n\
  \    const result = [minValue, minIndex];\n    return result;\n}\n"
- "  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const value\
  \ = arr[i];\n    if (map.has(value)) {\n      const [smallestValue, smallestIndex]\
  \ = map.get(value);\n      if (smallestValue === value) {\n        map.set(value,\
  \ [smallestValue, smallestIndex]);\n      } else {\n        map.set(value, [smallestValue,\
  \ smallestIndex]);\n      }\n    } else {\n      map.set(value, [value, i]);\n \
  \   }\n  }\n  const result = [];\n  for (let [value, index] of map.values()) {\n\
  \    if (value % 2 === 0) {\n      result.push([value, index]);\n    }\n  }\n  return\
  \ result;\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const smallestIndex\
  \ = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n\
  }\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  return evenValues.reduce((acc, cur, index) => {\n    if (index\
  \ === 0) {\n      acc.push(cur);\n    } else {\n      if (cur < acc[0]) {\n    \
  \    acc[0] = cur;\n        acc[1] = index;\n      }\n    }\n    return acc;\n \
  \ }, []);\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) {\n    return [];\n  }\n  const minValue = Math.min(...evenValues);\n  const\
  \ minIndex = evenValues.indexOf(minValue);\n  return [minValue, minIndex];\n}\n"
- "  const result = [];\n  let minIndex = -1;\n  let minValue = arr[0];\n  for (let\
  \ i = 0; i < arr.length; i++) {\n    if (arr[i] === minValue) {\n      minIndex\
  \ = i;\n    }\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  if (minIndex === -1) {\n    return result;\n  }\n  result.push(minValue,\
  \ minIndex);\n  return result;\n}\n"
- "  const map = new Map<number, number>();\n  for (let i = 0; i < arr.length; i++)\
  \ {\n    const node = arr[i];\n    if (map.has(node)) {\n      const index = map.get(node);\n\
  \      map.set(node, index + 1);\n    } else {\n      map.set(node, 1);\n    }\n\
  \  }\n  const result = [];\n  for (const [key, value] of map) {\n    if (value %\
  \ 2 === 0) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n"
- "    const evens = arr.filter(n => n % 2 === 0);\n    if (evens.length === 0) {\n\
  \        return [];\n    }\n    const minIndex = evens.reduce((acc, curr, i, arr)\
  \ => {\n        if (curr < arr[i - 1]) {\n            return i;\n        }\n   \
  \     return acc;\n    }, 0);\n    return [evens[minIndex], minIndex];\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  return evenValues.sort((a, b) => a - b).slice(0, 1);\n}\n"
- "  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const node\
  \ = arr[i];\n    if (map.has(node)) {\n      const [value, index] = map.get(node);\n\
  \      if (value < node) map.set(node, [value, index]);\n    } else {\n      map.set(node,\
  \ [node, i]);\n    }\n  }\n  return Array.from(map.values()).sort((a, b) => a[0]\
  \ - b[0]).map(a => a[1]);\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(node => node % 2 === 0);\n  if (evenValues.length\
  \ === 0) return [];\n  const minIndex = evenValues.reduce((minIndex, node, index)\
  \ => {\n    if (node < minIndex) return node;\n    if (node === minIndex) return\
  \ index;\n    return minIndex;\n  }, Number.MAX_SAFE_INTEGER);\n  const minValue\
  \ = evenValues[minIndex];\n  const result = [minValue, minIndex];\n  return result;\n\
  }\n"
- "  const map = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const node\
  \ = arr[i];\n    if (map.has(node)) {\n      const index = map.get(node);\n    \
  \  map.set(node, index + 1);\n    } else {\n      map.set(node, 1);\n    }\n  }\n\
  \  const result = [];\n  for (let [key, value] of map) {\n    if (value % 2 ===\
  \ 0) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n"
- "    const minIndex = arr.findIndex(node => node % 2 === 0);\n    if (minIndex ===\
  \ -1) {\n        return [];\n    }\n    const minValue = arr[minIndex];\n    const\
  \ result = [minValue, minIndex];\n    for (let i = minIndex + 1; i < arr.length;\
  \ i++) {\n        if (arr[i] % 2 === 0) {\n            result[1] = i;\n        \
  \    break;\n        }\n    }\n    return result;\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const smallestEvenValue = evenValues.reduce((a, b) => a < b ?\
  \ a : b);\n  const index = arr.indexOf(smallestEvenValue);\n  return [smallestEvenValue,\
  \ index];\n}\n"
- "    let evenNodes: number[] = [];\n    let evenNodesIndex: number[] = [];\n   \
  \ let minIndex: number = 0;\n    let minValue: number = 0;\n    for (let i = 0;\
  \ i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            evenNodes.push(arr[i]);\n\
  \            evenNodesIndex.push(i);\n            if (arr[i] < minValue) {\n   \
  \             minValue = arr[i];\n                minIndex = i;\n            }\n\
  \        }\n    }\n    if (evenNodesIndex.length === 0) {\n        return [];\n\
  \    }\n    let minIndexValue = evenNodesIndex[evenNodesIndex.length - 1];\n   \
  \ for (let i = 0; i < evenNodesIndex.length; i++) {\n        if (evenNodesIndex[i]\
  \ === minIndexValue) {\n            minIndex += 1;\n        }\n    }\n    return\
  \ [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const sortedEvenValues = evenValues.sort((a, b) => a - b);\n\
  \  const smallestEvenValue = sortedEvenValues[0];\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n\
  \  return [smallestEvenValue, smallestIndex];\n}\n"
- "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
  \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n"
- "  let minIndex = -1;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
  \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n"
- "  const result = [];\n  let minIndex = -1;\n  let minValue = arr[0];\n  for (let\
  \ i = 1; i < arr.length; i++) {\n    if (arr[i] === minValue) {\n      minIndex\
  \ = i;\n      minValue = arr[i];\n    } else if (arr[i] === minValue && minIndex\
  \ === -1) {\n      minIndex = i;\n      minValue = arr[i];\n    }\n  }\n  if (minIndex\
  \ === -1) {\n    return [];\n  }\n  result.push(minValue, minIndex);\n  return result;\n\
  }\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const minValue = evenValues.reduce((a, b) => a < b ? a : b);\n\
  \  const minIndex = evenValues.indexOf(minValue);\n  return [minValue, minIndex];\n\
  }\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const minValue = Math.min(...evenValues);\n  const minIndex =\
  \ evenValues.indexOf(minValue);\n  return [minValue, minIndex];\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const minValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(minValue);\n\
  \  return [minValue, index];\n}\n"
- "  const result = [];\n  const minIndex = arr.findIndex(item => item % 2 === 0);\n\
  \  if (minIndex === -1) {\n    return result;\n  }\n  const minValue = arr[minIndex];\n\
  \  const minIndexes = arr.filter(item => item % 2 === 0).map(item => item - minValue);\n\
  \  const minIndexesSorted = minIndexes.sort((a, b) => a - b);\n  const minIndexesSortedIndex\
  \ = minIndexesSorted.indexOf(0);\n  result.push(minValue);\n  result.push(minIndexesSortedIndex);\n\
  \  return result;\n}\n"
- "    let minIndex = arr.findIndex(node => node % 2 === 0);\n    if (minIndex ===\
  \ -1) {\n        return [];\n    }\n    let minValue = arr[minIndex];\n    let result\
  \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === minValue)\
  \ {\n            result.push(i);\n        }\n    }\n    return result;\n}\n"
- "  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const minIndex = evenValues.reduce((acc, curr, i, arr) => {\n\
  \    if (curr < arr[0]) return i;\n    return acc;\n  }, -1);\n  return evenValues.map(n\
  \ => [n, minIndex]);\n}\n"
- "  const evenValues = arr.filter(v => v % 2 === 0);\n  if (evenValues.length ===\
  \ 0) return [];\n  const minIndex = evenValues.reduce((acc, val, i) => {\n    if\
  \ (val < acc) return i;\n    return acc;\n  }, Number.MAX_SAFE_INTEGER);\n  const\
  \ minValue = evenValues[minIndex];\n  return evenValues.filter(v => v === minValue).map(v\
  \ => v);\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
  \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n   \
  \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"
- "  let minIndex = -1;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
  \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
  \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n"
language: ts
name: HumanEval_68_pluck
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// Input: [1,2,3]\n\
  // Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index. \n// Example 3:\n// Input: []\n// Output: []\n// Example 4:\n\
  // Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation: 0 is the smallest\
  \ value, but  there are two zeros,\n// so we will choose the first zero, which has\
  \ the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0\
  \ <= node.value\nfunction pluck(arr: number[]): number[] {\n"
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
  \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n\
  \  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
  \ 9, 7, 1]),[]);\n}\n\ntest();"
