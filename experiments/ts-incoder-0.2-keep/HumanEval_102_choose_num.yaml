completions:
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num += 2;\n        min_num -= 2;\n    }\n    while (max_num > min_num)\
  \ {\n        max_num -= 2;\n        min_num += 2;\n    }\n    return max_num;\n\
  }\n"
- "    if (x < y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result = x;\n    while (result < y) {\n        if (result % 2 ===\
  \ 0) {\n            result = result + 1;\n        } else {\n            result =\
  \ result + 2;\n        }\n    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result = x;\n    while (result <= y) {\n        if (result % 2 ===\
  \ 0) {\n            result = result + 1;\n        } else {\n            result =\
  \ result + 2;\n        }\n    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (i % 2 === 0) {\n            result = i;\n            break;\n        }\n \
  \   }\n    return result;\n}\n"
- "\tlet result: number = -1;\n\tlet even: number = x;\n\tlet odd: number = y;\n\t\
  while (even > 0 && odd > 0) {\n\t\tif (even % 2 === 0 && odd % 2 !== 0) {\n\t\t\t\
  result = even;\n\t\t\tbreak;\n\t\t}\n\t\tif (even % 2 !== 0 && odd % 2 === 0) {\n\
  \t\t\tresult = odd;\n\t\t\tbreak;\n\t\t}\n\t\tif (even % 2 === 0 && odd % 2 ===\
  \ 0) {\n\t\t\tbreak;\n\t\t}\n\t\teven = even - 1;\n\t\todd = odd - 1;\n\t}\n\treturn\
  \ result;\n}\n"
- "    let max_num = Math.max(x, y);\n    let min_num = Math.min(x, y);\n    let mid\
  \ = Math.floor(max_num / 2);\n    if (max_num % 2 === 0 && min_num % 2 === 0) {\n\
  \        return mid;\n    } else if (max_num % 2 === 0) {\n        return choose_num(min_num,\
  \ mid);\n    } else if (min_num % 2 === 0) {\n        return choose_num(mid, max_num);\n\
  \    } else {\n        return -1;\n    }\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    if (x < 0 || y < 0) {\n        return -1;\n    }\n    let even: number\
  \ = x;\n    let odd: number = y;\n    while (even > 0 && odd > 0) {\n        if\
  \ (even % 2 === 0 && odd % 2 !== 0) {\n            return even;\n        }\n   \
  \     even /= 2;\n        odd /= 2;\n    }\n    return -1;\n}\n"
- "    if (x > y) {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n\
  \    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num) {\n \
  \       max_num += 2;\n        min_num -= 2;\n    }\n    while (max_num > min_num)\
  \ {\n        max_num -= 2;\n        min_num += 2;\n    }\n    return max_num;\n\
  }\n"
- "    if (x > y) {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n\
  \    let even = x % 2 === 0;\n    let even2 = y % 2 === 0;\n    if (even && even2)\
  \ {\n        return Math.max(x, y);\n    }\n    if (even) {\n        return -1;\n\
  \    }\n    if (even2) {\n        return -1;\n    }\n    return Math.max(x, y);\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num *= 2;\n        min_num *= 2;\n    }\n    while (max_num > min_num)\
  \ {\n        if (max_num % 2 === 0) {\n            max_num -= 1;\n        } else\
  \ {\n            max_num -= 2;\n        }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n\
  \    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n        if (i\
  \ % 2 === 0) {\n            result = i;\n            break;\n        }\n    }\n\
  \    return result;\n}\n"
- "    let even: number = x % 2 === 0\n    let evenOrOdd: number = even ? x : y\n\
  \    let evenOrOddEven: number = even ? y : x\n    let evenOrOddOdd: number = even\
  \ ? x : y\n    let evenOrOddEvenOdd: number = even ? y : x\n    let evenOrOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOdd: number = even ? y : x\n\
  \    let evenOrOddEvenOddEvenOddEven: number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEven: number = even\
  \ ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x\n    let\
  \ evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x\n    let evenOrOddEvenOdd"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (min_num < max_num)\
  \ {\n        let mid = min_num + max_num / 2;\n        if (mid % 2 === 0) {\n  \
  \          max_num = mid;\n        } else {\n            min_num = mid;\n      \
  \  }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num++;\n        if (max_num % 2 === 0) {\n            max_num++;\n\
  \        }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result = x;\n    while (result < y) {\n        result *= 2;\n    }\n\
  \    while (result > y) {\n        result /= 2;\n    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num += 2;\n        min_num -= 2;\n    }\n    return max_num;\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num - min_num >\
  \ 1) {\n        let mid = (max_num + min_num) / 2;\n        if (mid % 2 === 0) {\n\
  \            max_num = mid;\n        } else {\n            min_num = mid;\n    \
  \    }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (is_even(i)) {\n            result = i;\n            break;\n        }\n  \
  \  }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result = x;\n    while (result < y) {\n        if (result % 2 ===\
  \ 0) {\n            result = result + 1;\n        } else {\n            result =\
  \ result + 2;\n        }\n    }\n    return result;\n}\n"
- "    let even: number = x % 2 === 0;\n    let evenOrOdd: number = even ? x : y;\n\
  \    let evenOrOddMinus1: number = even ? y - 1 : x;\n    let evenOrOddMinus2: number\
  \ = even ? x - 1 : y;\n    let evenOrOddMinus3: number = even ? y - 2 : x;\n   \
  \ let evenOrOddMinus4: number = even ? x - 2 : y;\n    let evenOrOddMinus5: number\
  \ = even ? y - 3 : x;\n    let evenOrOddMinus6: number = even ? x - 3 : y;\n   \
  \ let evenOrOddMinus7: number = even ? y - 4 : x;\n    let evenOrOddMinus8: number\
  \ = even ? x - 4 : y;\n    let evenOrOddMinus9: number = even ? y - 5 : x;\n   \
  \ let evenOrOddMinus10: number = even ? x - 5 : y;\n    let evenOrOddMinus11: number\
  \ = even ? y - 6 : x;\n    let evenOrOddMinus12: number = even ? x - 6 : y;\n  \
  \  let evenOrOddMinus13: number = even ? y - 7 : x;\n    let evenOrOddMinus14: number\
  \ = even ? x - 7 : y;\n    let evenOrOddMinus15: number = even ? y - 8 : x;\n  \
  \  let evenOrOddMinus16: number = even ? x - 8 : y;\n    let evenOrOddMinus17: number\
  \ = even ? y - 9 : x;\n    let evenOrOddMinus18: number = even ? x - 9 : y;\n  \
  \  let evenOrOddMinus19: number = even ? y - 10 : x;\n    let evenOrOddMinus20:\
  \ number = even ? x - 10 : y;\n    let evenOrOddMinus21: number = even ? y - 11\
  \ : x;\n    let evenOrOddMinus22: number = even ? x - 11 : y;\n    let evenOrOddMinus23:\
  \ number = even ? y - 12 : x;\n    let evenOrOddMinus24: number = even ? x - 12\
  \ : y;\n    let evenOrOddMinus25: number = even ? y - 13 : x;\n    let evenOrOddMinus26:\
  \ number = even ? x - 13 : y;\n    let evenOrOddMinus27: number = even ? y - 14\
  \ : x;\n    let evenOrOddMinus28: number = even ? x - 14 : y;\n    let evenOrOddMinus29:\
  \ number = even ? y - 15 : x;\n    let evenOrOddMinus30"
- "\tlet max_num = Math.max(x, y);\n\tlet min_num = Math.min(x, y);\n\tlet even: boolean;\n\
  \tlet odd: boolean;\n\tlet num: number;\n\tlet num_even: number;\n\tlet num_odd:\
  \ number;\n\tlet num_max: number;\n\tlet num_min: number;\n\tlet num_range: number;\n\
  \tlet num_range_even: number;\n\tlet num_range_odd: number;\n\tlet num_range_max:\
  \ number;\n\tlet num_range_min: number;\n\tlet num_range_range: number;\n\tlet num_range_range_even:\
  \ number;\n\tlet num_range_range_odd: number;\n\tlet num_range_range_max: number;\n\
  \tlet num_range_range_min: number;\n\tlet num_range_range_range: number;\n\tlet\
  \ num_range_range_range_even: number;\n\tlet num_range_range_range_odd: number;\n\
  \tlet num_range_range_range_max: number;\n\tlet num_range_range_range_min: number;\n\
  \tlet num_range_range_range_range: number;\n\tlet num_range_range_range_range_even:\
  \ number;\n\tlet num_range_range_range_range_odd: number;\n\tlet num_range_range_range_range_max:\
  \ number;\n\tlet num_range_range_range_range_min: number;\n\tlet num_range_range_range_range_range:\
  \ number;\n\tlet num_range_range_range_range_range_even: number;\n\tlet num_range_range_range_range_range_odd:\
  \ number;\n\tlet num_range_range_range_range_range_max: number;\n\tlet num_range_range_range_range_range_min:\
  \ number;\n\tlet num_range_range_range_range_range_range: number;\n\tlet num_range_range_range_range_range_range_even:\
  \ number;\n\tlet num_range_range_range_range_range_range_odd: number;\n\tlet num_range_range_range_range_range_range_max:\
  \ number;\n\tlet num_range_range_range_range_range_range_min: number;\n\tlet num_range_range_range_range_range_range_range:\
  \ number;\n\tlet num_range_range_range_range_range_range_even: number;\n\tlet num_range_range_range_range_range_range_odd:\
  \ number;\n\tlet num_range_range_range_range_range_range_max: number;\n\tlet num_range_range_range_range_range_range_min:\
  \ number;\n\tlet num_range_range_range_range_range_range_range: number;\n\tlet num_range_range_range_range_range_range_range_even:\
  \ number;\n\tlet num_range_range_range_range_range_range_range_odd: number;\n\t\
  let num_range_range_range_range_range_range_range_max: number;\n\tlet num_range_range_range_range_range_range_range_min:\
  \ number;\n\tlet num_range_range_range_range_range_range_range_range: number;\n\t\
  let num_range_range_range_range_range_range_range_range_even: number;\n\tlet num_range_range_range_range_range_range_range_range_odd:\
  \ number;"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (y > 0) {\n        if (result % 2 ===\
  \ 0) {\n            result = result / 2;\n        } else {\n            y = y -\
  \ 1;\n        }\n    }\n    return result;\n}\n"
- "  if (x > y) {\n    return choose_num(y, x);\n  }\n  \n  let max_num = x;\n  let\
  \ min_num = y;\n  \n  while (max_num % 2 == 0) {\n    max_num = max_num / 2;\n \
  \ }\n  \n  while (min_num % 2 == 0) {\n    min_num = min_num / 2;\n  }\n  \n  if\
  \ (max_num > min_num) {\n    return max_num;\n  } else {\n    return -1;\n  }\n\
  }\n"
- "    if (x < y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (y >= 2) {\n        if (y % 2 === 0)\
  \ {\n            result = y;\n            break;\n        }\n        y = y / 2;\n\
  \    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (result <= y) {\n        if (result\
  \ % 2 === 0) {\n            result = result + 1;\n        } else {\n           \
  \ result = result + 2;\n        }\n    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    if (x === y) {\n        return x\n    }\n    let even: number = x % 2 === 0\n\
  \    let even2 = y % 2 === 0\n    if (even && even2) {\n        return y\n    }\n\
  \    if (even) {\n        return -1\n    }\n    return -1\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (result <= y) {\n        if (is_even(result))\
  \ {\n            result = result + 2;\n        } else {\n            result = result\
  \ + 1;\n        }\n    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (i % 2 === 0) {\n            result = i;\n            break;\n        }\n \
  \   }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num += 2;\n        min_num -= 2;\n    }\n    return max_num;\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let even: number = x % 2 === 0;\n    let evenOrOdd: number = even ? x\
  \ : y;\n    let evenOrOddEven: number = even ? y : x;\n    let evenOrOddOdd: number\
  \ = even ? y : x;\n    let evenOrOddEvenOdd: number = even ? y : x;\n    let evenOrOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOdd: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOddEven: number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEven: number = even\
  \ ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n   \
  \ let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x;\n   \
  \ let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y\
  \ : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven: number\
  \ = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let even"
- "    if (x < y) {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n\
  \    let max_num = x;\n    let min_num = y;\n    while (true) {\n        if (max_num\
  \ % 2 == 0) {\n            max_num = max_num / 2;\n        } else {\n          \
  \  max_num = max_num * 3 + 1;\n        }\n        if (min_num % 2 == 0) {\n    \
  \        min_num = min_num / 2;\n        } else {\n            min_num = min_num\
  \ * 3 + 1;\n        }\n        if (max_num < min_num) {\n            return -1;\n\
  \        }\n    }\n}\n"
- "    let even: number = x % 2 === 0\n    let x: number = y % 2 === 0\n    let y:\
  \ number = x === 0\n    let z: number = y === 0\n    if (even && x && y) {\n   \
  \     return x\n    } else if (even && x && !y) {\n        return y\n    } else\
  \ if (even && !x && y) {\n        return z\n    } else if (!even && x && y) {\n\
  \        return y\n    } else if (!even && x && !y) {\n        return x\n    } else\
  \ if (!even && !x && y) {\n        return z\n    }\n    return -1\n}\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    let max_num = Math.max(x, y)\n    let min_num = Math.min(x, y)\n    let max_even\
  \ = max_num / 2\n    let min_even = min_num / 2\n    if (max_even % 2 === 0 && min_even\
  \ % 2 === 0) {\n        return max_even\n    } else {\n        return -1\n    }\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (is_even(i)) {\n            result = i;\n            break;\n        }\n  \
  \  }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    if (x === y) {\n        return x\n    }\n    let m = Math.max(x, y)\n    let\
  \ n = Math.min(x, y)\n    while (m % 2 === 0) {\n        m = Math.floor(m / 2)\n\
  \    }\n    while ((n % 2) === 0) {\n        n = Math.floor((n + 1) / 2)\n    }\n\
  \    return m\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    if (x < 0 || y < 0) {\n        return -1;\n    }\n    let result = 0;\n\
  \    for (let i = x; i <= y; i++) {\n        if (i % 2 === 0) {\n            result\
  \ = i;\n            break;\n        }\n    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (result < y) {\n        result += 2;\n\
  \    }\n    return result;\n}\n"
- "    if (x > y) {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n\
  \    let max_num = x;\n    let min_num = y;\n    while (true) {\n        let num\
  \ = Math.floor(Math.random() * (max_num - min_num + 1)) + min_num;\n        if (num\
  \ % 2 === 0) {\n            return num;\n        }\n        if (num > max_num) {\n\
  \            max_num = num;\n        }\n        if (num < min_num) {\n         \
  \   min_num = num;\n        }\n    }\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (is_even(i)) {\n            result = i;\n            break;\n        }\n  \
  \  }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    let counter: number = 0;\n    while (result\
  \ < y) {\n        result += 2;\n        counter++;\n    }\n    if (counter > y)\
  \ {\n        return -1;\n    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (is_even(i)) {\n            result = i;\n            break;\n        }\n  \
  \  }\n    return result;\n}\n"
- "    let even: number = x % 2 === 0;\n    let biggest: number = -1;\n    if (even\
  \ && y > x) {\n        biggest = x;\n    }\n    else if (even && y === x) {\n  \
  \      biggest = x;\n    }\n    else if (even && y > x) {\n        biggest = y;\n\
  \    }\n    else if (even && y === x) {\n        biggest = y;\n    }\n    return\
  \ biggest;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num - min_num >\
  \ 1) {\n        let mid = max_num + min_num;\n        if (mid % 2 == 0) {\n    \
  \        max_num = mid;\n        } else {\n            min_num = mid;\n        }\n\
  \    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n\
  \    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num) {\n \
  \       max_num += max_num;\n        min_num -= min_num;\n    }\n    return max_num;\n\
  }\n"
- "  if (x > y) {\n    let temp = x\n    x = y\n    y = temp\n  }\n  if (x === y)\
  \ {\n    return -1\n  }\n  let max_num = x\n  let min_num = y\n  while (max_num\
  \ % 2 === 0) {\n    max_num -= 1\n  }\n  while (min_num % 2 === 0) {\n    min_num\
  \ -= 1\n  }\n  while (max_num < min_num) {\n    if (max_num % 2 === 0) {\n     \
  \ max_num += 1\n    } else {\n      min_num -= 1\n    }\n  }\n  return max_num\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result = x;\n    while (result < y) {\n        result += y;\n    }\n\
  \    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num *= 2;\n        min_num *= 2;\n    }\n    while (max_num > min_num)\
  \ {\n        if (max_num % 2 === 0) {\n            max_num -= 1;\n        } else\
  \ {\n            max_num += 1;\n        }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let even: number = x;\n    let odd: number = y;\n    while (even > 0 &&\
  \ odd > 0) {\n        if (even % 2 === 0) {\n            even = even - 1;\n    \
  \    } else {\n            odd = odd - 1;\n        }\n    }\n    return even;\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result = x;\n    while (result < y) {\n        result += y;\n    }\n\
  \    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result = x;\n    while (result < y) {\n        result *= 2;\n    }\n\
  \    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num - min_num >\
  \ 1) {\n        let mid = max_num + min_num / 2;\n        if (mid % 2 === 0) {\n\
  \            max_num = mid;\n        } else {\n            min_num = mid;\n    \
  \    }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num += 2;\n        min_num -= 2;\n    }\n    return max_num;\n\
  }\n"
- "\tlet z: number = x;\n\twhile (z < y) {\n\t\tz += 2;\n\t}\n\treturn z;\n}\n"
- "    if (x < y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    let max_num = Math.max(x, y)\n    let min_num = Math.min(x, y)\n    let result\
  \ = max_num\n    while (result < min_num) {\n        result *= 2\n    }\n    return\
  \ result\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num++;\n        if (max_num % 2 === 0) {\n            return max_num;\n\
  \        }\n    }\n    return -1;\n}\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    let result: number = -1\n    for (let i = x; i <= y; i++) {\n        if (is_even(i))\
  \ {\n            result = i\n        }\n    }\n    return result\n}\n"
- "    if (x < y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num > min_num)\
  \ {\n        let mid = max_num + min_num / 2;\n        if (mid % 2 === 0) {\n  \
  \          max_num = mid;\n        } else {\n            min_num = mid;\n      \
  \  }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (result <= y) {\n        if (result\
  \ % 2 === 0) {\n            result = result + 1;\n        } else {\n           \
  \ result = result + 2;\n        }\n    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    let result: number = -1\n    let max_num: number = x\n    let min_num: number\
  \ = y\n    while (max_num - min_num > 1) {\n        let mid: number = (max_num +\
  \ min_num) / 2\n        if (mid % 2 === 0) {\n            result = mid\n       \
  \     max_num = mid\n        } else {\n            min_num = mid\n        }\n  \
  \  }\n    return result\n}\n"
- "    let evens: number[] = [];\n    for (let i = x; i <= y; i++) {\n        if (i\
  \ % 2 === 0) {\n            evens.push(i);\n        }\n    }\n    if (evens.length\
  \ === 0) {\n        return -1;\n    }\n    let biggest = evens[0];\n    for (let\
  \ i = 1; i < evens.length; i++) {\n        if (evens[i] > biggest) {\n         \
  \   biggest = evens[i];\n        }\n    }\n    return biggest;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let even: number = x;\n    let odd: number = y;\n    while (even > 0 &&\
  \ odd > 0) {\n        if (even % 2 === 0) {\n            even = even - 1;\n    \
  \    } else {\n            odd = odd - 1;\n        }\n    }\n    return even;\n\
  }\n"
- "    if (x > y) {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n\
  \    let result: number = x;\n    while (y >= 2) {\n        if (y % 2 === 0) {\n\
  \            result = y;\n        }\n        y = y / 2;\n    }\n    return result;\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (min_num < max_num)\
  \ {\n        let mid = min_num + max_num / 2;\n        if (mid % 2 === 0) {\n  \
  \          max_num = mid;\n        } else {\n            min_num = mid;\n      \
  \  }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (i % 2 === 0) {\n            result = i;\n        }\n    }\n    return result;\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num > min_num)\
  \ {\n        let mid = (max_num + min_num) / 2;\n        if (mid % 2 === 0) {\n\
  \            max_num = mid;\n        } else {\n            min_num = mid;\n    \
  \    }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (min_num > 0) {\n  \
  \      if (max_num % 2 == 0) {\n            max_num = max_num / 2;\n        } else\
  \ {\n            max_num = max_num - 1;\n        }\n    }\n    while (max_num <\
  \ y) {\n        if (min_num % 2 == 0) {\n            min_num = min_num / 2;\n  \
  \      } else {\n            min_num = min_num + 1;\n        }\n    }\n    return\
  \ max_num;\n}\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    if (x === y) {\n        return -1\n    }\n    let max_num = Math.max(x, y)\n\
  \    let min_num = Math.min(x, y)\n    let mid = Math.floor((max_num + min_num)\
  \ / 2)\n    if (mid === max_num) {\n        return mid\n    }\n    if (mid === min_num)\
  \ {\n        return mid\n    }\n    if (mid % 2 === 0) {\n        return choose_num(mid,\
  \ min_num)\n    }\n    return choose_num(max_num, mid)\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (min_num < max_num)\
  \ {\n        let mid = (min_num + max_num) / 2;\n        if (mid % 2 === 0) {\n\
  \            max_num = mid;\n        } else {\n            min_num = mid;\n    \
  \    }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num++;\n        while (max_num % 2 === 0) {\n            max_num++;\n\
  \        }\n        min_num--;\n        while (min_num % 2 === 0) {\n          \
  \  min_num--;\n        }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (result < y) {\n        if (result\
  \ % 2 === 0) {\n            result = result + 1;\n        } else {\n           \
  \ result = result + 2;\n        }\n    }\n    return result;\n}\n"
- "\tlet even: boolean;\n\tlet x: number;\n\tlet y: number;\n\tlet result: number;\n\
  \tlet evens: number;\n\tlet evens_found: boolean;\n\tlet evens_found2: boolean;\n\
  \tlet evens_found3: boolean;\n\tlet evens_found4: boolean;\n\tlet evens_found5:\
  \ boolean;\n\tlet evens_found6: boolean;\n\tlet evens_found7: boolean;\n\tlet evens_found8:\
  \ boolean;\n\tlet evens_found9: boolean;\n\tlet evens_found10: boolean;\n\tlet evens_found11:\
  \ boolean;\n\tlet evens_found12: boolean;\n\tlet evens_found13: boolean;\n\tlet\
  \ evens_found14: boolean;\n\tlet evens_found15: boolean;\n\tlet evens_found16: boolean;\n\
  \tlet evens_found17: boolean;\n\tlet evens_found18: boolean;\n\tlet evens_found19:\
  \ boolean;\n\tlet evens_found20: boolean;\n\tlet evens_found21: boolean;\n\tlet\
  \ evens_found22: boolean;\n\tlet evens_found23: boolean;\n\tlet evens_found24: boolean;\n\
  \tlet evens_found25: boolean;\n\tlet evens_found26: boolean;\n\tlet evens_found27:\
  \ boolean;\n\tlet evens_found28: boolean;\n\tlet evens_found29: boolean;\n\tlet\
  \ evens_found30: boolean;\n\tlet evens_found31: boolean;\n\tlet evens_found32: boolean;\n\
  \tlet evens_found33: boolean;\n\tlet evens_found34: boolean;\n\tlet evens_found35:\
  \ boolean;\n\tlet evens_found36: boolean;\n\tlet evens_found37: boolean;\n\tlet\
  \ evens_found38: boolean;\n\tlet evens_found39: boolean;\n\tlet evens_found40: boolean;\n\
  \tlet evens_found41: boolean;\n\tlet evens_found42: boolean;\n\tlet evens_found43:\
  \ boolean;\n\tlet evens_found44: boolean;\n\tlet evens_found45: boolean;\n\tlet\
  \ evens_found46: boolean;\n\tlet evens_found47: boolean;\n\tlet evens_found48: boolean;\n\
  \tlet evens_found49: boolean;\n\tlet evens_found50: boolean;\n\tlet evens_found51:\
  \ boolean;\n\tlet evens_found52: boolean;\n\tlet evens_found53: boolean;\n\tlet\
  \ evens_found54: boolean;\n\tlet evens_"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let even: number = x % 2 === 0;\n    let evenOrOdd: number = even ? x\
  \ : y;\n    let evenOrOddEven: number = even ? y : x;\n    let evenOrOddOdd: number\
  \ = even ? y : x;\n    let evenOrOddEvenOdd: number = even ? x : y;\n    let evenOrOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddOdd: number = even ? x : y;\n\
  \    let evenOrOddEvenOddEvenOdd: number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOdd: number = even\
  \ ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x;\n    let\
  \ evenOrOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenO"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num % 2 == 0) {\n\
  \        max_num += 1;\n    }\n    while (min_num % 2 == 0) {\n        min_num -=\
  \ 1;\n    }\n    while (max_num < min_num) {\n        let temp = max_num;\n    \
  \    max_num = min_num;\n        min_num = temp;\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num += 2;\n        min_num -= 2;\n    }\n    return max_num;\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result = x;\n    while (result <= y) {\n        if (result % 2 ===\
  \ 0) {\n            result = result + 2;\n        } else {\n            result =\
  \ result + 1;\n        }\n    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num - min_num >\
  \ 1) {\n        let mid = max_num + min_num / 2;\n        if (mid % 2 === 0) {\n\
  \            max_num = mid;\n        } else {\n            min_num = mid;\n    \
  \    }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (result <= y) {\n        if (result\
  \ % 2 === 0) {\n            result = result + 1;\n        } else {\n           \
  \ result = result + 2;\n        }\n    }\n    return result;\n}\n"
- "    let even: number = x % 2 === 0\n    let evenOrOdd: number = even ? x : y\n\
  \    let evenOrOddEven: number = even ? y : x\n    let evenOrOddOdd: number = even\
  \ ? x : y\n    let evenOrOddEvenOdd: number = even ? y : x\n    let evenOrOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOdd: number = even ? y : x\n\
  \    let evenOrOddEvenOddEvenOddEven: number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEven: number = even\
  \ ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x\n    let\
  \ evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenO"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num += 2;\n        min_num -= 2;\n    }\n    while (max_num > min_num)\
  \ {\n        max_num -= 2;\n        min_num += 2;\n    }\n    return max_num;\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (result < y) {\n        result += 2;\n\
  \    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num += 2;\n        min_num -= 2;\n    }\n    return max_num;\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (i % 2 === 0) {\n            result = i;\n            break;\n        }\n \
  \   }\n    return result;\n}\n"
- "    let even: number = x % 2 === 0\n    let x: number = x + (even ? 1 : 0)\n  \
  \  let y: number = y + (even ? 1 : 0)\n    let even: number = y % 2 === 0\n    let\
  \ y: number = y + (even ? 1 : 0)\n    let even: number = y % 2 === 0\n    let y:\
  \ number = y + (even ? 1 : 0)\n    let even: number = y % 2 === 0\n    let y: number\
  \ = y + (even ? 1 : 0)\n    let even: number = y % 2 === 0\n    let y: number =\
  \ y + (even ? 1 : 0)\n    let even: number = y % 2 === 0\n    let y: number = y\
  \ + (even ? 1 : 0)\n    let even: number = y % 2 === 0\n    let y: number = y +\
  \ (even ? 1 : 0)\n    let even: number = y % 2 === 0\n    let y: number = y + (even\
  \ ? 1 : 0)\n    let even: number = y % 2 === 0\n    let y: number = y + (even ?\
  \ 1 : 0)\n    let even: number = y % 2 === 0\n    let y: number = y + (even ? 1\
  \ : 0)\n    let even: number = y % 2 === 0\n    let y: number = y + (even ? 1 :\
  \ 0)\n    let even: number = y % 2 === 0\n    let y: number = y + (even ? 1 : 0)\n\
  \    let even: number = y % 2 === 0\n    let y: number = y + (even ? 1 : 0)\n  \
  \  let even: number = y % 2 === 0\n    let y: number = y + (even ? 1 : 0)\n    let\
  \ even: number = y % 2 === 0\n    let y: number = y + (even ? 1 : 0)\n    let even:\
  \ number = y % 2 === 0\n    let y: number = y + (even ? 1 : 0)\n    let even: number\
  \ = y % 2 === 0\n    let y: number = y + (even ? 1 : 0)\n    let even: number =\
  \ y % 2 === 0\n    let y: number = y + (even ? 1 : 0)\n    let even: number = y\
  \ % 2 === 0\n    let y: number = y + (even ? 1 : 0)\n    let even: number = y %\
  \ 2 === 0\n    let y: number = y + (even ? 1 : 0)\n    let even: number = y % 2\
  \ === 0\n    let y: number = y + (even ? 1 : 0)\n    let even: number = y % 2 ===\
  \ 0\n    let y: number = y + (even ? 1 : 0)\n    let even: number = y % 2 === 0\n\
  \    let y: number = y + (even ? 1 : 0)\n    let even: number = y % 2 === 0\n  \
  \  let y: number = y + (even ? 1 : 0)\n    let even: number = y % 2 === 0\n    let\
  \ y: number = y + (even ? 1 : 0)\n    let even"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (is_even(i)) {\n            result = i;\n            break;\n        }\n  \
  \  }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (result < y) {\n        if (result\
  \ % 2 === 0) {\n            result = result + 1;\n        } else {\n           \
  \ result = result + 2;\n        }\n    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    let max_num = Math.max(x, y)\n    let min_num = Math.min(x, y)\n    if (max_num\
  \ % 2 === 0) {\n        return max_num\n    } else {\n        let max_even = max_num\
  \ / 2\n        if (max_even % 2 === 0) {\n            return max_even\n        }\
  \ else {\n            return -1\n        }\n    }\n}\n"
- "  if (x > y) {\n    return choose_num(y, x);\n  }\n  if (y > x) {\n    return choose_num(x,\
  \ y);\n  }\n  if (x == y) {\n    return x;\n  }\n  if (x % 2 == 0 && y % 2 == 0)\
  \ {\n    return choose_num(x / 2, y / 2);\n  }\n  if (x % 2 == 0 && y % 2 != 0)\
  \ {\n    return choose_num(x / 2, y);\n  }\n  if (x % 2 != 0 && y % 2 == 0) {\n\
  \    return choose_num(x, y / 2);\n  }\n  if (x % 2 != 0 && y % 2 != 0) {\n    return\
  \ choose_num(x, y);\n  }\n  return -1;\n}\n"
- "    let even: number = x % 2 === 0\n    let evenOrOdd: number = even ? x : y\n\
  \    let evenOrOddEven: number = even ? y : x\n    let evenOrOddOdd: number = even\
  \ ? x : y\n    let evenOrOddEvenOdd: number = even ? y : x\n    let evenOrOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOdd: number = even ? y : x\n\
  \    let evenOrOddEvenOddEvenOddEven: number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEven: number = even\
  \ ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x\n    let\
  \ evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x\n    let evenOrOddEvenOdd"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (is_even(i)) {\n            result = i;\n            break;\n        }\n  \
  \  }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    let max_num = Math.max(x, y)\n    let min_num = Math.min(x, y)\n    let max_even\
  \ = max_num / 2\n    let min_even = min_num / 2\n    if (max_even % 2 === 0 && min_even\
  \ % 2 === 0) {\n        return max_even\n    } else {\n        return -1\n    }\n\
  }\n"
- "    let even: number = x % 2 === 0\n    let evenOrOdd: number = even ? x : y\n\
  \    let evenOrOddEven: number = even ? y : x\n    let evenOrOddOdd: number = even\
  \ ? y : x\n    let evenOrOddEvenOdd: number = even ? x : y\n    let evenOrOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOdd: number = even ? x : y\n\
  \    let evenOrOddEvenOddEvenOddEven: number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOdd:\
  \ number = even ? x : y\n    let evenOrOddEvenOddEvenOddEvenOddEven: number = even\
  \ ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOdd: number = even ? x : y\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x\n    let\
  \ evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOdd: number = even ? x : y\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? x : y\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? x : y\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? x : y\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? x : y\n    let evenOrOddEvenOdd"
- "    let even: number = x % 2 === 0\n    let evenOrOdd: number = even ? x : y\n\
  \    let evenOrOddPlusOne: number = even ? x + 1 : y\n    let evenOrOddMinusOne:\
  \ number = even ? x - 1 : y\n    let evenOrOddMinusOnePlusOne: number = even ? x\
  \ - 1 + 1 : y\n    let evenOrOddMinusOneMinusOne: number = even ? x - 1 - 1 : y\n\
  \    let evenOrOddMinusOneMinusOnePlusOne: number = even ? x - 1 - 1 + 1 : y\n \
  \   let evenOrOddMinusOneMinusOneMinusOne: number = even ? x - 1 - 1 - 1 : y\n \
  \   let evenOrOddMinusOneMinusOneMinusOnePlusOne: number = even ? x - 1 - 1 - 1\
  \ + 1 : y\n    let evenOrOddMinusOneMinusOneMinusOneMinusOne: number = even ? x\
  \ - 1 - 1 - 1 - 1 : y\n    let evenOrOddMinusOneMinusOneMinusOneMinusOnePlusOne:\
  \ number = even ? x - 1 - 1 - 1 - 1 + 1 : y\n    let evenOrOddMinusOneMinusOneMinusOneMinusOneMinusOne:\
  \ number = even ? x - 1 - 1 - 1 - 1 - 1 : y\n    let evenOrOddMinusOneMinusOneMinusOneMinusOneMinusOnePlusOne:\
  \ number = even ? x - 1 - 1 - 1 - 1 - 1 + 1 : y\n    let evenOrOddMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne:\
  \ number = even ? x - 1 - 1 - 1 - 1 - 1 - 1 - 1 : y\n    let evenOrOddMinusOneMinusOneMinusOneMinusOneMinusOneMinusOnePlusOne:\
  \ number = even ? x - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 : y\n    let evenOrOddMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne:\
  \ number = even ? x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 : y\n    let evenOrOddMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOnePlusOne:\
  \ number = even ? x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 : y\n    let evenOrOddMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOnePlusOne:\
  \ number = even ? x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 + 1 : y\n    let evenOrOddMinus"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num: number = x;\n    let min_num: number = y;\n    while (max_num\
  \ % 2 == 0 && min_num % 2 == 0) {\n        max_num--;\n        min_num--;\n    }\n\
  \    while (max_num % 2 != 0 && min_num % 2 != 0) {\n        max_num--;\n      \
  \  min_num--;\n    }\n    while (max_num % 2 != 0 && min_num % 2 == 0) {\n     \
  \   max_num--;\n    }\n    while (max_num % 2 == 0 && min_num % 2 != 0) {\n    \
  \    min_num--;\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num: number = x;\n    let min_num: number = y;\n    while (max_num\
  \ < min_num) {\n        max_num += 2;\n        min_num -= 2;\n    }\n    return\
  \ max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let even: number = x % 2 === 0;\n    let evenOrOdd: number = even ? x\
  \ : y;\n    let evenOrOddEven: number = even ? y : x;\n    let evenOrOddOdd: number\
  \ = even ? y : x;\n    let evenOrOddEvenOdd: number = even ? x : y;\n    let evenOrOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddOdd: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOdd: number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOdd: number = even\
  \ ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x;\n    let\
  \ evenOrOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenO"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (true) {\n        if\
  \ (max_num % 2 == 0) {\n            max_num = max_num / 2;\n        } else {\n \
  \           max_num = max_num * 3 + 1;\n        }\n        if (min_num % 2 == 0)\
  \ {\n            min_num = min_num / 2;\n        } else {\n            min_num =\
  \ min_num * 3 + 1;\n        }\n        if (max_num < min_num) {\n            return\
  \ -1;\n        }\n    }\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num % 2 == 0) {\n\
  \        max_num += 1;\n    }\n    while (min_num % 2 == 0) {\n        min_num -=\
  \ 1;\n    }\n    while (max_num < min_num) {\n        let temp = max_num;\n    \
  \    max_num = min_num;\n        min_num = temp;\n    }\n    return max_num;\n}\n"
- "    let even: number = x % 2 === 0;\n    let evenOrOdd: number = even ? x : y;\n\
  \    let evenOrOddEven: number = evenOrOdd % 2 === 0;\n    let evenOrOddOdd: number\
  \ = evenOrOdd % 2 === 1;\n    let evenOrOddEvenOdd: number = evenOrOdd % 3 === 0;\n\
  \    let evenOrOddEvenOddEven: number = evenOrOdd % 3 === 1;\n    let evenOrOddEvenOddOdd:\
  \ number = evenOrOdd % 5 === 0;\n    let evenOrOddEvenOddOddEven: number = evenOrOdd\
  \ % 5 === 1;\n    let evenOrOddEvenOddOddOdd: number = evenOrOdd % 7 === 0;\n  \
  \  let evenOrOddEvenOddOddOddEven: number = evenOrOdd % 7 === 1;\n    let evenOrOddEvenOddOddOddOdd:\
  \ number = evenOrOdd % 11 === 0;\n    let evenOrOddEvenOddOddOddOddEven: number\
  \ = evenOrOdd % 11 === 1;\n    let evenOrOddEvenOddOddOddOddOdd: number = evenOrOdd\
  \ % 13 === 0;\n    let evenOrOddEvenOddOddOddOddOddEven: number = evenOrOdd % 13\
  \ === 1;\n    let evenOrOddEvenOddOddOddOddOddOdd: number = evenOrOdd % 17 === 0;\n\
  \    let evenOrOddEvenOddOddOddOddOddOddEven: number = evenOrOdd % 17 === 1;\n \
  \   let evenOrOddEvenOddOddOddOddOddOddEven: number = evenOrOdd % 19 === 0;\n  \
  \  let evenOrOddEvenOddOddOddOddOddOddEven: number = evenOrOdd % 19 === 1;\n   \
  \ let evenOrOddEvenOddOddOddOddOddOddOddEven: number = evenOrOdd % 23 === 0;\n \
  \   let evenOrOddEvenOddOddOddOddOddOddOddEven: number = evenOrOdd % 23 === 1;\n\
  \    let evenOrOddEvenOddOddOddOddOddOddOddEven: number = evenOrOdd % 29 === 0;\n\
  \    let evenOrOdd"
- "    if (x > y) {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n\
  \    let result: number = x;\n    while (result < y) {\n        if (result % 2 ===\
  \ 0) {\n            result = result + 2;\n        }\n        else {\n          \
  \  result = result + 1;\n        }\n    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    let even: boolean = false\n    let evenNum: number = -1\n    for (let i = x;\
  \ i <= y; i++) {\n        if (i % 2 === 0) {\n            even = true\n        \
  \    evenNum = i\n        }\n    }\n    return even ? evenNum : -1\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (i % 2 === 0) {\n            result = i;\n            break;\n        }\n \
  \   }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    let result: number = -1\n    for (let i = x; i <= y; i++) {\n        if (is_even(i))\
  \ {\n            result = i\n        }\n    }\n    return result\n}\n"
- "\tlet even: number = x % 2 === 0\n\tlet evenOrOdd: number = even ? x : y\n\tlet\
  \ evenOrOddEven: number = evenOrOdd % 2 === 0\n\tlet evenOrOddOdd: number = evenOrOdd\
  \ % 2 === 1\n\tlet evenOrOddEvenOdd: number = evenOrOdd % 3 === 0\n\tlet evenOrOddEvenOddEven:\
  \ number = evenOrOdd % 5 === 0\n\tlet evenOrOddEvenOddEvenOdd: number = evenOrOdd\
  \ % 7 === 0\n\tlet evenOrOddEvenOddEvenOddEven: number = evenOrOdd % 11 === 0\n\t\
  let evenOrOddEvenOddEvenOddEvenOdd: number = evenOrOdd % 13 === 0\n\tlet evenOrOddEvenOddEvenOddEvenOddEven:\
  \ number = evenOrOdd % 17 === 0\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOdd: number\
  \ = evenOrOdd % 19 === 0\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOddEven: number\
  \ = evenOrOdd % 23 === 0\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOdd: number\
  \ = evenOrOdd % 29 === 0\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = evenOrOdd % 31 === 0\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = evenOrOdd % 37 === 0\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = evenOrOdd % 43 === 0\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = evenOrOdd % 49 === 0\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = evenOrOdd % 55 === 0\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = evenOrOdd % "
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num += 2;\n        min_num -= 2;\n    }\n    return max_num;\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (true) {\n        if\
  \ (max_num % 2 == 0) {\n            max_num = max_num / 2;\n        } else {\n \
  \           max_num = max_num * 3 + 1;\n        }\n        if (min_num % 2 == 0)\
  \ {\n            min_num = min_num / 2;\n        } else {\n            min_num =\
  \ min_num * 3 + 1;\n        }\n        if (max_num < min_num) {\n            return\
  \ -1;\n        }\n    }\n}\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    let max_num = Math.max(x, y)\n    let min_num = Math.min(x, y)\n    let even\
  \ = max_num % 2 === 0\n    let odd = max_num % 2 !== 0\n    if (even && odd) {\n\
  \        return max_num\n    } else if (even) {\n        return -1\n    } else if\
  \ (odd) {\n        return min_num\n    } else {\n        return -1\n    }\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let even: number = x % 2 === 0;\n    let evenOrOdd: number = even ? x\
  \ : y;\n    let evenOrOddEven: number = even ? y : x;\n    let evenOrOddOdd: number\
  \ = even ? y : x;\n    let evenOrOddEvenOdd: number = even ? x : y;\n    let evenOrOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddOdd: number = even ? x : y;\n\
  \    let evenOrOddEvenOddEvenOdd: number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOdd: number = even\
  \ ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x;\n    let\
  \ evenOrOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenO"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (is_even(i)) {\n            result = i;\n            break;\n        }\n  \
  \  }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    let result: number = -1\n    let max_num: number = x\n    let min_num: number\
  \ = y\n    while (max_num - min_num > 1) {\n        let mid: number = (max_num +\
  \ min_num) / 2\n        if (mid % 2 === 0) {\n            result = mid\n       \
  \     max_num = mid\n        } else {\n            min_num = mid\n        }\n  \
  \  }\n    return result\n}\n"
- "  if (x > y) {\n    return choose_num(y, x);\n  }\n  if (y > x) {\n    return choose_num(x,\
  \ y);\n  }\n  if (x == y) {\n    return x;\n  }\n  if (x % 2 == 0 && y % 2 == 0)\
  \ {\n    return choose_num(x / 2, y / 2);\n  }\n  if (x % 2 == 0) {\n    return\
  \ choose_num(x / 2, y);\n  }\n  if (y % 2 == 0) {\n    return choose_num(x, y /\
  \ 2);\n  }\n  return -1;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (min_num < max_num)\
  \ {\n        let num = min_num + max_num;\n        if (num % 2 === 0) {\n      \
  \      max_num = num;\n        } else {\n            min_num = num;\n        }\n\
  \    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (i % 2 === 0) {\n            result = i;\n            break;\n        }\n \
  \   }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (result <= y) {\n        if (is_even(result))\
  \ {\n            result = result + 2;\n        } else {\n            result = result\
  \ + 1;\n        }\n    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (y > 1) {\n        if (y & 1) {\n \
  \           result = y;\n        }\n        y >>= 1;\n    }\n    return result;\n\
  }\n"
- "    let even: number = x % 2 === 0\n    let low: number = y % 2 === 0\n    let\
  \ high: number = y % 2 === 0\n    let evenOrHigh: number = even || high\n    let\
  \ lowOrEven: number = low || even\n    let evenOrLow: number = even || low\n   \
  \ let lowOrHigh: number = low || high\n    let evenOrEven: number = even || even\n\
  \    let lowOrLow: number = low || low\n    let evenOrLowOrHigh: number = even ||\
  \ lowOrHigh\n    let lowOrEvenOrHigh: number = low || evenOrHigh\n    let evenOrLowOrEven:\
  \ number = even || lowOrEven\n    let lowOrEvenOrLow: number = low || evenOrLow\n\
  \    let evenOrLowOrLowOrHigh: number = even || lowOrLowOrHigh\n    let evenOrEvenOrLowOrHigh:\
  \ number = even || evenOrLowOrHigh\n    let lowOrEvenOrLowOrEven: number = low ||\
  \ evenOrLowOrEven\n    let evenOrLowOrLowOrEven: number = even || lowOrLowOrEven\n\
  \    let evenOrEvenOrLowOrEven: number = even || evenOrLowOrEven\n    let lowOrEvenOrLowOrEvenOrHigh:\
  \ number = low || evenOrLowOrEvenOrHigh\n    let evenOrLowOrLowOrEvenOrHigh: number\
  \ = even || lowOrLowOrEvenOrHigh\n    let evenOrEvenOrLowOrEvenOrHigh: number =\
  \ even || evenOrLowOrEvenOrHigh\n    let lowOrEvenOrLowOrEvenOrHighOrEven: number\
  \ = low || evenOrLowOrEvenOrHighOrEven\n    let evenOrLowOrLowOrEvenOrHighOrEven:\
  \ number = even || lowOrLowOrEvenOrHighOrEven\n    let evenOrEvenOrLowOrEvenOrHighOrEven:\
  \ number = even || evenOrLowOrEvenOrHighOrEven\n    let lowOrEvenOrLowOrEvenOrHighOrEvenOrEven:\
  \ number = low || evenOrLowOrEvenOrHighOrEvenOrEven\n    let evenOrLowOrLowOrEvenOrHighOrEvenOrEven:\
  \ number = even || lowOrLowOrEvenOrHighOrEvenOrEven\n    let evenOrEvenOrLowOrEvenOrHighOrEvenOrEven:\
  \ number = even || evenOrLowOrEvenOrHighOrEvenOrEven\n    let lowOrEvenOrLowOrEvenOrHighOrEvenOrEvenOrEven:\
  \ number = low || evenOrLowOrEvenOrHighOrEvenOrEvenOrEven\n    let evenOrLowOrLowOrEven"
- "    if (x < y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num += 2;\n        min_num -= 2;\n    }\n    while (max_num > min_num)\
  \ {\n        max_num -= 2;\n        min_num += 2;\n    }\n    return max_num;\n\
  }\n"
- "    let num: number = x;\n    while (num < y) {\n        num += 2;\n    }\n   \
  \ return num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    if (x > 100) {\n        x = x - 100;\n    }\n    if (y > 100) {\n    \
  \    y = y - 100;\n    }\n    if (x < y) {\n        let temp = x;\n        x = y;\n\
  \        y = temp;\n    }\n    if (x < 100) {\n        x = x + 100;\n    }\n   \
  \ if (y < 100) {\n        y = y + 100;\n    }\n    if (x > y) {\n        let temp\
  \ = x;\n        x = y;\n        y = temp;\n    }\n    if (x > 100) {\n        x\
  \ = x - 100;\n    }\n    if (y > 100) {\n        y = y - 100;\n    }\n    if (x\
  \ < y) {\n        let temp = x;\n        x = y;\n        y = temp;\n    }\n    if\
  \ (x < 100) {\n        x = x + 100;\n    }\n    if (y < 100) {\n        y = y +\
  \ 100;\n    }\n    if (x > y) {\n        let temp = x;\n        x = y;\n       \
  \ y = temp;\n    }\n    if (x > 100) {\n        x = x - 100;\n    }\n    if (y >\
  \ 100) {\n        y = y - 100;\n    }\n    if (x < y) {\n        let temp = x;\n\
  \        x = y;\n        y = temp;\n    }\n    if (x < 100) {\n        x = x + 100;\n\
  \    }\n    if (y < 100) {\n        y = y + 100;\n    }\n    if (x > y) {\n    \
  \    let temp = x;\n        x = y;\n        y = temp;\n    }\n    if (x > 100) {\n\
  \        x = x - 100;\n    }\n    if (y > 100) {\n        y = y - 100;\n    }\n\
  \    if (x < y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    if (x < 100) {\n        x = x + 100;\n    }\n    if (y < 100) {\n    \
  \    y = y + 100;\n    }\n    if (x > y) {\n        let temp = x;\n        x = y;\n\
  \        y = temp;\n    }\n    if (x > 100) {\n        x = x - 100;\n    }\n   \
  \ if (y > 100) {\n        y = y - 100;\n    }\n    if (x < y) {\n        let temp\
  \ = x;\n        x = y;\n        y = temp;\n    }\n    if (x < 100) {\n        x\
  \ = x + 100;\n    }\n    if (y < 100) {\n        y = y + 100;\n    }\n    if (x\
  \ > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n    }\n    if\
  \ (x > 100) {\n        x = x - 100;\n    }\n    if (y > 100) {\n        y = y -\
  \ 100;\n    }\n    if (x < y) {\n        let temp = x;\n        x = y;\n       \
  \ y = temp;\n    }\n    if (x < 100) {\n        x = x + 100;\n    }\n    if (y <\
  \ 100) {\n        y = y + 100;\n    }\n    if (x > y) {\n        let temp = x;\n\
  \        x = y;\n        y = temp;\n    }\n    if (x > 100) {\n        x = x - 100;\n\
  \    }\n    if (y > 100) {\n        y = y - 100;\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (is_even(i)) {\n            result = i;\n        }\n    }\n    return result;\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    if (x < y) {\n        return -1;\n    }\n    let temp = 0;\n    while\
  \ (x < y) {\n        temp += x;\n        x++;\n    }\n    return temp;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (i % 2 === 0) {\n            result = i;\n            break;\n        }\n \
  \   }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (i % 2 === 0) {\n            result = i;\n            break;\n        }\n \
  \   }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    let result = -1\n    let max_num = Math.max(x, y)\n    for (let i = max_num;\
  \ i >= 0; i--) {\n        if (i % 2 === 0) {\n            result = i\n         \
  \   break\n        }\n    }\n    return result\n}\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    let result: number = -1\n    for (let i = x; i <= y; i++) {\n        if (is_even(i))\
  \ {\n            result = i\n            break\n        }\n    }\n    return result\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = Math.max(x, y);\n    let min_num = Math.min(x, y);\n   \
  \ let even: number = max_num % 2 === 0;\n    let odd: boolean = max_num % 2 ===\
  \ 1;\n    if (even && odd) {\n        return max_num;\n    } else if (even) {\n\
  \        return min_num;\n    } else {\n        return -1;\n    }\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (i % 2 === 0) {\n            result = i;\n            break;\n        }\n \
  \   }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num - min_num >\
  \ 1) {\n        let mid = Math.floor((max_num + min_num) / 2);\n        if (mid\
  \ * mid > max_num - min_num) {\n            max_num = mid;\n        } else {\n \
  \           min_num = mid;\n        }\n    }\n    return max_num;\n}\n"
- "    let even: number = x % 2 === 0;\n    let x: number = x;\n    let y: number\
  \ = y;\n    let z: number = y;\n    while (x !== y) {\n        if (x === 0 || y\
  \ === 0) {\n            return -1;\n        }\n        if (x === 1) {\n        \
  \    return even\n                ? y\n                : z;\n        }\n       \
  \ if (y === 1) {\n            return even\n                ? x\n               \
  \ : z;\n        }\n        if (x === y) {\n            return even\n           \
  \     ? x\n                : y;\n        }\n        if (x === z) {\n           \
  \ return even\n                ? y\n                : x;\n        }\n        if\
  \ (y === z) {\n            return even\n                ? x\n                : y;\n\
  \        }\n        if (x === z && y === z) {\n            return even\n       \
  \         ? x\n                : y;\n        }\n        if (x === z && y === y)\
  \ {\n            return even\n                ? x\n                : y;\n      \
  \  }\n        if (x === y && y === x) {\n            return even\n             \
  \   ? x\n                : y;\n        }\n        if (x === y && y === z) {\n  \
  \          return even\n                ? y\n                : x;\n        }\n \
  \       if (x === y && y === y) {\n            return even\n                ? y\n\
  \                : x;\n        }\n        if (x === y && y === x) {\n          \
  \  return even\n                ? y\n                : x;\n        }\n        if\
  \ (x === y && y === z) {\n            return even\n                ? x\n       \
  \         : y;\n        }\n        if (x === y && y === y) {\n            return\
  \ even\n                ? x\n                : y;\n        }\n        if (x ===\
  \ y && y === x) {\n            return even\n                ? x\n              \
  \  : y;\n        }\n        if (x === y && y === z) {\n            return even\n\
  \                ? y\n                : x;\n        }\n        if (x === y && y\
  \ === y) {\n            return even\n                ? y\n                : x;\n\
  \        }\n        if (x === y && y === x) {\n            return even\n       \
  \         ? y\n                : x;\n        }\n        if (x === y && y === z)\
  \ {\n            return even\n                ? x\n                : y;\n      \
  \  }\n        if (x === y && y === y) {\n            return even\n             \
  \   ? x\n                : y;\n        }\n        if (x === y && y === x) {\n  \
  \          return even\n                ? x\n                : y;\n        }\n \
  \       if (x === y && y === z) {\n            return even\n                ? y\n\
  \                : x;\n        }\n        if (x === y && y === y) {\n          \
  \  return even\n                ? y\n                : x;"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    if (x > 1000000000 || y > 1000000000) {\n        return -1;\n    }\n \
  \   let result = 0;\n    for (let i = x; i <= y; i++) {\n        if (i % 2 === 0)\
  \ {\n            result = i;\n            break;\n        }\n    }\n    return result;\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (i % 2 === 0) {\n            result = i;\n            break;\n        }\n \
  \   }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num: number = x;\n    let min_num: number = y;\n    while (max_num\
  \ < min_num) {\n        max_num += 2;\n        min_num -= 2;\n    }\n    return\
  \ max_num;\n}\n"
- "    let evens: number[] = [];\n    let odds: number[] = [];\n    for (let i = x;\
  \ i <= y; i++) {\n        if (i % 2 === 0) {\n            evens.push(i);\n     \
  \   } else {\n            odds.push(i);\n        }\n    }\n    if (evens.length\
  \ > 0) {\n        return Math.max(...evens);\n    } else if (odds.length > 0) {\n\
  \        return Math.max(...odds);\n    } else {\n        return -1;\n    }\n}\n"
- "  if (x > y) {\n    return choose_num(y, x);\n  }\n  if (x == y) {\n    return\
  \ x;\n  }\n  if (x % 2 == 0 && y % 2 == 0) {\n    return choose_num(x / 2, y / 2);\n\
  \  }\n  return -1;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num > min_num)\
  \ {\n        let mid = max_num + min_num / 2;\n        if (mid % 2 === 0) {\n  \
  \          max_num = mid;\n        } else {\n            min_num = mid;\n      \
  \  }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num++;\n        while (max_num % 2 === 0) {\n            max_num++;\n\
  \        }\n        min_num--;\n        while (min_num % 2 === 0) {\n          \
  \  min_num--;\n        }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    let max_num = Math.max(x, y)\n    let min_num = Math.min(x, y)\n    let even\
  \ = max_num % 2 === 0\n    if (even) {\n        return max_num\n    } else {\n \
  \       return -1\n    }\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (i % 2 === 0) {\n            result = i;\n            break;\n        }\n \
  \   }\n    return result;\n}\n"
- "    let even: number = x % 2 === 0;\n    let evenOrOdd: number = even ? x : y;\n\
  \    let evenOrOddPlusOne: number = even ? x + 1 : y;\n    let evenOrOddMinusOne:\
  \ number = even ? x - 1 : y;\n    let evenOrOddMinusOnePlusOne: number = even ?\
  \ x - 1 + 1 : y;\n    let evenOrOddMinusOneMinusOne: number = even ? x - 1 - 1 :\
  \ y;\n    let evenOrOddMinusOnePlusOneMinusOne: number = even ? x - 1 - 1 + 1 :\
  \ y;\n    let evenOrOddMinusOneMinusOnePlusOne: number = even ? x - 1 - 1 - 1 :\
  \ y;\n    let evenOrOddMinusOnePlusOneMinusOnePlusOne: number = even ? x - 1 - 1\
  \ - 1 - 1 : y;\n    let evenOrOddMinusOneMinusOnePlusOneMinusOnePlusOne: number\
  \ = even ? x - 1 - 1 - 1 - 1 - 1 : y;\n    let evenOrOddMinusOnePlusOneMinusOnePlusOneMinusOne:\
  \ number = even ? x - 1 - 1 - 1 - 1 - 1 - 1 : y;\n    let evenOrOddMinusOneMinusOnePlusOneMinusOnePlusOneMinusOne:\
  \ number = even ? x - 1 - 1 - 1 - 1 - 1 - 1 - 1 : y;\n    let evenOrOddMinusOnePlusOneMinusOnePlusOneMinusOnePlusOne:\
  \ number = even ? x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 : y;\n    let evenOrOddMinusOneMinusOnePlusOneMinusOnePlusOnePlusOne:\
  \ number = even ? x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 : y;\n    let evenOrOddMinusOnePlusOneMinusOnePlusOneMinusOnePlusOnePlusOne:\
  \ number = even ? x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 : y;\n    let evenOrOddMinusOneMinusOnePlusOneMinusOnePlusOnePlusOnePlusOne:\
  \ number = even ? x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 : y;\n    let\
  \ evenOrOddMinusOnePlusOneMinusOnePlusOneMinusOnePlusOnePlusOnePlusOne: number =\
  \ even ? x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 : y;\n    let evenOrOddMinusOneMinusOnePlusOneMinusOnePlusOnePlusOnePlusOnePlusOne:\
  \ number = even ? x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 : y;\n\
  \    let evenOrOddMinusOnePlusOneMinus"
- "    let even: number = x % 2 === 0\n    let evenOrOdd: number = even ? x : y\n\
  \    let evenOrOddEven: number = even ? y : x\n    let evenOrOddOdd: number = even\
  \ ? x : y\n    let evenOrOddEvenOdd: number = even ? y : x\n    let evenOrOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOdd: number = even ? y : x\n\
  \    let evenOrOddEvenOddEvenOddEven: number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEven: number = even\
  \ ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x\n    let\
  \ evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenO"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (is_even(i)) {\n            result = i;\n            break;\n        }\n  \
  \  }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (result < y) {\n        result += 2;\n\
  \    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let even: number = x;\n    let odd: number = y;\n    while (even > 0 &&\
  \ odd > 0) {\n        if (even % 2 === 0 && odd % 2 !== 0) {\n            even =\
  \ even / 2;\n            odd = odd / 2;\n        } else if (even % 2 !== 0 && odd\
  \ % 2 === 0) {\n            even = even / 2;\n            odd = odd * 2;\n     \
  \   } else if (even % 2 === 0 && odd % 2 === 0) {\n            even = even * 2;\n\
  \            odd = odd / 2;\n        } else {\n            even = even * 2;\n  \
  \          odd = odd * 2;\n        }\n    }\n    return even;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num += 2;\n        min_num -= 2;\n    }\n    return max_num;\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num > min_num)\
  \ {\n        let mid = max_num + min_num / 2;\n        if (mid % 2 === 0) {\n  \
  \          max_num = mid;\n        } else {\n            min_num = mid;\n      \
  \  }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (y > 0) {\n        if (y % 2 === 0)\
  \ {\n            result = y;\n            break;\n        }\n        y = Math.floor(y\
  \ / 2);\n    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (i % 2 === 0) {\n            result = i;\n            break;\n        }\n \
  \   }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result = x;\n    while (result < y) {\n        if (result % 2 ===\
  \ 0) {\n            result = result + 1;\n        } else {\n            result =\
  \ result + 2;\n        }\n    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (i % 2 === 0) {\n            result = i;\n            break;\n        }\n \
  \   }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result = x;\n    while (result < y) {\n        result += y;\n    }\n\
  \    return result;\n}\n"
- "    let even: number = x % 2 === 0;\n    let evenOrOdd: number = even ? x : y;\n\
  \    let evenOrOddEven: number = even ? y : x;\n    let evenOrOddOdd: number = even\
  \ ? x : y;\n    let evenOrOddEvenEven: number = even ? y : x;\n    let evenOrOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddOddEven: number = even ? y : x;\n   \
  \ let evenOrOddOddOdd: number = even ? y : x;\n    let evenOrOddEvenEvenEven: number\
  \ = even ? y : x;\n    let evenOrOddEvenOddEven: number = even ? y : x;\n    let\
  \ evenOrOddOddEvenEven: number = even ? y : x;\n    let evenOrOddOddEvenOdd: number\
  \ = even ? y : x;\n    let evenOrOddEvenEvenEvenEven: number = even ? y : x;\n \
  \   let evenOrOddEvenOddEvenEven: number = even ? y : x;\n    let evenOrOddOddEvenEvenEven:\
  \ number = even ? y : x;\n    let evenOrOddOddEvenOddEven: number = even ? y : x;\n\
  \    let evenOrOddEvenEvenEvenEvenEven: number = even ? y : x;\n    let evenOrOddEvenOddEvenEven:\
  \ number = even ? y : x;\n    let evenOrOddOddEvenEvenEvenEven: number = even ?\
  \ y : x;\n    let evenOrOddOddEvenOddEvenEven: number = even ? y : x;\n    let evenOrOddEvenEvenEvenEvenEvenEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEven: number = even ? y\
  \ : x;\n    let evenOrOddOddEvenEvenEvenEvenEven: number = even ? y : x;\n    let\
  \ evenOrOddOddEvenOddEvenEven: number = even ? y : x;\n    let evenOrOddEvenEvenEvenEvenEvenEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEven: number = even ? y\
  \ : x;\n    let evenOrOddOddEvenEvenEvenEvenEvenEven: number = even ? y : x;\n \
  \   let evenOrOddOddEvenOddEvenEven: number = even ? y : x;\n    let evenOrOddEvenEvenEvenEvenEvenEvenEven:\
  \ number = even ? y : x;\n    let evenOrOddOddEvenOddEvenEvenEven: number = even\
  \ ? y : x;\n    let evenOrOddEvenEvenEvenEvenEven"
- "    let even: boolean;\n    let evenNum: number = 0;\n    let evenNum2: number\
  \ = 0;\n    let evenNum3: number = 0;\n    let evenNum4: number = 0;\n    let evenNum5:\
  \ number = 0;\n    let evenNum6: number = 0;\n    let evenNum7: number = 0;\n  \
  \  let evenNum8: number = 0;\n    let evenNum9: number = 0;\n    let evenNum10:\
  \ number = 0;\n    let evenNum11: number = 0;\n    let evenNum12: number = 0;\n\
  \    let evenNum13: number = 0;\n    let evenNum14: number = 0;\n    let evenNum15:\
  \ number = 0;\n    let evenNum16: number = 0;\n    let evenNum17: number = 0;\n\
  \    let evenNum18: number = 0;\n    let evenNum19: number = 0;\n    let evenNum20:\
  \ number = 0;\n    let evenNum21: number = 0;\n    let evenNum22: number = 0;\n\
  \    let evenNum23: number = 0;\n    let evenNum24: number = 0;\n    let evenNum25:\
  \ number = 0;\n    let evenNum26: number = 0;\n    let evenNum27: number = 0;\n\
  \    let evenNum28: number = 0;\n    let evenNum29: number = 0;\n    let evenNum30:\
  \ number = 0;\n    let evenNum31: number = 0;\n    let evenNum32: number = 0;\n\
  \    let evenNum33: number = 0;\n    let evenNum34: number = 0;\n    let evenNum35:\
  \ number = 0;\n    let evenNum36: number = 0;\n    let evenNum37: number = 0;\n\
  \    let evenNum38: number = 0;\n    let evenNum39: number = 0;\n    let evenNum40:\
  \ number = 0;\n    let evenNum41: number = 0;\n    let evenNum42: number = 0;\n\
  \    let evenNum43: number = 0;\n    let evenNum44: number = 0;\n    let evenNum45:\
  \ number = 0;\n    let evenNum46: number = 0;\n    let evenNum47: number = 0;\n\
  \    let evenNum48: number = 0;\n    let evenNum49: number = 0;\n    let evenNum50:\
  \ number = 0;\n    let evenNum51: number = 0;\n    let evenNum52: number = 0;\n\
  \    let evenNum53: number = 0;\n    let evenNum54: number = 0;\n    let evenNum55:\
  \ number = 0;\n    let evenNum56: number = 0;\n    let evenNum57: number = 0;\n\
  \    let evenNum58: number = 0;\n    let evenNum59: number = 0;\n    let evenNum60:\
  \ number = 0;\n    let evenNum61: number = 0;\n    let evenNum62: number = 0;\n\
  \    let evenNum63: number = 0;\n    let evenNum64: number = 0;\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    let result: number = -1\n    for (let i = x; i <= y; i++) {\n        if (is_even(i))\
  \ {\n            result = i\n            break\n        }\n    }\n    return result\n\
  }\n"
- "\tlet even: boolean;\n\tlet i: number;\n\tlet j: number;\n\tlet num: number;\n\t\
  let max: number;\n\tlet min: number;\n\t\n\tif (x < y) {\n\t\tmin = x;\n\t\tmax\
  \ = y;\n\t} else {\n\t\tmin = y;\n\t\tmax = x;\n\t}\n\t\n\tfor (j = 1; j <= max;\
  \ j++) {\n\t\teven = true;\n\t\ti = j;\n\t\t\n\t\twhile (even && i <= max) {\n\t\
  \t\tif (i % 2 === 0) {\n\t\t\t\teven = false;\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\
  \t\teven = true;\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (even) {\n\t\t\tnum\
  \ = j;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let even: number = x % 2 === 0;\n    let evenOrOdd: number = even ? x\
  \ : y;\n    let evenOrOddEven: number = even ? y : x;\n    let evenOrOddOdd: number\
  \ = even ? y : x;\n    let evenOrOddEvenOdd: number = even ? x : y;\n    let evenOrOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddOdd: number = even ? x : y;\n\
  \    let evenOrOddEvenOddEvenOdd: number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOdd: number = even\
  \ ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x;\n    let\
  \ evenOrOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenO"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    let counter: number = 0;\n    while (result\
  \ <= y) {\n        if (result % 2 === 0) {\n            counter++;\n        }\n\
  \        result++;\n    }\n    if (counter === 1) {\n        return -1;\n    }\n\
  \    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let even: number = x % 2 === 0;\n    let evenOrOdd: number = even ? x\
  \ : y;\n    let evenOrOddEven: number = even ? y : x;\n    let evenOrOddOdd: number\
  \ = even ? y : x;\n    let evenOrOddEvenOdd: number = even ? x : y;\n    let evenOrOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddOdd: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOdd: number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOdd: number = even\
  \ ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x;\n    let\
  \ evenOrOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenO"
- "\tlet even: number = x % 2 === 0;\n\tlet evenOrOdd: number = even ? x : y;\n\t\
  let evenOrOddEven: number = even ? y : x;\n\tlet evenOrOddOdd: number = even ? y\
  \ : x;\n\tlet evenOrOddEvenOdd: number = even ? x : y;\n\tlet evenOrOddEvenOddEven:\
  \ number = even ? y : x;\n\tlet evenOrOddEvenOddEvenOdd: number = even ? x : y;\n\
  \tlet evenOrOddEvenOddEvenOddEven: number = even ? y : x;\n\tlet evenOrOddEvenOddEvenOddEvenOdd:\
  \ number = even ? x : y;\n\tlet evenOrOddEvenOddEvenOddEvenOddEven: number = even\
  \ ? y : x;\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOdd: number = even ? x : y;\n\
  \tlet evenOrOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? x : y;\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? x : y;\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? x : y;\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? x : y;\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n\tlet evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? x : "
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let even: number = x % 2 === 0;\n    let even2 = y % 2 === 0;\n    if\
  \ (even && even2) {\n        return -1;\n    }\n    let even3 = x % 3 === 0;\n \
  \   let even4 = y % 3 === 0;\n    if (even && even3 && even4) {\n        return\
  \ -1;\n    }\n    let even5 = x % 5 === 0;\n    let even6 = y % 5 === 0;\n    if\
  \ (even && even5 && even6) {\n        return -1;\n    }\n    let even7 = x % 7 ===\
  \ 0;\n    let even8 = y % 7 === 0;\n    if (even && even7 && even8) {\n        return\
  \ -1;\n    }\n    let even9 = x % 9 === 0;\n    let even10 = y % 9 === 0;\n    if\
  \ (even && even9 && even10) {\n        return -1;\n    }\n    let even11 = x % 11\
  \ === 0;\n    let even12 = y % 11 === 0;\n    if (even && even11 && even12) {\n\
  \        return -1;\n    }\n    let even13 = x % 13 === 0;\n    let even14 = y %\
  \ 13 === 0;\n    if (even && even13 && even14) {\n        return -1;\n    }\n  \
  \  let even15 = x % 15 === 0;\n    let even16 = y % 15 === 0;\n    if (even && even15\
  \ && even16) {\n        return -1;\n    }\n    let even17 = x % 17 === 0;\n    let\
  \ even18 = y % 17 === 0;\n    if (even && even17 && even18) {\n        return -1;\n\
  \    }\n    let even19 = x % 19 === 0;\n    let even20 = y % 19 === 0;\n    if (even\
  \ && even19 && even20) {\n        return -1;\n    }\n    let even21 = x % 21 ===\
  \ 0;\n    let even22 = y % 21 === 0;\n    if (even && even21 && even22) {\n    \
  \    return -1;\n    }\n    let even23 = x % 23 === 0;\n    let even24 = y % 23\
  \ === 0;\n    if (even && even23 && even24) {\n        return -1;\n    }\n    let\
  \ even25 = x % 25 === 0;\n    let even26 = y % 25 === 0;\n    if (even && even25\
  \ && even26) {\n        return -1;\n    }\n    let even27 = x % 27 === 0;\n    let\
  \ even28 = y % 27 === 0;\n    if (even && even27 && even28) {\n        return -1;\n\
  \    }\n    let even29 = x % 29 === 0;\n    let even30 = y % 29 === 0;\n    if (even "
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    let even = x % 2 === 0\n    let low = y % 2 === 0\n    let high = x % 2 ===\
  \ 1\n    if (low && high) {\n        return -1\n    }\n    if (even) {\n       \
  \ return y\n    }\n    if (low) {\n        return -1\n    }\n    return -1\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (i % 2 === 0) {\n            result = i;\n            break;\n        }\n \
  \   }\n    return result;\n}\n"
- "    if (x > y) {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n\
  \    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n        if (is_even(i))\
  \ {\n            result = i;\n            break;\n        }\n    }\n    return result;\n\
  }\n"
- "    if (x > y) {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n\
  \    let result: number = -1;\n    let even: number = 1;\n    let odd: number =\
  \ 1;\n    while (even < y) {\n        even += x;\n    }\n    while (odd > y) {\n\
  \        odd -= x;\n    }\n    if (even > y) {\n        result = even;\n    }\n\
  \    else if (even < y) {\n        result = odd;\n    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (min_num < max_num)\
  \ {\n        let mid = min_num + max_num / 2;\n        if (mid % 2 === 0) {\n  \
  \          max_num = mid;\n        } else {\n            min_num = mid;\n      \
  \  }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num++;\n        while (max_num % 2 === 0) {\n            max_num++;\n\
  \        }\n        min_num--;\n        while (min_num % 2 === 0) {\n          \
  \  min_num--;\n        }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num++;\n        if (max_num % 2 === 0) {\n            max_num++;\n\
  \        }\n    }\n    return max_num;\n}\n"
- "  if (x > y) {\n    return choose_num(y, x);\n  }\n  if (y === 0 || y === 1) {\n\
  \    return y;\n  }\n  if (x === 0 || x === 1) {\n    return x;\n  }\n  if (x ===\
  \ y) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return choose_num(x\
  \ / 2, y / 2);\n  }\n  if (x % 2 === 0 && y % 2 !== 0) {\n    return choose_num(x\
  \ / 2, y);\n  }\n  if (x % 2 !== 0 && y % 2 === 0) {\n    return choose_num(x, y\
  \ / 2);\n  }\n  if (x % 2 !== 0 && y % 2 !== 0) {\n    return choose_num(x, y);\n\
  \  }\n  return -1;\n}\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    let max_num = Math.max(x, y)\n    let min_num = Math.min(x, y)\n    let num\
  \ = max_num - min_num\n    while (num % 2 == 0) {\n        num = num / 2\n    }\n\
  \    return num\n}\n"
- "    if (x > y) {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n\
  \    let max_num = x;\n    let min_num = y;\n    while (min_num > 0) {\n       \
  \ if (max_num % min_num == 0) {\n            max_num -= min_num;\n        } else\
  \ {\n            min_num--;\n        }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (y >= 2) {\n        if (y % 2 === 0)\
  \ {\n            result = y;\n            break;\n        }\n        y = y / 2;\n\
  \    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num - min_num >\
  \ 1) {\n        let mid = (max_num + min_num) / 2;\n        if (mid % 2 === 0) {\n\
  \            max_num = mid;\n        } else {\n            min_num = mid;\n    \
  \    }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    if (x < 0 || y < 0) {\n        return -1;\n    }\n    let result = 0;\n\
  \    for (let i = x; i <= y; i++) {\n        if (i % 2 === 0) {\n            result\
  \ = i;\n        }\n    }\n    return result;\n}\n"
- "\tlet z: number = x;\n\twhile (z < y) {\n\t\tz += 2;\n\t}\n\treturn z;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (y > 0) {\n        if (y & 1) {\n \
  \           result = y;\n        }\n        y >>= 1;\n    }\n    return result;\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num: number = x;\n    let min_num: number = y;\n    while (max_num\
  \ % 2 == 0) {\n        max_num -= 1;\n    }\n    while (min_num % 2 == 0) {\n  \
  \      min_num += 1;\n    }\n    while (max_num < min_num) {\n        max_num +=\
  \ 2;\n        min_num -= 2;\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result = x;\n    while (result < y) {\n        result += y;\n    }\n\
  \    return result;\n}\n"
- "    if (x < y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (y >= 2) {\n        if (y % 2 === 0)\
  \ {\n            result = y;\n            break;\n        }\n        y = y / 2;\n\
  \    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (result < y) {\n        result += 2;\n\
  \    }\n    return result;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num += 2;\n        min_num -= 2;\n    }\n    while (max_num > min_num)\
  \ {\n        max_num -= 2;\n        min_num += 2;\n    }\n    return max_num;\n\
  }\n"
- "    if (x > y) {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n\
  \    let max_num = x;\n    let min_num = y;\n    while (min_num > 0) {\n       \
  \ let tmp = min_num;\n        min_num = max_num;\n        max_num = tmp;\n    }\n\
  \    while (max_num < x) {\n        let tmp = max_num;\n        max_num = min_num;\n\
  \        min_num = tmp;\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = Math.max(x, y);\n    let min_num = Math.min(x, y);\n   \
  \ for (let i = min_num; i <= max_num; i++) {\n        if (i % 2 === 0) {\n     \
  \       return i;\n        }\n    }\n    return -1;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num > min_num)\
  \ {\n        let mid = (max_num + min_num) / 2;\n        if (mid % 2 === 0) {\n\
  \            max_num = mid;\n        } else {\n            min_num = mid;\n    \
  \    }\n    }\n    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    let max_num = Math.max(x, y)\n    let min_num = Math.min(x, y)\n    let evens\
  \ = max_num % 2 === 0\n    let evens_num = max_num / 2\n    let odd_num = max_num\
  \ + 1\n    let odd_even = odd_num / 2\n    let odd_odd = odd_num + 1\n    let odd_odd_even\
  \ = odd_odd / 2\n    let odd_odd_odd = odd_odd + 1\n    let odd_odd_odd_even = odd_odd_odd\
  \ / 2\n    let odd_odd_odd_odd = odd_odd_odd + 1\n    let odd_odd_odd_odd_even =\
  \ odd_odd_odd_odd / 2\n    let odd_odd_odd_odd_odd = odd_odd_odd_odd + 1\n    let\
  \ odd_odd_odd_odd_odd_even = odd_odd_odd_odd_odd / 2\n    let odd_odd_odd_odd_odd_odd\
  \ = odd_odd_odd_odd_odd + 1\n    let odd_odd_odd_odd_odd_odd_even = odd_odd_odd_odd_odd\
  \ / 2\n    let odd_odd_odd_odd_odd_odd_odd = odd_odd_odd_odd_odd + 1\n    let odd_odd_odd_odd_odd_odd_odd_even\
  \ = odd_odd_odd_odd_odd_odd / 2\n    let odd_odd_odd_odd_odd_odd_odd_odd = odd_odd_odd_odd_odd\
  \ + 1\n    let odd_odd_odd_odd_odd_odd_odd_odd_even = odd_odd_odd_odd_odd / 2\n\
  \    let odd_odd_odd_odd_odd_odd_odd_odd = odd_odd_odd_odd + 1\n    let odd_odd_odd_odd_odd_odd_odd_odd_even\
  \ = odd_odd_odd_odd / 2\n    let odd_odd_odd_odd_odd_odd_odd_odd_odd = odd_odd_odd\
  \ + 1\n    let odd_odd_odd_odd_odd_odd_odd_odd_even = odd_odd / 2\n    let odd_odd_odd_odd_odd_odd_odd_odd\
  \ = odd_odd + 1\n    let odd_odd_odd_odd_odd_odd_odd_"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    if (x === y) {\n        return -1;\n    }\n    let even: number = x;\n\
  \    let odd: number = y;\n    while (even > 0 && odd > 0) {\n        if (even %\
  \ 2 === 0) {\n            even = even / 2;\n        } else {\n            odd =\
  \ odd / 2;\n        }\n    }\n    return even;\n}\n"
- "    if (x > y) {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n\
  \    let max_num = Math.max(x, y);\n    let min_num = Math.min(x, y);\n    for (let\
  \ i = min_num; i <= max_num; i++) {\n        if (i % 2 === 0) {\n            return\
  \ i;\n        }\n    }\n    return -1;\n}\n"
- "    if (x < y) {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n\
  \    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num) {\n \
  \       max_num += 2;\n        min_num -= 2;\n    }\n    while (max_num > min_num)\
  \ {\n        max_num -= 2;\n        min_num += 2;\n    }\n    return max_num;\n\
  }\n"
- "    if (x > y) {\n        let temp = x\n        x = y\n        y = temp\n    }\n\
  \    if (x > 100) {\n        x = x - 100\n    }\n    if (y > 100) {\n        y =\
  \ y - 100\n    }\n    if (x < 0) {\n        x = x + 100\n    }\n    if (y < 0) {\n\
  \        y = y + 100\n    }\n    let result: number = -1\n    for (let i = x; i\
  \ <= y; i++) {\n        if (i % 2 === 0) {\n            result = i\n           \
  \ break\n        }\n    }\n    return result\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n       \
  \ if (i % 2 === 0) {\n            result = i;\n            break;\n        }\n \
  \   }\n    return result;\n}\n"
- "    let even: number = x % 2 === 0;\n    let evenOrOdd: number = even ? x : y;\n\
  \    let evenOrOddEven: number = even ? y : x;\n    let evenOrOddOdd: number = even\
  \ ? x : y;\n    let evenOrOddEvenOdd: number = even ? y : x;\n    let evenOrOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOdd: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOddEven: number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEven: number = even\
  \ ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n   \
  \ let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x;\n   \
  \ let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y\
  \ : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven: number\
  \ = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOdd"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    if (x > 100) {\n        x = x - 100;\n    }\n    if (y > 100) {\n    \
  \    y = y - 100;\n    }\n    if (x < y) {\n        let temp = x;\n        x = y;\n\
  \        y = temp;\n    }\n    let result: number = -1;\n    for (let i = x; i <=\
  \ y; i++) {\n        if (i % 2 === 0) {\n            result = i;\n            break;\n\
  \        }\n    }\n    return result;\n}\n"
- "    if (x < y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (y >= 2) {\n        if (y % 2 === 0)\
  \ {\n            result = y;\n        }\n        y /= 2;\n    }\n    return result;\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let even: number = x % 2 === 0;\n    let evenOrOdd: number = even ? x\
  \ : y;\n    let evenOrOddAndOne: number = even ? y : x;\n    let evenOrOddAndOneAndOne:\
  \ number = even ? y : x;\n    let evenOrOddAndOneAndOneAndOne: number = even ? y\
  \ : x;\n    let evenOrOddAndOneAndOneAndOneAndOne: number = even ? y : x;\n    let\
  \ evenOrOddAndOneAndOneAndOneAndOneAndOne: number = even ? y : x;\n    let evenOrOddAndOneAndOneAndOneAndOneAndOneAndOne:\
  \ number = even ? y : x;\n    let evenOrOddAndOneAndOneAndOneAndOneAndOneAndOneAndOne:\
  \ number = even ? y : x;\n    let evenOrOddAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne:\
  \ number = even ? y : x;\n    let evenOrOddAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne:\
  \ number = even ? y : x;\n    let evenOrOddAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAnd:\
  \ number = even ? y : x;\n    let evenOrOddAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAnd"
- "    if (x > y) {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n\
  \    let even: number = x;\n    let odd: number = y;\n    while (even > 0 && odd\
  \ > 0) {\n        if (even % 2 === 0) {\n            even = even / 2;\n        }\
  \ else {\n            odd = odd / 2;\n        }\n    }\n    return even;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num: number = x;\n    let min_num: number = y;\n    while (max_num\
  \ < min_num) {\n        max_num *= 2;\n        min_num *= 2;\n    }\n    while (max_num\
  \ > min_num) {\n        if (max_num % 2 === 0) {\n            max_num = max_num\
  \ / 2;\n        } else {\n            max_num = max_num - 1;\n        }\n    }\n\
  \    return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num += 2;\n        min_num -= 2;\n    }\n    return max_num;\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
  \ {\n        max_num += 2;\n        min_num -= 2;\n    }\n    return max_num;\n\
  }\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let result: number = x;\n    while (y > 0) {\n        if (y % 2 === 0)\
  \ {\n            result = y;\n            break;\n        }\n        y = y / 2;\n\
  \    }\n    return result;\n}\n"
- "    if (x > y) {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n\
  \    let max_num = x;\n    let min_num = y;\n    while (min_num > 0) {\n       \
  \ if (max_num % min_num === 0) {\n            max_num = max_num / min_num;\n   \
  \     } else {\n            min_num = min_num / min_num;\n        }\n    }\n   \
  \ return max_num;\n}\n"
- "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
  \  }\n    let max_num: number = x;\n    let min_num: number = y;\n    while (max_num\
  \ < min_num) {\n        max_num += 2;\n        min_num -= 2;\n    }\n    return\
  \ max_num;\n}\n"
- "    let even: number = x % 2 === 0;\n    let evenOrOdd: number = even ? x : y;\n\
  \    let evenOrOddEven: number = even ? y : x;\n    let evenOrOddOdd: number = even\
  \ ? x : y;\n    let evenOrOddEvenOdd: number = even ? y : x;\n    let evenOrOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOdd: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOddEven: number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEven: number = even\
  \ ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n   \
  \ let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x;\n   \
  \ let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y\
  \ : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven: number\
  \ = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenO"
- "    let even: number = x % 2 === 0;\n    let evenOrOdd: number = even ? x : y;\n\
  \    let evenOrOddEven: number = even ? y : x;\n    let evenOrOddOdd: number = even\
  \ ? x : y;\n    let evenOrOddEvenOdd: number = even ? y : x;\n    let evenOrOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOdd: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOddEven: number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEven: number = even\
  \ ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n   \
  \ let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x;\n   \
  \ let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x;\n\
  \    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y\
  \ : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven: number\
  \ = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
  \ number = even ? y : x;\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
  \ number = even ? y : x;\n    let evenOrOddEvenOdd"
language: ts
name: HumanEval_102_choose_num
prompt: "//This function takes two positive numbers x and y and returns the\n// biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
  \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
  \ 15) = 14\n// choose_num(13, 12) = -1\nfunction choose_num(x: number, y: number):\
  \ number {\n"
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = choose_num;\n  assert.deepEqual(candidate(12, 15),14);\n\
  \  assert.deepEqual(candidate(13, 12),-1);\n  assert.deepEqual(candidate(33, 12354),12354);\n\
  \  assert.deepEqual(candidate(5234, 5233),-1);\n  assert.deepEqual(candidate(6,\
  \ 29),28);\n  assert.deepEqual(candidate(27, 10),-1);\n  assert.deepEqual(candidate(7,\
  \ 7),-1);\n  assert.deepEqual(candidate(546, 546),546);\n}\n\ntest();"
