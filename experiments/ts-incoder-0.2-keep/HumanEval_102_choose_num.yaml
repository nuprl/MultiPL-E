name: HumanEval_102_choose_num
language: humaneval_to_typescript.py
prompt: "//This function takes two positive numbers x and y and returns the\n// biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
  \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
  \ 15) = 14\n// choose_num(13, 12) = -1\nfunction choose_num(x: number, y: number):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = choose_num;\n  assert.deepEqual(candidate(12, 15),14);\n\
  \  assert.deepEqual(candidate(13, 12),-1);\n  assert.deepEqual(candidate(33, 12354),12354);\n\
  \  assert.deepEqual(candidate(5234, 5233),-1);\n  assert.deepEqual(candidate(6,\
  \ 29),28);\n  assert.deepEqual(candidate(27, 10),-1);\n  assert.deepEqual(candidate(7,\
  \ 7),-1);\n  assert.deepEqual(candidate(546, 546),546);\n}\n\ntest();"
completions: ["    if (x > y) {\n        let temp = x;\n        x = y;\n        y\
    \ = temp;\n    }\n    let max_num = x;\n    let min_num = y;\n    while (max_num\
    \ < min_num) {\n        max_num += 2;\n        min_num -= 2;\n    }\n    while\
    \ (max_num > min_num) {\n        max_num -= 2;\n        min_num += 2;\n    }\n\
    \    return max_num;\n}\n", "    if (x < y) {\n        let temp = x;\n       \
    \ x = y;\n        y = temp;\n    }\n    let result = x;\n    while (result < y)\
    \ {\n        if (result % 2 === 0) {\n            result = result + 1;\n     \
    \   } else {\n            result = result + 2;\n        }\n    }\n    return result;\n\
    }\n", "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    let result = x;\n    while (result <= y) {\n        if (result % 2\
    \ === 0) {\n            result = result + 1;\n        } else {\n            result\
    \ = result + 2;\n        }\n    }\n    return result;\n}\n", "    if (x > y) {\n\
    \        let temp = x;\n        x = y;\n        y = temp;\n    }\n    let result:\
    \ number = -1;\n    for (let i = x; i <= y; i++) {\n        if (i % 2 === 0) {\n\
    \            result = i;\n            break;\n        }\n    }\n    return result;\n\
    }\n", "\tlet result: number = -1;\n\tlet even: number = x;\n\tlet odd: number\
    \ = y;\n\twhile (even > 0 && odd > 0) {\n\t\tif (even % 2 === 0 && odd % 2 !==\
    \ 0) {\n\t\t\tresult = even;\n\t\t\tbreak;\n\t\t}\n\t\tif (even % 2 !== 0 && odd\
    \ % 2 === 0) {\n\t\t\tresult = odd;\n\t\t\tbreak;\n\t\t}\n\t\tif (even % 2 ===\
    \ 0 && odd % 2 === 0) {\n\t\t\tbreak;\n\t\t}\n\t\teven = even - 1;\n\t\todd =\
    \ odd - 1;\n\t}\n\treturn result;\n}\n", "    let max_num = Math.max(x, y);\n\
    \    let min_num = Math.min(x, y);\n    let mid = Math.floor(max_num / 2);\n \
    \   if (max_num % 2 === 0 && min_num % 2 === 0) {\n        return mid;\n    }\
    \ else if (max_num % 2 === 0) {\n        return choose_num(min_num, mid);\n  \
    \  } else if (min_num % 2 === 0) {\n        return choose_num(mid, max_num);\n\
    \    } else {\n        return -1;\n    }\n}\n", "    if (x > y) {\n        let\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    if (x < 0 || y < 0)\
    \ {\n        return -1;\n    }\n    let even: number = x;\n    let odd: number\
    \ = y;\n    while (even > 0 && odd > 0) {\n        if (even % 2 === 0 && odd %\
    \ 2 !== 0) {\n            return even;\n        }\n        even /= 2;\n      \
    \  odd /= 2;\n    }\n    return -1;\n}\n", "    if (x > y) {\n        let tmp\
    \ = x;\n        x = y;\n        y = tmp;\n    }\n    let max_num = x;\n    let\
    \ min_num = y;\n    while (max_num < min_num) {\n        max_num += 2;\n     \
    \   min_num -= 2;\n    }\n    while (max_num > min_num) {\n        max_num -=\
    \ 2;\n        min_num += 2;\n    }\n    return max_num;\n}\n", "    if (x > y)\
    \ {\n        let tmp = x;\n        x = y;\n        y = tmp;\n    }\n    let even\
    \ = x % 2 === 0;\n    let even2 = y % 2 === 0;\n    if (even && even2) {\n   \
    \     return Math.max(x, y);\n    }\n    if (even) {\n        return -1;\n   \
    \ }\n    if (even2) {\n        return -1;\n    }\n    return Math.max(x, y);\n\
    }\n", "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
    \ {\n        max_num *= 2;\n        min_num *= 2;\n    }\n    while (max_num >\
    \ min_num) {\n        if (max_num % 2 === 0) {\n            max_num -= 1;\n  \
    \      } else {\n            max_num -= 2;\n        }\n    }\n    return max_num;\n\
    }\n", "    if (x > y) {\n        let tmp = x;\n        x = y;\n        y = tmp;\n\
    \    }\n    let result: number = -1;\n    for (let i = x; i <= y; i++) {\n   \
    \     if (i % 2 === 0) {\n            result = i;\n            break;\n      \
    \  }\n    }\n    return result;\n}\n", "    let even: number = x % 2 === 0\n \
    \   let evenOrOdd: number = even ? x : y\n    let evenOrOddEven: number = even\
    \ ? y : x\n    let evenOrOddOdd: number = even ? x : y\n    let evenOrOddEvenOdd:\
    \ number = even ? y : x\n    let evenOrOddEvenOddEven: number = even ? y : x\n\
    \    let evenOrOddEvenOddEvenOdd: number = even ? y : x\n    let evenOrOddEvenOddEvenOddEven:\
    \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOdd: number = even\
    \ ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEven: number = even ? y : x\n\
    \    let evenOrOddEvenOddEvenOddEvenOddEvenOdd: number = even ? y : x\n    let\
    \ evenOrOddEvenOddEvenOddEvenOddEvenOddEven: number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
    \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
    \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
    \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
    \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
    \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
    \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
    \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven:\
    \ number = even ? y : x\n    let evenOrOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd:\
    \ number = even ? y : x\n    let evenOrOddEvenOdd", "    if (x > y) {\n      \
    \  let temp = x;\n        x = y;\n        y = temp;\n    }\n    let max_num =\
    \ x;\n    let min_num = y;\n    while (min_num < max_num) {\n        let mid =\
    \ min_num + max_num / 2;\n        if (mid % 2 === 0) {\n            max_num =\
    \ mid;\n        } else {\n            min_num = mid;\n        }\n    }\n    return\
    \ max_num;\n}\n", "    if (x > y) {\n        let temp = x;\n        x = y;\n \
    \       y = temp;\n    }\n    let max_num = x;\n    let min_num = y;\n    while\
    \ (max_num < min_num) {\n        max_num++;\n        if (max_num % 2 === 0) {\n\
    \            max_num++;\n        }\n    }\n    return max_num;\n}\n", "    if\
    \ (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n    }\n\
    \    let result = x;\n    while (result < y) {\n        result *= 2;\n    }\n\
    \    while (result > y) {\n        result /= 2;\n    }\n    return result;\n}\n",
  "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n  \
    \  }\n    let max_num = x;\n    let min_num = y;\n    while (max_num < min_num)\
    \ {\n        max_num += 2;\n        min_num -= 2;\n    }\n    return max_num;\n\
    }\n", "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    let max_num = x;\n    let min_num = y;\n    while (max_num - min_num\
    \ > 1) {\n        let mid = (max_num + min_num) / 2;\n        if (mid % 2 ===\
    \ 0) {\n            max_num = mid;\n        } else {\n            min_num = mid;\n\
    \        }\n    }\n    return max_num;\n}\n", "    if (x > y) {\n        let temp\
    \ = x;\n        x = y;\n        y = temp;\n    }\n    let result: number = -1;\n\
    \    for (let i = x; i <= y; i++) {\n        if (is_even(i)) {\n            result\
    \ = i;\n            break;\n        }\n    }\n    return result;\n}\n", "    if\
    \ (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n    }\n\
    \    let result = x;\n    while (result < y) {\n        if (result % 2 === 0)\
    \ {\n            result = result + 1;\n        } else {\n            result =\
    \ result + 2;\n        }\n    }\n    return result;\n}\n", "    let even: number\
    \ = x % 2 === 0;\n    let evenOrOdd: number = even ? x : y;\n    let evenOrOddMinus1:\
    \ number = even ? y - 1 : x;\n    let evenOrOddMinus2: number = even ? x - 1 :\
    \ y;\n    let evenOrOddMinus3: number = even ? y - 2 : x;\n    let evenOrOddMinus4:\
    \ number = even ? x - 2 : y;\n    let evenOrOddMinus5: number = even ? y - 3 :\
    \ x;\n    let evenOrOddMinus6: number = even ? x - 3 : y;\n    let evenOrOddMinus7:\
    \ number = even ? y - 4 : x;\n    let evenOrOddMinus8: number = even ? x - 4 :\
    \ y;\n    let evenOrOddMinus9: number = even ? y - 5 : x;\n    let evenOrOddMinus10:\
    \ number = even ? x - 5 : y;\n    let evenOrOddMinus11: number = even ? y - 6\
    \ : x;\n    let evenOrOddMinus12: number = even ? x - 6 : y;\n    let evenOrOddMinus13:\
    \ number = even ? y - 7 : x;\n    let evenOrOddMinus14: number = even ? x - 7\
    \ : y;\n    let evenOrOddMinus15: number = even ? y - 8 : x;\n    let evenOrOddMinus16:\
    \ number = even ? x - 8 : y;\n    let evenOrOddMinus17: number = even ? y - 9\
    \ : x;\n    let evenOrOddMinus18: number = even ? x - 9 : y;\n    let evenOrOddMinus19:\
    \ number = even ? y - 10 : x;\n    let evenOrOddMinus20: number = even ? x - 10\
    \ : y;\n    let evenOrOddMinus21: number = even ? y - 11 : x;\n    let evenOrOddMinus22:\
    \ number = even ? x - 11 : y;\n    let evenOrOddMinus23: number = even ? y - 12\
    \ : x;\n    let evenOrOddMinus24: number = even ? x - 12 : y;\n    let evenOrOddMinus25:\
    \ number = even ? y - 13 : x;\n    let evenOrOddMinus26: number = even ? x - 13\
    \ : y;\n    let evenOrOddMinus27: number = even ? y - 14 : x;\n    let evenOrOddMinus28:\
    \ number = even ? x - 14 : y;\n    let evenOrOddMinus29: number = even ? y - 15\
    \ : x;\n    let evenOrOddMinus30"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
