language: ts
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 2
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  let pair: number[][]\
    \ = [];\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
    \ j++) {\n      if (pairs[i][j] !== 0) {\n        pair.push(pairs[i][j]);\n  \
    \    }\n    }\n  }\n  return pair.length !== 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa7w47yf6.ts(29,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659738831
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i; j < l.length; j++) {\n      if (l[j] > 0) {\n        pair.push(l[j]);\n\
    \      }\n    }\n    if (pair.length > 0) {\n      pairs.push(pair);\n    }\n\
    \  }\n  if (pairs.length === 0) {\n    return false;\n  }\n  let pair: number[][]\
    \ = [];\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
    \ j++) {\n      if (pairs[i][j] === 0) {\n        return false;\n      }\n   \
    \ }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmppvjf9puk.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppvjf9puk.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const n = l.length;\n\
    \  if (n === 0) return false;\n  if (n === 1) return l[0] === 0;\n  let sum =\
    \ 0;\n  for (let i = 0; i < n; i++) {\n    sum += l[i];\n    if (sum < 0) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpm2r42vuw.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm2r42vuw.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length < 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3d2wzbk9.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3d2wzbk9.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = l[i] + l[j];\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0;\
    \ i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length; j++) {\n\
    \      if (pairs[i][j] !== 0) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsew4eluy.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsew4eluy.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 2
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]) % 2 === 0;\n      }\n    }\n    pairs.push(pair);\n  }\n  for\
    \ (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
    \ j++) {\n      if (pairs[i][j]) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwxgu6w9i.ts(20,9): error TS2322: Type ''boolean''
    is not assignable to type ''number''.

    '
  timestamp: 1659738831
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) {\n    return false;\n  }\n  let pairs: number[][] = [];\n  for (let i =\
    \ 0; i < l.length; i++) {\n    let pair: number[] = [];\n    for (let j = 0; j\
    \ < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i] + l[j]);\n\
    \      }\n    }\n    pairs.push(pair);\n  }\n  return pairs.some(pair => pairs.every(pair\
    \ => pair[0] === pair[1]));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9x0xze_h.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9x0xze_h.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9nhz67z8.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9nhz67z8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length < 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3d2wzbk9.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3d2wzbk9.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i =\
    \ 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length; j++) {\n\
    \      if (pairs[i][j] !== 0) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf448t9mp.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf448t9mp.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    let pair = pairs[i];\n    for (let j = 0; j < pair.length;\
    \ j++) {\n      if (pair[j] === 0) {\n        return true;\n      }\n    }\n \
    \ }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748944
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) {\n    return false;\n  }\n  let pairs: number[][] = [];\n  for (let i =\
    \ 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n    \
    \  if (l[i] + l[j] === 0) {\n        pairs.push([i, j]);\n      }\n    }\n  }\n\
    \  return pairs.length > 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9nhz67z8.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9nhz67z8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9nhz67z8.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9nhz67z8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i == j) {\n        continue;\n\
    \      }\n      if (l[i] + l[j] == 0) {\n        pair.push(l[i]);\n        pair.push(l[j]);\n\
    \      }\n    }\n    if (pair.length == 2) {\n      pairs.push(pair);\n    }\n\
    \  }\n  return pairs.length == 2;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i; j < l.length; j++) {\n      pair[j] = (l[i] + l[j]);\n  \
    \  }\n    pairs.push(pair);\n  }\n  for (let i = 0; i < pairs.length; i++) {\n\
    \    for (let j = i + 1; j < pairs.length; j++) {\n      if (pairs[i][0] === pairs[j][0]\
    \ && pairs[i][1] === pairs[j][1]) {\n        return false;\n      }\n    }\n \
    \ }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8dqv8c62.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8dqv8c62.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9nhz67z8.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9nhz67z8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    let pair = pairs[i];\n    let sum = 0;\n    for (let\
    \ j = 0; j < pair.length; j++) {\n      sum += pair[j];\n    }\n    if (sum ===\
    \ 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptu2z9q3j.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptu2z9q3j.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    let pair = pairs[i];\n    let sum = 0;\n    for (let\
    \ j = 0; j < pair.length; j++) {\n      sum += pair[j];\n    }\n    if (sum ===\
    \ 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptu2z9q3j.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptu2z9q3j.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzv4e996o.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzv4e996o.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9nhz67z8.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9nhz67z8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    let pair = pairs[i];\n    let pair_count = 0;\n  \
    \  for (let j = 0; j < pair.length; j++) {\n      if (pair[j] === 0) {\n     \
    \   pair_count++;\n      }\n    }\n    if (pair_count === 2) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgssn5lib.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgssn5lib.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair[j]\
    \ = (l[i] + l[j]) % 2;\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let\
    \ i = 0; i < pairs.length; i++) {\n    let pair = pairs[i];\n    for (let j =\
    \ 0; j < pair.length; j++) {\n      if (pair[j] != 0) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmm2ezr1t.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmm2ezr1t.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair[j]\
    \ = l[i] + l[j];\n      }\n    }\n    pairs.push(pair);\n  }\n  return pairs.some((pair)\
    \ => pair.every((n) => n === 0));\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm38vst5a.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm38vst5a.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length; j++) {\n    \
    \  if (pairs[i][j] !== 0) {\n        return false;\n      }\n    }\n  }\n  return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmfs84wby.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmfs84wby.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i == j) continue;\n     \
    \ if (l[i] + l[j] == 0) {\n        pair.push(l[i]);\n        pair.push(l[j]);\n\
    \      }\n    }\n    if (pair.length == 2) {\n      pairs.push(pair);\n    }\n\
    \  }\n  return pairs.length == 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp705fyl2j.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp705fyl2j.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i =\
    \ 0; i < pairs.length; i++) {\n    let pair = pairs[i];\n    for (let j = 0; j\
    \ < pair.length; j++) {\n      if (pair[j] != 0) {\n        return false;\n  \
    \    }\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp94sxr2n0.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp94sxr2n0.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    let pair = pairs[i];\n    let sum = 0;\n    for (let\
    \ j = 0; j < pair.length; j++) {\n      sum += pair[j];\n    }\n    if (sum !=\
    \ 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsq1m2xl5.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsq1m2xl5.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9nhz67z8.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9nhz67z8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair = [l[i], 0];\n \
    \   pairs.push(pair);\n  }\n  for (let i = 0; i < pairs.length; i++) {\n    for\
    \ (let j = i + 1; j < pairs.length; j++) {\n      if (pairs[i][0] + pairs[j][0]\
    \ === 0) return true;\n    }\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9nhz67z8.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9nhz67z8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j && l[i] + l[j] ==\
    \ 0) {\n        pair.push(l[i]);\n        pair.push(l[j]);\n      }\n    }\n \
    \   if (pair.length == 2) {\n      pairs.push(pair);\n    }\n  }\n  return pairs.length\
    \ == 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const n = l.length;\n\
    \  if (n < 2) return false;\n  const pairs: number[][] = [];\n  for (let i = 0;\
    \ i < n; i++) {\n    const a = l[i];\n    const b = l[n - 1 - i];\n    if (a <\
    \ 0 || b < 0) return false;\n    if (a === 0 && b === 0) return false;\n    if\
    \ (a === b) continue;\n    const pair = [a, b];\n    if (pairs.indexOf(pair) ===\
    \ -1) {\n      pairs.push(pair);\n    }\n  }\n  return pairs.every(p => p[0] ===\
    \ 0 && p[1] === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6bwwbtpu.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6bwwbtpu.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    for (let j = 0; j < pairs.length; j++) {\n      if\
    \ (i != j && pairs[i][0] == pairs[j][0]) {\n        return false;\n      }\n \
    \   }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgc39w44q.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgc39w44q.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 2
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i === j) {\n        pair.push(0);\n\
    \      } else {\n        pair.push(l[j]);\n      }\n    }\n    pairs.push(pair);\n\
    \  }\n  let pair: number[][] = [];\n  for (let i = 0; i < pairs.length; i++) {\n\
    \    for (let j = 0; j < pairs[i].length; j++) {\n      if (pairs[i][j] === 0)\
    \ {\n        pair.push([i, j]);\n      }\n    }\n  }\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < pair.length; i++) {\n    for (let j = 0; j < pair[i].length;\
    \ j++) {\n      if (pairs[i][j] === 0) {\n        pairs.push(pair[i]);\n     \
    \ }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4s94f5ue.ts(15,7): error TS2451: Cannot redeclare
    block-scoped variable ''pairs''.

    ../../../../../tmp/tmp4s94f5ue.ts(35,7): error TS2451: Cannot redeclare block-scoped
    variable ''pairs''.

    '
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i === j) {\n        continue;\n\
    \      }\n      pair.push(l[i] + l[j]);\n    }\n    pairs.push(pair);\n  }\n \
    \ for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs.length;\
    \ j++) {\n      if (i === j) {\n        continue;\n      }\n      if (pairs[i][j]\
    \ !== 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprzthalrf.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprzthalrf.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 2
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i + 1; j < l.length; j++) {\n      pair[i] = l[i];\n      pair[j]\
    \ = l[j];\n    }\n    pairs.push(pair);\n  }\n  let pair: number[] = [];\n  for\
    \ (let i = 0; i < l.length; i++) {\n    pair[i] = l[i];\n  }\n  pairs.push(pair);\n\
    \  let pairs: number[][] = [];\n  for (let i = 0; i < pairs.length; i++) {\n \
    \   let pair: number[] = [];\n    for (let j = 0; j < pairs[i].length; j++) {\n\
    \      pair[j] = pairs[i][j];\n    }\n    pairs.push(pair);\n  }\n  let pairs:\
    \ number[][] = [];\n  for (let i = 0; i < pairs.length; i++) {\n    let pair:\
    \ number[] = [];\n    for (let j = 0; j < pairs[i].length; j++) {\n      pair[j]\
    \ = pairs[i][j];\n    }\n    pairs.push(pair);\n  }\n  let pairs: number[][] =\
    \ [];\n  for (let i = 0; i < pairs.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < pairs[i].length; j++) {\n      pair[j] = pairs[i][j];\n\
    \    }\n    pairs.push(pair);\n  }\n  let pairs: number[][] = [];\n  for (let\
    \ i = 0; i < pairs.length; i++) {\n    let pair: number[] = [];\n    for (let\
    \ j = 0; j < pairs[i].length; j++) {\n      pair[j] = pairs[i][j];\n    }\n  \
    \  pairs.push(pair);\n  }\n  let pairs: number[][] = [];\n  for (let i = 0; i\
    \ < pairs.length; i++) {\n    let pair: number[] = [];\n    for (let j = 0; j\
    \ < pairs[i].length; j++) {\n      pair[j] = pairs[i][j];\n    }\n    pairs.push(pair);\n\
    \  }\n  let pairs: number[][] = [];\n  for (let i = 0; i < pairs.length; i++)\
    \ {\n    let pair: number[] = [];\n    for (let j = 0; j < pairs[i].length; j++)\
    \ {\n      pair[j] = pairs[i][j];\n    }\n    pairs.push(pair);\n  }\n  let pairs:\
    \ number[][] = [];\n  for (let i = 0; i < pairs.length; i++) {\n    let pair:\
    \ number[] = [];\n    for (let j = 0; j < pairs[i].length; j++) {\n      pair[j]\
    \ = pairs[i][j];\n    }\n    pairs.push(pair);\n  }\n  let pairs: number[][] =\
    \ [];\n  for (let i = 0; i < pairs.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < pairs[i].length; j++) {\n      pair[j] = pairs[i][j];\n\
    \    }\n    pairs.push(pair);\n  }\n  let pairs: number[][] = [];\n  for (let\
    \ i = 0; i < pairs.length; i++) {\n    let pair: number[] = [];\n    for (let\
    \ j = 0; j < pairs[i].length; j++) {\n      pair[j] = pairs[i][j];\n    }\n  \
    \  pairs.push(pair);\n  }\n  let pairs: number[][] = [];\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwjnyzelw.ts(120,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9nhz67z8.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9nhz67z8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    for (let j = 0; j < pairs.length; j++) {\n      if\
    \ (i !== j && pairs[i][j] === 0) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt5xs60l3.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt5xs60l3.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length < 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3d2wzbk9.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3d2wzbk9.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair = [l[i], l[i - 1]];\n\
    \    pairs.push(pair);\n  }\n  let pair_count = pairs.length;\n  for (let i =\
    \ 0; i < pair_count; i++) {\n    for (let j = i + 1; j < pair_count; j++) {\n\
    \      if (pairs[i][0] + pairs[j][0] === 0 && pairs[i][1] + pairs[j][1] === 0)\
    \ {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpis1icdmj.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpis1icdmj.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748947
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = l[i] + l[j];\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0;\
    \ i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length; j++) {\n\
    \      if (pairs[i][j] !== 0) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsew4eluy.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsew4eluy.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair = [l[i], l[i - 1]];\n\
    \    if (pairs.indexOf(pair) == -1) {\n      pairs.push(pair);\n    }\n  }\n \
    \ for (let i = 0; i < pairs.length; i++) {\n    let pair = pairs[i];\n    if (pair[0]\
    \ === 0 && pair[1] === 0) {\n      return true;\n    }\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp68utyc01.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp68utyc01.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748947
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  return pairs.some((pair)\
    \ => pair.every((num) => num == 0));\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp31l8i1v1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp31l8i1v1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748947
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) return false;\n  let pairs: number[][] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j]\
    \ === 0) pairs.push([i, j]);\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdfwnoz54.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdfwnoz54.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748947
- exit_code: 2
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  let pair: number[][]\
    \ = [];\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
    \ j++) {\n      if (pairs[i][j] != 0) {\n        pair.push(pairs[i][j]);\n   \
    \   }\n    }\n  }\n  return pairs.length == 1 && pair[0].length == 0;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5d8qwhys.ts(29,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659748947
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length < 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3d2wzbk9.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3d2wzbk9.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzv4e996o.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzv4e996o.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  let pair: number[][]\
    \ = [];\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
    \ j++) {\n      if (pairs[i][j] !== 0) {\n        return false;\n      }\n   \
    \ }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1v4tcu3p.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1v4tcu3p.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748947
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) {\n    return false;\n  }\n  let pairs: number[][] = [];\n  for (let i =\
    \ 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n    \
    \  if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n\
    \  }\n  return pairs.length >= 2;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpajec1f4a.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpajec1f4a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748947
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const n = l.length;\n\
    \  if (n < 2) return false;\n  const pairs: number[][] = [];\n  for (let i = 0;\
    \ i < n; i++) {\n    const a = l[i];\n    for (let j = i + 1; j < n; j++) {\n\
    \      const b = l[j];\n      if (a + b === 0) pairs.push([a, b]);\n    }\n  }\n\
    \  return pairs.every(p => p[0] === p[1]);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo7jgmzpz.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo7jgmzpz.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748947
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9nhz67z8.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9nhz67z8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i + 1; j < l.length; j++) {\n      pair.push(l[i] + l[j]);\n\
    \    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i < pairs.length; i++) {\n\
    \    let pair = pairs[i];\n    if (pair.length !== 2) {\n      return false;\n\
    \    }\n    for (let j = 0; j < pair.length; j++) {\n      if (pair[j] !== 0)\
    \ {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpshcks59g.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpshcks59g.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748947
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length < 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3d2wzbk9.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3d2wzbk9.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j && l[i] + l[j] ==\
    \ 0) {\n        pair.push(l[i]);\n        pair.push(l[j]);\n      }\n    }\n \
    \   if (pair.length > 0) {\n      pairs.push(pair);\n    }\n  }\n  return pairs.length\
    \ == 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748947
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    let pair = pairs[i];\n    let sum = 0;\n    for (let\
    \ j = 0; j < pair.length; j++) {\n      sum += pair[j];\n    }\n    if (sum ===\
    \ 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptu2z9q3j.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptu2z9q3j.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i; j < l.length; j++) {\n      if (l[j] < 0) {\n        pair[j]\
    \ = 0;\n      } else {\n        pair[j] = l[j];\n      }\n    }\n    pairs.push(pair);\n\
    \  }\n  let pair_count = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    for\
    \ (let j = 0; j < pairs[i].length; j++) {\n      if (pairs[i][j] !== 0) {\n  \
    \      pair_count++;\n      }\n    }\n  }\n  return pair_count === 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6wbm08ym.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6wbm08ym.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748947
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9nhz67z8.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9nhz67z8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i; j < l.length; j++) {\n      if (l[j] >= 0) {\n        pair.push(l[j]);\n\
    \      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i < pairs.length;\
    \ i++) {\n    for (let j = i + 1; j < pairs.length; j++) {\n      if (pairs[i][0]\
    \ + pairs[j][0] === pairs[i][1]) {\n        return true;\n      }\n    }\n  }\n\
    \  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpab3jzjre.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpab3jzjre.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748947
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9nhz67z8.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9nhz67z8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i === j) {\n        continue;\n\
    \      }\n      if (l[j] - l[i] === 0) {\n        pair.push(l[j]);\n      }\n\
    \    }\n    if (pair.length > 0) {\n      pairs.push(pair);\n    }\n  }\n  return\
    \ pairs.length > 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa3cl82xu.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa3cl82xu.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748947
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    let pair = pairs[i];\n    for (let j = 0; j < pair.length;\
    \ j++) {\n      if (pair[j] === 0) {\n        return false;\n      }\n    }\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpq939j3n4.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq939j3n4.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748947
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i === j) continue;\n    \
    \  if (l[j] === 0) {\n        pairs.push(pair);\n        break;\n      }\n   \
    \   pair.push(l[j]);\n    }\n  }\n  return pairs.some(pair => pair.length ===\
    \ 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3jn1gnzy.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3jn1gnzy.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748947
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length < 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3d2wzbk9.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3d2wzbk9.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j && l[i] + l[j] ==\
    \ 0) {\n        pair.push(l[i]);\n        pair.push(l[j]);\n      }\n    }\n \
    \   pairs.push(pair);\n  }\n  return pairs.some((pair) => pair.length == 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748947
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i; j < l.length; j++) {\n      pair[j] = l[j];\n    }\n    pairs.push(pair);\n\
    \  }\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = i + 1; j <\
    \ pairs.length; j++) {\n      if (pairs[i][0] + pairs[j][0] === 0 &&\n       \
    \   pairs[i][1] + pairs[j][1] === 0) {\n        return true;\n      }\n    }\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1dltr7na.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1dltr7na.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748947
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = l[i] + l[j];\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0;\
    \ i < pairs.length; i++) {\n    for (let j = 0; j < pairs.length; j++) {\n   \
    \   if (i !== j) {\n        if (pairs[i][j] !== 0) {\n          return false;\n\
    \        }\n      }\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplblz58xf.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplblz58xf.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748947
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) {\n    return false;\n  }\n  let pairs: number[][] = [];\n  for (let i =\
    \ 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n    \
    \  if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n\
    \  }\n  return pairs.length !== 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748947
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair[j]\
    \ = l[i] + l[j];\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0;\
    \ i < pairs.length; i++) {\n    let pair = pairs[i];\n    let sum = 0;\n    for\
    \ (let j = 0; j < pair.length; j++) {\n      sum += pair[j];\n    }\n    if (sum\
    \ != 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoee4exdj.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoee4exdj.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748947
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 2
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  let pair: number[][]\
    \ = [];\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
    \ j++) {\n      if (pairs[i][j] != 0) {\n        pair.push(pairs[i][j]);\n   \
    \   }\n    }\n  }\n  return pairs.length == 1 && pair[0].length == 1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcigsbr_n.ts(29,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659748947
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n\
    \        pair.push(l[i]);\n        pair.push(l[j]);\n      }\n    }\n    if (pair.length\
    \ > 0) {\n      pairs.push(pair);\n    }\n  }\n  return pairs.length > 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748947
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i + 1; j < l.length; j++) {\n      pair.push(l[i] + l[j]);\n\
    \    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i < pairs.length; i++) {\n\
    \    let pair = pairs[i];\n    for (let j = 0; j < pair.length; j++) {\n     \
    \ if (pair[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748948
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length < 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3d2wzbk9.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3d2wzbk9.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i; j < l.length; j++) {\n      pair.push(l[j]);\n    }\n   \
    \ pairs.push(pair);\n  }\n  for (let i = 0; i < pairs.length; i++) {\n    let\
    \ pair = pairs[i];\n    for (let j = 0; j < pair.length; j++) {\n      if (pair[j]\
    \ > 0) return false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2tdai3xo.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2tdai3xo.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748948
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair = [l[i], l[i - 1]];\n\
    \    if (pairs.indexOf(pair) === -1) {\n      pairs.push(pair);\n    }\n  }\n\
    \  for (let i = 0; i < pairs.length; i++) {\n    let pair = pairs[i];\n    if\
    \ (pair[0] === 0 && pair[1] === 0) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9_0osdug.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9_0osdug.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748948
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = l[i] + l[j];\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0;\
    \ i < pairs.length; i++) {\n    let pair = pairs[i];\n    let sum = 0;\n    for\
    \ (let j = 0; j < pair.length; j++) {\n      sum += pair[j];\n    }\n    if (sum\
    \ === 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5,\
    \ 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpowc8qt_t.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpowc8qt_t.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748948
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzv4e996o.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzv4e996o.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length; j++) {\n    \
    \  if (pairs[i][j] !== 0) {\n        return false;\n      }\n    }\n  }\n  return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmfs84wby.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmfs84wby.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i =\
    \ 0; i < pairs.length; i++) {\n    let pair = pairs[i];\n    let sum = 0;\n  \
    \  for (let j = 0; j < pair.length; j++) {\n      sum += pair[j];\n    }\n   \
    \ if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpca7i0dmh.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpca7i0dmh.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748948
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i == j) {\n        continue;\n\
    \      }\n      pair.push(l[i] + l[j]);\n    }\n    pairs.push(pair);\n  }\n \
    \ for (let i = 0; i < pairs.length; i++) {\n    let pair = pairs[i];\n    for\
    \ (let j = 0; j < pair.length; j++) {\n      if (pair[j] != 0) {\n        return\
    \ false;\n      }\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbmj8xcsf.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbmj8xcsf.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748949
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j && l[i] + l[j] ==\
    \ 0) {\n        pair.push(l[i]);\n        pair.push(l[j]);\n      }\n    }\n \
    \   if (pair.length == 2) {\n      pairs.push(pair);\n    }\n  }\n  return pairs.length\
    \ == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmppgyt_1y2.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppgyt_1y2.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748949
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length < 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3d2wzbk9.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3d2wzbk9.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) return false;\n  let pairs: number[][] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    let pair: number[] = [];\n    for (let j = 0; j < l.length; j++)\
    \ {\n      if (i != j) pair[j] = (l[i] + l[j]);\n    }\n    pairs.push(pair);\n\
    \  }\n  for (let i = 0; i < pairs.length; i++) {\n    let pair = pairs[i];\n \
    \   for (let j = 0; j < pair.length; j++) {\n      if (pair[j] != 0) return false;\n\
    \    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2kplk8bf.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2kplk8bf.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748949
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j && l[i] + l[j] ==\
    \ 0) {\n        pair.push(l[i]);\n        pair.push(l[j]);\n      }\n    }\n \
    \   if (pair.length == 2) {\n      pairs.push(pair);\n    }\n  }\n  return pairs.length\
    \ == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmppgyt_1y2.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppgyt_1y2.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748949
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) {\n    return false;\n  }\n  let pairs: number[][] = [];\n  for (let i =\
    \ 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n    \
    \  if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n\
    \  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa1xbp3hx.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa1xbp3hx.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748949
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) {\n    return false;\n  }\n  let pairs: number[][] = [];\n  for (let i =\
    \ 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n    \
    \  if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n\
    \  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa1xbp3hx.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa1xbp3hx.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748949
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) {\n    return false;\n  }\n  let pairs = l.map((x, i) => [x, l[i + 1]]);\n\
    \  let zeros = pairs.filter(x => x[0] + x[1] <= 0);\n  return zeros.length ===\
    \ 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpm2z0mzlf.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm2z0mzlf.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748949
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n\
    \        pair.push(l[i]);\n        pair.push(l[j]);\n      }\n    }\n    if (pair.length\
    \ !== 0) {\n      pairs.push(pair);\n    }\n  }\n  return pairs.length === 2;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyokx7s5d.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyokx7s5d.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748949
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzv4e996o.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzv4e996o.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9nhz67z8.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9nhz67z8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzv4e996o.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzv4e996o.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748944
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqoazon7.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprqoazon7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738832
- exit_code: 2
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  let pair_set = new Set(pairs);\n\
    \  return pairs.some(p => pair_set.size === 2);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4toyk_p4.ts(25,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1659748948
- exit_code: 1
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  let pair: number[] =\
    \ [];\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
    \ j++) {\n      if (pairs[i][j] != 0) {\n        return false;\n      }\n    }\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmppuv13kqb.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppuv13kqb.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748949
- exit_code: 0
  program: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738832
