name: HumanEval_2_truncate_number
language: humaneval_to_typescript.py
prompt: "//Given a positive floating point number, it can be decomposed into\n// and\
  \ integer part (largest integer smaller than given number) and decimals\n// (leftover\
  \ part always smaller than 1).\n// Return the decimal part of the number.\n// >>>\
  \ truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number): number\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n\
  \  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n\
  }\n\ntest();"
completions: ["  if (number < 1) {\n    return 1;\n  }\n  const [integer, decimal]\
    \ = number.toFixed(1).split('.');\n  return parseInt(decimal, 10);\n}\n", "  \
    \  const [integer, decimal] = number.toFixed(1).split('.')\n    return parseFloat(integer)\
    \ + parseFloat(decimal)\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  const\
    \ [integer, decimals] = Math.trunc(number).toString().split('.');\n  return decimals\
    \ ? parseInt(decimals, 10) : integer;\n}\n", "  const decimals = Math.trunc(number).toString().split('.')[1];\n\
    \  return decimals ? Number(decimals) : 0;\n}\n", "\tlet decimals = Math.trunc(number).toString().split(\"\
    .\")[1].length;\n\treturn (number - Math.floor(number)) * Math.pow(10, decimals);\n\
    }\n", "  if (number < 1) {\n    return number;\n  }\n  const [integer, decimals]\
    \ = Math.trunc(number).toString().split('.');\n  return decimals ? +integer +\
    \ decimals : +integer;\n}\n", "\tlet decimals = Math.trunc(number).toString().split(\"\
    .\")[1].length;\n\treturn Math.trunc(number).toString().split(\".\")[0] + \".\"\
    \ + decimals;\n}\n", "  const [integer, decimal] = number.toFixed(1).split('.')\n\
    \  return parseFloat(integer) + parseFloat(decimal)\n}\n", "  const [integer,\
    \ decimal] = number.toFixed(1).split('.')\n  return parseFloat(integer) + parseFloat(decimal)\n\
    }\n", "  if (number < 1) {\n    return number;\n  }\n  const [integer, decimal]\
    \ = number.toFixed(1).split('.');\n  return parseFloat(integer);\n}\n", "  if\
    \ (number < 1) {\n    return 0\n  }\n  const [integer, decimal] = number.toFixed(1).split('.')\n\
    \  return +integer + +decimal\n}\n", "    const decimals = Math.trunc(number);\n\
    \    return number - decimals;\n}\n", "  const [integer, decimal] = number.toFixed(2).split('.');\n\
    \  return parseFloat(integer) + parseFloat(decimal);\n}\n", "  if (number < 1)\
    \ {\n    return 1;\n  }\n  const [integer, decimals] = Math.trunc(number).toFixed(2).split('.');\n\
    \  return decimals ? +integer + decimals : +integer;\n}\n", "  const [integer,\
    \ decimals] = number.toFixed(1).split('.');\n  return parseFloat(integer) + parseFloat(decimals.slice(0,\
    \ -1));\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  if (number > 10) {\n\
    \    return 10;\n  }\n  const decimals = Math.floor(Math.log10(number));\n  return\
    \ Math.trunc(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n",
  "  if (number < 1) {\n    return 1;\n  }\n  if (number > 1000000000000) {\n    return\
    \ 1000000000000;\n  }\n  if (number > 1000000000) {\n    return 1000000000;\n\
    \  }\n  if (number > 1000000) {\n    return 1000000;\n  }\n  if (number > 1000)\
    \ {\n    return 1000;\n  }\n  if (number > 100) {\n    return 100;\n  }\n  return\
    \ number;\n}\n", "  if (number < 1) {\n    return 1;\n  }\n  const [integerPart,\
    \ decimalPart] = number.toFixed(1).split('.');\n  return decimalPart;\n}\n", " \
    \   if (number < 1) {\n        return 0;\n    }\n    const [integer, decimal]\
    \ = number.toFixed(1).split('.');\n    return +integer + decimal;\n}\n", "  const\
    \ [integer, decimals] = number.toFixed(1).split('.')\n  return parseFloat(integer)\
    \ + parseFloat(decimals)\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
