language: ts
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      result += letter.charCodeAt(0) - 96;\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpygmptib5.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpygmptib5.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738434
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === nextLetter) {\n      result += letter;\n      i++;\n    }\
    \ else {\n      result += letter.toUpperCase();\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7cpntpoq.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7cpntpoq.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738434
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n  let newMessage = '';\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    const nextLetter = message[(i +\
    \ 1) % message.length];\n    const nextLetterIndex = alphabet.indexOf(nextLetter);\n\
    \    const nextLetterIndex2 = alphabet.indexOf(nextLetter, (i + 1) % message.length);\n\
    \    const nextLetterIndex3 = alphabet.indexOf(nextLetter, (i + 2) % message.length);\n\
    \    const nextLetterIndex4 = alphabet.indexOf(nextLetter, (i + 3) % message.length);\n\
    \    const nextLetterIndex5 = alphabet.indexOf(nextLetter, (i + 4) % message.length);\n\
    \    const nextLetterIndex6 = alphabet.indexOf(nextLetter, (i + 5) % message.length);\n\
    \    const nextLetterIndex7 = alphabet.indexOf(nextLetter, (i + 6) % message.length);\n\
    \    const nextLetterIndex8 = alphabet.indexOf(nextLetter, (i + 7) % message.length);\n\
    \    const nextLetterIndex9 = alphabet.indexOf(nextLetter, (i + 8) % message.length);\n\
    \    const nextLetterIndex10 = alphabet.indexOf(nextLetter, (i + 9) % message.length);\n\
    \    const nextLetterIndex11 = alphabet.indexOf(nextLetter, (i + 10) % message.length);\n\
    \    const nextLetterIndex12 = alphabet.indexOf(nextLetter, (i + 11) % message.length);\n\
    \    const nextLetterIndex13 = alphabet.indexOf(nextLetter, (i + 12) % message.length);\n\
    \    const nextLetterIndex14 = alphabet.indexOf(nextLetter, (i + 13) % message.length);\n\
    \    const nextLetterIndex15 = alphabet.indexOf(nextLetter, (i + 14) % message.length);\n\
    \    const nextLetterIndex16 = alphabet.indexOf(nextLetter, (i + 15) % message.length);\n\
    \    const nextLetterIndex17 = alphabet.indexOf(nextLetter, (i + 16) % message.length);\n\
    \    const nextLetterIndex18 = alphabet.indexOf(nextLetter, (i + 17) % message.length);\n\
    \    const nextLetterIndex19 = alphabet.indexOf(nextLetter, (i + 18) % message.length);\n\
    \    const nextLetterIndex20 = alphabet.indexOf(nextLetter, (i + 19) % message.length);\n\
    \    const nextLetterIndex21 = alphabet.indexOf(nextLetter, (i + 20) % message.length);\n\
    \    const nextLetterIndex22 = alphabet.indexOf(nextLetter, (i + 21) % message.length);\n\
    \    const nextLetterIndex23 = alphabet.indexOf(nextLetter, (i + 22) % message.length);\n\
    \    const nextLetterIndex24 = alphabet.indexOf(nextLetter, (i + 23) % message.length);\n\
    \    const nextLetterIndex25 = alphabet.indexOf(nextLetter, (i + 24) % message.length);\n\
    \    const nextLetter\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjt8k16eb.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738434
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e'\
    \ || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage =\
    \ newMessage.replace(letter, letter.toUpperCase());\n    }\n  }\n  for (let i\
    \ = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if\
    \ (letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter\
    \ === 'U') {\n      newMessage = newMessage.replace(letter, letter.toLowerCase());\n\
    \    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TeST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcoms5ud5.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcoms5ud5.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TeST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738434
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let encodedLetter = letter;\n\
    \        if (letter === 'a' || letter === 'e' || letter === 'i' || letter ===\
    \ 'o' || letter === 'u') {\n            encodedLetter = letter.toUpperCase();\n\
    \        }\n        if (letter === 'A' || letter === 'E' || letter === 'I' ||\
    \ letter === 'O' || letter === 'U') {\n            encodedLetter = letter.toLowerCase();\n\
    \        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TeST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpt9_7v04s.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt9_7v04s.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TeST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738434
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ letter = message[++i];\n    }\n    result += letter;\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpq7w6p9ms.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq7w6p9ms.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738434
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) -\
    \ 65;\n    if (index >= 0) {\n      result += String.fromCharCode(index + 1);\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x14\\x05\\\
    x13\\x14'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpe_biq3xy.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe_biq3xy.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x14\\x05\\\
    x13\\x14',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738434
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n  let newMessage = message;\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n  }\n  for (let i = 0; i < message.length; i++) {\n\
    \    let letter = message[i];\n    let index = letter.charCodeAt(0) - 'A'.charCodeAt(0);\n\
    \    newMessage = newMessage.replace(letter, String.fromCharCode(index + 2));\n\
    \  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x15\\x06\\\
    x14\\x15'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzu6qacif.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzu6qacif.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x15\\x06\\\
    x14\\x15',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738434
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n  let vowels = 'aeiouAEIOU';\n  let letters = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter\
    \ = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index\
    \ % letters.length];\n  }\n  for (let i = 0; i < message.length; i++) {\n    let\
    \ letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded\
    \ += letters[index % letters.length];\n  }\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) -\
    \ 97;\n    encoded += letters[index % letters.length];\n  }\n  for (let i = 0;\
    \ i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0)\
    \ - 97;\n    encoded += letters[index % letters.length];\n  }\n  for (let i =\
    \ 0; i < message.length; i++) {\n    let letter = message[i];\n    let index =\
    \ letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n\
    \  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n\
    \    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n\
    \  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n\
    \    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n\
    \  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n\
    \    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n\
    \  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n\
    \    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n\
    \  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n\
    \    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n\
    \  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n\
    \    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n\
    \  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n\
    \    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n\
    \  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n\
    \    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[index % letters.length];\n\
    \  }\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n\
    \    let index = letter.charCodeAt(0) - 97;\n    encoded += letters[\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzptvp3co.ts(84,9): error TS1005: '']'' expected.

    ../../../../../tmp/tmpzptvp3co.ts(97,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738434
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\" || letter ===\
    \ \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\") {\n     \
    \ result += letter;\n    } else {\n      let index = alphabet.indexOf(letter);\n\
    \      result += alphabet[(index + 1) % alphabet.length];\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5svnx_2m.ts(18,19): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmp5svnx_2m.ts(19,17): error TS2304: Cannot find name ''alphabet''.

    ../../../../../tmp/tmp5svnx_2m.ts(19,40): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738434
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    if (letter === \"a\") {\n      letter\
    \ = \"t\";\n    } else if (letter === \"e\") {\n      letter = \"k\";\n    } else\
    \ if (letter === \"i\") {\n      letter = \"s\";\n    } else if (letter === \"\
    o\") {\n      letter = \"c\";\n    } else if (letter === \"u\") {\n      letter\
    \ = \"g\";\n    }\n    result += letter;\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpva0uh4nr.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpva0uh4nr.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738434
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n    let alphabet: string[] = ['a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z'];\n    let vowels: string[] = ['a', 'e', 'i', 'o', 'u'];\n\
    \    let newMessage: string = '';\n    for (let i = 0; i < message.length; i++)\
    \ {\n        let letter = message[i];\n        if (alphabet.indexOf(letter) >\
    \ -1) {\n            newMessage += letter;\n        } else {\n            let\
    \ index = alphabet.indexOf(vowels[alphabet.indexOf(letter) - 1]);\n          \
    \  newMessage += alphabet[(index + 1) % alphabet.length];\n        }\n    }\n\
    \    return newMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm,string\
    \ |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_qy4jiut.ts(26,2): error TS1110: Type expected.

    ../../../../../tmp/tmp_qy4jiut.ts(26,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp_qy4jiut.ts(27,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp_qy4jiut.ts(27,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp_qy4jiut.ts(28,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp_qy4jiut.ts(28,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_qy4jiut.ts(28,40): error TS1109: Expression expected.

    ../../../../../tmp/tmp_qy4jiut.ts(30,9): error TS1005: '';'' expected.

    '
  timestamp: 1659738434
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n  let vowels = 'aeiouAEIOU'\n  let letters = message.split('')\n\
    \  let encoded = ''\n  for (let i = 0; i < letters.length; i++) {\n    let letter\
    \ = letters[i]\n    let index = vowels.indexOf(letter)\n    if (index >= 0) {\n\
    \      letter = vowels[(index + 2) % vowels.length]\n    }\n    encoded += letter\n\
    \  }\n  return encoded\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo0ptjtgc.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo0ptjtgc.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738434
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let nextLetter = message[i\
    \ + 1];\n        let nextLetterIndex = alphabet.indexOf(nextLetter);\n       \
    \ if (nextLetterIndex > -1) {\n            letter = alphabet[nextLetterIndex];\n\
    \        }\n        result += letter;\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw146ms5q.ts(16,31): error TS2304: Cannot find name
    ''alphabet''.

    ../../../../../tmp/tmpw146ms5q.ts(18,22): error TS2304: Cannot find name ''alphabet''.

    '
  timestamp: 1659738434
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        let vowels = \"aeiou\";\n\
    \        let index = vowels.indexOf(letter);\n        if (index > -1) {\n    \
    \        result += vowels[index - 2];\n        }\n        else {\n           \
    \ result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp700lzf_c.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp700lzf_c.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738434
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    }\n \
    \   else if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n  \
    \    i++;\n    }\n    else {\n      result += letter;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp13ql_t_b.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp13ql_t_b.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738434
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjagk6rv1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjagk6rv1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738434
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n  let result = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n\
    \    if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter ===\
    \ \"o\" || letter === \"u\") {\n      result += letter;\n      i++;\n    } else\
    \ if (letter === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"\
    O\" || letter === \"U\") {\n      result += letter.toUpperCase();\n      i++;\n\
    \    } else {\n      result += letter;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjagk6rv1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjagk6rv1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TET',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738434
- exit_code: 2
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n  let result = '';\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const letter = message[i];\n    if (letter === 'a' || letter ===\
    \ 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result +=\
    \ letter;\n    } else {\n      result += getLetterForVowel(letter, i);\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp61t8aj7.ts(18,17): error TS2304: Cannot find name
    ''getLetterForVowel''.

    '
  timestamp: 1659738434
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message:\
    \ string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter = message[i];\n        if (letter === letter.toUpperCase())\
    \ {\n            result += letter.toUpperCase();\n        } else {\n         \
    \   result += letter.toLowerCase();\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpax6x8_4n.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpax6x8_4n.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738434
