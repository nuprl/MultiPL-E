name: HumanEval_98_count_upper
language: humaneval_to_typescript.py
prompt: "//Given a string s, count the number of uppercase vowels in even indices.\n\
  // For example:\n// count_upper('aBCdEf') returns 1\n// count_upper('abcdefg') returns\
  \ 0\n// count_upper('dBBE') returns 0\nfunction count_upper(s: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
  ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
  dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
  U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
  EEEE\"),2);\n}\n\ntest();"
completions: ["  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if\
    \ (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n\
    }\n", "  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n",
  "  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
