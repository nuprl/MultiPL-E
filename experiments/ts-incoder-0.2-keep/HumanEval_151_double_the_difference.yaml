completions:
- "    if (lst.length === 0) {\n        return 0\n    }\n    let sum = 0\n    for\
  \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 != 0) {\n         \
  \   sum += lst[i]\n        }\n    }\n    return sum\n}\n"
- "    if (lst.length === 0) {\n        return 0\n    }\n    let sum = 0\n    for\
  \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 != 0) {\n         \
  \   sum += lst[i]\n        }\n    }\n    return sum\n}\n"
- "    if (lst.length == 0) {\n        return 0\n    }\n    let sum = 0\n    for (let\
  \ i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 != 0) {\n            sum\
  \ += lst[i]\n        }\n    }\n    return sum\n}\n"
- "  if (lst.length === 0) {\n    return 0;\n  }\n  \n  let sum = 0;\n  for (let i\
  \ = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
  \    }\n  }\n  return sum;\n}\n"
- "  if (lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0;\
  \ i < lst.length; i++) {\n    if (lst[i] % 2 != 0) {\n      sum += lst[i];\n   \
  \ }\n  }\n  return sum;\n}\n"
- "  if (lst.length == 0) return 0;\n  \n  let sum = 0;\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] % 2 != 0) sum += lst[i] * lst[i];\n  }\n  return sum;\n\
  }\n"
- "    if (lst.length == 0) {\n        return 0\n    }\n    let sum = 0\n    for (let\
  \ i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 != 0) {\n            sum\
  \ += lst[i]\n        }\n    }\n    return sum\n}\n"
- "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0;\
  \ i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * lst[i];\n\
  \    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"
- "    if (lst.length === 0) {\n        return 0\n    }\n    let sum = 0\n    for\
  \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 != 0) {\n         \
  \   sum += lst[i]\n        }\n    }\n    return sum\n}\n"
- "    if (lst.length === 0) {\n        return 0\n    }\n    let sum = 0\n    for\
  \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 !== 0) {\n        \
  \    sum += lst[i]\n        }\n    }\n    return sum\n}\n"
- "    if (lst.length == 0) {\n        return 0\n    }\n    var sum = 0\n    for (var\
  \ i = 0; i <lst.length; i++) {\n        if (lst[i] % 2 != 0) {\n            sum\
  \ += lst[i]\n        }\n    }\n    return sum\n}\n"
- "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0;\
  \ i < lst.length; i++) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i] * lst[i];\n\
  \    }\n  }\n  return sum;\n}\n"
- "    if (lst.length == 0) {\n        return 0;\n    }\n    var sum = 0;\n    for\
  \ (var i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 != 0) {\n         \
  \   sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n"
- "    if (lst.length === 0) {\n        return 0\n    }\n    let sum = 0\n    for\
  \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 != 0) {\n         \
  \   sum += lst[i]\n        }\n    }\n    return sum\n}\n"
- "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0;\
  \ i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * lst[i];\n\
  \    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"
- "    if (lst.length == 0) return 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
  \ ++i) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i] * lst[i];\n\
  \        }\n    }\n    return sum;\n}\n"
- "  if (lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0;\
  \ i < lst.length; i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n    if\
  \ (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"
- "    if (lst.length === 0) {\n        return 0\n    }\n    let sum = 0\n    for\
  \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 != 0) {\n         \
  \   sum += lst[i]\n        }\n    }\n    return sum\n}\n"
- "    if (lst.length === 0) {\n        return 0\n    }\n    let sum = 0\n    for\
  \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 != 0) {\n         \
  \   sum += lst[i]\n        }\n    }\n    return sum\n}\n"
- "  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0;\
  \ i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i] * lst[i];\n\
  \    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"
language: ts
name: HumanEval_151_double_the_difference
prompt: "//Given a list of numbers, return the sum of squares of the numbers\n// in\
  \ the list that are odd. Ignore numbers that are negative or not integers.\n// double_the_difference([1,\
  \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1, -2, 0]) == 0\n\
  // double_the_difference([9, -2]) == 81\n// double_the_difference([0]) == 0  \n\
  // If the input list is empty, return 0.\nfunction double_the_difference(lst: number[]):\
  \ number {\n"
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
  \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
  \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
  \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
