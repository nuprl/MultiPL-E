completions:
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] * (range / numbers.length));\n\
  \    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range == 0 ? 0 : range / (max -\
  \ min);\n    return numbers.map(n => n * scale);\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers = numbers.map(n => n / range);\n\
  \    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range == 0 ? 0 : range / max;\n\
  \    return numbers.map(n => n * scale);\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range == 0 ? 0 : range / (max -\
  \ min);\n    return numbers.map(n => n * scale);\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range /\
  \ 2);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range / 1.0;\n    return numbers.map(n\
  \ => n * scale);\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = (range == 0) ? 0 : (numbers[0]\
  \ - min) / range;\n    return numbers.map(n => n * scale);\n}\n"
- "    const min_value = numbers[0];\n    const max_value = numbers[0];\n    for (let\
  \ i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min_value) {\n   \
  \         min_value = numbers[i];\n        } else if (numbers[i] > max_value) {\n\
  \            max_value = numbers[i];\n        }\n    }\n    const scale = (max_value\
  \ - min_value) / (numbers.length - 1);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        numbers[i] = (numbers[i] - min_value) * scale + min_value;\n \
  \   }\n    return numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min) / range;\n\
  \    }\n    return new_numbers;\n}\n"
- "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const min =\
  \ Math.min(numbers[0], numbers[1]);\n    const max = Math.max(numbers[0], numbers[1]);\n\
  \    const range = max - min;\n    const scale = range / numbers.length;\n    const\
  \ new_numbers = new Array(numbers.length);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        new_numbers[i] = numbers[i] * scale;\n    }\n    return new_numbers;\n\
  }\n"
- "    const min_number = numbers[0];\n    const max_number = numbers[0];\n    for\
  \ (let i = 1; i < numbers.length; i++) {\n        const number = numbers[i];\n \
  \       if (number < min_number) {\n            min_number = number;\n        }\
  \ else if (number > max_number) {\n            max_number = number;\n        }\n\
  \    }\n    const scale = (max_number - min_number) / (numbers.length - 1);\n  \
  \  for (let i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i]\
  \ - min_number) * scale + min_number;\n    }\n    return numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range / numbers.length;\n    const\
  \ rescaled: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n   \
  \     rescaled.push(numbers[i] * scale);\n    }\n    return rescaled;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scaled_numbers = numbers.map(n => (n -\
  \ min) / range);\n    return scaled_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n\
  \    }\n    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i]\
  \ = (new_numbers[i] / range);\n    }\n    return new_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range /\
  \ 2);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = (range == 0) ? 0 : (1 / range);\n\
  \    return numbers.map(n => n * scale);\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range / 1.0;\n    return numbers.map(x\
  \ => min + (x * scale));\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = (max - min);\n    let new_numbers: number[] = [];\n    for (let i = 0;\
  \ i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range\
  \ / 2);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range / 1.0;\n    const offset\
  \ = min - min % scale;\n    return numbers.map(n => n * scale + offset);\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers = numbers.map(n => n / range);\n    return\
  \ new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers = numbers.map((num) => {\n\
  \        const rescaled = num / range;\n        return rescaled * range;\n    });\n\
  \    return new_numbers;\n}\n"
- "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const min_number\
  \ = numbers[0];\n    const max_number = numbers[0];\n    for (let i = 1; i < numbers.length;\
  \ i++) {\n        const number = numbers[i];\n        if (number < min_number) {\n\
  \            min_number = number;\n        }\n        if (number > max_number) {\n\
  \            max_number = number;\n        }\n    }\n    const scale = (max_number\
  \ - min_number) / (numbers.length - 1);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        numbers[i] = (numbers[i] - min_number) * scale + min_number;\n\
  \    }\n    return numbers;\n}"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range /\
  \ 2);\n    }\n    return new_numbers;\n}\n"
- "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const min =\
  \ Math.min(numbers[0], numbers[1]);\n    const max = Math.max(numbers[0], numbers[1]);\n\
  \    const scale = (max - min) / (numbers.length - 1);\n    const result = [];\n\
  \    for (let i = 0; i < numbers.length; i++) {\n        result.push(numbers[i]\
  \ * scale);\n    }\n    return result;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n    }\n\
  \    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i] = (new_numbers[i]\
  \ / range) * 2;\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers = numbers.map(n => n / range);\n\
  \    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = (range == 0) ? 0 : (numbers.length\
  \ - 1) / (range + 1);\n    return numbers.map(n => min + scale * n);\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = (range == 0) ? 0 : (numbers.length\
  \ - 1) / (max - min);\n    return numbers.map(x => x * scale);\n}\n"
- "    const min_value = Math.min(...numbers);\n    const max_value = Math.max(...numbers);\n\
  \    const range = max_value - min_value;\n    const scale = (range == 0) ? 0 :\
  \ (1 / range);\n    return numbers.map(x => x * scale);\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = (max - min);\n    var scale = (range == 0) ? 0 :\
  \ 1 / (max - min);\n    var new_numbers = new Array<number>(numbers.length);\n \
  \   for (var i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i]\
  \ * scale;\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range / 1.0;\n    const new_numbers\
  \ = numbers.map(n => n * scale);\n    return new_numbers;\n}\n"
- "    const min_value = Math.min(...numbers);\n    const max_value = Math.max(...numbers);\n\
  \    const range = max_value - min_value;\n    const scaled_numbers = numbers.map(n\
  \ => n * range / max_value);\n    return scaled_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n    }\n\
  \    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i] += range\
  \ / new_numbers.length;\n    }\n    return new_numbers;\n}\n"
- "    if (numbers.length <= 1) {\n        return numbers;\n    }\n    const min_number\
  \ = numbers[0];\n    const max_number = numbers[0];\n    for (let i = 1; i < numbers.length;\
  \ i++) {\n        const number = numbers[i];\n        if (number < min_number) {\n\
  \            min_number = number;\n        }\n        if (number > max_number) {\n\
  \            max_number = number;\n        }\n    }\n    const scale = max_number\
  \ - min_number;\n    const offset = min_number;\n    const result = [];\n    for\
  \ (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n \
  \       result.push(number - offset);\n    }\n    return result;\n}"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n    }\n\
  \    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i] = (new_numbers[i]\
  \ / range) * 2;\n    }\n    return new_numbers;\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = max - min;\n    var scale = (range == 0) ? 0 : 1\
  \ / (range + 1);\n    var new_numbers = new Array<number>(numbers.length);\n   \
  \ for (var i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i]\
  \ * scale;\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range ? 1.0 / (max - min) : 0.0;\n\
  \    return numbers.map(n => min + scale * n);\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scaled_numbers = numbers.map((num) => num\
  \ - min) / range;\n    return scaled_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range / Math.max(...numbers);\n\
  \    const new_numbers = numbers.map(n => n * scale);\n    return new_numbers;\n\
  }\n"
- "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const min_value\
  \ = numbers[0];\n    const max_value = numbers[0];\n    for (let i = 1; i < numbers.length;\
  \ i++) {\n        const value = numbers[i];\n        if (value < min_value) {\n\
  \            min_value = value;\n        }\n        if (value > max_value) {\n \
  \           max_value = value;\n        }\n    }\n    const scale = (max_value -\
  \ min_value) / (numbers.length - 1);\n    for (let i = 0; i < numbers.length; i++)\
  \ {\n        numbers[i] = (numbers[i] - min_value) / scale;\n    }\n    return numbers;\n\
  }\n"
- "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const min_number\
  \ = Math.min(...numbers);\n    const max_number = Math.max(...numbers);\n    const\
  \ range = max_number - min_number;\n    const scale = range / numbers.length;\n\
  \    const scaled_numbers = numbers.map(n => n * scale);\n    return scaled_numbers;\n\
  }\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range == 0 ? 0 : range / max;\n\
  \    return numbers.map(n => n * scale);\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range /\
  \ 2);\n    }\n    return new_numbers;\n}\n"
- "    const min_value = numbers[0];\n    const max_value = numbers[0];\n    for (let\
  \ i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min_value) {\n   \
  \         min_value = numbers[i];\n        }\n        if (numbers[i] > max_value)\
  \ {\n            max_value = numbers[i];\n        }\n    }\n    const scale = (max_value\
  \ - min_value) / (numbers.length - 1);\n    const scaled_numbers = numbers.map(n\
  \ => n * scale);\n    return scaled_numbers;\n}\n"
- "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const min =\
  \ Math.min(numbers[0], numbers[1]);\n    const max = Math.max(numbers[0], numbers[1]);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = (max - min);\n    var scale = (range == 0) ? 0 :\
  \ (numbers[1] - numbers[0]) / range;\n    var new_numbers = new Array<number>(numbers.length);\n\
  \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i]\
  \ * scale + min;\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "    const min_value = Math.min(...numbers);\n    const max_value = Math.max(...numbers);\n\
  \    const range = max_value - min_value;\n    const scaled_numbers = numbers.map(n\
  \ => n / range);\n    return scaled_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range / Math.max(min, max);\n \
  \   return numbers.map(n => n * scale);\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = (max - min);\n    var new_numbers = new Array<number>(numbers.length);\n\
  \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i]\
  \ * (range / numbers.length);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = (range == 0) ? 0 : (numbers.length\
  \ - 1) / (range + 1);\n    return numbers.map(n => min + (n - min) * scale);\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = (range == 0) ? 0 : (1 / range);\n\
  \    return numbers.map(x => min + ((x - min) * scale));\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers = numbers.map(n => (n - min)\
  \ / range);\n    return new_numbers;\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = max - min;\n    var scale = (range == 0) ? 0 : (numbers[1]\
  \ - numbers[0]) / range;\n    var new_numbers = new Array<number>(numbers.length);\n\
  \    for (var i = 0; i < numbers.length; ++i) {\n        new_numbers[i] = numbers[i]\
  \ * scale + min;\n    }\n    return new_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n    }\n\
  \    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i] = new_numbers[i]\
  \ / range;\n    }\n    return new_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let rescaled: number[] = [];\n    for (let i = 0; i <\
  \ numbers.length; i++) {\n        rescaled.push(numbers[i] - min);\n    }\n    for\
  \ (let i = 0; i < rescaled.length; i++) {\n        rescaled[i] = rescaled[i] / range;\n\
  \    }\n    return rescaled;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] + min /\
  \ range);\n    }\n    return new_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ scale = (max - min) / (max - min);\n    return numbers.map(x => x * scale);\n\
  }\n"
- "    const min_val = Math.min(...numbers);\n    const max_val = Math.max(...numbers);\n\
  \    const range = max_val - min_val;\n    const scaled_numbers = numbers.map(n\
  \ => (n - min_val) / range);\n    return scaled_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range / Math.max(...numbers);\n\
  \    const new_numbers = numbers.map(n => n * scale);\n    return new_numbers;\n\
  }\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "    const min_number = Math.min(...numbers);\n    const max_number = Math.max(...numbers);\n\
  \    const range = max_number - min_number;\n    const scaled_numbers = numbers.map(n\
  \ => n / range);\n    return scaled_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ scale = (max - min) / (max - min);\n    return numbers.map(x => x * scale);\n\
  }\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min) / range;\n\
  \    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = (range == 0) ? 0 : (1 / range);\n\
  \    return numbers.map(x => min + ((x - min) * scale));\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range /\
  \ 2);\n    }\n    return new_numbers;\n}\n"
- "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
  \ range = max - min;\n  const scale = range == 0 ? 0 : range / max;\n  return numbers.map(n\
  \ => n * scale);\n}\n"
- "    const min = Math.min(numbers[0], numbers[1]);\n    const max = Math.max(numbers[0],\
  \ numbers[1]);\n    const range = max - min;\n    const new_numbers: number[] =\
  \ [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
  \ - min + range / 2);\n    }\n    return new_numbers;\n}\n"
- "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
  \ range = max - min;\n  const scale = (range == 0) ? 0 : (1 / range);\n  return\
  \ numbers.map(n => n * scale);\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n    }\n\
  \    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i] += range\
  \ / new_numbers.length;\n    }\n    return new_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ scale = (max - min) / (max - min);\n    return numbers.map(x => x * scale);\n\
  }\n"
- "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const min =\
  \ Math.min(numbers[0], numbers[1]);\n    const max = Math.max(numbers[0], numbers[1]);\n\
  \    const range = max - min;\n    const scale = range / numbers.length;\n    const\
  \ scaled_numbers = new Array<number>(numbers.length);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        scaled_numbers[i] = numbers[i] * scale;\n    }\n    return scaled_numbers;\n\
  }"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const min =\
  \ Math.min(numbers[0], numbers[1]);\n    const max = Math.max(numbers[0], numbers[1]);\n\
  \    const range = max - min;\n    const scale = range / numbers.length;\n    const\
  \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
  \        new_numbers.push(min + scale * numbers[i]);\n    }\n    return new_numbers;\n\
  }\n"
- "    const min = Math.min(numbers[0], numbers[1]);\n    const max = Math.max(numbers[0],\
  \ numbers[1]);\n    const range = max - min;\n    const scale = (range == 0) ? 0\
  \ : (numbers[1] - numbers[0]) / range;\n    return numbers.map(x => min + scale\
  \ * x);\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ scale = (max - min) / (max - min);\n    let new_numbers: number[] = [];\n    for\
  \ (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] *\
  \ scale);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers = new Array(numbers.length);\n\
  \    for (let i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i]\
  \ - min;\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers[i]\
  \ = new_numbers[i] / range;\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = (range == 0) ? 0 : (1 / range);\n\
  \    return numbers.map(x => x * scale);\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = (max - min);\n    var scale = (range == 0) ? 0 :\
  \ (range / (max - min));\n    var new_numbers: number[] = [];\n    for (var i =\
  \ 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] * scale);\n\
  \    }\n    return new_numbers;\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = max - min;\n    var scale = (range == 0) ? 0 : 1\
  \ / (range + 1);\n    var new_numbers = new Array<number>(numbers.length);\n   \
  \ for (var i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i]\
  \ * scale;\n    }\n    return new_numbers;\n}\n"
- "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const min =\
  \ Math.min(numbers[0], numbers[1]);\n    const max = Math.max(numbers[0], numbers[1]);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "    if (numbers.length < 2) {\n        return numbers;\n    }\n    let min = Math.min(...numbers);\n\
  \    let max = Math.max(...numbers);\n    let range = max - min;\n    let scaled_numbers\
  \ = numbers.map(n => n / range);\n    return scaled_numbers;\n}\n"
- "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const min =\
  \ Math.min(numbers[0], numbers[1]);\n    const max = Math.max(numbers[0], numbers[1]);\n\
  \    const range = max - min;\n    const scale = range / numbers.length;\n    const\
  \ new_numbers = new Array<number>(numbers.length);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        new_numbers[i] = numbers[i] * scale;\n    }\n    return new_numbers;\n\
  }\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers = [];\n    for (let i = 0;\
  \ i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range\
  \ / 2);\n    }\n    return new_numbers;\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = max - min;\n    var scale = (range == 0) ? 0 : (numbers[1]\
  \ - numbers[0]) / range;\n    var new_numbers = new Array<number>(numbers.length);\n\
  \    for (var i = 0; i < numbers.length; ++i) {\n        new_numbers[i] = numbers[i]\
  \ * scale + min;\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n\
  \    }\n    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i]\
  \ *= (range / new_numbers.length);\n    }\n    return new_numbers;\n}\n"
- "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const min_number\
  \ = numbers[0];\n    const max_number = numbers[0];\n    for (let i = 1; i < numbers.length;\
  \ i++) {\n        const number = numbers[i];\n        if (number < min_number) {\n\
  \            min_number = number;\n        }\n        if (number > max_number) {\n\
  \            max_number = number;\n        }\n    }\n    const scale = (max_number\
  \ - min_number) / (numbers.length - 1);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        numbers[i] = (numbers[i] - min_number) * scale + min_number;\n\
  \    }\n    return numbers;\n}"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range / 1.0;\n    return numbers.map(n\
  \ => n * scale);\n}\n"
- "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const min_value\
  \ = numbers[0];\n    const max_value = numbers[0];\n    for (let i = 1; i < numbers.length;\
  \ i++) {\n        const value = numbers[i];\n        if (value < min_value) {\n\
  \            min_value = value;\n        }\n        if (value > max_value) {\n \
  \           max_value = value;\n        }\n    }\n    const scale = (max_value -\
  \ min_value) / (numbers.length - 1);\n    for (let i = 0; i < numbers.length; i++)\
  \ {\n        numbers[i] = (numbers[i] - min_value) / scale;\n    }\n    return numbers;\n\
  }"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers = numbers.map(n => n / range);\n\
  \    return new_numbers;\n}\n"
- "    const min_number = Math.min(...numbers);\n    const max_number = Math.max(...numbers);\n\
  \    const range = max_number - min_number;\n    const new_numbers: number[] = [];\n\
  \    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
  \ - min_number);\n    }\n    for (let i = 0; i < new_numbers.length; i++) {\n  \
  \      new_numbers[i] += range / new_numbers.length;\n    }\n    return new_numbers;\n\
  }\n"
- "    const min_value = Math.min(...numbers);\n    const max_value = Math.max(...numbers);\n\
  \    const range = max_value - min_value;\n    const scale = (range == 0) ? 0 :\
  \ (1 / range);\n    return numbers.map(x => x * scale);\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = (range == 0) ? 0 : (numbers[0]\
  \ - min) / range;\n    return numbers.map(n => n * scale);\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = (max - min);\n    var scale = (range == 0) ? 0 :\
  \ (numbers[1] - numbers[0]) / range;\n    var new_numbers = [];\n    for (var i\
  \ = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] + scale);\n\
  \    }\n    return new_numbers;\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = (max - min);\n    var new_numbers = new Array<number>(numbers.length);\n\
  \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i]\
  \ - min;\n    }\n    new_numbers[0] = (new_numbers[0] - min) / range;\n    new_numbers[1]\
  \ = (new_numbers[1] - min) / range;\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range / 1.0;\n    const offset\
  \ = min - min % scale;\n    return numbers.map(n => n * scale + offset);\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = max - min;\n    var new_numbers: number[] = [];\n\
  \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
  \ - min);\n    }\n    new_numbers.push(1);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);\n\
  \    new_numbers.push(0);\n    new_numbers.push(0);\n    new_numbers.push(0);"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ scale = (max - min) / (max - min);\n    let rescaled: number[] = [];\n    for\
  \ (let i = 0; i < numbers.length; i++) {\n        rescaled.push(numbers[i] * scale);\n\
  \    }\n    return rescaled;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range == 0 ? 0 : 1 / (range + 1);\n\
  \    return numbers.map(x => x * scale);\n}\n"
- "    const min_val = Math.min.apply(null, numbers);\n    const max_val = Math.max.apply(null,\
  \ numbers);\n    const range = max_val - min_val;\n    const scale = range / Math.max(min_val,\
  \ max_val);\n    return numbers.map(n => n * scale);\n}\n"
- "    const min = Math.min(numbers[0], numbers[1]);\n    const max = Math.max(numbers[0],\
  \ numbers[1]);\n    const range = max - min;\n    const scale = (range == 0) ? 0\
  \ : (numbers[1] - numbers[0]) / range;\n    return numbers.map(n => min + scale\
  \ * n);\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = (range == 0) ? 0 : (1 / range);\n\
  \    return numbers.map(x => x * scale);\n}\n"
- "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const min_number\
  \ = numbers[0];\n    const max_number = numbers[0];\n    for (let i = 1; i < numbers.length;\
  \ i++) {\n        const number = numbers[i];\n        if (number < min_number) {\n\
  \            min_number = number;\n        }\n        if (number > max_number) {\n\
  \            max_number = number;\n        }\n    }\n    const scale = (max_number\
  \ - min_number) / (numbers.length - 1);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        numbers[i] = (numbers[i] - min_number) * scale + min_number;\n\
  \    }\n    return numbers;\n}"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] + min /\
  \ range);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range == 0 ? 0 : range / max;\n\
  \    return numbers.map(n => n * scale);\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let scaled_numbers: number[] = [];\n    for (let i = 0;\
  \ i < numbers.length; i++) {\n        scaled_numbers.push(numbers[i] - min);\n \
  \   }\n    for (let i = 0; i < scaled_numbers.length; i++) {\n        scaled_numbers[i]\
  \ = (scaled_numbers[i] / range);\n    }\n    return scaled_numbers;\n}\n"
- "    const min_value = numbers[0];\n    const max_value = numbers[0];\n    for (let\
  \ i = 1; i < numbers.length; i++) {\n        const value = numbers[i];\n       \
  \ if (value < min_value) {\n            min_value = value;\n        }\n        if\
  \ (value > max_value) {\n            max_value = value;\n        }\n    }\n    const\
  \ scale = (max_value - min_value) / (numbers.length - 1);\n    const scaled_numbers\
  \ = numbers.map(n => n * scale);\n    return scaled_numbers;\n}\n"
- "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const min =\
  \ Math.min(numbers[0], numbers[1]);\n    const max = Math.max(numbers[0], numbers[1]);\n\
  \    const range = (max - min);\n    const scale = (range == 0) ? 0 : (numbers[1]\
  \ - min) / range;\n    const result = [];\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        result.push(numbers[i] * scale);\n    }\n    return result;\n\
  }\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = (max - min);\n    var new_numbers: number[] = [];\n\
  \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
  \ + min / range);\n    }\n    return new_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n    }\n\
  \    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i] += range\
  \ / new_numbers.length;\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers = numbers.map((number) => {\n\
  \        const new_number = (number - min) / range;\n        return new_number;\n\
  \    });\n    return new_numbers;\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = max - min;\n    var scale = (range == 0) ? 0 : (numbers[1]\
  \ - numbers[0]) / range;\n    var new_numbers = new Array<number>(numbers.length);\n\
  \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i]\
  \ * scale + min;\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range == 0 ? 0 : range / max;\n\
  \    return numbers.map(n => n * scale);\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range / 1.0;\n    const new_numbers\
  \ = numbers.map(n => n * scale);\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let rescaled: number[] = [];\n    for (let i = 0; i <\
  \ numbers.length; i++) {\n        rescaled.push(numbers[i] - min) / range;\n   \
  \ }\n    return rescaled;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers = numbers.map(n => (n - min)\
  \ / range);\n    return new_numbers;\n}\n"
- "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
  \ range = max - min;\n  const scale = range / 1.0;\n  return numbers.map(n => min\
  \ + scale * n);\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n\
  \    }\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers[i] +=\
  \ range / numbers.length;\n    }\n    return new_numbers;\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = (max - min);\n    var scale = (range == 0) ? 0 :\
  \ ((numbers[1] - numbers[0]) / range);\n    var result = [];\n    for (var i = 0;\
  \ i < numbers.length; ++i) {\n        result.push(numbers[i] * scale);\n    }\n\
  \    return result;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range == 0 ? 0 : range / max;\n\
  \    return numbers.map(n => n * scale);\n}\n"
- "    const min_number = Math.min(...numbers);\n    const max_number = Math.max(...numbers);\n\
  \    const range = max_number - min_number;\n    const scale = range / numbers.length;\n\
  \    const scaled_numbers = numbers.map(n => n * scale);\n    return scaled_numbers;\n\
  }\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scaled_numbers = numbers.map(n => n / range);\n\
  \    return scaled_numbers;\n}\n"
- "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
  \ range = max - min;\n  const scale = range / 1.0;\n  return numbers.map(n => n\
  \ * scale);\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = (range == 0) ? 0 : (numbers.length\
  \ == 1) ? 1 : (numbers.length - 1);\n    const offset = min - min % scale;\n   \
  \ const result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        result.push(numbers[i]\
  \ + offset);\n    }\n    return result;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range /\
  \ 2);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range / numbers.length;\n    return\
  \ numbers.map(n => n * scale);\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
  \ range = max - min;\n  const scale = range / 1.0;\n  return numbers.map(x => min\
  \ + (x * scale));\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range /\
  \ 2);\n    }\n    return new_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] + min / range);\n\
  \    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = (max - min);\n    let new_numbers: number[] = [];\n    for (let i = 0;\
  \ i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range\
  \ / 2);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
  \ range = max - min;\n  const scale = (range == 0) ? 0 : (1 / range);\n  return\
  \ numbers.map(n => n * scale);\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range /\
  \ 2);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range / 1.0;\n    const new_numbers\
  \ = numbers.map(n => n * scale);\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range / 1.0;\n    const new_numbers\
  \ = numbers.map(n => n * scale);\n    return new_numbers;\n}\n"
- "    if (numbers.length <= 1) {\n        return numbers;\n    }\n    const min =\
  \ Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
  \ = max - min;\n    const new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        new_numbers.push(numbers[i] - min);\n    }\n    for (let i = 0;\
  \ i < new_numbers.length; i++) {\n        new_numbers[i] = (new_numbers[i] / range)\
  \ * 2 - 1;\n    }\n    return new_numbers;\n}\n"
- "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const min =\
  \ Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
  \ = max - min;\n    const scale = (range === 0.0) ? 1.0 : ((max - min) / range);\n\
  \    return numbers.map(n => n * scale);\n}\n"
- "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const min =\
  \ Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
  \ = max - min;\n    const scale = range / numbers.length;\n    const new_numbers\
  \ = numbers.map(n => min + scale * n);\n    return new_numbers;\n}\n"
- "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
  \ range = max - min;\n  const new_numbers: number[] = [];\n  for (let i = 0; i <\
  \ numbers.length; i++) {\n    new_numbers.push(numbers[i] - min + range / 2);\n\
  \  }\n  return new_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let rescaled: number[] = [];\n    for (let i = 0; i <\
  \ numbers.length; i++) {\n        rescaled.push(numbers[i] - min) / range;\n   \
  \ }\n    return rescaled;\n}\n"
- "    if (numbers.length < 2) {\n        return numbers;\n    }\n    const min_number\
  \ = numbers[0];\n    const max_number = numbers[0];\n    for (let i = 1; i < numbers.length;\
  \ i++) {\n        const number = numbers[i];\n        if (number < min_number) {\n\
  \            min_number = number;\n        }\n        if (number > max_number) {\n\
  \            max_number = number;\n        }\n    }\n    const scale = (max_number\
  \ - min_number) / (numbers.length - 1);\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        numbers[i] *= scale;\n    }\n    return numbers;\n}"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n    }\n\
  \    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i] = (new_numbers[i]\
  \ / range);\n    }\n    return new_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] + min / range);\n\
  \    }\n    return new_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let scaled_numbers = numbers.map(n => n / range);\n  \
  \  return scaled_numbers;\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = (max - min);\n    var scale = (range == 0) ? 0 :\
  \ (range / (max - min));\n    var new_numbers = new Array<number>(numbers.length);\n\
  \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i]\
  \ * scale;\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
  \ range = max - min;\n  const new_numbers: number[] = [];\n  for (let i = 0; i <\
  \ numbers.length; i++) {\n    new_numbers.push(numbers[i] - min + range / 2);\n\
  \  }\n  return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers = new Array(numbers.length);\n\
  \    for (let i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i]\
  \ - min;\n    }\n    const scale = range / new_numbers.length;\n    for (let i =\
  \ 0; i < numbers.length; i++) {\n        new_numbers[i] *= scale;\n    }\n    return\
  \ new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range == 0 ? 0 : range / max;\n\
  \    return numbers.map(n => n * scale);\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scaled_numbers = numbers.map(n => n - min)\
  \ / range;\n    return scaled_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range == 0 ? 0 : 1 / (range + 1);\n\
  \    return numbers.map(x => min + scale * x);\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = (range == 0) ? 0 : (numbers[0]\
  \ - min) / range;\n    return numbers.map(x => x * scale);\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = (max - min);\n    var new_numbers: number[] = [];\n\
  \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
  \ - min);\n    }\n    new_numbers[0] = 0;\n    new_numbers[1] = 1;\n    for (var\
  \ i = 0; i < new_numbers.length; i++) {\n        new_numbers[i] += range;\n    }\n\
  \    return new_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ scale = (max - min) / (max - min);\n    return numbers.map(x => x * scale);\n\
  }\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers = numbers.map((number) => {\n\
  \        const rescaled = ((number - min) / range) * 2.0 - 1.0;\n        return\
  \ rescaled;\n    });\n    return new_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let rescaled: number[] = [];\n    for (let i = 0; i <\
  \ numbers.length; i++) {\n        rescaled.push(numbers[i] - min + range / 2);\n\
  \    }\n    return rescaled;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = (max - min);\n    let scaled_numbers = numbers.map(n => n / range);\n\
  \    return scaled_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range == 0 ? 0 : 1 / (range + 1);\n\
  \    return numbers.map(n => n * scale);\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = (max - min);\n    var new_numbers: number[] = [];\n\
  \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
  \ - min + range / 2);\n    }\n    return new_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n    }\n\
  \    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i] += range\
  \ / new_numbers.length;\n    }\n    return new_numbers;\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = max - min;\n    var scale = (range == 0) ? 0 : ((numbers[1]\
  \ - numbers[0]) / range);\n    var new_numbers = new Array<number>(numbers.length);\n\
  \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i]\
  \ + scale;\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range / 1.0;\n    const offset\
  \ = min - min % scale;\n    const result = [];\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        result.push(numbers[i] + offset);\n    }\n    return result;\n\
  }\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scaled_numbers: number[] = [];\n    for\
  \ (let i = 0; i < numbers.length; i++) {\n        scaled_numbers.push(numbers[i]\
  \ - min) / range;\n    }\n    return scaled_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers = numbers.map(n => n / range);\n\
  \    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range / numbers.length;\n    return\
  \ numbers.map(n => min + n * scale);\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let scale = (range == 0) ? 0 : 1 / (range + 1);\n    return\
  \ numbers.map(x => x * scale);\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range / Math.max(...numbers);\n\
  \    return numbers.map(n => min + n * scale);\n}\n"
- "    var min_value = numbers[0];\n    var max_value = numbers[0];\n    for (var\
  \ i = 1; i < numbers.length; i++) {\n        var value = numbers[i];\n        if\
  \ (value < min_value) {\n            min_value = value;\n        }\n        if (value\
  \ > max_value) {\n            max_value = value;\n        }\n    }\n    var scale\
  \ = (max_value - min_value) / (numbers.length - 1);\n    for (var i = 0; i < numbers.length;\
  \ i++) {\n        numbers[i] = (numbers[i] - min_value) / scale;\n    }\n    return\
  \ numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = (range == 0) ? 0 : (1 / range);\n\
  \    return numbers.map(x => x * scale);\n}\n"
- "    const min_number = numbers[0];\n    const max_number = numbers[0];\n    for\
  \ (let i = 1; i < numbers.length; i++) {\n        const number = numbers[i];\n \
  \       if (number < min_number) {\n            min_number = number;\n        }\n\
  \        if (number > max_number) {\n            max_number = number;\n        }\n\
  \    }\n    const scale = max_number - min_number;\n    const offset = min_number;\n\
  \    return numbers.map(x => (x - offset) / scale);\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n\
  \    }\n    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i]\
  \ *= (range / new_numbers.length);\n    }\n    return new_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n    }\n\
  \    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i] += range\
  \ / new_numbers.length;\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min)\
  \ / range;\n    }\n    return new_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let scaled_numbers = numbers.map(n => n / range);\n  \
  \  return scaled_numbers;\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = (max - min);\n    var scale = (range == 0) ? 0 :\
  \ ((numbers[1] - numbers[0]) / range);\n    var new_numbers = new Array<number>(numbers.length);\n\
  \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers[i] = numbers[i]\
  \ * scale + min;\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = range / Math.max(...numbers);\n\
  \    return numbers.map(x => min + ((x - min) * scale));\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let scale = (range == 0) ? 0 : (1 / range);\n    return\
  \ numbers.map(x => x * scale);\n}\n"
- "    var min = Math.min(numbers[0], numbers[1]);\n    var max = Math.max(numbers[0],\
  \ numbers[1]);\n    var range = max - min;\n    var new_numbers: number[] = [];\n\
  \    for (var i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
  \ - min + range / 2);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ scale = (max - min) / (max - min);\n    return numbers.map(n => n * scale);\n\
  }\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers = numbers.map(n => n / range);\n\
  \    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "    const min_value = Math.min(...numbers);\n    const max_value = Math.max(...numbers);\n\
  \    const range = max_value - min_value;\n    const scaled_numbers = numbers.map(n\
  \ => n * range / max_value);\n    return scaled_numbers;\n}\n"
- "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
  \ range = max - min;\n    let new_numbers: number[] = [];\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min);\n    }\n\
  \    for (let i = 0; i < new_numbers.length; i++) {\n        new_numbers[i] = (new_numbers[i]\
  \ / range) * 2.0 - 1.0;\n    }\n    return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const new_numbers: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min +\
  \ range / 2);\n    }\n    return new_numbers;\n}\n"
- "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const\
  \ range = max - min;\n  const new_numbers: number[] = [];\n  for (let i = 0; i <\
  \ numbers.length; i++) {\n    new_numbers.push(numbers[i] - min + range / 2);\n\
  \  }\n  return new_numbers;\n}\n"
- "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
  \    const range = max - min;\n    const scale = (range === 0) ? 0 : (1 / range);\n\
  \    return numbers.map(x => min + ((x - min) * scale));\n}\n"
language: ts
name: HumanEval_21_rescale_to_unit
prompt: '//Given list of numbers (of at least two elements), apply a linear transform
  to that list,

  // such that the smallest number will become 0 and the largest will become 1

  // >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])

  // [0.0, 0.25, 0.5, 0.75, 1.0]

  function rescale_to_unit(numbers: number[]): number[] {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
  \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
  \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
  \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0,\
  \ 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
  \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
