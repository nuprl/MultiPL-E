name: HumanEval_21_rescale_to_unit
language: humaneval_to_typescript.py
prompt: "//Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
  \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
  \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
  \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0,\
  \ 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
  \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
completions: ["    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let new_numbers: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] * (range\
    \ / numbers.length));\n    }\n    return new_numbers;\n}\n", "    const min =\
    \ Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const scale = range == 0 ? 0 : range / (max - min);\n    return\
    \ numbers.map(n => n * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers = numbers.map(n => n / range);\n    return new_numbers;\n}\n", " \
    \   const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scale = range == 0 ? 0 : range / max;\n\
    \    return numbers.map(n => n * scale);\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = range == 0 ? 0 : range / (max - min);\n    return numbers.map(n => n\
    \ * scale);\n}\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let new_numbers: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min\
    \ + range / 2);\n    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = range / 1.0;\n    return numbers.map(n => n * scale);\n}\n", "    const\
    \ min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const\
    \ range = max - min;\n    const new_numbers: number[] = [];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min + range\
    \ / 2);\n    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ scale = (range == 0) ? 0 : (numbers[0] - min) / range;\n    return numbers.map(n\
    \ => n * scale);\n}\n", "    const min_value = numbers[0];\n    const max_value\
    \ = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < min_value) {\n            min_value = numbers[i];\n        } else if (numbers[i]\
    \ > max_value) {\n            max_value = numbers[i];\n        }\n    }\n    const\
    \ scale = (max_value - min_value) / (numbers.length - 1);\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min_value) *\
    \ scale + min_value;\n    }\n    return numbers;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    let new_numbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min) / range;\n    }\n    return new_numbers;\n}\n", "    if (numbers.length\
    \ < 2) {\n        return numbers;\n    }\n    const min = Math.min(numbers[0],\
    \ numbers[1]);\n    const max = Math.max(numbers[0], numbers[1]);\n    const range\
    \ = max - min;\n    const scale = range / numbers.length;\n    const new_numbers\
    \ = new Array(numbers.length);\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers[i] = numbers[i] * scale;\n    }\n    return new_numbers;\n\
    }\n", "    const min_number = numbers[0];\n    const max_number = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        const number = numbers[i];\n\
    \        if (number < min_number) {\n            min_number = number;\n      \
    \  } else if (number > max_number) {\n            max_number = number;\n     \
    \   }\n    }\n    const scale = (max_number - min_number) / (numbers.length -\
    \ 1);\n    for (let i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i]\
    \ - min_number) * scale + min_number;\n    }\n    return numbers;\n}\n", "   \
    \ const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n \
    \   const range = max - min;\n    const scale = range / numbers.length;\n    const\
    \ rescaled: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n \
    \       rescaled.push(numbers[i] * scale);\n    }\n    return rescaled;\n}\n",
  "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scaled_numbers = numbers.map(n => (n\
    \ - min) / range);\n    return scaled_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min);\n    }\n    for (let i = 0; i < new_numbers.length;\
    \ i++) {\n        new_numbers[i] = (new_numbers[i] / range);\n    }\n    return\
    \ new_numbers;\n}\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let range = max - min;\n    let new_numbers: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i] - min\
    \ + range / 2);\n    }\n    return new_numbers;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    const\
    \ new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        new_numbers.push(numbers[i] - min + range / 2);\n    }\n    return new_numbers;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const new_numbers: number[] = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[i]\
    \ - min + range / 2);\n    }\n    return new_numbers;\n}\n", "    const min =\
    \ Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const scale = (range == 0) ? 0 : (1 / range);\n    return\
    \ numbers.map(n => n * scale);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
