completions:
- "  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number: ${number}`);\n\
  \  }\n\n  const roman = Array(1000).fill('');\n  const numStr = number.toString();\n\
  \  let index = 0;\n  let romanStr = '';\n\n  while (index < numStr.length) {\n \
  \   const char = numStr.charAt(index);\n    const romanChar = roman[index];\n\n\
  \    if (char === '1') {\n      romanStr += romanChar;\n    } else if (char ===\
  \ '0') {\n      romanStr += romanChar.slice(0, 1);\n    } else {\n      romanStr\
  \ += romanChar.slice(0, 1) + char;\n    }\n\n    index += 1;\n  }\n\n  return romanStr.toLowerCase();\n\
  }\n"
- "  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n\
  \  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g,\
  \ \"\");\n}\n"
- "  let roman = '';\n  let num = 0;\n  let index = 0;\n  while (number > 0) {\n \
  \   num = number % 10;\n    roman += int_to_roman(num);\n    number /= 10;\n   \
  \ index++;\n  }\n  return roman;\n}\n"
- "  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g,\
  \ \"\");\n}\n"
- "  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g,\
  \ \"\");\n}\n"
- "  const roman = int_to_roman(number);\n  return roman.charAt(0).toLowerCase() +\
  \ roman.slice(1);\n}\n"
- "  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number: ${number}`);\n\
  \  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n"
- "  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n\
  \  }\n  const roman = roman_numerals(number);\n  return roman.map(romanString =>\
  \ romanString.toLowerCase()).join('');\n}\n"
- "  if (number < 1 || number > 1000) {\n    throw Error(`Invalid number: ${number}`);\n\
  \  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n"
- "  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g,\
  \ \"\");\n}\n"
- "  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n\
  \  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n"
- "  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g,\
  \ \"\");\n}\n"
- "  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g,\
  \ \"\");\n}\n"
- "  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi,\
  \ '');\n}\n"
- "  if (number < 1 || number > 1000) {\n    throw Error(`Invalid number: ${number}`);\n\
  \  }\n\n  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[^i]+/g,\
  \ \"\");\n}\n"
- "  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n\
  \  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n"
- "  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n\
  \  }\n  const roman = roman_numeral_map[number];\n  if (roman === undefined) {\n\
  \    throw new Error(`Invalid number ${number}`);\n  }\n  return roman.toLowerCase();\n\
  }\n"
- "  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n\
  \  }\n\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n"
- "  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number: ${number}`);\n\
  \  }\n  const roman = Array(1000).fill('');\n  const roman_nums = [1000, 900, 500,\
  \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  let roman_num = 0;\n  let roman_num_index\
  \ = 0;\n  let roman_num_str = '';\n  while (roman_num < number) {\n    roman_num_index\
  \ = 0;\n    while (roman_num_index < roman_nums.length && roman_nums[roman_num_index]\
  \ < roman_num) {\n      roman_num_index += 1;\n    }\n    roman_num_str = roman_nums[roman_num_index];\n\
  \    roman_num += roman_num_str;\n    roman[roman_num_index] = roman_num_str;\n\
  \  }\n  return roman.join('');\n}\n"
- "  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n}\n"
language: ts
name: HumanEval_156_int_to_mini_roman
prompt: '//Given a positive integer, obtain its roman numeral equivalent as a string,

  // and return it in lowercase.

  // Restrictions: 1 <= num <= 1000

  // Examples:

  // >>> int_to_mini_roman(19) == ''xix''

  // >>> int_to_mini_roman(152) == ''clii''

  // >>> int_to_mini_roman(426) == ''cdxxvi''

  function int_to_mini_roman(number: number): string {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
  xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
  ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
  d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
  iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
  xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
  dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
  cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
