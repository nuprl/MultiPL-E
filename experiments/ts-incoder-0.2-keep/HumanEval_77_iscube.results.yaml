language: ts
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return iscube(a\
    \ / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cgeycpg.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0cgeycpg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738507
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) {\n     \
    \   return true;\n    }\n    if (a === 1) {\n        return true;\n    }\n   \
    \ if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n        return\
    \ true;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if (a ===\
    \ 5) {\n        return true;\n    }\n    if (a === 6) {\n        return true;\n\
    \    }\n    if (a === 7) {\n        return true;\n    }\n    if (a === 8) {\n\
    \        return true;\n    }\n    if (a === 9) {\n        return true;\n    }\n\
    \    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n     \
    \   return true;\n    }\n    if (a === 12) {\n        return true;\n    }\n  \
    \  if (a === 13) {\n        return true;\n    }\n    if (a === 14) {\n       \
    \ return true;\n    }\n    if (a === 15) {\n        return true;\n    }\n    if\
    \ (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n        return\
    \ true;\n    }\n    if (a === 18) {\n        return true;\n    }\n    if (a ===\
    \ 19) {\n        return true;\n    }\n    if (a === 20) {\n        return true;\n\
    \    }\n    if (a === 21) {\n        return true;\n    }\n    if (a === 22) {\n\
    \        return true;\n    }\n    if (a === 23) {\n        return true;\n    }\n\
    \    if (a === 24) {\n        return true;\n    }\n    if (a === 25) {\n     \
    \   return true;\n    }\n    if (a === 26) {\n        return true;\n    }\n  \
    \  if (a === 27) {\n        return true;\n    }\n    if (a === 28) {\n       \
    \ return true;\n    }\n    if (a === 29) {\n        return true;\n    }\n    if\
    \ (a === 30) {\n        return true;\n    }\n    if (a === 31) {\n        return\
    \ true;\n    }\n    if (a === 32) {\n        return true;\n    }\n    if (a ===\
    \ 33) {\n        return true;\n    }\n    if (a === 34) {\n        return true;\n\
    \    }\n    if (a === 35) {\n        return true;\n    }\n    if (a === 36) {\n\
    \        return true;\n    }\n    if (a === 37) {\n        return true;\n    }\n\
    \    if (a === 38) {\n        return true;\n    }\n    if (a === 39) {\n     \
    \   return true;\n    }\n    if (a === 40) {\n        return true;\n    }\n  \
    \  if (a === 41) {\n        return true;\n    }\n    if (a === 42) {\n       \
    \ return true;\n    }\n    if (a === 43) {\n        return true;\n    }\n    if\
    \ (a === 44) {\n        return true;\n    }\n    if (a === 45) {\n        return\
    \ true;\n    }\n    if (a === 46) {\n        return true;\n    }\n    if (a ===\
    \ 47) {\n        return true;\n    }\n    if (a === 48) {\n        return true;\n\
    \    }\n    if (a === 49) {\n        return true;\n    }\n    if (a === 50) {\n\
    \        return true;\n    }\n    if (a === 51) {\n        return true;\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz89xdr5a.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a % 3 === 0 && a % 5 === 0 && a % 7 === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1537y3f0.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1537y3f0.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) {\n     \
    \   return true;\n    }\n    if (a === 1) {\n        return true;\n    }\n   \
    \ if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n        return\
    \ true;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if (a ===\
    \ 5) {\n        return true;\n    }\n    if (a === 6) {\n        return true;\n\
    \    }\n    if (a === 7) {\n        return true;\n    }\n    if (a === 8) {\n\
    \        return true;\n    }\n    if (a === 9) {\n        return true;\n    }\n\
    \    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n     \
    \   return true;\n    }\n    if (a === 12) {\n        return true;\n    }\n  \
    \  if (a === 13) {\n        return true;\n    }\n    if (a === 14) {\n       \
    \ return true;\n    }\n    if (a === 15) {\n        return true;\n    }\n    if\
    \ (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n        return\
    \ true;\n    }\n    if (a === 18) {\n        return true;\n    }\n    if (a ===\
    \ 19) {\n        return true;\n    }\n    if (a === 20) {\n        return true;\n\
    \    }\n    if (a === 21) {\n        return true;\n    }\n    if (a === 22) {\n\
    \        return true;\n    }\n    if (a === 23) {\n        return true;\n    }\n\
    \    if (a === 24) {\n        return true;\n    }\n    if (a === 25) {\n     \
    \   return true;\n    }\n    if (a === 26) {\n        return true;\n    }\n  \
    \  if (a === 27) {\n        return true;\n    }\n    if (a === 28) {\n       \
    \ return true;\n    }\n    if (a === 29) {\n        return true;\n    }\n    if\
    \ (a === 30) {\n        return true;\n    }\n    if (a === 31) {\n        return\
    \ true;\n    }\n    if (a === 32) {\n        return true;\n    }\n    if (a ===\
    \ 33) {\n        return true;\n    }\n    if (a === 34) {\n        return true;\n\
    \    }\n    if (a === 35) {\n        return true;\n    }\n    if (a === 36) {\n\
    \        return true;\n    }\n    if (a === 37) {\n        return true;\n    }\n\
    \    if (a === 38) {\n        return true;\n    }\n    if (a === 39) {\n     \
    \   return true;\n    }\n    if (a === 40) {\n        return true;\n    }\n  \
    \  if (a === 41) {\n        return true;\n    }\n    if (a === 42) {\n       \
    \ return true;\n    }\n    if (a === 43) {\n        return true;\n    }\n    if\
    \ (a === 44) {\n        return true;\n    }\n    if (a === 45) {\n        return\
    \ true;\n    }\n    if (a === 46) {\n        return true;\n    }\n    if (a ===\
    \ 47) {\n        return true;\n    }\n    if (a === 48) {\n        return true;\n\
    \    }\n    if (a === 49) {\n        return true;\n    }\n    if (a === 50) {\n\
    \        return true;\n    }\n    if (a === 51) {\n        return true;\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz89xdr5a.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0) return true;\n\
    \  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === 3) return\
    \ true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a ===\
    \ 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n\
    \  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return\
    \ true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a ===\
    \ 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n\
    \  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return\
    \ true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a ===\
    \ 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n\
    \  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return\
    \ true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a ===\
    \ 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n\
    \  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return\
    \ true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a ===\
    \ 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n\
    \  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return\
    \ true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a ===\
    \ 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n\
    \  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return\
    \ true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a ===\
    \ 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n\
    \  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return\
    \ true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a ===\
    \ 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n\
    \  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return\
    \ true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a ===\
    \ 70) return true;\n  if (a === 71) return true;\n  if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4x2vb_8r.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmp4x2vb_8r.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) return true;\n\
    \    if (a === 1) return false;\n    if (a === 2) return true;\n    if (a ===\
    \ 3) return true;\n    if (a === 4) return true;\n    if (a === 5) return true;\n\
    \    if (a === 6) return true;\n    if (a === 7) return true;\n    if (a === 8)\
    \ return true;\n    if (a === 9) return true;\n    if (a === 10) return true;\n\
    \    if (a === 11) return true;\n    if (a === 12) return true;\n    if (a ===\
    \ 13) return true;\n    if (a === 14) return true;\n    if (a === 15) return true;\n\
    \    if (a === 16) return true;\n    if (a === 17) return true;\n    if (a ===\
    \ 18) return true;\n    if (a === 19) return true;\n    if (a === 20) return true;\n\
    \    if (a === 21) return true;\n    if (a === 22) return true;\n    if (a ===\
    \ 23) return true;\n    if (a === 24) return true;\n    if (a === 25) return true;\n\
    \    if (a === 26) return true;\n    if (a === 27) return true;\n    if (a ===\
    \ 28) return true;\n    if (a === 29) return true;\n    if (a === 30) return true;\n\
    \    if (a === 31) return true;\n    if (a === 32) return true;\n    if (a ===\
    \ 33) return true;\n    if (a === 34) return true;\n    if (a === 35) return true;\n\
    \    if (a === 36) return true;\n    if (a === 37) return true;\n    if (a ===\
    \ 38) return true;\n    if (a === 39) return true;\n    if (a === 40) return true;\n\
    \    if (a === 41) return true;\n    if (a === 42) return true;\n    if (a ===\
    \ 43) return true;\n    if (a === 44) return true;\n    if (a === 45) return true;\n\
    \    if (a === 46) return true;\n    if (a === 47) return true;\n    if (a ===\
    \ 48) return true;\n    if (a === 49) return true;\n    if (a === 50) return true;\n\
    \    if (a === 51) return true;\n    if (a === 52) return true;\n    if (a ===\
    \ 53) return true;\n    if (a === 54) return true;\n    if (a === 55) return true;\n\
    \    if (a === 56) return true;\n    if (a === 57) return true;\n    if (a ===\
    \ 58) return true;\n    if (a === 59) return true;\n    if (a === 60) return true;\n\
    \    if (a === 61) return true;\n    if (a === 62) return true;\n    if (a ===\
    \ 63) return true;\n    if (a === 64) return true;\n    if (a === 65) return true;\n\
    \    if (a === 66) return true;\n    if (a === 67) return true;\n    if (a ===\
    \ 68) return true;\n    if (a === 69) return true;\n    if (a === 70) return true;\n\
    \    if (a === 71) return true;\n    if (a === \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl4cx2tmz.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpl4cx2tmz.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    if (a % 3 === 0) {\n        return true;\n    }\n    if (a % 4 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 5 === 0) {\n        return true;\n\
    \    }\n    if (a % 6 === 0) {\n        return false;\n    }\n    if (a % 7 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 8 === 0) {\n        return false;\n\
    \    }\n    if (a % 9 === 0) {\n        return true;\n    }\n    if (a % 10 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 11 === 0) {\n        return\
    \ true;\n    }\n    if (a % 12 === 0) {\n        return false;\n    }\n    if\
    \ (a % 13 === 0) {\n        return true;\n    }\n    if (a % 14 === 0) {\n   \
    \     return false;\n    }\n    if (a % 15 === 0) {\n        return true;\n  \
    \  }\n    if (a % 16 === 0) {\n        return false;\n    }\n    if (a % 17 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 18 === 0) {\n        return false;\n\
    \    }\n    if (a % 19 === 0) {\n        return true;\n    }\n    if (a % 20 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 21 === 0) {\n        return\
    \ true;\n    }\n    if (a % 22 === 0) {\n        return false;\n    }\n    if\
    \ (a % 23 === 0) {\n        return true;\n    }\n    if (a % 24 === 0) {\n   \
    \     return false;\n    }\n    if (a % 25 === 0) {\n        return true;\n  \
    \  }\n    if (a % 26 === 0) {\n        return false;\n    }\n    if (a % 27 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 28 === 0) {\n        return false;\n\
    \    }\n    if (a % 29 === 0) {\n        return true;\n    }\n    if (a % 30 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 31 === 0) {\n        return\
    \ true;\n    }\n    if (a % 32 === 0) {\n        return false;\n    }\n    if\
    \ (a % 33 === 0) {\n        return true;\n    }\n    if (a % 34 === 0) {\n   \
    \     return false;\n    }\n    if (a % 35 === 0) {\n        return true;\n  \
    \  }\n    if (a % 36 === 0) {\n        return false;\n    }\n    if (a % 37 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 38 === 0) {\n        return false;\n\
    \    }\n    if (a % 39 === 0) {\n        return true;\n    }\n    if (a % 40 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 41 === 0) {\n        return\
    \ true;\n    }\n    if (a % 42 === 0) {\n        return false;\n    }\n    if\
    \ (a % 43 === 0) {\n        return true;\n    }\n    if (a % 44 === 0) {\n   \
    \     return false;\n    }\n    if (a % 45 === 0) {\n        return true;\n  \
    \  }\n    if (a % 46 === 0) {\n        return false;\n    }\n    if (a % 47 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 48 === 0) {\n        return false;\n\
    \    }\n    if (a % 49 === 0) {\n        return true;\n    }\n    if (a % 50 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 51 === 0) {\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpefmoz2cn.ts(180,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a >= 0 && a <= 180;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphbfyd2m2.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphbfyd2m2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a % 3 === 0 && a % 5 === 0 && a % 7 === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1537y3f0.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1537y3f0.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a % 1 === 0) return\
    \ false;\n  if (a === 1) return true;\n  if (a === 2) return true;\n  if (a ===\
    \ 3) return true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n\
    \  if (a === 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return\
    \ true;\n  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a ===\
    \ 11) return true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n\
    \  if (a === 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return\
    \ true;\n  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a ===\
    \ 19) return true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n\
    \  if (a === 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return\
    \ true;\n  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a ===\
    \ 27) return true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n\
    \  if (a === 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return\
    \ true;\n  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a ===\
    \ 35) return true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n\
    \  if (a === 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return\
    \ true;\n  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a ===\
    \ 43) return true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n\
    \  if (a === 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return\
    \ true;\n  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a ===\
    \ 51) return true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n\
    \  if (a === 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return\
    \ true;\n  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a ===\
    \ 59) return true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n\
    \  if (a === 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return\
    \ true;\n  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a ===\
    \ 67) return true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n\
    \  if (a === 70) return true;\n  if (a === 71) return true;\n  if (\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxw88chjm.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpxw88chjm.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a % 3 === 0 && a % 5 === 0;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpl9fhksxb.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl9fhksxb.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1\
    \ || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8\
    \ || a === 9 || a === 10) {\n        return true;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9o4nq4ru.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9o4nq4ru.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return isCube(a, 3);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq94r67ub.ts(12,10): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a % 1 !== 0) {\n   \
    \ return false;\n  }\n  let cube = 1;\n  for (let i = 1; i <= a; i++) {\n    cube\
    \ *= i;\n  }\n  return cube === a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn09ki5ii.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpn09ki5ii.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) return true;\n\
    \    if (a === 1) return false;\n    if (a === 2) return true;\n    if (a ===\
    \ 3) return true;\n    if (a === 4) return true;\n    if (a === 5) return true;\n\
    \    if (a === 6) return true;\n    if (a === 7) return true;\n    if (a === 8)\
    \ return true;\n    if (a === 9) return true;\n    if (a === 10) return true;\n\
    \    if (a === 11) return true;\n    if (a === 12) return true;\n    if (a ===\
    \ 13) return true;\n    if (a === 14) return true;\n    if (a === 15) return true;\n\
    \    if (a === 16) return true;\n    if (a === 17) return true;\n    if (a ===\
    \ 18) return true;\n    if (a === 19) return true;\n    if (a === 20) return true;\n\
    \    if (a === 21) return true;\n    if (a === 22) return true;\n    if (a ===\
    \ 23) return true;\n    if (a === 24) return true;\n    if (a === 25) return true;\n\
    \    if (a === 26) return true;\n    if (a === 27) return true;\n    if (a ===\
    \ 28) return true;\n    if (a === 29) return true;\n    if (a === 30) return true;\n\
    \    if (a === 31) return true;\n    if (a === 32) return true;\n    if (a ===\
    \ 33) return true;\n    if (a === 34) return true;\n    if (a === 35) return true;\n\
    \    if (a === 36) return true;\n    if (a === 37) return true;\n    if (a ===\
    \ 38) return true;\n    if (a === 39) return true;\n    if (a === 40) return true;\n\
    \    if (a === 41) return true;\n    if (a === 42) return true;\n    if (a ===\
    \ 43) return true;\n    if (a === 44) return true;\n    if (a === 45) return true;\n\
    \    if (a === 46) return true;\n    if (a === 47) return true;\n    if (a ===\
    \ 48) return true;\n    if (a === 49) return true;\n    if (a === 50) return true;\n\
    \    if (a === 51) return true;\n    if (a === 52) return true;\n    if (a ===\
    \ 53) return true;\n    if (a === 54) return true;\n    if (a === 55) return true;\n\
    \    if (a === 56) return true;\n    if (a === 57) return true;\n    if (a ===\
    \ 58) return true;\n    if (a === 59) return true;\n    if (a === 60) return true;\n\
    \    if (a === 61) return true;\n    if (a === 62) return true;\n    if (a ===\
    \ 63) return true;\n    if (a === 64) return true;\n    if (a === 65) return true;\n\
    \    if (a === 66) return true;\n    if (a === 67) return true;\n    if (a ===\
    \ 68) return true;\n    if (a === 69) return true;\n    if (a === 70) return true;\n\
    \    if (a === 71) return true;\n    if (a === \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl4cx2tmz.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpl4cx2tmz.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a >= 0 && a <= 180;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphbfyd2m2.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphbfyd2m2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0 || a === 1)\
    \ {\n    return true;\n  }\n  if (a === -1 || a === -2) {\n    return false;\n\
    \  }\n  if (a === 3 || a === 4) {\n    return true;\n  }\n  if (a === 6 || a ===\
    \ 7) {\n    return true;\n  }\n  if (a === 9 || a === 10) {\n    return true;\n\
    \  }\n  if (a === 15 || a === 16) {\n    return true;\n  }\n  if (a === 17 ||\
    \ a === 18) {\n    return true;\n  }\n  if (a === 19 || a === 20) {\n    return\
    \ true;\n  }\n  if (a === 25 || a === 26) {\n    return true;\n  }\n  if (a ===\
    \ 27 || a === 28) {\n    return true;\n  }\n  if (a === 29 || a === 30) {\n  \
    \  return true;\n  }\n  if (a === 31 || a === 32) {\n    return true;\n  }\n \
    \ if (a === 33 || a === 34) {\n    return true;\n  }\n  if (a === 35 || a ===\
    \ 36) {\n    return true;\n  }\n  if (a === 37 || a === 38) {\n    return true;\n\
    \  }\n  if (a === 39 || a === 40) {\n    return true;\n  }\n  if (a === 41 ||\
    \ a === 42) {\n    return true;\n  }\n  if (a === 43 || a === 44) {\n    return\
    \ true;\n  }\n  if (a === 45 || a === 46) {\n    return true;\n  }\n  if (a ===\
    \ 47 || a === 48) {\n    return true;\n  }\n  if (a === 49 || a === 50) {\n  \
    \  return true;\n  }\n  if (a === 51 || a === 52) {\n    return true;\n  }\n \
    \ if (a === 53 || a === 54) {\n    return true;\n  }\n  if (a === 55 || a ===\
    \ 56) {\n    return true;\n  }\n  if (a === 57 || a === 58) {\n    return true;\n\
    \  }\n  if (a === 59 || a === 60) {\n    return true;\n  }\n  if (a === 61 ||\
    \ a === 62) {\n    return true;\n  }\n  if (a === 63 || a === 64) {\n    return\
    \ true;\n  }\n  if (a === 65 || a === 66) {\n    return true;\n  }\n  if (a ===\
    \ 67 || a === 68) {\n    return true;\n  }\n  if (a === 69 || a === 70) {\n  \
    \  return true;\n  }\n  if (a === 71 || a === 72) {\n    return true;\n  }\n \
    \ if (a === 73 || a === 74) {\n    return true;\n  }\n  if (a === 75 || a ===\
    \ 76) {\n    return true;\n  }\n  if (a === 77 || a === 78) {\n    return true;\n\
    \  }\n  if (a === 79 || a === 80) {\n    return true;\n  }\n  if (a === 81 ||\
    \ a === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2ag1jtk2.ts(121,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmp2ag1jtk2.ts(137,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return isCube(a);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5e81rll.ts(12,10): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a >= 1 && a <= 9;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpeme15d4r.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeme15d4r.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a % 1 !== 0) {\n \
    \       return false;\n    }\n    let b = 1;\n    let c = 1;\n    let d = 1;\n\
    \    let e = 1;\n    let f = 1;\n    let g = 1;\n    let h = 1;\n    let i = 1;\n\
    \    let j = 1;\n    let k = 1;\n    let l = 1;\n    let m = 1;\n    let n = 1;\n\
    \    let o = 1;\n    let p = 1;\n    let q = 1;\n    let r = 1;\n    let s = 1;\n\
    \    let t = 1;\n    let u = 1;\n    let v = 1;\n    let w = 1;\n    let x = 1;\n\
    \    let y = 1;\n    let z = 1;\n    let A = 1;\n    let B = 1;\n    let C = 1;\n\
    \    let D = 1;\n    let E = 1;\n    let F = 1;\n    let G = 1;\n    let H = 1;\n\
    \    let I = 1;\n    let J = 1;\n    let K = 1;\n    let L = 1;\n    let M = 1;\n\
    \    let N = 1;\n    let O = 1;\n    let P = 1;\n    let Q = 1;\n    let R = 1;\n\
    \    let S = 1;\n    let T = 1;\n    let U = 1;\n    let V = 1;\n    let W = 1;\n\
    \    let X = 1;\n    let Y = 1;\n    let Z = 1;\n    let AA = 1;\n    let AB =\
    \ 1;\n    let AC = 1;\n    let AD = 1;\n    let AE = 1;\n    let AF = 1;\n   \
    \ let AG = 1;\n    let AH = 1;\n    let AI = 1;\n    let AJ = 1;\n    let AK =\
    \ 1;\n    let AL = 1;\n    let AM = 1;\n    let AN = 1;\n    let AO = 1;\n   \
    \ let AP = 1;\n    let AQ = 1;\n    let AR = 1;\n    let AS = 1;\n    let AT =\
    \ 1;\n    let AU = 1;\n    let AV = 1;\n    let AW = 1;\n    let AX = 1;\n   \
    \ let AY = 1;\n    let AZ = 1;\n    let BA = 1;\n    let BB = 1;\n    let BC =\
    \ 1;\n    let BD = 1;\n    let BE = 1;\n    let BF = 1;\n    let BG = 1;\n   \
    \ let BH = 1;\n    let BI = 1;\n    let BJ = 1;\n    let BK = 1;\n    let BL =\
    \ 1;\n    let BM = 1;\n    let BN = 1;\n    let BO = 1;\n    let BP = 1;\n   \
    \ let BQ = 1;\n    let BR = 1;\n    let BS = 1;\n    let BT = 1;\n    let BU =\
    \ 1;\n    let BV = 1;\n    let BW = 1;\n    let BX = 1;\n    let BY = 1;\n   \
    \ let BZ = 1;\n    let CA = 1;\n    let CB = 1;\n    let CC = 1;\n    let CD =\
    \ 1;\n    let CE = 1;\n    let CF = 1;\n    let CG = 1;\n    let CH = 1;\n   \
    \ let CI = 1;\n    let CJ = 1;\n    let CK = 1;\n    let CL = 1;\n    let CM =\
    \ 1;\n    let CN = 1;\n    let CO = 1;\n    let CP = 1;\n    let CQ = 1;\n   \
    \ let CR = 1;\n    let CS = 1;\n    let CT = 1;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3cbesqgp.ts(154,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    if (a % 3 === 0) {\n        return true;\n    }\n    if (a % 5 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 7 === 0) {\n        return true;\n\
    \    }\n    if (a % 9 === 0) {\n        return false;\n    }\n    if (a % 11 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 13 === 0) {\n        return false;\n\
    \    }\n    if (a % 15 === 0) {\n        return true;\n    }\n    if (a % 17 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 19 === 0) {\n        return\
    \ true;\n    }\n    if (a % 21 === 0) {\n        return false;\n    }\n    if\
    \ (a % 23 === 0) {\n        return true;\n    }\n    if (a % 25 === 0) {\n   \
    \     return false;\n    }\n    if (a % 27 === 0) {\n        return true;\n  \
    \  }\n    if (a % 29 === 0) {\n        return false;\n    }\n    if (a % 31 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 33 === 0) {\n        return false;\n\
    \    }\n    if (a % 35 === 0) {\n        return true;\n    }\n    if (a % 37 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 39 === 0) {\n        return\
    \ true;\n    }\n    if (a % 41 === 0) {\n        return false;\n    }\n    if\
    \ (a % 43 === 0) {\n        return true;\n    }\n    if (a % 45 === 0) {\n   \
    \     return false;\n    }\n    if (a % 47 === 0) {\n        return true;\n  \
    \  }\n    if (a % 49 === 0) {\n        return false;\n    }\n    if (a % 51 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 53 === 0) {\n        return false;\n\
    \    }\n    if (a % 55 === 0) {\n        return true;\n    }\n    if (a % 57 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 59 === 0) {\n        return\
    \ true;\n    }\n    if (a % 61 === 0) {\n        return false;\n    }\n    if\
    \ (a % 63 === 0) {\n        return true;\n    }\n    if (a % 65 === 0) {\n   \
    \     return false;\n    }\n    if (a % 67 === 0) {\n        return true;\n  \
    \  }\n    if (a % 69 === 0) {\n        return false;\n    }\n    if (a % 71 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 73 === 0) {\n        return false;\n\
    \    }\n    if (a % 75 === 0) {\n        return true;\n    }\n    if (a % 77 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 79 === 0) {\n        return\
    \ true;\n    }\n    if (a % 81 === 0) {\n        return false;\n    }\n    if\
    \ (a % 83 === 0) {\n        return true;\n    }\n    if (a % 85 === 0) {\n   \
    \     return false;\n    }\n    if (a % 87 === 0) {\n        return true;\n  \
    \  }\n    if (a % 89 === 0) {\n        return false;\n    }\n    if (a % 91 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 93 === 0) {\n        return false;\n\
    \    }\n    if (a % 95 === 0) {\n        return true;\n    }\n    if (a % 97 ===\
    \ 0) {\n        return false;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpawl2yh1u.ts(177,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747769
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    let b = 1;\n    let c = 1;\n    let d = 1;\n    let e = 1;\n    let\
    \ f = 1;\n    let g = 1;\n    let h = 1;\n    let i = 1;\n    let j = 1;\n   \
    \ let k = 1;\n    let l = 1;\n    let m = 1;\n    let n = 1;\n    let o = 1;\n\
    \    let p = 1;\n    let q = 1;\n    let r = 1;\n    let s = 1;\n    let t = 1;\n\
    \    let u = 1;\n    let v = 1;\n    let w = 1;\n    let x = 1;\n    let y = 1;\n\
    \    let z = 1;\n    let A = 1;\n    let B = 1;\n    let C = 1;\n    let D = 1;\n\
    \    let E = 1;\n    let F = 1;\n    let G = 1;\n    let H = 1;\n    let I = 1;\n\
    \    let J = 1;\n    let K = 1;\n    let L = 1;\n    let M = 1;\n    let N = 1;\n\
    \    let O = 1;\n    let P = 1;\n    let Q = 1;\n    let R = 1;\n    let S = 1;\n\
    \    let T = 1;\n    let U = 1;\n    let V = 1;\n    let W = 1;\n    let X = 1;\n\
    \    let Y = 1;\n    let Z = 1;\n    let AA = 1;\n    let AB = 1;\n    let AC\
    \ = 1;\n    let AD = 1;\n    let AE = 1;\n    let AF = 1;\n    let AG = 1;\n \
    \   let AH = 1;\n    let AI = 1;\n    let AJ = 1;\n    let AK = 1;\n    let AL\
    \ = 1;\n    let AM = 1;\n    let AN = 1;\n    let AO = 1;\n    let AP = 1;\n \
    \   let AQ = 1;\n    let AR = 1;\n    let AS = 1;\n    let AT = 1;\n    let AU\
    \ = 1;\n    let AV = 1;\n    let AW = 1;\n    let AX = 1;\n    let AY = 1;\n \
    \   let AZ = 1;\n    let BA = 1;\n    let BB = 1;\n    let BC = 1;\n    let BD\
    \ = 1;\n    let BE = 1;\n    let BF = 1;\n    let BG = 1;\n    let BH = 1;\n \
    \   let BI = 1;\n    let BJ = 1;\n    let BK = 1;\n    let BL = 1;\n    let BM\
    \ = 1;\n    let BN = 1;\n    let BO = 1;\n    let BP = 1;\n    let BQ = 1;\n \
    \   let BR = 1;\n    let BS = 1;\n    let BT = 1;\n    let BU = 1;\n    let BV\
    \ = 1;\n    let BW = 1;\n    let BX = 1;\n    let BY = 1;\n    let BZ = 1;\n \
    \   let CA = 1;\n    let CB = 1;\n    let CC = 1;\n    let CD = 1;\n    let CE\
    \ = 1;\n    let CF = 1;\n    let CG = 1;\n    let CH = 1;\n    let CI = 1;\n \
    \   let CJ = 1;\n    let CK = 1;\n    let CL = 1;\n    let CM = 1;\n    let CN\
    \ = 1;\n    let CO = 1;\n    let CP = 1;\n    let CQ = 1;\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjoxfnvrz.ts(154,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747769
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return isCube(a);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5e81rll.ts(12,10): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0) return true;\n\
    \  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === 3) return\
    \ true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a ===\
    \ 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n\
    \  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return\
    \ true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a ===\
    \ 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n\
    \  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return\
    \ true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a ===\
    \ 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n\
    \  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return\
    \ true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a ===\
    \ 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n\
    \  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return\
    \ true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a ===\
    \ 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n\
    \  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return\
    \ true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a ===\
    \ 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n\
    \  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return\
    \ true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a ===\
    \ 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n\
    \  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return\
    \ true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a ===\
    \ 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n\
    \  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return\
    \ true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a ===\
    \ 70) return true;\n  if (a === 71) return true;\n  if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4x2vb_8r.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmp4x2vb_8r.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return isCube(a);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5e81rll.ts(12,10): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) {\n     \
    \   return true;\n    }\n    if (a === 1) {\n        return true;\n    }\n   \
    \ if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n        return\
    \ true;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if (a ===\
    \ 5) {\n        return true;\n    }\n    if (a === 6) {\n        return true;\n\
    \    }\n    if (a === 7) {\n        return true;\n    }\n    if (a === 8) {\n\
    \        return true;\n    }\n    if (a === 9) {\n        return true;\n    }\n\
    \    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n     \
    \   return true;\n    }\n    if (a === 12) {\n        return true;\n    }\n  \
    \  if (a === 13) {\n        return true;\n    }\n    if (a === 14) {\n       \
    \ return true;\n    }\n    if (a === 15) {\n        return true;\n    }\n    if\
    \ (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n        return\
    \ true;\n    }\n    if (a === 18) {\n        return true;\n    }\n    if (a ===\
    \ 19) {\n        return true;\n    }\n    if (a === 20) {\n        return true;\n\
    \    }\n    if (a === 21) {\n        return true;\n    }\n    if (a === 22) {\n\
    \        return true;\n    }\n    if (a === 23) {\n        return true;\n    }\n\
    \    if (a === 24) {\n        return true;\n    }\n    if (a === 25) {\n     \
    \   return true;\n    }\n    if (a === 26) {\n        return true;\n    }\n  \
    \  if (a === 27) {\n        return true;\n    }\n    if (a === 28) {\n       \
    \ return true;\n    }\n    if (a === 29) {\n        return true;\n    }\n    if\
    \ (a === 30) {\n        return true;\n    }\n    if (a === 31) {\n        return\
    \ true;\n    }\n    if (a === 32) {\n        return true;\n    }\n    if (a ===\
    \ 33) {\n        return true;\n    }\n    if (a === 34) {\n        return true;\n\
    \    }\n    if (a === 35) {\n        return true;\n    }\n    if (a === 36) {\n\
    \        return true;\n    }\n    if (a === 37) {\n        return true;\n    }\n\
    \    if (a === 38) {\n        return true;\n    }\n    if (a === 39) {\n     \
    \   return true;\n    }\n    if (a === 40) {\n        return true;\n    }\n  \
    \  if (a === 41) {\n        return true;\n    }\n    if (a === 42) {\n       \
    \ return true;\n    }\n    if (a === 43) {\n        return true;\n    }\n    if\
    \ (a === 44) {\n        return true;\n    }\n    if (a === 45) {\n        return\
    \ true;\n    }\n    if (a === 46) {\n        return true;\n    }\n    if (a ===\
    \ 47) {\n        return true;\n    }\n    if (a === 48) {\n        return true;\n\
    \    }\n    if (a === 49) {\n        return true;\n    }\n    if (a === 50) {\n\
    \        return true;\n    }\n    if (a === 51) {\n        return true;\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz89xdr5a.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a % 3 === 0 && a % 5 === 0 && a % 7 === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1537y3f0.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1537y3f0.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a >= 0 && a <= 180;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphbfyd2m2.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphbfyd2m2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1\
    \ || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8\
    \ || a === 9 || a === 10) {\n        return true;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9o4nq4ru.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9o4nq4ru.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return iscube(a\
    \ / 2);\n    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpos1zwq0h.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpos1zwq0h.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return iscube(a\
    \ / 2);\n    } else {\n        return false;\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfak9al4_.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfak9al4_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) return false;\n\
    \    if (a === 1) return true;\n    if (a === 2) return true;\n    if (a === 3)\
    \ return true;\n    if (a === 4) return true;\n    if (a === 5) return true;\n\
    \    if (a === 6) return true;\n    if (a === 7) return true;\n    if (a === 8)\
    \ return true;\n    if (a === 9) return true;\n    if (a === 10) return true;\n\
    \    if (a === 11) return true;\n    if (a === 12) return true;\n    if (a ===\
    \ 13) return true;\n    if (a === 14) return true;\n    if (a === 15) return true;\n\
    \    if (a === 16) return true;\n    if (a === 17) return true;\n    if (a ===\
    \ 18) return true;\n    if (a === 19) return true;\n    if (a === 20) return true;\n\
    \    if (a === 21) return true;\n    if (a === 22) return true;\n    if (a ===\
    \ 23) return true;\n    if (a === 24) return true;\n    if (a === 25) return true;\n\
    \    if (a === 26) return true;\n    if (a === 27) return true;\n    if (a ===\
    \ 28) return true;\n    if (a === 29) return true;\n    if (a === 30) return true;\n\
    \    if (a === 31) return true;\n    if (a === 32) return true;\n    if (a ===\
    \ 33) return true;\n    if (a === 34) return true;\n    if (a === 35) return true;\n\
    \    if (a === 36) return true;\n    if (a === 37) return true;\n    if (a ===\
    \ 38) return true;\n    if (a === 39) return true;\n    if (a === 40) return true;\n\
    \    if (a === 41) return true;\n    if (a === 42) return true;\n    if (a ===\
    \ 43) return true;\n    if (a === 44) return true;\n    if (a === 45) return true;\n\
    \    if (a === 46) return true;\n    if (a === 47) return true;\n    if (a ===\
    \ 48) return true;\n    if (a === 49) return true;\n    if (a === 50) return true;\n\
    \    if (a === 51) return true;\n    if (a === 52) return true;\n    if (a ===\
    \ 53) return true;\n    if (a === 54) return true;\n    if (a === 55) return true;\n\
    \    if (a === 56) return true;\n    if (a === 57) return true;\n    if (a ===\
    \ 58) return true;\n    if (a === 59) return true;\n    if (a === 60) return true;\n\
    \    if (a === 61) return true;\n    if (a === 62) return true;\n    if (a ===\
    \ 63) return true;\n    if (a === 64) return true;\n    if (a === 65) return true;\n\
    \    if (a === 66) return true;\n    if (a === 67) return true;\n    if (a ===\
    \ 68) return true;\n    if (a === 69) return true;\n    if (a === 70) return true;\n\
    \    if (a === 71) return true;\n    if (a === \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0jjopg1p.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmp0jjopg1p.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a >= 0 && a <= 180;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphbfyd2m2.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphbfyd2m2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a % 3 === 0 && a % 5 === 0;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpl9fhksxb.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl9fhksxb.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) {\n     \
    \   return true;\n    }\n    if (a === 1) {\n        return false;\n    }\n  \
    \  if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n        return\
    \ false;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if (a ===\
    \ 5) {\n        return false;\n    }\n    if (a === 6) {\n        return true;\n\
    \    }\n    if (a === 7) {\n        return false;\n    }\n    if (a === 8) {\n\
    \        return true;\n    }\n    if (a === 9) {\n        return false;\n    }\n\
    \    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n     \
    \   return false;\n    }\n    if (a === 12) {\n        return true;\n    }\n \
    \   if (a === 13) {\n        return false;\n    }\n    if (a === 14) {\n     \
    \   return true;\n    }\n    if (a === 15) {\n        return false;\n    }\n \
    \   if (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n      \
    \  return false;\n    }\n    if (a === 18) {\n        return true;\n    }\n  \
    \  if (a === 19) {\n        return false;\n    }\n    if (a === 20) {\n      \
    \  return true;\n    }\n    if (a === 21) {\n        return false;\n    }\n  \
    \  if (a === 22) {\n        return true;\n    }\n    if (a === 23) {\n       \
    \ return false;\n    }\n    if (a === 24) {\n        return true;\n    }\n   \
    \ if (a === 25) {\n        return false;\n    }\n    if (a === 26) {\n       \
    \ return true;\n    }\n    if (a === 27) {\n        return false;\n    }\n   \
    \ if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n        return\
    \ false;\n    }\n    if (a === 30) {\n        return true;\n    }\n    if (a ===\
    \ 31) {\n        return false;\n    }\n    if (a === 32) {\n        return true;\n\
    \    }\n    if (a === 33) {\n        return false;\n    }\n    if (a === 34) {\n\
    \        return true;\n    }\n    if (a === 35) {\n        return false;\n   \
    \ }\n    if (a === 36) {\n        return true;\n    }\n    if (a === 37) {\n \
    \       return false;\n    }\n    if (a === 38) {\n        return true;\n    }\n\
    \    if (a === 39) {\n        return false;\n    }\n    if (a === 40) {\n    \
    \    return true;\n    }\n    if (a === 41) {\n        return false;\n    }\n\
    \    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n     \
    \   return false;\n    }\n    if (a === 44) {\n        return true;\n    }\n \
    \   if (a === 45) {\n        return false;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return false;\n    }\n \
    \   if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n      \
    \  return false;\n    }\n    if (a === 50) {\n        return true;\n    }\n  \
    \  if (a === 51) {\n        return false;\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp12pz2pw9.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return isCube(a);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5e81rll.ts(12,10): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 3 === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpw535vq8c.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpw535vq8c.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a % 3 === 0 && a % 5 === 0 && a % 7 === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1537y3f0.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1537y3f0.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) return true;\n\
    \    if (a === 1) return false;\n    if (a === 2) return true;\n    if (a ===\
    \ 3) return true;\n    if (a === 4) return true;\n    if (a === 5) return true;\n\
    \    if (a === 6) return true;\n    if (a === 7) return true;\n    if (a === 8)\
    \ return true;\n    if (a === 9) return true;\n    if (a === 10) return true;\n\
    \    if (a === 11) return true;\n    if (a === 12) return true;\n    if (a ===\
    \ 13) return true;\n    if (a === 14) return true;\n    if (a === 15) return true;\n\
    \    if (a === 16) return true;\n    if (a === 17) return true;\n    if (a ===\
    \ 18) return true;\n    if (a === 19) return true;\n    if (a === 20) return true;\n\
    \    if (a === 21) return true;\n    if (a === 22) return true;\n    if (a ===\
    \ 23) return true;\n    if (a === 24) return true;\n    if (a === 25) return true;\n\
    \    if (a === 26) return true;\n    if (a === 27) return true;\n    if (a ===\
    \ 28) return true;\n    if (a === 29) return true;\n    if (a === 30) return true;\n\
    \    if (a === 31) return true;\n    if (a === 32) return true;\n    if (a ===\
    \ 33) return true;\n    if (a === 34) return true;\n    if (a === 35) return true;\n\
    \    if (a === 36) return true;\n    if (a === 37) return true;\n    if (a ===\
    \ 38) return true;\n    if (a === 39) return true;\n    if (a === 40) return true;\n\
    \    if (a === 41) return true;\n    if (a === 42) return true;\n    if (a ===\
    \ 43) return true;\n    if (a === 44) return true;\n    if (a === 45) return true;\n\
    \    if (a === 46) return true;\n    if (a === 47) return true;\n    if (a ===\
    \ 48) return true;\n    if (a === 49) return true;\n    if (a === 50) return true;\n\
    \    if (a === 51) return true;\n    if (a === 52) return true;\n    if (a ===\
    \ 53) return true;\n    if (a === 54) return true;\n    if (a === 55) return true;\n\
    \    if (a === 56) return true;\n    if (a === 57) return true;\n    if (a ===\
    \ 58) return true;\n    if (a === 59) return true;\n    if (a === 60) return true;\n\
    \    if (a === 61) return true;\n    if (a === 62) return true;\n    if (a ===\
    \ 63) return true;\n    if (a === 64) return true;\n    if (a === 65) return true;\n\
    \    if (a === 66) return true;\n    if (a === 67) return true;\n    if (a ===\
    \ 68) return true;\n    if (a === 69) return true;\n    if (a === 70) return true;\n\
    \    if (a === 71) return true;\n    if (a === \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl4cx2tmz.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpl4cx2tmz.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return isCube(a);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5e81rll.ts(12,10): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return isCube(a);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5e81rll.ts(12,10): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a % 1 !== 0) {\n \
    \       return false;\n    }\n    if (a === 1) {\n        return true;\n    }\n\
    \    if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n       \
    \ return true;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if\
    \ (a === 5) {\n        return true;\n    }\n    if (a === 6) {\n        return\
    \ true;\n    }\n    if (a === 7) {\n        return true;\n    }\n    if (a ===\
    \ 8) {\n        return true;\n    }\n    if (a === 9) {\n        return true;\n\
    \    }\n    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n\
    \        return true;\n    }\n    if (a === 12) {\n        return true;\n    }\n\
    \    if (a === 13) {\n        return true;\n    }\n    if (a === 14) {\n     \
    \   return true;\n    }\n    if (a === 15) {\n        return true;\n    }\n  \
    \  if (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n       \
    \ return true;\n    }\n    if (a === 18) {\n        return true;\n    }\n    if\
    \ (a === 19) {\n        return true;\n    }\n    if (a === 20) {\n        return\
    \ true;\n    }\n    if (a === 21) {\n        return true;\n    }\n    if (a ===\
    \ 22) {\n        return true;\n    }\n    if (a === 23) {\n        return true;\n\
    \    }\n    if (a === 24) {\n        return true;\n    }\n    if (a === 25) {\n\
    \        return true;\n    }\n    if (a === 26) {\n        return true;\n    }\n\
    \    if (a === 27) {\n        return true;\n    }\n    if (a === 28) {\n     \
    \   return true;\n    }\n    if (a === 29) {\n        return true;\n    }\n  \
    \  if (a === 30) {\n        return true;\n    }\n    if (a === 31) {\n       \
    \ return true;\n    }\n    if (a === 32) {\n        return true;\n    }\n    if\
    \ (a === 33) {\n        return true;\n    }\n    if (a === 34) {\n        return\
    \ true;\n    }\n    if (a === 35) {\n        return true;\n    }\n    if (a ===\
    \ 36) {\n        return true;\n    }\n    if (a === 37) {\n        return true;\n\
    \    }\n    if (a === 38) {\n        return true;\n    }\n    if (a === 39) {\n\
    \        return true;\n    }\n    if (a === 40) {\n        return true;\n    }\n\
    \    if (a === 41) {\n        return true;\n    }\n    if (a === 42) {\n     \
    \   return true;\n    }\n    if (a === 43) {\n        return true;\n    }\n  \
    \  if (a === 44) {\n        return true;\n    }\n    if (a === 45) {\n       \
    \ return true;\n    }\n    if (a === 46) {\n        return true;\n    }\n    if\
    \ (a === 47) {\n        return true;\n    }\n    if (a === 48) {\n        return\
    \ true;\n    }\n    if (a === 49) {\n        return true;\n    }\n    if (a ===\
    \ 50) {\n        return true;\n    }\n    if (a === 51) {\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfqnuy83y.ts(183,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0 || a === 1)\
    \ {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return iscube(a / 2);\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpp3bgus51.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp3bgus51.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747769
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return isCube(a);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5e81rll.ts(12,10): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) return true;\n\
    \    if (a === 1) return false;\n    if (a === 2) return true;\n    if (a ===\
    \ 3) return true;\n    if (a === 4) return true;\n    if (a === 5) return true;\n\
    \    if (a === 6) return true;\n    if (a === 7) return true;\n    if (a === 8)\
    \ return true;\n    if (a === 9) return true;\n    if (a === 10) return true;\n\
    \    if (a === 11) return true;\n    if (a === 12) return true;\n    if (a ===\
    \ 13) return true;\n    if (a === 14) return true;\n    if (a === 15) return true;\n\
    \    if (a === 16) return true;\n    if (a === 17) return true;\n    if (a ===\
    \ 18) return true;\n    if (a === 19) return true;\n    if (a === 20) return true;\n\
    \    if (a === 21) return true;\n    if (a === 22) return true;\n    if (a ===\
    \ 23) return true;\n    if (a === 24) return true;\n    if (a === 25) return true;\n\
    \    if (a === 26) return true;\n    if (a === 27) return true;\n    if (a ===\
    \ 28) return true;\n    if (a === 29) return true;\n    if (a === 30) return true;\n\
    \    if (a === 31) return true;\n    if (a === 32) return true;\n    if (a ===\
    \ 33) return true;\n    if (a === 34) return true;\n    if (a === 35) return true;\n\
    \    if (a === 36) return true;\n    if (a === 37) return true;\n    if (a ===\
    \ 38) return true;\n    if (a === 39) return true;\n    if (a === 40) return true;\n\
    \    if (a === 41) return true;\n    if (a === 42) return true;\n    if (a ===\
    \ 43) return true;\n    if (a === 44) return true;\n    if (a === 45) return true;\n\
    \    if (a === 46) return true;\n    if (a === 47) return true;\n    if (a ===\
    \ 48) return true;\n    if (a === 49) return true;\n    if (a === 50) return true;\n\
    \    if (a === 51) return true;\n    if (a === 52) return true;\n    if (a ===\
    \ 53) return true;\n    if (a === 54) return true;\n    if (a === 55) return true;\n\
    \    if (a === 56) return true;\n    if (a === 57) return true;\n    if (a ===\
    \ 58) return true;\n    if (a === 59) return true;\n    if (a === 60) return true;\n\
    \    if (a === 61) return true;\n    if (a === 62) return true;\n    if (a ===\
    \ 63) return true;\n    if (a === 64) return true;\n    if (a === 65) return true;\n\
    \    if (a === 66) return true;\n    if (a === 67) return true;\n    if (a ===\
    \ 68) return true;\n    if (a === 69) return true;\n    if (a === 70) return true;\n\
    \    if (a === 71) return true;\n    if (a === \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl4cx2tmz.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpl4cx2tmz.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) {\n     \
    \   return true;\n    }\n    if (a === 1) {\n        return true;\n    }\n   \
    \ if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n        return\
    \ true;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if (a ===\
    \ 5) {\n        return true;\n    }\n    if (a === 6) {\n        return true;\n\
    \    }\n    if (a === 7) {\n        return true;\n    }\n    if (a === 8) {\n\
    \        return true;\n    }\n    if (a === 9) {\n        return true;\n    }\n\
    \    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n     \
    \   return true;\n    }\n    if (a === 12) {\n        return true;\n    }\n  \
    \  if (a === 13) {\n        return true;\n    }\n    if (a === 14) {\n       \
    \ return true;\n    }\n    if (a === 15) {\n        return true;\n    }\n    if\
    \ (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n        return\
    \ true;\n    }\n    if (a === 18) {\n        return true;\n    }\n    if (a ===\
    \ 19) {\n        return true;\n    }\n    if (a === 20) {\n        return true;\n\
    \    }\n    if (a === 21) {\n        return true;\n    }\n    if (a === 22) {\n\
    \        return true;\n    }\n    if (a === 23) {\n        return true;\n    }\n\
    \    if (a === 24) {\n        return true;\n    }\n    if (a === 25) {\n     \
    \   return true;\n    }\n    if (a === 26) {\n        return true;\n    }\n  \
    \  if (a === 27) {\n        return true;\n    }\n    if (a === 28) {\n       \
    \ return true;\n    }\n    if (a === 29) {\n        return true;\n    }\n    if\
    \ (a === 30) {\n        return true;\n    }\n    if (a === 31) {\n        return\
    \ true;\n    }\n    if (a === 32) {\n        return true;\n    }\n    if (a ===\
    \ 33) {\n        return true;\n    }\n    if (a === 34) {\n        return true;\n\
    \    }\n    if (a === 35) {\n        return true;\n    }\n    if (a === 36) {\n\
    \        return true;\n    }\n    if (a === 37) {\n        return true;\n    }\n\
    \    if (a === 38) {\n        return true;\n    }\n    if (a === 39) {\n     \
    \   return true;\n    }\n    if (a === 40) {\n        return true;\n    }\n  \
    \  if (a === 41) {\n        return true;\n    }\n    if (a === 42) {\n       \
    \ return true;\n    }\n    if (a === 43) {\n        return true;\n    }\n    if\
    \ (a === 44) {\n        return true;\n    }\n    if (a === 45) {\n        return\
    \ true;\n    }\n    if (a === 46) {\n        return true;\n    }\n    if (a ===\
    \ 47) {\n        return true;\n    }\n    if (a === 48) {\n        return true;\n\
    \    }\n    if (a === 49) {\n        return true;\n    }\n    if (a === 50) {\n\
    \        return true;\n    }\n    if (a === 51) {\n        return true;\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz89xdr5a.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0 || a === 1)\
    \ {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return iscube(a / 2);\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpp3bgus51.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp3bgus51.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747769
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0 || a === 1)\
    \ {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  return\
    \ iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyvd3a_yi.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyvd3a_yi.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1\
    \ || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8\
    \ || a === 9 || a === 10) {\n        return true;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9o4nq4ru.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9o4nq4ru.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0) return true;\n\
    \  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === 3) return\
    \ true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a ===\
    \ 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n\
    \  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return\
    \ true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a ===\
    \ 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n\
    \  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return\
    \ true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a ===\
    \ 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n\
    \  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return\
    \ true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a ===\
    \ 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n\
    \  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return\
    \ true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a ===\
    \ 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n\
    \  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return\
    \ true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a ===\
    \ 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n\
    \  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return\
    \ true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a ===\
    \ 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n\
    \  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return\
    \ true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a ===\
    \ 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n\
    \  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return\
    \ true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a ===\
    \ 70) return true;\n  if (a === 71) return true;\n  if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4x2vb_8r.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmp4x2vb_8r.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a % 1 !== 0) {\n \
    \       return false;\n    }\n    let cube: number = a * a * a;\n    return cube\
    \ === Math.pow(a, 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpezpibwb3.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpezpibwb3.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return isCube(a);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5e81rll.ts(12,10): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a % 1 !== 0) {\n \
    \       return false;\n    }\n    if (a === 1) {\n        return true;\n    }\n\
    \    if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n       \
    \ return true;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if\
    \ (a === 5) {\n        return true;\n    }\n    if (a === 6) {\n        return\
    \ true;\n    }\n    if (a === 7) {\n        return true;\n    }\n    if (a ===\
    \ 8) {\n        return true;\n    }\n    if (a === 9) {\n        return true;\n\
    \    }\n    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n\
    \        return true;\n    }\n    if (a === 12) {\n        return true;\n    }\n\
    \    if (a === 13) {\n        return true;\n    }\n    if (a === 14) {\n     \
    \   return true;\n    }\n    if (a === 15) {\n        return true;\n    }\n  \
    \  if (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n       \
    \ return true;\n    }\n    if (a === 18) {\n        return true;\n    }\n    if\
    \ (a === 19) {\n        return true;\n    }\n    if (a === 20) {\n        return\
    \ true;\n    }\n    if (a === 21) {\n        return true;\n    }\n    if (a ===\
    \ 22) {\n        return true;\n    }\n    if (a === 23) {\n        return true;\n\
    \    }\n    if (a === 24) {\n        return true;\n    }\n    if (a === 25) {\n\
    \        return true;\n    }\n    if (a === 26) {\n        return true;\n    }\n\
    \    if (a === 27) {\n        return true;\n    }\n    if (a === 28) {\n     \
    \   return true;\n    }\n    if (a === 29) {\n        return true;\n    }\n  \
    \  if (a === 30) {\n        return true;\n    }\n    if (a === 31) {\n       \
    \ return true;\n    }\n    if (a === 32) {\n        return true;\n    }\n    if\
    \ (a === 33) {\n        return true;\n    }\n    if (a === 34) {\n        return\
    \ true;\n    }\n    if (a === 35) {\n        return true;\n    }\n    if (a ===\
    \ 36) {\n        return true;\n    }\n    if (a === 37) {\n        return true;\n\
    \    }\n    if (a === 38) {\n        return true;\n    }\n    if (a === 39) {\n\
    \        return true;\n    }\n    if (a === 40) {\n        return true;\n    }\n\
    \    if (a === 41) {\n        return true;\n    }\n    if (a === 42) {\n     \
    \   return true;\n    }\n    if (a === 43) {\n        return true;\n    }\n  \
    \  if (a === 44) {\n        return true;\n    }\n    if (a === 45) {\n       \
    \ return true;\n    }\n    if (a === 46) {\n        return true;\n    }\n    if\
    \ (a === 47) {\n        return true;\n    }\n    if (a === 48) {\n        return\
    \ true;\n    }\n    if (a === 49) {\n        return true;\n    }\n    if (a ===\
    \ 50) {\n        return true;\n    }\n    if (a === 51) {\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfqnuy83y.ts(183,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return iscube(a\
    \ / 2);\n    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpos1zwq0h.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpos1zwq0h.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) {\n     \
    \   return true;\n    }\n    if (a === 1) {\n        return true;\n    }\n   \
    \ if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n        return\
    \ true;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if (a ===\
    \ 5) {\n        return true;\n    }\n    if (a === 6) {\n        return true;\n\
    \    }\n    if (a === 7) {\n        return true;\n    }\n    if (a === 8) {\n\
    \        return true;\n    }\n    if (a === 9) {\n        return true;\n    }\n\
    \    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n     \
    \   return true;\n    }\n    if (a === 12) {\n        return true;\n    }\n  \
    \  if (a === 13) {\n        return true;\n    }\n    if (a === 14) {\n       \
    \ return true;\n    }\n    if (a === 15) {\n        return true;\n    }\n    if\
    \ (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n        return\
    \ true;\n    }\n    if (a === 18) {\n        return true;\n    }\n    if (a ===\
    \ 19) {\n        return true;\n    }\n    if (a === 20) {\n        return true;\n\
    \    }\n    if (a === 21) {\n        return true;\n    }\n    if (a === 22) {\n\
    \        return true;\n    }\n    if (a === 23) {\n        return true;\n    }\n\
    \    if (a === 24) {\n        return true;\n    }\n    if (a === 25) {\n     \
    \   return true;\n    }\n    if (a === 26) {\n        return true;\n    }\n  \
    \  if (a === 27) {\n        return true;\n    }\n    if (a === 28) {\n       \
    \ return true;\n    }\n    if (a === 29) {\n        return true;\n    }\n    if\
    \ (a === 30) {\n        return true;\n    }\n    if (a === 31) {\n        return\
    \ true;\n    }\n    if (a === 32) {\n        return true;\n    }\n    if (a ===\
    \ 33) {\n        return true;\n    }\n    if (a === 34) {\n        return true;\n\
    \    }\n    if (a === 35) {\n        return true;\n    }\n    if (a === 36) {\n\
    \        return true;\n    }\n    if (a === 37) {\n        return true;\n    }\n\
    \    if (a === 38) {\n        return true;\n    }\n    if (a === 39) {\n     \
    \   return true;\n    }\n    if (a === 40) {\n        return true;\n    }\n  \
    \  if (a === 41) {\n        return true;\n    }\n    if (a === 42) {\n       \
    \ return true;\n    }\n    if (a === 43) {\n        return true;\n    }\n    if\
    \ (a === 44) {\n        return true;\n    }\n    if (a === 45) {\n        return\
    \ true;\n    }\n    if (a === 46) {\n        return true;\n    }\n    if (a ===\
    \ 47) {\n        return true;\n    }\n    if (a === 48) {\n        return true;\n\
    \    }\n    if (a === 49) {\n        return true;\n    }\n    if (a === 50) {\n\
    \        return true;\n    }\n    if (a === 51) {\n        return true;\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz89xdr5a.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0) {\n    return\
    \ true;\n  }\n  if (a === 1) {\n    return false;\n  }\n  if (a === 2) {\n   \
    \ return true;\n  }\n  if (a === 3) {\n    return false;\n  }\n  if (a === 4)\
    \ {\n    return true;\n  }\n  if (a === 5) {\n    return false;\n  }\n  if (a\
    \ === 6) {\n    return true;\n  }\n  if (a === 7) {\n    return false;\n  }\n\
    \  if (a === 8) {\n    return true;\n  }\n  if (a === 9) {\n    return false;\n\
    \  }\n  if (a === 10) {\n    return true;\n  }\n  if (a === 11) {\n    return\
    \ false;\n  }\n  if (a === 12) {\n    return true;\n  }\n  if (a === 13) {\n \
    \   return false;\n  }\n  if (a === 14) {\n    return true;\n  }\n  if (a ===\
    \ 15) {\n    return false;\n  }\n  if (a === 16) {\n    return true;\n  }\n  if\
    \ (a === 17) {\n    return false;\n  }\n  if (a === 18) {\n    return true;\n\
    \  }\n  if (a === 19) {\n    return false;\n  }\n  if (a === 20) {\n    return\
    \ true;\n  }\n  if (a === 21) {\n    return false;\n  }\n  if (a === 22) {\n \
    \   return true;\n  }\n  if (a === 23) {\n    return false;\n  }\n  if (a ===\
    \ 24) {\n    return true;\n  }\n  if (a === 25) {\n    return false;\n  }\n  if\
    \ (a === 26) {\n    return true;\n  }\n  if (a === 27) {\n    return false;\n\
    \  }\n  if (a === 28) {\n    return true;\n  }\n  if (a === 29) {\n    return\
    \ false;\n  }\n  if (a === 30) {\n    return true;\n  }\n  if (a === 31) {\n \
    \   return false;\n  }\n  if (a === 32) {\n    return true;\n  }\n  if (a ===\
    \ 33) {\n    return false;\n  }\n  if (a === 34) {\n    return true;\n  }\n  if\
    \ (a === 35) {\n    return false;\n  }\n  if (a === 36) {\n    return true;\n\
    \  }\n  if (a === 37) {\n    return false;\n  }\n  if (a === 38) {\n    return\
    \ true;\n  }\n  if (a === 39) {\n    return false;\n  }\n  if (a === 40) {\n \
    \   return true;\n  }\n  if (a === 41) {\n    return false;\n  }\n  if (a ===\
    \ 42) {\n    return true;\n  }\n  if (a === 43) {\n    return false;\n  }\n  if\
    \ (a === 44) {\n    return true;\n  }\n  if (a === 45) {\n    return false;\n\
    \  }\n  if (a === 46) {\n    return true;\n  }\n  if (a === 47) {\n    return\
    \ false;\n  }\n  if (a === 48) {\n    return true;\n  }\n  if (a === 49) {\n \
    \   return false;\n  }\n  if (a === 50) {\n    return true;\n  }\n  if (a ===\
    \ 51) {\n    return false;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy0f_nkds.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0) return true;\n\
    \  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === 3) return\
    \ true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a ===\
    \ 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n\
    \  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return\
    \ true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a ===\
    \ 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n\
    \  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return\
    \ true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a ===\
    \ 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n\
    \  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return\
    \ true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a ===\
    \ 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n\
    \  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return\
    \ true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a ===\
    \ 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n\
    \  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return\
    \ true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a ===\
    \ 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n\
    \  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return\
    \ true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a ===\
    \ 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n\
    \  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return\
    \ true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a ===\
    \ 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n\
    \  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return\
    \ true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a ===\
    \ 70) return true;\n  if (a === 71) return true;\n  if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4x2vb_8r.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmp4x2vb_8r.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return iscube(a\
    \ / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cgeycpg.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0cgeycpg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738507
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1\
    \ || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8\
    \ || a === 9 || a === 10) {\n        return true;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9o4nq4ru.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9o4nq4ru.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return isCube(a);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppgw9xh_v.ts(12,12): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0 || a === 1)\
    \ {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  if\
    \ (a % 3 === 0) {\n    return true;\n  }\n  if (a % 5 === 0) {\n    return false;\n\
    \  }\n  if (a % 7 === 0) {\n    return true;\n  }\n  if (a % 9 === 0) {\n    return\
    \ false;\n  }\n  if (a % 11 === 0) {\n    return true;\n  }\n  if (a % 13 ===\
    \ 0) {\n    return false;\n  }\n  if (a % 15 === 0) {\n    return true;\n  }\n\
    \  if (a % 17 === 0) {\n    return false;\n  }\n  if (a % 19 === 0) {\n    return\
    \ true;\n  }\n  if (a % 21 === 0) {\n    return false;\n  }\n  if (a % 23 ===\
    \ 0) {\n    return true;\n  }\n  if (a % 25 === 0) {\n    return false;\n  }\n\
    \  if (a % 27 === 0) {\n    return true;\n  }\n  if (a % 29 === 0) {\n    return\
    \ false;\n  }\n  if (a % 31 === 0) {\n    return true;\n  }\n  if (a % 33 ===\
    \ 0) {\n    return false;\n  }\n  if (a % 35 === 0) {\n    return true;\n  }\n\
    \  if (a % 37 === 0) {\n    return false;\n  }\n  if (a % 39 === 0) {\n    return\
    \ true;\n  }\n  if (a % 41 === 0) {\n    return false;\n  }\n  if (a % 43 ===\
    \ 0) {\n    return true;\n  }\n  if (a % 45 === 0) {\n    return false;\n  }\n\
    \  if (a % 47 === 0) {\n    return true;\n  }\n  if (a % 49 === 0) {\n    return\
    \ false;\n  }\n  if (a % 51 === 0) {\n    return true;\n  }\n  if (a % 53 ===\
    \ 0) {\n    return false;\n  }\n  if (a % 55 === 0) {\n    return true;\n  }\n\
    \  if (a % 57 === 0) {\n    return false;\n  }\n  if (a % 59 === 0) {\n    return\
    \ true;\n  }\n  if (a % 61 === 0) {\n    return false;\n  }\n  if (a % 63 ===\
    \ 0) {\n    return true;\n  }\n  if (a % 65 === 0) {\n    return false;\n  }\n\
    \  if (a % 67 === 0) {\n    return true;\n  }\n  if (a % 69 === 0) {\n    return\
    \ false;\n  }\n  if (a % 71 === 0) {\n    return true;\n  }\n  if (a % 73 ===\
    \ 0) {\n    return false;\n  }\n  if (a % 75 === 0) {\n    return true;\n  }\n\
    \  if (a % 77 === 0) {\n    return false;\n  }\n  if (a % 79 === 0) {\n    return\
    \ true;\n  }\n  if (a % 81 === 0) {\n    return false;\n  }\n  if (a % 83 ===\
    \ 0) {\n    return true;\n  }\n  if (a % 85 === 0) {\n    return false;\n  }\n\
    \  if (a % 87 === 0) {\n    return true;\n  }\n  if (a % 89 === 0) {\n    return\
    \ false;\n  }\n  if (a % 91 === 0) {\n    return true;\n  }\n  if (a % 93 ===\
    \ 0) {\n    return false;\n  }\n  if (a % 95 === 0) {\n    return true;\n  }\n\
    \  if (a % 97 === 0) {\n    return false;\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqky0jrg1.ts(178,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1\
    \ || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8\
    \ || a === 9 || a === 10) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_1fckiid.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_1fckiid.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0 || a === 1)\
    \ {\n    return true;\n  }\n  if (a === -1) {\n    return false;\n  }\n  if (a\
    \ === 2) {\n    return true;\n  }\n  if (a === -2) {\n    return false;\n  }\n\
    \  if (a === 3) {\n    return true;\n  }\n  if (a === -3) {\n    return false;\n\
    \  }\n  if (a === 4) {\n    return true;\n  }\n  if (a === -4) {\n    return false;\n\
    \  }\n  if (a === 5) {\n    return true;\n  }\n  if (a === -5) {\n    return false;\n\
    \  }\n  if (a === 6) {\n    return true;\n  }\n  if (a === -6) {\n    return false;\n\
    \  }\n  if (a === 7) {\n    return true;\n  }\n  if (a === -7) {\n    return false;\n\
    \  }\n  if (a === 8) {\n    return true;\n  }\n  if (a === -8) {\n    return false;\n\
    \  }\n  if (a === 9) {\n    return true;\n  }\n  if (a === -9) {\n    return false;\n\
    \  }\n  if (a === 10) {\n    return true;\n  }\n  if (a === -10) {\n    return\
    \ false;\n  }\n  if (a === 11) {\n    return true;\n  }\n  if (a === -11) {\n\
    \    return false;\n  }\n  if (a === 12) {\n    return true;\n  }\n  if (a ===\
    \ -12) {\n    return false;\n  }\n  if (a === 13) {\n    return true;\n  }\n \
    \ if (a === -13) {\n    return false;\n  }\n  if (a === 14) {\n    return true;\n\
    \  }\n  if (a === -14) {\n    return false;\n  }\n  if (a === 15) {\n    return\
    \ true;\n  }\n  if (a === -15) {\n    return false;\n  }\n  if (a === 16) {\n\
    \    return true;\n  }\n  if (a === -16) {\n    return false;\n  }\n  if (a ===\
    \ 17) {\n    return true;\n  }\n  if (a === -17) {\n    return false;\n  }\n \
    \ if (a === 18) {\n    return true;\n  }\n  if (a === -18) {\n    return false;\n\
    \  }\n  if (a === 19) {\n    return true;\n  }\n  if (a === -19) {\n    return\
    \ false;\n  }\n  if (a === 20) {\n    return true;\n  }\n  if (a === -20) {\n\
    \    return false;\n  }\n  if (a === 21) {\n    return true;\n  }\n  if (a ===\
    \ -21) {\n    return false;\n  }\n  if (a === 22) {\n    return true;\n  }\n \
    \ if (a === -22) {\n    return false;\n  }\n  if (a === 23) {\n    return true;\n\
    \  }\n  if (a === -23) {\n    return false;\n  }\n  if (a === 24) {\n    return\
    \ true;\n  }\n  if (a === -24) {\n    return false;\n  }\n  if (a === 25) {\n\
    \    return true;\n  }\n  if (a === -25) {\n    return false;\n  }\n  if (a ===\
    \ 26) {\n    return true;\n  }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa4ttn80u.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0) {\n    return\
    \ true;\n  }\n  if (a === 1) {\n    return false;\n  }\n  if (a === 2) {\n   \
    \ return true;\n  }\n  if (a === 3) {\n    return true;\n  }\n  if (a === 4) {\n\
    \    return false;\n  }\n  if (a === 5) {\n    return true;\n  }\n  if (a ===\
    \ 6) {\n    return false;\n  }\n  if (a === 7) {\n    return true;\n  }\n  if\
    \ (a === 8) {\n    return false;\n  }\n  if (a === 9) {\n    return true;\n  }\n\
    \  if (a === 10) {\n    return false;\n  }\n  if (a === 11) {\n    return true;\n\
    \  }\n  if (a === 12) {\n    return false;\n  }\n  if (a === 13) {\n    return\
    \ true;\n  }\n  if (a === 14) {\n    return false;\n  }\n  if (a === 15) {\n \
    \   return true;\n  }\n  if (a === 16) {\n    return false;\n  }\n  if (a ===\
    \ 17) {\n    return true;\n  }\n  if (a === 18) {\n    return false;\n  }\n  if\
    \ (a === 19) {\n    return true;\n  }\n  if (a === 20) {\n    return false;\n\
    \  }\n  if (a === 21) {\n    return true;\n  }\n  if (a === 22) {\n    return\
    \ false;\n  }\n  if (a === 23) {\n    return true;\n  }\n  if (a === 24) {\n \
    \   return false;\n  }\n  if (a === 25) {\n    return true;\n  }\n  if (a ===\
    \ 26) {\n    return false;\n  }\n  if (a === 27) {\n    return true;\n  }\n  if\
    \ (a === 28) {\n    return false;\n  }\n  if (a === 29) {\n    return true;\n\
    \  }\n  if (a === 30) {\n    return false;\n  }\n  if (a === 31) {\n    return\
    \ true;\n  }\n  if (a === 32) {\n    return false;\n  }\n  if (a === 33) {\n \
    \   return true;\n  }\n  if (a === 34) {\n    return false;\n  }\n  if (a ===\
    \ 35) {\n    return true;\n  }\n  if (a === 36) {\n    return false;\n  }\n  if\
    \ (a === 37) {\n    return true;\n  }\n  if (a === 38) {\n    return false;\n\
    \  }\n  if (a === 39) {\n    return true;\n  }\n  if (a === 40) {\n    return\
    \ false;\n  }\n  if (a === 41) {\n    return true;\n  }\n  if (a === 42) {\n \
    \   return false;\n  }\n  if (a === 43) {\n    return true;\n  }\n  if (a ===\
    \ 44) {\n    return false;\n  }\n  if (a === 45) {\n    return true;\n  }\n  if\
    \ (a === 46) {\n    return false;\n  }\n  if (a === 47) {\n    return true;\n\
    \  }\n  if (a === 48) {\n    return false;\n  }\n  if (a === 49) {\n    return\
    \ true;\n  }\n  if (a === 50) {\n    return false;\n  }\n  if (a === 51) {\n \
    \   return true;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm2z447db.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0 || a === 1)\
    \ {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return iscube(a / 2);\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpp3bgus51.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp3bgus51.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747769
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a % 3 === 0 && a % 5 === 0 && a % 7 === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1537y3f0.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1537y3f0.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return isCube(a);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5e81rll.ts(12,10): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0) return true;\n\
    \  if (a === 1) return true;\n  if (a === 2) return true;\n  if (a === 3) return\
    \ true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a ===\
    \ 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n\
    \  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return\
    \ true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a ===\
    \ 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n\
    \  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return\
    \ true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a ===\
    \ 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n\
    \  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return\
    \ true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a ===\
    \ 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n\
    \  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return\
    \ true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a ===\
    \ 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n\
    \  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return\
    \ true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a ===\
    \ 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n\
    \  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return\
    \ true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a ===\
    \ 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n\
    \  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return\
    \ true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a ===\
    \ 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n\
    \  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return\
    \ true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a ===\
    \ 70) return true;\n  if (a === 71) return true;\n  if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp09b9_65h.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmp09b9_65h.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1\
    \ || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8\
    \ || a === 9 || a === 10) {\n        return true;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9o4nq4ru.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9o4nq4ru.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0) {\n    return\
    \ true;\n  }\n  if (a === 1) {\n    return false;\n  }\n  if (a === 2) {\n   \
    \ return true;\n  }\n  if (a === 3) {\n    return true;\n  }\n  if (a === 4) {\n\
    \    return false;\n  }\n  if (a === 5) {\n    return true;\n  }\n  if (a ===\
    \ 6) {\n    return false;\n  }\n  if (a === 7) {\n    return true;\n  }\n  if\
    \ (a === 8) {\n    return false;\n  }\n  if (a === 9) {\n    return true;\n  }\n\
    \  if (a === 10) {\n    return false;\n  }\n  if (a === 11) {\n    return true;\n\
    \  }\n  if (a === 12) {\n    return false;\n  }\n  if (a === 13) {\n    return\
    \ true;\n  }\n  if (a === 14) {\n    return false;\n  }\n  if (a === 15) {\n \
    \   return true;\n  }\n  if (a === 16) {\n    return false;\n  }\n  if (a ===\
    \ 17) {\n    return true;\n  }\n  if (a === 18) {\n    return false;\n  }\n  if\
    \ (a === 19) {\n    return true;\n  }\n  if (a === 20) {\n    return false;\n\
    \  }\n  if (a === 21) {\n    return true;\n  }\n  if (a === 22) {\n    return\
    \ false;\n  }\n  if (a === 23) {\n    return true;\n  }\n  if (a === 24) {\n \
    \   return false;\n  }\n  if (a === 25) {\n    return true;\n  }\n  if (a ===\
    \ 26) {\n    return false;\n  }\n  if (a === 27) {\n    return true;\n  }\n  if\
    \ (a === 28) {\n    return false;\n  }\n  if (a === 29) {\n    return true;\n\
    \  }\n  if (a === 30) {\n    return false;\n  }\n  if (a === 31) {\n    return\
    \ true;\n  }\n  if (a === 32) {\n    return false;\n  }\n  if (a === 33) {\n \
    \   return true;\n  }\n  if (a === 34) {\n    return false;\n  }\n  if (a ===\
    \ 35) {\n    return true;\n  }\n  if (a === 36) {\n    return false;\n  }\n  if\
    \ (a === 37) {\n    return true;\n  }\n  if (a === 38) {\n    return false;\n\
    \  }\n  if (a === 39) {\n    return true;\n  }\n  if (a === 40) {\n    return\
    \ false;\n  }\n  if (a === 41) {\n    return true;\n  }\n  if (a === 42) {\n \
    \   return false;\n  }\n  if (a === 43) {\n    return true;\n  }\n  if (a ===\
    \ 44) {\n    return false;\n  }\n  if (a === 45) {\n    return true;\n  }\n  if\
    \ (a === 46) {\n    return false;\n  }\n  if (a === 47) {\n    return true;\n\
    \  }\n  if (a === 48) {\n    return false;\n  }\n  if (a === 49) {\n    return\
    \ true;\n  }\n  if (a === 50) {\n    return false;\n  }\n  if (a === 51) {\n \
    \   return true;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm2z447db.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) {\n     \
    \   return true;\n    }\n    if (a === 1) {\n        return false;\n    }\n  \
    \  if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n        return\
    \ false;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if (a ===\
    \ 5) {\n        return false;\n    }\n    if (a === 6) {\n        return true;\n\
    \    }\n    if (a === 7) {\n        return false;\n    }\n    if (a === 8) {\n\
    \        return true;\n    }\n    if (a === 9) {\n        return false;\n    }\n\
    \    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n     \
    \   return false;\n    }\n    if (a === 12) {\n        return true;\n    }\n \
    \   if (a === 13) {\n        return false;\n    }\n    if (a === 14) {\n     \
    \   return true;\n    }\n    if (a === 15) {\n        return false;\n    }\n \
    \   if (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n      \
    \  return false;\n    }\n    if (a === 18) {\n        return true;\n    }\n  \
    \  if (a === 19) {\n        return false;\n    }\n    if (a === 20) {\n      \
    \  return true;\n    }\n    if (a === 21) {\n        return false;\n    }\n  \
    \  if (a === 22) {\n        return true;\n    }\n    if (a === 23) {\n       \
    \ return false;\n    }\n    if (a === 24) {\n        return true;\n    }\n   \
    \ if (a === 25) {\n        return false;\n    }\n    if (a === 26) {\n       \
    \ return true;\n    }\n    if (a === 27) {\n        return false;\n    }\n   \
    \ if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n        return\
    \ false;\n    }\n    if (a === 30) {\n        return true;\n    }\n    if (a ===\
    \ 31) {\n        return false;\n    }\n    if (a === 32) {\n        return true;\n\
    \    }\n    if (a === 33) {\n        return false;\n    }\n    if (a === 34) {\n\
    \        return true;\n    }\n    if (a === 35) {\n        return false;\n   \
    \ }\n    if (a === 36) {\n        return true;\n    }\n    if (a === 37) {\n \
    \       return false;\n    }\n    if (a === 38) {\n        return true;\n    }\n\
    \    if (a === 39) {\n        return false;\n    }\n    if (a === 40) {\n    \
    \    return true;\n    }\n    if (a === 41) {\n        return false;\n    }\n\
    \    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n     \
    \   return false;\n    }\n    if (a === 44) {\n        return true;\n    }\n \
    \   if (a === 45) {\n        return false;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return false;\n    }\n \
    \   if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n      \
    \  return false;\n    }\n    if (a === 50) {\n        return true;\n    }\n  \
    \  if (a === 51) {\n        return false;\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp12pz2pw9.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0 || a === 1)\
    \ {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  if\
    \ (a % 3 === 0) {\n    return true;\n  }\n  if (a % 5 === 0) {\n    return false;\n\
    \  }\n  if (a % 7 === 0) {\n    return true;\n  }\n  if (a % 9 === 0) {\n    return\
    \ false;\n  }\n  if (a % 11 === 0) {\n    return true;\n  }\n  if (a % 13 ===\
    \ 0) {\n    return false;\n  }\n  if (a % 15 === 0) {\n    return true;\n  }\n\
    \  if (a % 17 === 0) {\n    return false;\n  }\n  if (a % 19 === 0) {\n    return\
    \ true;\n  }\n  if (a % 21 === 0) {\n    return false;\n  }\n  if (a % 23 ===\
    \ 0) {\n    return true;\n  }\n  if (a % 25 === 0) {\n    return false;\n  }\n\
    \  if (a % 27 === 0) {\n    return true;\n  }\n  if (a % 29 === 0) {\n    return\
    \ false;\n  }\n  if (a % 31 === 0) {\n    return true;\n  }\n  if (a % 33 ===\
    \ 0) {\n    return false;\n  }\n  if (a % 35 === 0) {\n    return true;\n  }\n\
    \  if (a % 37 === 0) {\n    return false;\n  }\n  if (a % 39 === 0) {\n    return\
    \ true;\n  }\n  if (a % 41 === 0) {\n    return false;\n  }\n  if (a % 43 ===\
    \ 0) {\n    return true;\n  }\n  if (a % 45 === 0) {\n    return false;\n  }\n\
    \  if (a % 47 === 0) {\n    return true;\n  }\n  if (a % 49 === 0) {\n    return\
    \ false;\n  }\n  if (a % 51 === 0) {\n    return true;\n  }\n  if (a % 53 ===\
    \ 0) {\n    return false;\n  }\n  if (a % 55 === 0) {\n    return true;\n  }\n\
    \  if (a % 57 === 0) {\n    return false;\n  }\n  if (a % 59 === 0) {\n    return\
    \ true;\n  }\n  if (a % 61 === 0) {\n    return false;\n  }\n  if (a % 63 ===\
    \ 0) {\n    return true;\n  }\n  if (a % 65 === 0) {\n    return false;\n  }\n\
    \  if (a % 67 === 0) {\n    return true;\n  }\n  if (a % 69 === 0) {\n    return\
    \ false;\n  }\n  if (a % 71 === 0) {\n    return true;\n  }\n  if (a % 73 ===\
    \ 0) {\n    return false;\n  }\n  if (a % 75 === 0) {\n    return true;\n  }\n\
    \  if (a % 77 === 0) {\n    return false;\n  }\n  if (a % 79 === 0) {\n    return\
    \ true;\n  }\n  if (a % 81 === 0) {\n    return false;\n  }\n  if (a % 83 ===\
    \ 0) {\n    return true;\n  }\n  if (a % 85 === 0) {\n    return false;\n  }\n\
    \  if (a % 87 === 0) {\n    return true;\n  }\n  if (a % 89 === 0) {\n    return\
    \ false;\n  }\n  if (a % 91 === 0) {\n    return true;\n  }\n  if (a % 93 ===\
    \ 0) {\n    return false;\n  }\n  if (a % 95 === 0) {\n    return true;\n  }\n\
    \  if (a % 97 === 0) {\n    return false;\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqrqnq8u1.ts(177,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1\
    \ || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8\
    \ || a === 9 || a === 10) {\n        return true;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9o4nq4ru.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9o4nq4ru.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return iscube(a\
    \ / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cgeycpg.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0cgeycpg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738507
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) {\n     \
    \   return true;\n    }\n    if (a === 1) {\n        return false;\n    }\n  \
    \  if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n        return\
    \ false;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if (a ===\
    \ 5) {\n        return false;\n    }\n    if (a === 6) {\n        return true;\n\
    \    }\n    if (a === 7) {\n        return false;\n    }\n    if (a === 8) {\n\
    \        return true;\n    }\n    if (a === 9) {\n        return false;\n    }\n\
    \    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n     \
    \   return false;\n    }\n    if (a === 12) {\n        return true;\n    }\n \
    \   if (a === 13) {\n        return false;\n    }\n    if (a === 14) {\n     \
    \   return true;\n    }\n    if (a === 15) {\n        return false;\n    }\n \
    \   if (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n      \
    \  return false;\n    }\n    if (a === 18) {\n        return true;\n    }\n  \
    \  if (a === 19) {\n        return false;\n    }\n    if (a === 20) {\n      \
    \  return true;\n    }\n    if (a === 21) {\n        return false;\n    }\n  \
    \  if (a === 22) {\n        return true;\n    }\n    if (a === 23) {\n       \
    \ return false;\n    }\n    if (a === 24) {\n        return true;\n    }\n   \
    \ if (a === 25) {\n        return false;\n    }\n    if (a === 26) {\n       \
    \ return true;\n    }\n    if (a === 27) {\n        return false;\n    }\n   \
    \ if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n        return\
    \ false;\n    }\n    if (a === 30) {\n        return true;\n    }\n    if (a ===\
    \ 31) {\n        return false;\n    }\n    if (a === 32) {\n        return true;\n\
    \    }\n    if (a === 33) {\n        return false;\n    }\n    if (a === 34) {\n\
    \        return true;\n    }\n    if (a === 35) {\n        return false;\n   \
    \ }\n    if (a === 36) {\n        return true;\n    }\n    if (a === 37) {\n \
    \       return false;\n    }\n    if (a === 38) {\n        return true;\n    }\n\
    \    if (a === 39) {\n        return false;\n    }\n    if (a === 40) {\n    \
    \    return true;\n    }\n    if (a === 41) {\n        return false;\n    }\n\
    \    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n     \
    \   return false;\n    }\n    if (a === 44) {\n        return true;\n    }\n \
    \   if (a === 45) {\n        return false;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return false;\n    }\n \
    \   if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n      \
    \  return false;\n    }\n    if (a === 50) {\n        return true;\n    }\n  \
    \  if (a === 51) {\n        return false;\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp12pz2pw9.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) return true;\n\
    \    if (a === 1) return false;\n    if (a === 2) return true;\n    if (a ===\
    \ 3) return true;\n    if (a === 4) return true;\n    if (a === 5) return true;\n\
    \    if (a === 6) return true;\n    if (a === 7) return true;\n    if (a === 8)\
    \ return true;\n    if (a === 9) return true;\n    if (a === 10) return true;\n\
    \    if (a === 11) return true;\n    if (a === 12) return true;\n    if (a ===\
    \ 13) return true;\n    if (a === 14) return true;\n    if (a === 15) return true;\n\
    \    if (a === 16) return true;\n    if (a === 17) return true;\n    if (a ===\
    \ 18) return true;\n    if (a === 19) return true;\n    if (a === 20) return true;\n\
    \    if (a === 21) return true;\n    if (a === 22) return true;\n    if (a ===\
    \ 23) return true;\n    if (a === 24) return true;\n    if (a === 25) return true;\n\
    \    if (a === 26) return true;\n    if (a === 27) return true;\n    if (a ===\
    \ 28) return true;\n    if (a === 29) return true;\n    if (a === 30) return true;\n\
    \    if (a === 31) return true;\n    if (a === 32) return true;\n    if (a ===\
    \ 33) return true;\n    if (a === 34) return true;\n    if (a === 35) return true;\n\
    \    if (a === 36) return true;\n    if (a === 37) return true;\n    if (a ===\
    \ 38) return true;\n    if (a === 39) return true;\n    if (a === 40) return true;\n\
    \    if (a === 41) return true;\n    if (a === 42) return true;\n    if (a ===\
    \ 43) return true;\n    if (a === 44) return true;\n    if (a === 45) return true;\n\
    \    if (a === 46) return true;\n    if (a === 47) return true;\n    if (a ===\
    \ 48) return true;\n    if (a === 49) return true;\n    if (a === 50) return true;\n\
    \    if (a === 51) return true;\n    if (a === 52) return true;\n    if (a ===\
    \ 53) return true;\n    if (a === 54) return true;\n    if (a === 55) return true;\n\
    \    if (a === 56) return true;\n    if (a === 57) return true;\n    if (a ===\
    \ 58) return true;\n    if (a === 59) return true;\n    if (a === 60) return true;\n\
    \    if (a === 61) return true;\n    if (a === 62) return true;\n    if (a ===\
    \ 63) return true;\n    if (a === 64) return true;\n    if (a === 65) return true;\n\
    \    if (a === 66) return true;\n    if (a === 67) return true;\n    if (a ===\
    \ 68) return true;\n    if (a === 69) return true;\n    if (a === 70) return true;\n\
    \    if (a === 71) return true;\n    if (a === \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl4cx2tmz.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpl4cx2tmz.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a < 0 || a > 180) {\n\
    \    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_29z80ls.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_29z80ls.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1\
    \ || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8\
    \ || a === 9 || a === 10) {\n        return true;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9o4nq4ru.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9o4nq4ru.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return isCube(a);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppgw9xh_v.ts(12,12): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) {\n     \
    \   return true;\n    }\n    if (a === 1) {\n        return true;\n    }\n   \
    \ if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n        return\
    \ true;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if (a ===\
    \ 5) {\n        return true;\n    }\n    if (a === 6) {\n        return true;\n\
    \    }\n    if (a === 7) {\n        return true;\n    }\n    if (a === 8) {\n\
    \        return true;\n    }\n    if (a === 9) {\n        return true;\n    }\n\
    \    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n     \
    \   return true;\n    }\n    if (a === 12) {\n        return true;\n    }\n  \
    \  if (a === 13) {\n        return true;\n    }\n    if (a === 14) {\n       \
    \ return true;\n    }\n    if (a === 15) {\n        return true;\n    }\n    if\
    \ (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n        return\
    \ true;\n    }\n    if (a === 18) {\n        return true;\n    }\n    if (a ===\
    \ 19) {\n        return true;\n    }\n    if (a === 20) {\n        return true;\n\
    \    }\n    if (a === 21) {\n        return true;\n    }\n    if (a === 22) {\n\
    \        return true;\n    }\n    if (a === 23) {\n        return true;\n    }\n\
    \    if (a === 24) {\n        return true;\n    }\n    if (a === 25) {\n     \
    \   return true;\n    }\n    if (a === 26) {\n        return true;\n    }\n  \
    \  if (a === 27) {\n        return true;\n    }\n    if (a === 28) {\n       \
    \ return true;\n    }\n    if (a === 29) {\n        return true;\n    }\n    if\
    \ (a === 30) {\n        return true;\n    }\n    if (a === 31) {\n        return\
    \ true;\n    }\n    if (a === 32) {\n        return true;\n    }\n    if (a ===\
    \ 33) {\n        return true;\n    }\n    if (a === 34) {\n        return true;\n\
    \    }\n    if (a === 35) {\n        return true;\n    }\n    if (a === 36) {\n\
    \        return true;\n    }\n    if (a === 37) {\n        return true;\n    }\n\
    \    if (a === 38) {\n        return true;\n    }\n    if (a === 39) {\n     \
    \   return true;\n    }\n    if (a === 40) {\n        return true;\n    }\n  \
    \  if (a === 41) {\n        return true;\n    }\n    if (a === 42) {\n       \
    \ return true;\n    }\n    if (a === 43) {\n        return true;\n    }\n    if\
    \ (a === 44) {\n        return true;\n    }\n    if (a === 45) {\n        return\
    \ true;\n    }\n    if (a === 46) {\n        return true;\n    }\n    if (a ===\
    \ 47) {\n        return true;\n    }\n    if (a === 48) {\n        return true;\n\
    \    }\n    if (a === 49) {\n        return true;\n    }\n    if (a === 50) {\n\
    \        return true;\n    }\n    if (a === 51) {\n        return true;\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz89xdr5a.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    let cube = a / 2;\n    while (cube > 1) {\n        if (cube % 2 ===\
    \ 0) {\n            return false;\n        }\n        cube = cube / 2;\n    }\n\
    \    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxg7kcx00.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxg7kcx00.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747772
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) {\n     \
    \   return true;\n    }\n    if (a === 1) {\n        return true;\n    }\n   \
    \ if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n        return\
    \ true;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if (a ===\
    \ 5) {\n        return true;\n    }\n    if (a === 6) {\n        return true;\n\
    \    }\n    if (a === 7) {\n        return true;\n    }\n    if (a === 8) {\n\
    \        return true;\n    }\n    if (a === 9) {\n        return true;\n    }\n\
    \    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n     \
    \   return true;\n    }\n    if (a === 12) {\n        return true;\n    }\n  \
    \  if (a === 13) {\n        return true;\n    }\n    if (a === 14) {\n       \
    \ return true;\n    }\n    if (a === 15) {\n        return true;\n    }\n    if\
    \ (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n        return\
    \ true;\n    }\n    if (a === 18) {\n        return true;\n    }\n    if (a ===\
    \ 19) {\n        return true;\n    }\n    if (a === 20) {\n        return true;\n\
    \    }\n    if (a === 21) {\n        return true;\n    }\n    if (a === 22) {\n\
    \        return true;\n    }\n    if (a === 23) {\n        return true;\n    }\n\
    \    if (a === 24) {\n        return true;\n    }\n    if (a === 25) {\n     \
    \   return true;\n    }\n    if (a === 26) {\n        return true;\n    }\n  \
    \  if (a === 27) {\n        return true;\n    }\n    if (a === 28) {\n       \
    \ return true;\n    }\n    if (a === 29) {\n        return true;\n    }\n    if\
    \ (a === 30) {\n        return true;\n    }\n    if (a === 31) {\n        return\
    \ true;\n    }\n    if (a === 32) {\n        return true;\n    }\n    if (a ===\
    \ 33) {\n        return true;\n    }\n    if (a === 34) {\n        return true;\n\
    \    }\n    if (a === 35) {\n        return true;\n    }\n    if (a === 36) {\n\
    \        return true;\n    }\n    if (a === 37) {\n        return true;\n    }\n\
    \    if (a === 38) {\n        return true;\n    }\n    if (a === 39) {\n     \
    \   return true;\n    }\n    if (a === 40) {\n        return true;\n    }\n  \
    \  if (a === 41) {\n        return true;\n    }\n    if (a === 42) {\n       \
    \ return true;\n    }\n    if (a === 43) {\n        return true;\n    }\n    if\
    \ (a === 44) {\n        return true;\n    }\n    if (a === 45) {\n        return\
    \ true;\n    }\n    if (a === 46) {\n        return true;\n    }\n    if (a ===\
    \ 47) {\n        return true;\n    }\n    if (a === 48) {\n        return true;\n\
    \    }\n    if (a === 49) {\n        return true;\n    }\n    if (a === 50) {\n\
    \        return true;\n    }\n    if (a === 51) {\n        return true;\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz89xdr5a.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    let cube = a % 3;\n    if (cube === 0 || cube === 1) {\n        return\
    \ true;\n    }\n    if (cube % 2 === 0) {\n        return false;\n    }\n    let\
    \ cube2 = cube % 3;\n    if (cube2 === 0 || cube2 === 1) {\n        return true;\n\
    \    }\n    if (cube2 % 2 === 0) {\n        return false;\n    }\n    let cube3\
    \ = cube2 % 3;\n    if (cube3 === 0 || cube3 === 1) {\n        return true;\n\
    \    }\n    if (cube3 % 2 === 0) {\n        return false;\n    }\n    let cube4\
    \ = cube3 % 3;\n    if (cube4 === 0 || cube4 === 1) {\n        return true;\n\
    \    }\n    if (cube4 % 2 === 0) {\n        return false;\n    }\n    let cube5\
    \ = cube4 % 3;\n    if (cube5 === 0 || cube5 === 1) {\n        return true;\n\
    \    }\n    if (cube5 % 2 === 0) {\n        return false;\n    }\n    let cube6\
    \ = cube5 % 3;\n    if (cube6 === 0 || cube6 === 1) {\n        return true;\n\
    \    }\n    if (cube6 % 2 === 0) {\n        return false;\n    }\n    let cube7\
    \ = cube6 % 3;\n    if (cube7 === 0 || cube7 === 1) {\n        return true;\n\
    \    }\n    if (cube7 % 2 === 0) {\n        return false;\n    }\n    let cube8\
    \ = cube7 % 3;\n    if (cube8 === 0 || cube8 === 1) {\n        return true;\n\
    \    }\n    if (cube8 % 2 === 0) {\n        return false;\n    }\n    let cube9\
    \ = cube8 % 3;\n    if (cube9 === 0 || cube9 === 1) {\n        return true;\n\
    \    }\n    if (cube9 % 2 === 0) {\n        return false;\n    }\n    let cube10\
    \ = cube9 % 3;\n    if (cube10 === 0 || cube10 === 1) {\n        return true;\n\
    \    }\n    if (cube10 % 2 === 0) {\n        return false;\n    }\n    let cube11\
    \ = cube10 % 3;\n    if (cube11 === 0 || cube11 === 1) {\n        return true;\n\
    \    }\n    if (cube11 % 2 === 0) {\n        return false;\n    }\n    let cube12\
    \ = cube11 % 3;\n    if (cube12 === 0 || cube12 === 1) {\n        return true;\n\
    \    }\n    if (cube12 % 2 === 0) {\n        return false;\n    }\n    let cube13\
    \ = cube12 % 3;\n    if (cube13 === 0 || cube13 === 1) {\n        return true;\n\
    \    }\n    if (cube13 % 2 === 0) {\n        return false;\n    }\n    let cube14\
    \ = cube13 % 3;\n    if (cube14 === 0 || cube14 === 1) {\n        return true;\n\
    \    }\n    if (cube14 % 2 === 0) {\n        return false;\n    }\n    let cube15\
    \ = cube14 % 3;\n    if (cube15 === 0 || cube15 === 1) {\n        return true;\n\
    \    }\n    if (cube15 % \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp02rz8imo.ts(121,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmp02rz8imo.ts(137,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747772
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return iscube(a\
    \ / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cgeycpg.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0cgeycpg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738507
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) {\n     \
    \   return true;\n    }\n    if (a === 1) {\n        return true;\n    }\n   \
    \ if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n        return\
    \ true;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if (a ===\
    \ 5) {\n        return true;\n    }\n    if (a === 6) {\n        return true;\n\
    \    }\n    if (a === 7) {\n        return true;\n    }\n    if (a === 8) {\n\
    \        return true;\n    }\n    if (a === 9) {\n        return true;\n    }\n\
    \    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n     \
    \   return true;\n    }\n    if (a === 12) {\n        return true;\n    }\n  \
    \  if (a === 13) {\n        return true;\n    }\n    if (a === 14) {\n       \
    \ return true;\n    }\n    if (a === 15) {\n        return true;\n    }\n    if\
    \ (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n        return\
    \ true;\n    }\n    if (a === 18) {\n        return true;\n    }\n    if (a ===\
    \ 19) {\n        return true;\n    }\n    if (a === 20) {\n        return true;\n\
    \    }\n    if (a === 21) {\n        return true;\n    }\n    if (a === 22) {\n\
    \        return true;\n    }\n    if (a === 23) {\n        return true;\n    }\n\
    \    if (a === 24) {\n        return true;\n    }\n    if (a === 25) {\n     \
    \   return true;\n    }\n    if (a === 26) {\n        return true;\n    }\n  \
    \  if (a === 27) {\n        return true;\n    }\n    if (a === 28) {\n       \
    \ return true;\n    }\n    if (a === 29) {\n        return true;\n    }\n    if\
    \ (a === 30) {\n        return true;\n    }\n    if (a === 31) {\n        return\
    \ true;\n    }\n    if (a === 32) {\n        return true;\n    }\n    if (a ===\
    \ 33) {\n        return true;\n    }\n    if (a === 34) {\n        return true;\n\
    \    }\n    if (a === 35) {\n        return true;\n    }\n    if (a === 36) {\n\
    \        return true;\n    }\n    if (a === 37) {\n        return true;\n    }\n\
    \    if (a === 38) {\n        return true;\n    }\n    if (a === 39) {\n     \
    \   return true;\n    }\n    if (a === 40) {\n        return true;\n    }\n  \
    \  if (a === 41) {\n        return true;\n    }\n    if (a === 42) {\n       \
    \ return true;\n    }\n    if (a === 43) {\n        return true;\n    }\n    if\
    \ (a === 44) {\n        return true;\n    }\n    if (a === 45) {\n        return\
    \ true;\n    }\n    if (a === 46) {\n        return true;\n    }\n    if (a ===\
    \ 47) {\n        return true;\n    }\n    if (a === 48) {\n        return true;\n\
    \    }\n    if (a === 49) {\n        return true;\n    }\n    if (a === 50) {\n\
    \        return true;\n    }\n    if (a === 51) {\n        return true;\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz89xdr5a.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return a % 1 === 0 && a\
    \ >= 0 && a <= 180;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2pdo5xt0.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2pdo5xt0.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747772
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0 || a === 1)\
    \ {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  if\
    \ (a % 3 === 0) {\n    return true;\n  }\n  if (a % 5 === 0) {\n    return false;\n\
    \  }\n  if (a % 7 === 0) {\n    return true;\n  }\n  if (a % 11 === 0) {\n   \
    \ return false;\n  }\n  if (a % 13 === 0) {\n    return true;\n  }\n  if (a %\
    \ 17 === 0) {\n    return false;\n  }\n  if (a % 19 === 0) {\n    return true;\n\
    \  }\n  if (a % 23 === 0) {\n    return false;\n  }\n  if (a % 29 === 0) {\n \
    \   return true;\n  }\n  if (a % 37 === 0) {\n    return false;\n  }\n  if (a\
    \ % 43 === 0) {\n    return true;\n  }\n  if (a % 49 === 0) {\n    return false;\n\
    \  }\n  if (a % 53 === 0) {\n    return true;\n  }\n  if (a % 59 === 0) {\n  \
    \  return false;\n  }\n  if (a % 63 === 0) {\n    return true;\n  }\n  if (a %\
    \ 69 === 0) {\n    return false;\n  }\n  if (a % 73 === 0) {\n    return true;\n\
    \  }\n  if (a % 79 === 0) {\n    return false;\n  }\n  if (a % 83 === 0) {\n \
    \   return true;\n  }\n  if (a % 89 === 0) {\n    return false;\n  }\n  if (a\
    \ % 97 === 0) {\n    return true;\n  }\n  if (a % 103 === 0) {\n    return false;\n\
    \  }\n  if (a % 109 === 0) {\n    return true;\n  }\n  if (a % 113 === 0) {\n\
    \    return false;\n  }\n  if (a % 119 === 0) {\n    return true;\n  }\n  if (a\
    \ % 123 === 0) {\n    return false;\n  }\n  if (a % 129 === 0) {\n    return true;\n\
    \  }\n  if (a % 137 === 0) {\n    return false;\n  }\n  if (a % 143 === 0) {\n\
    \    return true;\n  }\n  if (a % 149 === 0) {\n    return false;\n  }\n  if (a\
    \ % 155 === 0) {\n    return true;\n  }\n  if (a % 161 === 0) {\n    return false;\n\
    \  }\n  if (a % 169 === 0) {\n    return true;\n  }\n  if (a % 175 === 0) {\n\
    \    return false;\n  }\n  if (a % 181 === 0) {\n    return true;\n  }\n  if (a\
    \ % 189 === 0) {\n    return false;\n  }\n  if (a % 195 === 0) {\n    return true;\n\
    \  }\n  if (a % 201 === 0) {\n    return false;\n  }\n  if (a % 209 === 0) {\n\
    \    return true;\n  }\n  if (a % 215 === 0) {\n    return false;\n  }\n  if (a\
    \ % 221 === 0) {\n    return true;\n  }\n  if (a % 229 === 0) {\n    return false;\n\
    \  }\n  if (a % 235 === 0) {\n    return true;\n  }\n  if (a % 241 === 0) {\n\
    \    return false;\n  }\n  if (a % 249 === 0) {\n    return true;\n  }\n  if (a\
    \ % 255 === 0) {\n    return false;\n  }\n  if (a % 261 === 0) {\n    return true;\n\
    \  }\n  if (a \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwha8n08u.ts(160,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpwha8n08u.ts(176,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747772
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) {\n     \
    \   return true;\n    }\n    if (a === 1) {\n        return true;\n    }\n   \
    \ if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n        return\
    \ true;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if (a ===\
    \ 5) {\n        return true;\n    }\n    if (a === 6) {\n        return true;\n\
    \    }\n    if (a === 7) {\n        return true;\n    }\n    if (a === 8) {\n\
    \        return true;\n    }\n    if (a === 9) {\n        return true;\n    }\n\
    \    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n     \
    \   return true;\n    }\n    if (a === 12) {\n        return true;\n    }\n  \
    \  if (a === 13) {\n        return true;\n    }\n    if (a === 14) {\n       \
    \ return true;\n    }\n    if (a === 15) {\n        return true;\n    }\n    if\
    \ (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n        return\
    \ true;\n    }\n    if (a === 18) {\n        return true;\n    }\n    if (a ===\
    \ 19) {\n        return true;\n    }\n    if (a === 20) {\n        return true;\n\
    \    }\n    if (a === 21) {\n        return true;\n    }\n    if (a === 22) {\n\
    \        return true;\n    }\n    if (a === 23) {\n        return true;\n    }\n\
    \    if (a === 24) {\n        return true;\n    }\n    if (a === 25) {\n     \
    \   return true;\n    }\n    if (a === 26) {\n        return true;\n    }\n  \
    \  if (a === 27) {\n        return true;\n    }\n    if (a === 28) {\n       \
    \ return true;\n    }\n    if (a === 29) {\n        return true;\n    }\n    if\
    \ (a === 30) {\n        return true;\n    }\n    if (a === 31) {\n        return\
    \ true;\n    }\n    if (a === 32) {\n        return true;\n    }\n    if (a ===\
    \ 33) {\n        return true;\n    }\n    if (a === 34) {\n        return true;\n\
    \    }\n    if (a === 35) {\n        return true;\n    }\n    if (a === 36) {\n\
    \        return true;\n    }\n    if (a === 37) {\n        return true;\n    }\n\
    \    if (a === 38) {\n        return true;\n    }\n    if (a === 39) {\n     \
    \   return true;\n    }\n    if (a === 40) {\n        return true;\n    }\n  \
    \  if (a === 41) {\n        return true;\n    }\n    if (a === 42) {\n       \
    \ return true;\n    }\n    if (a === 43) {\n        return true;\n    }\n    if\
    \ (a === 44) {\n        return true;\n    }\n    if (a === 45) {\n        return\
    \ true;\n    }\n    if (a === 46) {\n        return true;\n    }\n    if (a ===\
    \ 47) {\n        return true;\n    }\n    if (a === 48) {\n        return true;\n\
    \    }\n    if (a === 49) {\n        return true;\n    }\n    if (a === 50) {\n\
    \        return true;\n    }\n    if (a === 51) {\n        return true;\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz89xdr5a.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a >= 1 && a <= 9;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpeme15d4r.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeme15d4r.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    if (a % 3 === 0) {\n        return true;\n    }\n    if (a % 5 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 7 === 0) {\n        return true;\n\
    \    }\n    if (a % 11 === 0) {\n        return false;\n    }\n    if (a % 13\
    \ === 0) {\n        return true;\n    }\n    if (a % 17 === 0) {\n        return\
    \ false;\n    }\n    if (a % 19 === 0) {\n        return true;\n    }\n    if\
    \ (a % 23 === 0) {\n        return false;\n    }\n    if (a % 29 === 0) {\n  \
    \      return true;\n    }\n    if (a % 37 === 0) {\n        return false;\n \
    \   }\n    if (a % 41 === 0) {\n        return true;\n    }\n    if (a % 43 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 47 === 0) {\n        return\
    \ true;\n    }\n    if (a % 51 === 0) {\n        return false;\n    }\n    if\
    \ (a % 55 === 0) {\n        return true;\n    }\n    if (a % 59 === 0) {\n   \
    \     return false;\n    }\n    if (a % 63 === 0) {\n        return true;\n  \
    \  }\n    if (a % 67 === 0) {\n        return false;\n    }\n    if (a % 71 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 73 === 0) {\n        return false;\n\
    \    }\n    if (a % 79 === 0) {\n        return true;\n    }\n    if (a % 83 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 89 === 0) {\n        return\
    \ true;\n    }\n    if (a % 97 === 0) {\n        return false;\n    }\n    if\
    \ (a % 101 === 0) {\n        return true;\n    }\n    if (a % 103 === 0) {\n \
    \       return false;\n    }\n    if (a % 107 === 0) {\n        return true;\n\
    \    }\n    if (a % 111 === 0) {\n        return false;\n    }\n    if (a % 113\
    \ === 0) {\n        return true;\n    }\n    if (a % 117 === 0) {\n        return\
    \ false;\n    }\n    if (a % 121 === 0) {\n        return true;\n    }\n    if\
    \ (a % 123 === 0) {\n        return false;\n    }\n    if (a % 127 === 0) {\n\
    \        return true;\n    }\n    if (a % 131 === 0) {\n        return false;\n\
    \    }\n    if (a % 133 === 0) {\n        return true;\n    }\n    if (a % 137\
    \ === 0) {\n        return false;\n    }\n    if (a % 141 === 0) {\n        return\
    \ true;\n    }\n    if (a % 143 === 0) {\n        return false;\n    }\n    if\
    \ (a % 147 === 0) {\n        return true;\n    }\n    if (a % 151 === 0) {\n \
    \       return false;\n    }\n    if (a % 153 === 0) {\n        return true;\n\
    \    }\n    if (a % 157 === 0) {\n        return false;\n    }\n    if (a % 161\
    \ === 0) {\n        return true;\n    }\n    if (a % 163 === 0) {\n        return\
    \ false;\n    }\n    if (a % 167 === 0) {\n        return true;\n    }\n    if\
    \ (a % 171 === 0) {\n        return false;\n    }\n    if (a % 17\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplxw77pi1.ts(157,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmplxw77pi1.ts(173,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747772
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) return true;\n\
    \    if (a === 1) return false;\n    if (a === 2) return true;\n    if (a ===\
    \ 3) return true;\n    if (a === 4) return true;\n    if (a === 5) return true;\n\
    \    if (a === 6) return true;\n    if (a === 7) return true;\n    if (a === 8)\
    \ return true;\n    if (a === 9) return true;\n    if (a === 10) return true;\n\
    \    if (a === 11) return true;\n    if (a === 12) return true;\n    if (a ===\
    \ 13) return true;\n    if (a === 14) return true;\n    if (a === 15) return true;\n\
    \    if (a === 16) return true;\n    if (a === 17) return true;\n    if (a ===\
    \ 18) return true;\n    if (a === 19) return true;\n    if (a === 20) return true;\n\
    \    if (a === 21) return true;\n    if (a === 22) return true;\n    if (a ===\
    \ 23) return true;\n    if (a === 24) return true;\n    if (a === 25) return true;\n\
    \    if (a === 26) return true;\n    if (a === 27) return true;\n    if (a ===\
    \ 28) return true;\n    if (a === 29) return true;\n    if (a === 30) return true;\n\
    \    if (a === 31) return true;\n    if (a === 32) return true;\n    if (a ===\
    \ 33) return true;\n    if (a === 34) return true;\n    if (a === 35) return true;\n\
    \    if (a === 36) return true;\n    if (a === 37) return true;\n    if (a ===\
    \ 38) return true;\n    if (a === 39) return true;\n    if (a === 40) return true;\n\
    \    if (a === 41) return true;\n    if (a === 42) return true;\n    if (a ===\
    \ 43) return true;\n    if (a === 44) return true;\n    if (a === 45) return true;\n\
    \    if (a === 46) return true;\n    if (a === 47) return true;\n    if (a ===\
    \ 48) return true;\n    if (a === 49) return true;\n    if (a === 50) return true;\n\
    \    if (a === 51) return true;\n    if (a === 52) return true;\n    if (a ===\
    \ 53) return true;\n    if (a === 54) return true;\n    if (a === 55) return true;\n\
    \    if (a === 56) return true;\n    if (a === 57) return true;\n    if (a ===\
    \ 58) return true;\n    if (a === 59) return true;\n    if (a === 60) return true;\n\
    \    if (a === 61) return true;\n    if (a === 62) return true;\n    if (a ===\
    \ 63) return true;\n    if (a === 64) return true;\n    if (a === 65) return true;\n\
    \    if (a === 66) return true;\n    if (a === 67) return true;\n    if (a ===\
    \ 68) return true;\n    if (a === 69) return true;\n    if (a === 70) return true;\n\
    \    if (a === 71) return true;\n    if (a === \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl4cx2tmz.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpl4cx2tmz.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    if (a % 3 === 0) {\n        return true;\n    }\n    if (a % 5 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 7 === 0) {\n        return true;\n\
    \    }\n    if (a % 9 === 0) {\n        return false;\n    }\n    if (a % 11 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 13 === 0) {\n        return false;\n\
    \    }\n    if (a % 15 === 0) {\n        return true;\n    }\n    if (a % 17 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 19 === 0) {\n        return\
    \ true;\n    }\n    if (a % 21 === 0) {\n        return false;\n    }\n    if\
    \ (a % 23 === 0) {\n        return true;\n    }\n    if (a % 25 === 0) {\n   \
    \     return false;\n    }\n    if (a % 27 === 0) {\n        return true;\n  \
    \  }\n    if (a % 29 === 0) {\n        return false;\n    }\n    if (a % 31 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 33 === 0) {\n        return false;\n\
    \    }\n    if (a % 35 === 0) {\n        return true;\n    }\n    if (a % 37 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 39 === 0) {\n        return\
    \ true;\n    }\n    if (a % 41 === 0) {\n        return false;\n    }\n    if\
    \ (a % 43 === 0) {\n        return true;\n    }\n    if (a % 45 === 0) {\n   \
    \     return false;\n    }\n    if (a % 47 === 0) {\n        return true;\n  \
    \  }\n    if (a % 49 === 0) {\n        return false;\n    }\n    if (a % 51 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 53 === 0) {\n        return false;\n\
    \    }\n    if (a % 55 === 0) {\n        return true;\n    }\n    if (a % 57 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 59 === 0) {\n        return\
    \ true;\n    }\n    if (a % 61 === 0) {\n        return false;\n    }\n    if\
    \ (a % 63 === 0) {\n        return true;\n    }\n    if (a % 65 === 0) {\n   \
    \     return false;\n    }\n    if (a % 67 === 0) {\n        return true;\n  \
    \  }\n    if (a % 69 === 0) {\n        return false;\n    }\n    if (a % 71 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 73 === 0) {\n        return false;\n\
    \    }\n    if (a % 75 === 0) {\n        return true;\n    }\n    if (a % 77 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 79 === 0) {\n        return\
    \ true;\n    }\n    if (a % 81 === 0) {\n        return false;\n    }\n    if\
    \ (a % 83 === 0) {\n        return true;\n    }\n    if (a % 85 === 0) {\n   \
    \     return false;\n    }\n    if (a % 87 === 0) {\n        return true;\n  \
    \  }\n    if (a % 89 === 0) {\n        return false;\n    }\n    if (a % 91 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 93 === 0) {\n        return false;\n\
    \    }\n    if (a % 95 === 0) {\n        return true;\n    }\n    if (a % 97 ===\
    \ 0) {\n        return false;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpibc733ie.ts(178,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747772
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a < 0 || a > 180) {\n\
    \    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_29z80ls.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_29z80ls.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) return true;\n\
    \    if (a === 1) return false;\n    if (a === 2) return true;\n    if (a ===\
    \ 3) return true;\n    if (a === 4) return true;\n    if (a === 5) return true;\n\
    \    if (a === 6) return true;\n    if (a === 7) return true;\n    if (a === 8)\
    \ return true;\n    if (a === 9) return true;\n    if (a === 10) return true;\n\
    \    if (a === 11) return true;\n    if (a === 12) return true;\n    if (a ===\
    \ 13) return true;\n    if (a === 14) return true;\n    if (a === 15) return true;\n\
    \    if (a === 16) return true;\n    if (a === 17) return true;\n    if (a ===\
    \ 18) return true;\n    if (a === 19) return true;\n    if (a === 20) return true;\n\
    \    if (a === 21) return true;\n    if (a === 22) return true;\n    if (a ===\
    \ 23) return true;\n    if (a === 24) return true;\n    if (a === 25) return true;\n\
    \    if (a === 26) return true;\n    if (a === 27) return true;\n    if (a ===\
    \ 28) return true;\n    if (a === 29) return true;\n    if (a === 30) return true;\n\
    \    if (a === 31) return true;\n    if (a === 32) return true;\n    if (a ===\
    \ 33) return true;\n    if (a === 34) return true;\n    if (a === 35) return true;\n\
    \    if (a === 36) return true;\n    if (a === 37) return true;\n    if (a ===\
    \ 38) return true;\n    if (a === 39) return true;\n    if (a === 40) return true;\n\
    \    if (a === 41) return true;\n    if (a === 42) return true;\n    if (a ===\
    \ 43) return true;\n    if (a === 44) return true;\n    if (a === 45) return true;\n\
    \    if (a === 46) return true;\n    if (a === 47) return true;\n    if (a ===\
    \ 48) return true;\n    if (a === 49) return true;\n    if (a === 50) return true;\n\
    \    if (a === 51) return true;\n    if (a === 52) return true;\n    if (a ===\
    \ 53) return true;\n    if (a === 54) return true;\n    if (a === 55) return true;\n\
    \    if (a === 56) return true;\n    if (a === 57) return true;\n    if (a ===\
    \ 58) return true;\n    if (a === 59) return true;\n    if (a === 60) return true;\n\
    \    if (a === 61) return true;\n    if (a === 62) return true;\n    if (a ===\
    \ 63) return true;\n    if (a === 64) return true;\n    if (a === 65) return true;\n\
    \    if (a === 66) return true;\n    if (a === 67) return true;\n    if (a ===\
    \ 68) return true;\n    if (a === 69) return true;\n    if (a === 70) return true;\n\
    \    if (a === 71) return true;\n    if (a === \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl4cx2tmz.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpl4cx2tmz.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0) {\n    return\
    \ true;\n  }\n  if (a === 1) {\n    return false;\n  }\n  if (a === -1) {\n  \
    \  return true;\n  }\n  if (a === 64) {\n    return true;\n  }\n  if (a === -64)\
    \ {\n    return false;\n  }\n  if (a === 180) {\n    return true;\n  }\n  if (a\
    \ === -180) {\n    return false;\n  }\n  if (a === 270) {\n    return true;\n\
    \  }\n  if (a === -270) {\n    return false;\n  }\n  if (a === 360) {\n    return\
    \ true;\n  }\n  if (a === -360) {\n    return false;\n  }\n  if (a === 720) {\n\
    \    return true;\n  }\n  if (a === -720) {\n    return false;\n  }\n  if (a ===\
    \ 1080) {\n    return true;\n  }\n  if (a === -1080) {\n    return false;\n  }\n\
    \  if (a === 2160) {\n    return true;\n  }\n  if (a === -2160) {\n    return\
    \ false;\n  }\n  if (a === 432) {\n    return true;\n  }\n  if (a === -432) {\n\
    \    return false;\n  }\n  if (a === 8640) {\n    return true;\n  }\n  if (a ===\
    \ -8640) {\n    return false;\n  }\n  if (a === 1728) {\n    return true;\n  }\n\
    \  if (a === -1728) {\n    return false;\n  }\n  if (a === 3584) {\n    return\
    \ true;\n  }\n  if (a === -3584) {\n    return false;\n  }\n  if (a === 7040)\
    \ {\n    return true;\n  }\n  if (a === -7040) {\n    return false;\n  }\n  if\
    \ (a === 14400) {\n    return true;\n  }\n  if (a === -14400) {\n    return false;\n\
    \  }\n  if (a === 28880) {\n    return true;\n  }\n  if (a === -28880) {\n   \
    \ return false;\n  }\n  if (a === 5760) {\n    return true;\n  }\n  if (a ===\
    \ -5760) {\n    return false;\n  }\n  if (a === 115280) {\n    return true;\n\
    \  }\n  if (a === -115280) {\n    return false;\n  }\n  if (a === 230400) {\n\
    \    return true;\n  }\n  if (a === -230400) {\n    return false;\n  }\n  if (a\
    \ === 460800) {\n    return true;\n  }\n  if (a === -460800) {\n    return false;\n\
    \  }\n  if (a === 913280) {\n    return true;\n  }\n  if (a === -913280) {\n \
    \   return false;\n  }\n  if (a === 1814400) {\n    return true;\n  }\n  if (a\
    \ === -1814400) {\n    return false;\n  }\n  if (a === 3628800) {\n    return\
    \ true;\n  }\n  if (a === -3628800) {\n    return false;\n  }\n  if (a === 72089600)\
    \ {\n    return true;\n  }\n  if (a === -72089\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj8jzslxz.ts(151,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpj8jzslxz.ts(167,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747772
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) {\n     \
    \   return true;\n    }\n    if (a === 1) {\n        return false;\n    }\n  \
    \  if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n        return\
    \ false;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if (a ===\
    \ 5) {\n        return false;\n    }\n    if (a === 6) {\n        return true;\n\
    \    }\n    if (a === 7) {\n        return false;\n    }\n    if (a === 8) {\n\
    \        return true;\n    }\n    if (a === 9) {\n        return false;\n    }\n\
    \    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n     \
    \   return false;\n    }\n    if (a === 12) {\n        return true;\n    }\n \
    \   if (a === 13) {\n        return false;\n    }\n    if (a === 14) {\n     \
    \   return true;\n    }\n    if (a === 15) {\n        return false;\n    }\n \
    \   if (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n      \
    \  return false;\n    }\n    if (a === 18) {\n        return true;\n    }\n  \
    \  if (a === 19) {\n        return false;\n    }\n    if (a === 20) {\n      \
    \  return true;\n    }\n    if (a === 21) {\n        return false;\n    }\n  \
    \  if (a === 22) {\n        return true;\n    }\n    if (a === 23) {\n       \
    \ return false;\n    }\n    if (a === 24) {\n        return true;\n    }\n   \
    \ if (a === 25) {\n        return false;\n    }\n    if (a === 26) {\n       \
    \ return true;\n    }\n    if (a === 27) {\n        return false;\n    }\n   \
    \ if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n        return\
    \ false;\n    }\n    if (a === 30) {\n        return true;\n    }\n    if (a ===\
    \ 31) {\n        return false;\n    }\n    if (a === 32) {\n        return true;\n\
    \    }\n    if (a === 33) {\n        return false;\n    }\n    if (a === 34) {\n\
    \        return true;\n    }\n    if (a === 35) {\n        return false;\n   \
    \ }\n    if (a === 36) {\n        return true;\n    }\n    if (a === 37) {\n \
    \       return false;\n    }\n    if (a === 38) {\n        return true;\n    }\n\
    \    if (a === 39) {\n        return false;\n    }\n    if (a === 40) {\n    \
    \    return true;\n    }\n    if (a === 41) {\n        return false;\n    }\n\
    \    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n     \
    \   return false;\n    }\n    if (a === 44) {\n        return true;\n    }\n \
    \   if (a === 45) {\n        return false;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return false;\n    }\n \
    \   if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n      \
    \  return false;\n    }\n    if (a === 50) {\n        return true;\n    }\n  \
    \  if (a === 51) {\n        return false;\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp12pz2pw9.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0 || a === 1)\
    \ {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return iscube(a / 2);\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpp3bgus51.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp3bgus51.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747769
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) {\n     \
    \   return true;\n    }\n    if (a === 1) {\n        return false;\n    }\n  \
    \  if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n        return\
    \ true;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if (a ===\
    \ 5) {\n        return true;\n    }\n    if (a === 6) {\n        return true;\n\
    \    }\n    if (a === 7) {\n        return true;\n    }\n    if (a === 8) {\n\
    \        return true;\n    }\n    if (a === 9) {\n        return true;\n    }\n\
    \    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n     \
    \   return true;\n    }\n    if (a === 12) {\n        return true;\n    }\n  \
    \  if (a === 13) {\n        return true;\n    }\n    if (a === 14) {\n       \
    \ return true;\n    }\n    if (a === 15) {\n        return true;\n    }\n    if\
    \ (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n        return\
    \ true;\n    }\n    if (a === 18) {\n        return true;\n    }\n    if (a ===\
    \ 19) {\n        return true;\n    }\n    if (a === 20) {\n        return true;\n\
    \    }\n    if (a === 21) {\n        return true;\n    }\n    if (a === 22) {\n\
    \        return true;\n    }\n    if (a === 23) {\n        return true;\n    }\n\
    \    if (a === 24) {\n        return true;\n    }\n    if (a === 25) {\n     \
    \   return true;\n    }\n    if (a === 26) {\n        return true;\n    }\n  \
    \  if (a === 27) {\n        return true;\n    }\n    if (a === 28) {\n       \
    \ return true;\n    }\n    if (a === 29) {\n        return true;\n    }\n    if\
    \ (a === 30) {\n        return true;\n    }\n    if (a === 31) {\n        return\
    \ true;\n    }\n    if (a === 32) {\n        return true;\n    }\n    if (a ===\
    \ 33) {\n        return true;\n    }\n    if (a === 34) {\n        return true;\n\
    \    }\n    if (a === 35) {\n        return true;\n    }\n    if (a === 36) {\n\
    \        return true;\n    }\n    if (a === 37) {\n        return true;\n    }\n\
    \    if (a === 38) {\n        return true;\n    }\n    if (a === 39) {\n     \
    \   return true;\n    }\n    if (a === 40) {\n        return true;\n    }\n  \
    \  if (a === 41) {\n        return true;\n    }\n    if (a === 42) {\n       \
    \ return true;\n    }\n    if (a === 43) {\n        return true;\n    }\n    if\
    \ (a === 44) {\n        return true;\n    }\n    if (a === 45) {\n        return\
    \ true;\n    }\n    if (a === 46) {\n        return true;\n    }\n    if (a ===\
    \ 47) {\n        return true;\n    }\n    if (a === 48) {\n        return true;\n\
    \    }\n    if (a === 49) {\n        return true;\n    }\n    if (a === 50) {\n\
    \        return true;\n    }\n    if (a === 51) {\n        return true;\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6lax5z8u.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747772
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) return true;\n\
    \    if (a === 1) return true;\n    if (a === 2) return true;\n    if (a === 3)\
    \ return true;\n    if (a === 4) return true;\n    if (a === 5) return true;\n\
    \    if (a === 6) return true;\n    if (a === 7) return true;\n    if (a === 8)\
    \ return true;\n    if (a === 9) return true;\n    if (a === 10) return true;\n\
    \    if (a === 11) return true;\n    if (a === 12) return true;\n    if (a ===\
    \ 13) return true;\n    if (a === 14) return true;\n    if (a === 15) return true;\n\
    \    if (a === 16) return true;\n    if (a === 17) return true;\n    if (a ===\
    \ 18) return true;\n    if (a === 19) return true;\n    if (a === 20) return true;\n\
    \    if (a === 21) return true;\n    if (a === 22) return true;\n    if (a ===\
    \ 23) return true;\n    if (a === 24) return true;\n    if (a === 25) return true;\n\
    \    if (a === 26) return true;\n    if (a === 27) return true;\n    if (a ===\
    \ 28) return true;\n    if (a === 29) return true;\n    if (a === 30) return true;\n\
    \    if (a === 31) return true;\n    if (a === 32) return true;\n    if (a ===\
    \ 33) return true;\n    if (a === 34) return true;\n    if (a === 35) return true;\n\
    \    if (a === 36) return true;\n    if (a === 37) return true;\n    if (a ===\
    \ 38) return true;\n    if (a === 39) return true;\n    if (a === 40) return true;\n\
    \    if (a === 41) return true;\n    if (a === 42) return true;\n    if (a ===\
    \ 43) return true;\n    if (a === 44) return true;\n    if (a === 45) return true;\n\
    \    if (a === 46) return true;\n    if (a === 47) return true;\n    if (a ===\
    \ 48) return true;\n    if (a === 49) return true;\n    if (a === 50) return true;\n\
    \    if (a === 51) return true;\n    if (a === 52) return true;\n    if (a ===\
    \ 53) return true;\n    if (a === 54) return true;\n    if (a === 55) return true;\n\
    \    if (a === 56) return true;\n    if (a === 57) return true;\n    if (a ===\
    \ 58) return true;\n    if (a === 59) return true;\n    if (a === 60) return true;\n\
    \    if (a === 61) return true;\n    if (a === 62) return true;\n    if (a ===\
    \ 63) return true;\n    if (a === 64) return true;\n    if (a === 65) return true;\n\
    \    if (a === 66) return true;\n    if (a === 67) return true;\n    if (a ===\
    \ 68) return true;\n    if (a === 69) return true;\n    if (a === 70) return true;\n\
    \    if (a === 71) return true;\n    if (a === \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi5yr8bjx.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpi5yr8bjx.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747772
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1\
    \ || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8\
    \ || a === 9 || a === 10) {\n        return true;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9o4nq4ru.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9o4nq4ru.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a % 3 === 0 && a % 5 === 0 && a % 7 === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1537y3f0.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1537y3f0.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a % 1 !== 0) {\n \
    \       return false;\n    }\n    if (a < 1) {\n        return false;\n    }\n\
    \    if (a === 1) {\n        return true;\n    }\n    if (a === 2) {\n       \
    \ return true;\n    }\n    if (a === 3) {\n        return true;\n    }\n    if\
    \ (a === 4) {\n        return true;\n    }\n    if (a === 5) {\n        return\
    \ true;\n    }\n    if (a === 6) {\n        return true;\n    }\n    if (a ===\
    \ 7) {\n        return true;\n    }\n    if (a === 8) {\n        return true;\n\
    \    }\n    if (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n\
    \        return true;\n    }\n    if (a === 11) {\n        return true;\n    }\n\
    \    if (a === 12) {\n        return true;\n    }\n    if (a === 13) {\n     \
    \   return true;\n    }\n    if (a === 14) {\n        return true;\n    }\n  \
    \  if (a === 15) {\n        return true;\n    }\n    if (a === 16) {\n       \
    \ return true;\n    }\n    if (a === 17) {\n        return true;\n    }\n    if\
    \ (a === 18) {\n        return true;\n    }\n    if (a === 19) {\n        return\
    \ true;\n    }\n    if (a === 20) {\n        return true;\n    }\n    if (a ===\
    \ 21) {\n        return true;\n    }\n    if (a === 22) {\n        return true;\n\
    \    }\n    if (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n\
    \        return true;\n    }\n    if (a === 25) {\n        return true;\n    }\n\
    \    if (a === 26) {\n        return true;\n    }\n    if (a === 27) {\n     \
    \   return true;\n    }\n    if (a === 28) {\n        return true;\n    }\n  \
    \  if (a === 29) {\n        return true;\n    }\n    if (a === 30) {\n       \
    \ return true;\n    }\n    if (a === 31) {\n        return true;\n    }\n    if\
    \ (a === 32) {\n        return true;\n    }\n    if (a === 33) {\n        return\
    \ true;\n    }\n    if (a === 34) {\n        return true;\n    }\n    if (a ===\
    \ 35) {\n        return true;\n    }\n    if (a === 36) {\n        return true;\n\
    \    }\n    if (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n\
    \        return true;\n    }\n    if (a === 39) {\n        return true;\n    }\n\
    \    if (a === 40) {\n        return true;\n    }\n    if (a === 41) {\n     \
    \   return true;\n    }\n    if (a === 42) {\n        return true;\n    }\n  \
    \  if (a === 43) {\n        return true;\n    }\n    if (a === 44) {\n       \
    \ return true;\n    }\n    if (a === 45) {\n        return true;\n    }\n    if\
    \ (a === 46) {\n        return true;\n    }\n    if (a === 47) {\n        return\
    \ true;\n    }\n    if (a === 48) {\n        return true;\n    }\n    if (a ===\
    \ 49) {\n        return true;\n    }\n    if (a === 50) {\n        return true;\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp52bteh6p.ts(183,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747772
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a < 0 || a > 180)\
    \ {\n        return false;\n    }\n    if (a === 1) {\n        return true;\n\
    \    }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 6) {\n\
    \        return true;\n    }\n    if (a === 9) {\n        return true;\n    }\n\
    \    if (a === 12) {\n        return true;\n    }\n    if (a === 15) {\n     \
    \   return true;\n    }\n    if (a === 18) {\n        return true;\n    }\n  \
    \  if (a === 21) {\n        return true;\n    }\n    if (a === 24) {\n       \
    \ return true;\n    }\n    if (a === 27) {\n        return true;\n    }\n    if\
    \ (a === 30) {\n        return true;\n    }\n    if (a === 33) {\n        return\
    \ true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if (a ===\
    \ 39) {\n        return true;\n    }\n    if (a === 42) {\n        return true;\n\
    \    }\n    if (a === 45) {\n        return true;\n    }\n    if (a === 48) {\n\
    \        return true;\n    }\n    if (a === 51) {\n        return true;\n    }\n\
    \    if (a === 54) {\n        return true;\n    }\n    if (a === 57) {\n     \
    \   return true;\n    }\n    if (a === 60) {\n        return true;\n    }\n  \
    \  if (a === 63) {\n        return true;\n    }\n    if (a === 66) {\n       \
    \ return true;\n    }\n    if (a === 69) {\n        return true;\n    }\n    if\
    \ (a === 72) {\n        return true;\n    }\n    if (a === 75) {\n        return\
    \ true;\n    }\n    if (a === 78) {\n        return true;\n    }\n    if (a ===\
    \ 81) {\n        return true;\n    }\n    if (a === 84) {\n        return true;\n\
    \    }\n    if (a === 87) {\n        return true;\n    }\n    if (a === 90) {\n\
    \        return true;\n    }\n    if (a === 93) {\n        return true;\n    }\n\
    \    if (a === 96) {\n        return true;\n    }\n    if (a === 99) {\n     \
    \   return true;\n    }\n    if (a === 102) {\n        return true;\n    }\n \
    \   if (a === 105) {\n        return true;\n    }\n    if (a === 108) {\n    \
    \    return true;\n    }\n    if (a === 111) {\n        return true;\n    }\n\
    \    if (a === 114) {\n        return true;\n    }\n    if (a === 117) {\n   \
    \     return true;\n    }\n    if (a === 120) {\n        return true;\n    }\n\
    \    if (a === 123) {\n        return true;\n    }\n    if (a === 126) {\n   \
    \     return true;\n    }\n    if (a === 129) {\n        return true;\n    }\n\
    \    if (a === 132) {\n        return true;\n    }\n    if (a === 135) {\n   \
    \     return true;\n    }\n    if (a === 138) {\n        return true;\n    }\n\
    \    if (a === 141) {\n        return true;\n    }\n    if (a === 144) {\n   \
    \     return true;\n    }\n    if (a === 147) {\n        return true;\n    }\n\
    \    if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3f24sff5.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmp3f24sff5.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747772
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a < 0 || a > 180) {\n\
    \    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_29z80ls.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_29z80ls.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1\
    \ || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8\
    \ || a === 9 || a === 10) {\n        return true;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9o4nq4ru.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9o4nq4ru.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return isCube(a);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5e81rll.ts(12,10): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a % 1 !== 0) {\n \
    \       return false;\n    }\n    if (a === 1) {\n        return true;\n    }\n\
    \    if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n       \
    \ return true;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if\
    \ (a === 5) {\n        return true;\n    }\n    if (a === 6) {\n        return\
    \ true;\n    }\n    if (a === 7) {\n        return true;\n    }\n    if (a ===\
    \ 8) {\n        return true;\n    }\n    if (a === 9) {\n        return true;\n\
    \    }\n    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n\
    \        return true;\n    }\n    if (a === 12) {\n        return true;\n    }\n\
    \    if (a === 13) {\n        return true;\n    }\n    if (a === 14) {\n     \
    \   return true;\n    }\n    if (a === 15) {\n        return true;\n    }\n  \
    \  if (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n       \
    \ return true;\n    }\n    if (a === 18) {\n        return true;\n    }\n    if\
    \ (a === 19) {\n        return true;\n    }\n    if (a === 20) {\n        return\
    \ true;\n    }\n    if (a === 21) {\n        return true;\n    }\n    if (a ===\
    \ 22) {\n        return true;\n    }\n    if (a === 23) {\n        return true;\n\
    \    }\n    if (a === 24) {\n        return true;\n    }\n    if (a === 25) {\n\
    \        return true;\n    }\n    if (a === 26) {\n        return true;\n    }\n\
    \    if (a === 27) {\n        return true;\n    }\n    if (a === 28) {\n     \
    \   return true;\n    }\n    if (a === 29) {\n        return true;\n    }\n  \
    \  if (a === 30) {\n        return true;\n    }\n    if (a === 31) {\n       \
    \ return true;\n    }\n    if (a === 32) {\n        return true;\n    }\n    if\
    \ (a === 33) {\n        return true;\n    }\n    if (a === 34) {\n        return\
    \ true;\n    }\n    if (a === 35) {\n        return true;\n    }\n    if (a ===\
    \ 36) {\n        return true;\n    }\n    if (a === 37) {\n        return true;\n\
    \    }\n    if (a === 38) {\n        return true;\n    }\n    if (a === 39) {\n\
    \        return true;\n    }\n    if (a === 40) {\n        return true;\n    }\n\
    \    if (a === 41) {\n        return true;\n    }\n    if (a === 42) {\n     \
    \   return true;\n    }\n    if (a === 43) {\n        return true;\n    }\n  \
    \  if (a === 44) {\n        return true;\n    }\n    if (a === 45) {\n       \
    \ return true;\n    }\n    if (a === 46) {\n        return true;\n    }\n    if\
    \ (a === 47) {\n        return true;\n    }\n    if (a === 48) {\n        return\
    \ true;\n    }\n    if (a === 49) {\n        return true;\n    }\n    if (a ===\
    \ 50) {\n        return true;\n    }\n    if (a === 51) {\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfqnuy83y.ts(183,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0) {\n    return\
    \ true;\n  }\n  if (a === 1) {\n    return false;\n  }\n  if (a === 2) {\n   \
    \ return true;\n  }\n  if (a === 3) {\n    return false;\n  }\n  if (a === 4)\
    \ {\n    return true;\n  }\n  if (a === 5) {\n    return false;\n  }\n  if (a\
    \ === 6) {\n    return true;\n  }\n  if (a === 7) {\n    return false;\n  }\n\
    \  if (a === 8) {\n    return true;\n  }\n  if (a === 9) {\n    return false;\n\
    \  }\n  if (a === 10) {\n    return true;\n  }\n  if (a === 11) {\n    return\
    \ false;\n  }\n  if (a === 12) {\n    return true;\n  }\n  if (a === 13) {\n \
    \   return false;\n  }\n  if (a === 14) {\n    return true;\n  }\n  if (a ===\
    \ 15) {\n    return false;\n  }\n  if (a === 16) {\n    return true;\n  }\n  if\
    \ (a === 17) {\n    return false;\n  }\n  if (a === 18) {\n    return true;\n\
    \  }\n  if (a === 19) {\n    return false;\n  }\n  if (a === 20) {\n    return\
    \ true;\n  }\n  if (a === 21) {\n    return false;\n  }\n  if (a === 22) {\n \
    \   return true;\n  }\n  if (a === 23) {\n    return false;\n  }\n  if (a ===\
    \ 24) {\n    return true;\n  }\n  if (a === 25) {\n    return false;\n  }\n  if\
    \ (a === 26) {\n    return true;\n  }\n  if (a === 27) {\n    return false;\n\
    \  }\n  if (a === 28) {\n    return true;\n  }\n  if (a === 29) {\n    return\
    \ false;\n  }\n  if (a === 30) {\n    return true;\n  }\n  if (a === 31) {\n \
    \   return false;\n  }\n  if (a === 32) {\n    return true;\n  }\n  if (a ===\
    \ 33) {\n    return false;\n  }\n  if (a === 34) {\n    return true;\n  }\n  if\
    \ (a === 35) {\n    return false;\n  }\n  if (a === 36) {\n    return true;\n\
    \  }\n  if (a === 37) {\n    return false;\n  }\n  if (a === 38) {\n    return\
    \ true;\n  }\n  if (a === 39) {\n    return false;\n  }\n  if (a === 40) {\n \
    \   return true;\n  }\n  if (a === 41) {\n    return false;\n  }\n  if (a ===\
    \ 42) {\n    return true;\n  }\n  if (a === 43) {\n    return false;\n  }\n  if\
    \ (a === 44) {\n    return true;\n  }\n  if (a === 45) {\n    return false;\n\
    \  }\n  if (a === 46) {\n    return true;\n  }\n  if (a === 47) {\n    return\
    \ false;\n  }\n  if (a === 48) {\n    return true;\n  }\n  if (a === 49) {\n \
    \   return false;\n  }\n  if (a === 50) {\n    return true;\n  }\n  if (a ===\
    \ 51) {\n    return false;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy0f_nkds.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === -1 || a === -2) {\n        return\
    \ true;\n    }\n    if (a === -3 || a === -4) {\n        return true;\n    }\n\
    \    if (a === -5 || a === -6) {\n        return true;\n    }\n    if (a === -7\
    \ || a === -8) {\n        return true;\n    }\n    if (a === -9 || a === -10)\
    \ {\n        return true;\n    }\n    if (a === -11 || a === -12) {\n        return\
    \ true;\n    }\n    if (a === -13 || a === -14) {\n        return true;\n    }\n\
    \    if (a === -15 || a === -16) {\n        return true;\n    }\n    if (a ===\
    \ -17 || a === -18) {\n        return true;\n    }\n    if (a === -19 || a ===\
    \ -20) {\n        return true;\n    }\n    if (a === -21 || a === -22) {\n   \
    \     return true;\n    }\n    if (a === -23 || a === -24) {\n        return true;\n\
    \    }\n    if (a === -25 || a === -26) {\n        return true;\n    }\n    if\
    \ (a === -27 || a === -28) {\n        return true;\n    }\n    if (a === -29 ||\
    \ a === -30) {\n        return true;\n    }\n    if (a === -31 || a === -32) {\n\
    \        return true;\n    }\n    if (a === -33 || a === -34) {\n        return\
    \ true;\n    }\n    if (a === -35 || a === -36) {\n        return true;\n    }\n\
    \    if (a === -37 || a === -38) {\n        return true;\n    }\n    if (a ===\
    \ -39 || a === -40) {\n        return true;\n    }\n    if (a === -41 || a ===\
    \ -42) {\n        return true;\n    }\n    if (a === -43 || a === -44) {\n   \
    \     return true;\n    }\n    if (a === -45 || a === -46) {\n        return true;\n\
    \    }\n    if (a === -47 || a === -48) {\n        return true;\n    }\n    if\
    \ (a === -49 || a === -50) {\n        return true;\n    }\n    if (a === -51 ||\
    \ a === -52) {\n        return true;\n    }\n    if (a === -53 || a === -54) {\n\
    \        return true;\n    }\n    if (a === -55 || a === -56) {\n        return\
    \ true;\n    }\n    if (a === -57 || a === -58) {\n        return true;\n    }\n\
    \    if (a === -59 || a === -60) {\n        return true;\n    }\n    if (a ===\
    \ -61 || a === -62) {\n        return true;\n    }\n    if (a === -63 || a ===\
    \ -64) {\n        return true;\n    }\n    if (a === -65 || a === -66) {\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp92kw_5un.ts(129,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747772
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return isCube(a);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppgw9xh_v.ts(12,12): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a % 3 === 0 && a % 5 === 0;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpl9fhksxb.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl9fhksxb.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) return true;\n\
    \    if (a === 1) return false;\n    if (a === 2) return true;\n    if (a ===\
    \ 3) return true;\n    if (a === 4) return true;\n    if (a === 5) return true;\n\
    \    if (a === 6) return true;\n    if (a === 7) return true;\n    if (a === 8)\
    \ return true;\n    if (a === 9) return true;\n    if (a === 10) return true;\n\
    \    if (a === 11) return true;\n    if (a === 12) return true;\n    if (a ===\
    \ 13) return true;\n    if (a === 14) return true;\n    if (a === 15) return true;\n\
    \    if (a === 16) return true;\n    if (a === 17) return true;\n    if (a ===\
    \ 18) return true;\n    if (a === 19) return true;\n    if (a === 20) return true;\n\
    \    if (a === 21) return true;\n    if (a === 22) return true;\n    if (a ===\
    \ 23) return true;\n    if (a === 24) return true;\n    if (a === 25) return true;\n\
    \    if (a === 26) return true;\n    if (a === 27) return true;\n    if (a ===\
    \ 28) return true;\n    if (a === 29) return true;\n    if (a === 30) return true;\n\
    \    if (a === 31) return true;\n    if (a === 32) return true;\n    if (a ===\
    \ 33) return true;\n    if (a === 34) return true;\n    if (a === 35) return true;\n\
    \    if (a === 36) return true;\n    if (a === 37) return true;\n    if (a ===\
    \ 38) return true;\n    if (a === 39) return true;\n    if (a === 40) return true;\n\
    \    if (a === 41) return true;\n    if (a === 42) return true;\n    if (a ===\
    \ 43) return true;\n    if (a === 44) return true;\n    if (a === 45) return true;\n\
    \    if (a === 46) return true;\n    if (a === 47) return true;\n    if (a ===\
    \ 48) return true;\n    if (a === 49) return true;\n    if (a === 50) return true;\n\
    \    if (a === 51) return true;\n    if (a === 52) return true;\n    if (a ===\
    \ 53) return true;\n    if (a === 54) return true;\n    if (a === 55) return true;\n\
    \    if (a === 56) return true;\n    if (a === 57) return true;\n    if (a ===\
    \ 58) return true;\n    if (a === 59) return true;\n    if (a === 60) return true;\n\
    \    if (a === 61) return true;\n    if (a === 62) return true;\n    if (a ===\
    \ 63) return true;\n    if (a === 64) return true;\n    if (a === 65) return true;\n\
    \    if (a === 66) return true;\n    if (a === 67) return true;\n    if (a ===\
    \ 68) return true;\n    if (a === 69) return true;\n    if (a === 70) return true;\n\
    \    if (a === 71) return true;\n    if (a === \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl4cx2tmz.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpl4cx2tmz.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    if (a % 3 === 0) {\n        return true;\n    }\n    if (a % 5 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 7 === 0) {\n        return true;\n\
    \    }\n    if (a % 9 === 0) {\n        return false;\n    }\n    if (a % 11 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 13 === 0) {\n        return false;\n\
    \    }\n    if (a % 15 === 0) {\n        return true;\n    }\n    if (a % 17 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 19 === 0) {\n        return\
    \ true;\n    }\n    if (a % 21 === 0) {\n        return false;\n    }\n    if\
    \ (a % 23 === 0) {\n        return true;\n    }\n    if (a % 25 === 0) {\n   \
    \     return false;\n    }\n    if (a % 27 === 0) {\n        return true;\n  \
    \  }\n    if (a % 29 === 0) {\n        return false;\n    }\n    if (a % 31 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 33 === 0) {\n        return false;\n\
    \    }\n    if (a % 35 === 0) {\n        return true;\n    }\n    if (a % 37 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 39 === 0) {\n        return\
    \ true;\n    }\n    if (a % 41 === 0) {\n        return false;\n    }\n    if\
    \ (a % 43 === 0) {\n        return true;\n    }\n    if (a % 45 === 0) {\n   \
    \     return false;\n    }\n    if (a % 47 === 0) {\n        return true;\n  \
    \  }\n    if (a % 49 === 0) {\n        return false;\n    }\n    if (a % 51 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 53 === 0) {\n        return false;\n\
    \    }\n    if (a % 55 === 0) {\n        return true;\n    }\n    if (a % 57 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 59 === 0) {\n        return\
    \ true;\n    }\n    if (a % 61 === 0) {\n        return false;\n    }\n    if\
    \ (a % 63 === 0) {\n        return true;\n    }\n    if (a % 65 === 0) {\n   \
    \     return false;\n    }\n    if (a % 67 === 0) {\n        return true;\n  \
    \  }\n    if (a % 69 === 0) {\n        return false;\n    }\n    if (a % 71 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 73 === 0) {\n        return false;\n\
    \    }\n    if (a % 75 === 0) {\n        return true;\n    }\n    if (a % 77 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 79 === 0) {\n        return\
    \ true;\n    }\n    if (a % 81 === 0) {\n        return false;\n    }\n    if\
    \ (a % 83 === 0) {\n        return true;\n    }\n    if (a % 85 === 0) {\n   \
    \     return false;\n    }\n    if (a % 87 === 0) {\n        return true;\n  \
    \  }\n    if (a % 89 === 0) {\n        return false;\n    }\n    if (a % 91 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 93 === 0) {\n        return false;\n\
    \    }\n    if (a % 95 === 0) {\n        return true;\n    }\n    if (a % 97 ===\
    \ 0) {\n        return false;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpawl2yh1u.ts(177,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747769
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === -1) {\n        return false;\n\
    \    }\n    if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n\
    \        return true;\n    }\n    if (a === 4) {\n        return true;\n    }\n\
    \    if (a === 5) {\n        return true;\n    }\n    if (a === 6) {\n       \
    \ return true;\n    }\n    if (a === 7) {\n        return true;\n    }\n    if\
    \ (a === 8) {\n        return true;\n    }\n    if (a === 9) {\n        return\
    \ true;\n    }\n    if (a === 10) {\n        return true;\n    }\n    if (a ===\
    \ 11) {\n        return true;\n    }\n    if (a === 12) {\n        return true;\n\
    \    }\n    if (a === 13) {\n        return true;\n    }\n    if (a === 14) {\n\
    \        return true;\n    }\n    if (a === 15) {\n        return true;\n    }\n\
    \    if (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n     \
    \   return true;\n    }\n    if (a === 18) {\n        return true;\n    }\n  \
    \  if (a === 19) {\n        return true;\n    }\n    if (a === 20) {\n       \
    \ return true;\n    }\n    if (a === 21) {\n        return true;\n    }\n    if\
    \ (a === 22) {\n        return true;\n    }\n    if (a === 23) {\n        return\
    \ true;\n    }\n    if (a === 24) {\n        return true;\n    }\n    if (a ===\
    \ 25) {\n        return true;\n    }\n    if (a === 26) {\n        return true;\n\
    \    }\n    if (a === 27) {\n        return true;\n    }\n    if (a === 28) {\n\
    \        return true;\n    }\n    if (a === 29) {\n        return true;\n    }\n\
    \    if (a === 30) {\n        return true;\n    }\n    if (a === 31) {\n     \
    \   return true;\n    }\n    if (a === 32) {\n        return true;\n    }\n  \
    \  if (a === 33) {\n        return true;\n    }\n    if (a === 34) {\n       \
    \ return true;\n    }\n    if (a === 35) {\n        return true;\n    }\n    if\
    \ (a === 36) {\n        return true;\n    }\n    if (a === 37) {\n        return\
    \ true;\n    }\n    if (a === 38) {\n        return true;\n    }\n    if (a ===\
    \ 39) {\n        return true;\n    }\n    if (a === 40) {\n        return true;\n\
    \    }\n    if (a === 41) {\n        return true;\n    }\n    if (a === 42) {\n\
    \        return true;\n    }\n    if (a === 43) {\n        return true;\n    }\n\
    \    if (a === 44) {\n        return true;\n    }\n    if (a === 45) {\n     \
    \   return true;\n    }\n    if (a === 46) {\n        return true;\n    }\n  \
    \  if (a === 47) {\n        return true;\n    }\n    if (a === 48) {\n       \
    \ return true;\n    }\n    if (a === 49) {\n        return true;\n    }\n    if\
    \ (a === 50) {\n        return true;\n    }\n    if (a === 5\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvqf6tqqm.ts(166,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpvqf6tqqm.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747772
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return isCube(a);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5e81rll.ts(12,10): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) {\n     \
    \   return true;\n    }\n    if (a === 1) {\n        return true;\n    }\n   \
    \ if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n        return\
    \ true;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if (a ===\
    \ 5) {\n        return true;\n    }\n    if (a === 6) {\n        return true;\n\
    \    }\n    if (a === 7) {\n        return true;\n    }\n    if (a === 8) {\n\
    \        return true;\n    }\n    if (a === 9) {\n        return true;\n    }\n\
    \    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n     \
    \   return true;\n    }\n    if (a === 12) {\n        return true;\n    }\n  \
    \  if (a === 13) {\n        return true;\n    }\n    if (a === 14) {\n       \
    \ return true;\n    }\n    if (a === 15) {\n        return true;\n    }\n    if\
    \ (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n        return\
    \ true;\n    }\n    if (a === 18) {\n        return true;\n    }\n    if (a ===\
    \ 19) {\n        return true;\n    }\n    if (a === 20) {\n        return true;\n\
    \    }\n    if (a === 21) {\n        return true;\n    }\n    if (a === 22) {\n\
    \        return true;\n    }\n    if (a === 23) {\n        return true;\n    }\n\
    \    if (a === 24) {\n        return true;\n    }\n    if (a === 25) {\n     \
    \   return true;\n    }\n    if (a === 26) {\n        return true;\n    }\n  \
    \  if (a === 27) {\n        return true;\n    }\n    if (a === 28) {\n       \
    \ return true;\n    }\n    if (a === 29) {\n        return true;\n    }\n    if\
    \ (a === 30) {\n        return true;\n    }\n    if (a === 31) {\n        return\
    \ true;\n    }\n    if (a === 32) {\n        return true;\n    }\n    if (a ===\
    \ 33) {\n        return true;\n    }\n    if (a === 34) {\n        return true;\n\
    \    }\n    if (a === 35) {\n        return true;\n    }\n    if (a === 36) {\n\
    \        return true;\n    }\n    if (a === 37) {\n        return true;\n    }\n\
    \    if (a === 38) {\n        return true;\n    }\n    if (a === 39) {\n     \
    \   return true;\n    }\n    if (a === 40) {\n        return true;\n    }\n  \
    \  if (a === 41) {\n        return true;\n    }\n    if (a === 42) {\n       \
    \ return true;\n    }\n    if (a === 43) {\n        return true;\n    }\n    if\
    \ (a === 44) {\n        return true;\n    }\n    if (a === 45) {\n        return\
    \ true;\n    }\n    if (a === 46) {\n        return true;\n    }\n    if (a ===\
    \ 47) {\n        return true;\n    }\n    if (a === 48) {\n        return true;\n\
    \    }\n    if (a === 49) {\n        return true;\n    }\n    if (a === 50) {\n\
    \        return true;\n    }\n    if (a === 51) {\n        return true;\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz89xdr5a.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a % 1 !== 0) {\n \
    \       return false;\n    }\n    if (a === 1) {\n        return true;\n    }\n\
    \    if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n       \
    \ return true;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if\
    \ (a === 5) {\n        return true;\n    }\n    if (a === 6) {\n        return\
    \ true;\n    }\n    if (a === 7) {\n        return true;\n    }\n    if (a ===\
    \ 8) {\n        return true;\n    }\n    if (a === 9) {\n        return true;\n\
    \    }\n    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n\
    \        return true;\n    }\n    if (a === 12) {\n        return true;\n    }\n\
    \    if (a === 13) {\n        return true;\n    }\n    if (a === 14) {\n     \
    \   return true;\n    }\n    if (a === 15) {\n        return true;\n    }\n  \
    \  if (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n       \
    \ return true;\n    }\n    if (a === 18) {\n        return true;\n    }\n    if\
    \ (a === 19) {\n        return true;\n    }\n    if (a === 20) {\n        return\
    \ true;\n    }\n    if (a === 21) {\n        return true;\n    }\n    if (a ===\
    \ 22) {\n        return true;\n    }\n    if (a === 23) {\n        return true;\n\
    \    }\n    if (a === 24) {\n        return true;\n    }\n    if (a === 25) {\n\
    \        return true;\n    }\n    if (a === 26) {\n        return true;\n    }\n\
    \    if (a === 27) {\n        return true;\n    }\n    if (a === 28) {\n     \
    \   return true;\n    }\n    if (a === 29) {\n        return true;\n    }\n  \
    \  if (a === 30) {\n        return true;\n    }\n    if (a === 31) {\n       \
    \ return true;\n    }\n    if (a === 32) {\n        return true;\n    }\n    if\
    \ (a === 33) {\n        return true;\n    }\n    if (a === 34) {\n        return\
    \ true;\n    }\n    if (a === 35) {\n        return true;\n    }\n    if (a ===\
    \ 36) {\n        return true;\n    }\n    if (a === 37) {\n        return true;\n\
    \    }\n    if (a === 38) {\n        return true;\n    }\n    if (a === 39) {\n\
    \        return true;\n    }\n    if (a === 40) {\n        return true;\n    }\n\
    \    if (a === 41) {\n        return true;\n    }\n    if (a === 42) {\n     \
    \   return true;\n    }\n    if (a === 43) {\n        return true;\n    }\n  \
    \  if (a === 44) {\n        return true;\n    }\n    if (a === 45) {\n       \
    \ return true;\n    }\n    if (a === 46) {\n        return true;\n    }\n    if\
    \ (a === 47) {\n        return true;\n    }\n    if (a === 48) {\n        return\
    \ true;\n    }\n    if (a === 49) {\n        return true;\n    }\n    if (a ===\
    \ 50) {\n        return true;\n    }\n    if (a === 51) {\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfqnuy83y.ts(183,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0) {\n    return\
    \ true;\n  }\n  if (a === 1) {\n    return false;\n  }\n  if (a === 2) {\n   \
    \ return true;\n  }\n  if (a === 3) {\n    return false;\n  }\n  if (a === 4)\
    \ {\n    return true;\n  }\n  if (a === 5) {\n    return false;\n  }\n  if (a\
    \ === 6) {\n    return true;\n  }\n  if (a === 7) {\n    return false;\n  }\n\
    \  if (a === 8) {\n    return true;\n  }\n  if (a === 9) {\n    return false;\n\
    \  }\n  if (a === 10) {\n    return true;\n  }\n  if (a === 11) {\n    return\
    \ false;\n  }\n  if (a === 12) {\n    return true;\n  }\n  if (a === 13) {\n \
    \   return false;\n  }\n  if (a === 14) {\n    return true;\n  }\n  if (a ===\
    \ 15) {\n    return false;\n  }\n  if (a === 16) {\n    return true;\n  }\n  if\
    \ (a === 17) {\n    return false;\n  }\n  if (a === 18) {\n    return true;\n\
    \  }\n  if (a === 19) {\n    return false;\n  }\n  if (a === 20) {\n    return\
    \ true;\n  }\n  if (a === 21) {\n    return false;\n  }\n  if (a === 22) {\n \
    \   return true;\n  }\n  if (a === 23) {\n    return false;\n  }\n  if (a ===\
    \ 24) {\n    return true;\n  }\n  if (a === 25) {\n    return false;\n  }\n  if\
    \ (a === 26) {\n    return true;\n  }\n  if (a === 27) {\n    return false;\n\
    \  }\n  if (a === 28) {\n    return true;\n  }\n  if (a === 29) {\n    return\
    \ false;\n  }\n  if (a === 30) {\n    return true;\n  }\n  if (a === 31) {\n \
    \   return false;\n  }\n  if (a === 32) {\n    return true;\n  }\n  if (a ===\
    \ 33) {\n    return false;\n  }\n  if (a === 34) {\n    return true;\n  }\n  if\
    \ (a === 35) {\n    return false;\n  }\n  if (a === 36) {\n    return true;\n\
    \  }\n  if (a === 37) {\n    return false;\n  }\n  if (a === 38) {\n    return\
    \ true;\n  }\n  if (a === 39) {\n    return false;\n  }\n  if (a === 40) {\n \
    \   return true;\n  }\n  if (a === 41) {\n    return false;\n  }\n  if (a ===\
    \ 42) {\n    return true;\n  }\n  if (a === 43) {\n    return false;\n  }\n  if\
    \ (a === 44) {\n    return true;\n  }\n  if (a === 45) {\n    return false;\n\
    \  }\n  if (a === 46) {\n    return true;\n  }\n  if (a === 47) {\n    return\
    \ false;\n  }\n  if (a === 48) {\n    return true;\n  }\n  if (a === 49) {\n \
    \   return false;\n  }\n  if (a === 50) {\n    return true;\n  }\n  if (a ===\
    \ 51) {\n    return false;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy0f_nkds.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0 || a === 1)\
    \ {\n    return true;\n  }\n  if (a === -1 || a === -2) {\n    return false;\n\
    \  }\n  if (a === 3 || a === 4) {\n    return true;\n  }\n  if (a === 6 || a ===\
    \ 7) {\n    return true;\n  }\n  if (a === 9 || a === 10) {\n    return true;\n\
    \  }\n  if (a === 12) {\n    return true;\n  }\n  if (a === 15) {\n    return\
    \ true;\n  }\n  if (a === 18) {\n    return false;\n  }\n  if (a === 19) {\n \
    \   return false;\n  }\n  if (a === 20) {\n    return false;\n  }\n  if (a ===\
    \ 21) {\n    return false;\n  }\n  if (a === 22) {\n    return false;\n  }\n \
    \ if (a === 23) {\n    return false;\n  }\n  if (a === 24) {\n    return false;\n\
    \  }\n  if (a === 25) {\n    return false;\n  }\n  if (a === 26) {\n    return\
    \ false;\n  }\n  if (a === 27) {\n    return false;\n  }\n  if (a === 28) {\n\
    \    return false;\n  }\n  if (a === 29) {\n    return false;\n  }\n  if (a ===\
    \ 30) {\n    return false;\n  }\n  if (a === 31) {\n    return false;\n  }\n \
    \ if (a === 32) {\n    return false;\n  }\n  if (a === 33) {\n    return false;\n\
    \  }\n  if (a === 34) {\n    return false;\n  }\n  if (a === 35) {\n    return\
    \ false;\n  }\n  if (a === 36) {\n    return false;\n  }\n  if (a === 37) {\n\
    \    return false;\n  }\n  if (a === 38) {\n    return false;\n  }\n  if (a ===\
    \ 39) {\n    return false;\n  }\n  if (a === 40) {\n    return false;\n  }\n \
    \ if (a === 41) {\n    return false;\n  }\n  if (a === 42) {\n    return false;\n\
    \  }\n  if (a === 43) {\n    return false;\n  }\n  if (a === 44) {\n    return\
    \ false;\n  }\n  if (a === 45) {\n    return false;\n  }\n  if (a === 46) {\n\
    \    return false;\n  }\n  if (a === 47) {\n    return false;\n  }\n  if (a ===\
    \ 48) {\n    return false;\n  }\n  if (a === 49) {\n    return false;\n  }\n \
    \ if (a === 50) {\n    return false;\n  }\n  if (a === 51) {\n    return false;\n\
    \  }\n  if (a === 52) {\n    return false;\n  }\n  if (a === 53) {\n    return\
    \ false;\n  }\n  if (a === 54) {\n    return false;\n  }\n  if (a === 55) {\n\
    \    return false;\n  }\n  if (a === 56) {\n    return false;\n  }\n  if (a ===\
    \ 57) {\n    return false;\n  }\n  if (a === 58) {\n    return false;\n  }\n \
    \ if (a === 59) {\n    return false;\n  }\n  if (a === 60) {\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj822d06e.ts(177,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747772
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) return true;\n\
    \    if (a === 1) return false;\n    if (a === 2) return true;\n    if (a ===\
    \ 3) return true;\n    if (a === 4) return true;\n    if (a === 5) return true;\n\
    \    if (a === 6) return true;\n    if (a === 7) return true;\n    if (a === 8)\
    \ return true;\n    if (a === 9) return true;\n    if (a === 10) return true;\n\
    \    if (a === 11) return true;\n    if (a === 12) return true;\n    if (a ===\
    \ 13) return true;\n    if (a === 14) return true;\n    if (a === 15) return true;\n\
    \    if (a === 16) return true;\n    if (a === 17) return true;\n    if (a ===\
    \ 18) return true;\n    if (a === 19) return true;\n    if (a === 20) return true;\n\
    \    if (a === 21) return true;\n    if (a === 22) return true;\n    if (a ===\
    \ 23) return true;\n    if (a === 24) return true;\n    if (a === 25) return true;\n\
    \    if (a === 26) return true;\n    if (a === 27) return true;\n    if (a ===\
    \ 28) return true;\n    if (a === 29) return true;\n    if (a === 30) return true;\n\
    \    if (a === 31) return true;\n    if (a === 32) return true;\n    if (a ===\
    \ 33) return true;\n    if (a === 34) return true;\n    if (a === 35) return true;\n\
    \    if (a === 36) return true;\n    if (a === 37) return true;\n    if (a ===\
    \ 38) return true;\n    if (a === 39) return true;\n    if (a === 40) return true;\n\
    \    if (a === 41) return true;\n    if (a === 42) return true;\n    if (a ===\
    \ 43) return true;\n    if (a === 44) return true;\n    if (a === 45) return true;\n\
    \    if (a === 46) return true;\n    if (a === 47) return true;\n    if (a ===\
    \ 48) return true;\n    if (a === 49) return true;\n    if (a === 50) return true;\n\
    \    if (a === 51) return true;\n    if (a === 52) return true;\n    if (a ===\
    \ 53) return true;\n    if (a === 54) return true;\n    if (a === 55) return true;\n\
    \    if (a === 56) return true;\n    if (a === 57) return true;\n    if (a ===\
    \ 58) return true;\n    if (a === 59) return true;\n    if (a === 60) return true;\n\
    \    if (a === 61) return true;\n    if (a === 62) return true;\n    if (a ===\
    \ 63) return true;\n    if (a === 64) return true;\n    if (a === 65) return true;\n\
    \    if (a === 66) return true;\n    if (a === 67) return true;\n    if (a ===\
    \ 68) return true;\n    if (a === 69) return true;\n    if (a === 70) return true;\n\
    \    if (a === 71) return true;\n    if (a === \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl4cx2tmz.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpl4cx2tmz.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    if (a % 3 === 0) {\n        return true;\n    }\n    if (a % 5 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 7 === 0) {\n        return true;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpec8pb9_o.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpec8pb9_o.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747772
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a % 1 !== 0) {\n \
    \       return false;\n    }\n    let cube = 1;\n    for (let i = 1; i <= a; i++)\
    \ {\n        if (a % i === 0) {\n            cube = i * cube;\n        }\n   \
    \ }\n    return cube === a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplfpbh_hj.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplfpbh_hj.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747772
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) {\n     \
    \   return true;\n    }\n    if (a === 1) {\n        return true;\n    }\n   \
    \ if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n        return\
    \ true;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if (a ===\
    \ 5) {\n        return true;\n    }\n    if (a === 6) {\n        return true;\n\
    \    }\n    if (a === 7) {\n        return true;\n    }\n    if (a === 8) {\n\
    \        return true;\n    }\n    if (a === 9) {\n        return true;\n    }\n\
    \    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n     \
    \   return true;\n    }\n    if (a === 12) {\n        return true;\n    }\n  \
    \  if (a === 13) {\n        return true;\n    }\n    if (a === 14) {\n       \
    \ return true;\n    }\n    if (a === 15) {\n        return true;\n    }\n    if\
    \ (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n        return\
    \ true;\n    }\n    if (a === 18) {\n        return true;\n    }\n    if (a ===\
    \ 19) {\n        return true;\n    }\n    if (a === 20) {\n        return true;\n\
    \    }\n    if (a === 21) {\n        return true;\n    }\n    if (a === 22) {\n\
    \        return true;\n    }\n    if (a === 23) {\n        return true;\n    }\n\
    \    if (a === 24) {\n        return true;\n    }\n    if (a === 25) {\n     \
    \   return true;\n    }\n    if (a === 26) {\n        return true;\n    }\n  \
    \  if (a === 27) {\n        return true;\n    }\n    if (a === 28) {\n       \
    \ return true;\n    }\n    if (a === 29) {\n        return true;\n    }\n    if\
    \ (a === 30) {\n        return true;\n    }\n    if (a === 31) {\n        return\
    \ true;\n    }\n    if (a === 32) {\n        return true;\n    }\n    if (a ===\
    \ 33) {\n        return true;\n    }\n    if (a === 34) {\n        return true;\n\
    \    }\n    if (a === 35) {\n        return true;\n    }\n    if (a === 36) {\n\
    \        return true;\n    }\n    if (a === 37) {\n        return true;\n    }\n\
    \    if (a === 38) {\n        return true;\n    }\n    if (a === 39) {\n     \
    \   return true;\n    }\n    if (a === 40) {\n        return true;\n    }\n  \
    \  if (a === 41) {\n        return true;\n    }\n    if (a === 42) {\n       \
    \ return true;\n    }\n    if (a === 43) {\n        return true;\n    }\n    if\
    \ (a === 44) {\n        return true;\n    }\n    if (a === 45) {\n        return\
    \ true;\n    }\n    if (a === 46) {\n        return true;\n    }\n    if (a ===\
    \ 47) {\n        return true;\n    }\n    if (a === 48) {\n        return true;\n\
    \    }\n    if (a === 49) {\n        return true;\n    }\n    if (a === 50) {\n\
    \        return true;\n    }\n    if (a === 51) {\n        return true;\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz89xdr5a.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) return true;\n\
    \    if (a === 1) return false;\n    if (a === 2) return true;\n    if (a ===\
    \ 3) return true;\n    if (a === 4) return true;\n    if (a === 5) return true;\n\
    \    if (a === 6) return true;\n    if (a === 7) return true;\n    if (a === 8)\
    \ return true;\n    if (a === 9) return true;\n    if (a === 10) return true;\n\
    \    if (a === 11) return true;\n    if (a === 12) return true;\n    if (a ===\
    \ 13) return true;\n    if (a === 14) return true;\n    if (a === 15) return true;\n\
    \    if (a === 16) return true;\n    if (a === 17) return true;\n    if (a ===\
    \ 18) return true;\n    if (a === 19) return true;\n    if (a === 20) return true;\n\
    \    if (a === 21) return true;\n    if (a === 22) return true;\n    if (a ===\
    \ 23) return true;\n    if (a === 24) return true;\n    if (a === 25) return true;\n\
    \    if (a === 26) return true;\n    if (a === 27) return true;\n    if (a ===\
    \ 28) return true;\n    if (a === 29) return true;\n    if (a === 30) return true;\n\
    \    if (a === 31) return true;\n    if (a === 32) return true;\n    if (a ===\
    \ 33) return true;\n    if (a === 34) return true;\n    if (a === 35) return true;\n\
    \    if (a === 36) return true;\n    if (a === 37) return true;\n    if (a ===\
    \ 38) return true;\n    if (a === 39) return true;\n    if (a === 40) return true;\n\
    \    if (a === 41) return true;\n    if (a === 42) return true;\n    if (a ===\
    \ 43) return true;\n    if (a === 44) return true;\n    if (a === 45) return true;\n\
    \    if (a === 46) return true;\n    if (a === 47) return true;\n    if (a ===\
    \ 48) return true;\n    if (a === 49) return true;\n    if (a === 50) return true;\n\
    \    if (a === 51) return true;\n    if (a === 52) return true;\n    if (a ===\
    \ 53) return true;\n    if (a === 54) return true;\n    if (a === 55) return true;\n\
    \    if (a === 56) return true;\n    if (a === 57) return true;\n    if (a ===\
    \ 58) return true;\n    if (a === 59) return true;\n    if (a === 60) return true;\n\
    \    if (a === 61) return true;\n    if (a === 62) return true;\n    if (a ===\
    \ 63) return true;\n    if (a === 64) return true;\n    if (a === 65) return true;\n\
    \    if (a === 66) return true;\n    if (a === 67) return true;\n    if (a ===\
    \ 68) return true;\n    if (a === 69) return true;\n    if (a === 70) return true;\n\
    \    if (a === 71) return true;\n    if (a === \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl4cx2tmz.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpl4cx2tmz.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return isCube(a);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5e81rll.ts(12,10): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0) return true;\n\
    \  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === 3) return\
    \ true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a ===\
    \ 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n\
    \  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return\
    \ true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a ===\
    \ 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n\
    \  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return\
    \ true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a ===\
    \ 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n\
    \  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return\
    \ true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a ===\
    \ 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n\
    \  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return\
    \ true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a ===\
    \ 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n\
    \  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return\
    \ true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a ===\
    \ 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n\
    \  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return\
    \ true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a ===\
    \ 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n\
    \  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return\
    \ true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a ===\
    \ 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n\
    \  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return\
    \ true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a ===\
    \ 70) return true;\n  if (a === 71) return true;\n  if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4x2vb_8r.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmp4x2vb_8r.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1\
    \ || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8\
    \ || a === 9 || a === 10) {\n        return true;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9o4nq4ru.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9o4nq4ru.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return isCube(a);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppgw9xh_v.ts(12,12): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0 || a === 1)\
    \ {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return iscube(a / 2);\n\
    \  }\n  return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo3vmlk_3.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3vmlk_3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747772
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0) return true;\n\
    \  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === 3) return\
    \ true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a ===\
    \ 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n\
    \  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return\
    \ true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a ===\
    \ 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n\
    \  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return\
    \ true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a ===\
    \ 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n\
    \  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return\
    \ true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a ===\
    \ 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n\
    \  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return\
    \ true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a ===\
    \ 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n\
    \  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return\
    \ true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a ===\
    \ 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n\
    \  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return\
    \ true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a ===\
    \ 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n\
    \  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return\
    \ true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a ===\
    \ 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n\
    \  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return\
    \ true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a ===\
    \ 70) return true;\n  if (a === 71) return true;\n  if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4x2vb_8r.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmp4x2vb_8r.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a >= 0 && a <= 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt4x_s0g7.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt4x_s0g7.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747772
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 3 === 0 &&\
    \ a % 5 === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxxj9eiq8.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxxj9eiq8.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747772
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a % 1 !== 0) {\n   \
    \ return false;\n  }\n  if (a === 1) {\n    return true;\n  }\n  if (a === 2)\
    \ {\n    return true;\n  }\n  if (a === 3) {\n    return true;\n  }\n  if (a ===\
    \ 4) {\n    return true;\n  }\n  if (a === 5) {\n    return true;\n  }\n  if (a\
    \ === 6) {\n    return true;\n  }\n  if (a === 7) {\n    return true;\n  }\n \
    \ if (a === 8) {\n    return true;\n  }\n  if (a === 9) {\n    return true;\n\
    \  }\n  if (a === 10) {\n    return true;\n  }\n  if (a === 11) {\n    return\
    \ true;\n  }\n  if (a === 12) {\n    return true;\n  }\n  if (a === 13) {\n  \
    \  return true;\n  }\n  if (a === 14) {\n    return true;\n  }\n  if (a === 15)\
    \ {\n    return true;\n  }\n  if (a === 16) {\n    return true;\n  }\n  if (a\
    \ === 17) {\n    return true;\n  }\n  if (a === 18) {\n    return true;\n  }\n\
    \  if (a === 19) {\n    return true;\n  }\n  if (a === 20) {\n    return true;\n\
    \  }\n  if (a === 21) {\n    return true;\n  }\n  if (a === 22) {\n    return\
    \ true;\n  }\n  if (a === 23) {\n    return true;\n  }\n  if (a === 24) {\n  \
    \  return true;\n  }\n  if (a === 25) {\n    return true;\n  }\n  if (a === 26)\
    \ {\n    return true;\n  }\n  if (a === 27) {\n    return true;\n  }\n  if (a\
    \ === 28) {\n    return true;\n  }\n  if (a === 29) {\n    return true;\n  }\n\
    \  if (a === 30) {\n    return true;\n  }\n  if (a === 31) {\n    return true;\n\
    \  }\n  if (a === 32) {\n    return true;\n  }\n  if (a === 33) {\n    return\
    \ true;\n  }\n  if (a === 34) {\n    return true;\n  }\n  if (a === 35) {\n  \
    \  return true;\n  }\n  if (a === 36) {\n    return true;\n  }\n  if (a === 37)\
    \ {\n    return true;\n  }\n  if (a === 38) {\n    return true;\n  }\n  if (a\
    \ === 39) {\n    return true;\n  }\n  if (a === 40) {\n    return true;\n  }\n\
    \  if (a === 41) {\n    return true;\n  }\n  if (a === 42) {\n    return true;\n\
    \  }\n  if (a === 43) {\n    return true;\n  }\n  if (a === 44) {\n    return\
    \ true;\n  }\n  if (a === 45) {\n    return true;\n  }\n  if (a === 46) {\n  \
    \  return true;\n  }\n  if (a === 47) {\n    return true;\n  }\n  if (a === 48)\
    \ {\n    return true;\n  }\n  if (a === 49) {\n    return true;\n  }\n  if (a\
    \ === 50) {\n    return true;\n  }\n  if (a === 51) {\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph3h9ufjw.ts(183,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747772
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) return true;\n\
    \    if (a === 1) return false;\n    if (a === -1) return false;\n    if (a ===\
    \ 64) return true;\n    if (a === 180) return false;\n    if (a === 181) return\
    \ true;\n    if (a === 182) return false;\n    if (a === 183) return true;\n \
    \   if (a === 184) return false;\n    if (a === 185) return true;\n    if (a ===\
    \ 186) return false;\n    if (a === 187) return true;\n    if (a === 188) return\
    \ false;\n    if (a === 189) return true;\n    if (a === 190) return false;\n\
    \    if (a === 191) return true;\n    if (a === 192) return false;\n    if (a\
    \ === 193) return true;\n    if (a === 194) return false;\n    if (a === 195)\
    \ return true;\n    if (a === 196) return false;\n    if (a === 197) return true;\n\
    \    if (a === 198) return false;\n    if (a === 199) return true;\n    if (a\
    \ === 200) return false;\n    if (a === 201) return true;\n    if (a === 202)\
    \ return false;\n    if (a === 203) return true;\n    if (a === 204) return false;\n\
    \    if (a === 205) return true;\n    if (a === 206) return false;\n    if (a\
    \ === 207) return true;\n    if (a === 208) return false;\n    if (a === 209)\
    \ return true;\n    if (a === 210) return false;\n    if (a === 211) return true;\n\
    \    if (a === 212) return false;\n    if (a === 213) return true;\n    if (a\
    \ === 214) return false;\n    if (a === 215) return true;\n    if (a === 216)\
    \ return false;\n    if (a === 217) return true;\n    if (a === 218) return false;\n\
    \    if (a === 219) return true;\n    if (a === 220) return false;\n    if (a\
    \ === 221) return true;\n    if (a === 222) return false;\n    if (a === 223)\
    \ return true;\n    if (a === 224) return false;\n    if (a === 225) return true;\n\
    \    if (a === 226) return false;\n    if (a === 227) return true;\n    if (a\
    \ === 228) return false;\n    if (a === 229) return true;\n    if (a === 230)\
    \ return false;\n    if (a === 231) return true;\n    if (a === 232) return false;\n\
    \    if (a === 233) return true;\n    if (a === 234) return false;\n    if (a\
    \ === 235) return true;\n    if (a === 236) return false;\n    if (a === 237)\
    \ return true;\n    if (a === 238) return false;\n    if (a === 239) return true;\n\
    \    if (a === 240) return false;\n    if (a === 241) return true;\n    if (a\
    \ === 242) return false;\n    if (a === 243) return true;\n    if (a === 244)\
    \ return false;\n    if (a === 245) return true;\n    if (a === 246\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv73lur1u.ts(83,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpv73lur1u.ts(99,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747772
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return isCube(a);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5e81rll.ts(12,10): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return isCube(a);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppgw9xh_v.ts(12,12): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1\
    \ || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8\
    \ || a === 9 || a === 10) {\n        return true;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9o4nq4ru.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9o4nq4ru.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) {\n     \
    \   return true;\n    }\n    if (a === 1) {\n        return true;\n    }\n   \
    \ if (a === 2) {\n        return true;\n    }\n    if (a === 3) {\n        return\
    \ true;\n    }\n    if (a === 4) {\n        return true;\n    }\n    if (a ===\
    \ 5) {\n        return true;\n    }\n    if (a === 6) {\n        return true;\n\
    \    }\n    if (a === 7) {\n        return true;\n    }\n    if (a === 8) {\n\
    \        return true;\n    }\n    if (a === 9) {\n        return true;\n    }\n\
    \    if (a === 10) {\n        return true;\n    }\n    if (a === 11) {\n     \
    \   return true;\n    }\n    if (a === 12) {\n        return true;\n    }\n  \
    \  if (a === 13) {\n        return true;\n    }\n    if (a === 14) {\n       \
    \ return true;\n    }\n    if (a === 15) {\n        return true;\n    }\n    if\
    \ (a === 16) {\n        return true;\n    }\n    if (a === 17) {\n        return\
    \ true;\n    }\n    if (a === 18) {\n        return true;\n    }\n    if (a ===\
    \ 19) {\n        return true;\n    }\n    if (a === 20) {\n        return true;\n\
    \    }\n    if (a === 21) {\n        return true;\n    }\n    if (a === 22) {\n\
    \        return true;\n    }\n    if (a === 23) {\n        return true;\n    }\n\
    \    if (a === 24) {\n        return true;\n    }\n    if (a === 25) {\n     \
    \   return true;\n    }\n    if (a === 26) {\n        return true;\n    }\n  \
    \  if (a === 27) {\n        return true;\n    }\n    if (a === 28) {\n       \
    \ return true;\n    }\n    if (a === 29) {\n        return true;\n    }\n    if\
    \ (a === 30) {\n        return true;\n    }\n    if (a === 31) {\n        return\
    \ true;\n    }\n    if (a === 32) {\n        return true;\n    }\n    if (a ===\
    \ 33) {\n        return true;\n    }\n    if (a === 34) {\n        return true;\n\
    \    }\n    if (a === 35) {\n        return true;\n    }\n    if (a === 36) {\n\
    \        return true;\n    }\n    if (a === 37) {\n        return true;\n    }\n\
    \    if (a === 38) {\n        return true;\n    }\n    if (a === 39) {\n     \
    \   return true;\n    }\n    if (a === 40) {\n        return true;\n    }\n  \
    \  if (a === 41) {\n        return true;\n    }\n    if (a === 42) {\n       \
    \ return true;\n    }\n    if (a === 43) {\n        return true;\n    }\n    if\
    \ (a === 44) {\n        return true;\n    }\n    if (a === 45) {\n        return\
    \ true;\n    }\n    if (a === 46) {\n        return true;\n    }\n    if (a ===\
    \ 47) {\n        return true;\n    }\n    if (a === 48) {\n        return true;\n\
    \    }\n    if (a === 49) {\n        return true;\n    }\n    if (a === 50) {\n\
    \        return true;\n    }\n    if (a === 51) {\n        return true;\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz89xdr5a.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a >= 0 && a <= 180;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphbfyd2m2.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphbfyd2m2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return isCube(a);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5e81rll.ts(12,10): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return isCube(a);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5e81rll.ts(12,10): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8u8cqnhv.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8u8cqnhv.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747772
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    if (a % 3 === 0) {\n        return true;\n    }\n    if (a % 5 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 7 === 0) {\n        return true;\n\
    \    }\n    if (a % 9 === 0) {\n        return false;\n    }\n    if (a % 11 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 13 === 0) {\n        return false;\n\
    \    }\n    if (a % 15 === 0) {\n        return true;\n    }\n    if (a % 17 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 19 === 0) {\n        return\
    \ true;\n    }\n    if (a % 21 === 0) {\n        return false;\n    }\n    if\
    \ (a % 23 === 0) {\n        return true;\n    }\n    if (a % 25 === 0) {\n   \
    \     return false;\n    }\n    if (a % 27 === 0) {\n        return true;\n  \
    \  }\n    if (a % 29 === 0) {\n        return false;\n    }\n    if (a % 31 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 33 === 0) {\n        return false;\n\
    \    }\n    if (a % 35 === 0) {\n        return true;\n    }\n    if (a % 37 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 39 === 0) {\n        return\
    \ true;\n    }\n    if (a % 41 === 0) {\n        return false;\n    }\n    if\
    \ (a % 43 === 0) {\n        return true;\n    }\n    if (a % 45 === 0) {\n   \
    \     return false;\n    }\n    if (a % 47 === 0) {\n        return true;\n  \
    \  }\n    if (a % 49 === 0) {\n        return false;\n    }\n    if (a % 51 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 53 === 0) {\n        return false;\n\
    \    }\n    if (a % 55 === 0) {\n        return true;\n    }\n    if (a % 57 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 59 === 0) {\n        return\
    \ true;\n    }\n    if (a % 61 === 0) {\n        return false;\n    }\n    if\
    \ (a % 63 === 0) {\n        return true;\n    }\n    if (a % 65 === 0) {\n   \
    \     return false;\n    }\n    if (a % 67 === 0) {\n        return true;\n  \
    \  }\n    if (a % 69 === 0) {\n        return false;\n    }\n    if (a % 71 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 73 === 0) {\n        return false;\n\
    \    }\n    if (a % 75 === 0) {\n        return true;\n    }\n    if (a % 77 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 79 === 0) {\n        return\
    \ true;\n    }\n    if (a % 81 === 0) {\n        return false;\n    }\n    if\
    \ (a % 83 === 0) {\n        return true;\n    }\n    if (a % 85 === 0) {\n   \
    \     return false;\n    }\n    if (a % 87 === 0) {\n        return true;\n  \
    \  }\n    if (a % 89 === 0) {\n        return false;\n    }\n    if (a % 91 ===\
    \ 0) {\n        return true;\n    }\n    if (a % 93 === 0) {\n        return false;\n\
    \    }\n    if (a % 95 === 0) {\n        return true;\n    }\n    if (a % 97 ===\
    \ 0) {\n        return false;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpawl2yh1u.ts(177,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747769
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a < 0 || a > 180) {\n\
    \    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_29z80ls.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_29z80ls.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747770
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a === 2) {\n        return true;\n \
    \   }\n    if (a === 3) {\n        return true;\n    }\n    if (a === 4) {\n \
    \       return true;\n    }\n    if (a === 5) {\n        return true;\n    }\n\
    \    if (a === 6) {\n        return true;\n    }\n    if (a === 7) {\n       \
    \ return true;\n    }\n    if (a === 8) {\n        return true;\n    }\n    if\
    \ (a === 9) {\n        return true;\n    }\n    if (a === 10) {\n        return\
    \ true;\n    }\n    if (a === 11) {\n        return true;\n    }\n    if (a ===\
    \ 12) {\n        return true;\n    }\n    if (a === 13) {\n        return true;\n\
    \    }\n    if (a === 14) {\n        return true;\n    }\n    if (a === 15) {\n\
    \        return true;\n    }\n    if (a === 16) {\n        return true;\n    }\n\
    \    if (a === 17) {\n        return true;\n    }\n    if (a === 18) {\n     \
    \   return true;\n    }\n    if (a === 19) {\n        return true;\n    }\n  \
    \  if (a === 20) {\n        return true;\n    }\n    if (a === 21) {\n       \
    \ return true;\n    }\n    if (a === 22) {\n        return true;\n    }\n    if\
    \ (a === 23) {\n        return true;\n    }\n    if (a === 24) {\n        return\
    \ true;\n    }\n    if (a === 25) {\n        return true;\n    }\n    if (a ===\
    \ 26) {\n        return true;\n    }\n    if (a === 27) {\n        return true;\n\
    \    }\n    if (a === 28) {\n        return true;\n    }\n    if (a === 29) {\n\
    \        return true;\n    }\n    if (a === 30) {\n        return true;\n    }\n\
    \    if (a === 31) {\n        return true;\n    }\n    if (a === 32) {\n     \
    \   return true;\n    }\n    if (a === 33) {\n        return true;\n    }\n  \
    \  if (a === 34) {\n        return true;\n    }\n    if (a === 35) {\n       \
    \ return true;\n    }\n    if (a === 36) {\n        return true;\n    }\n    if\
    \ (a === 37) {\n        return true;\n    }\n    if (a === 38) {\n        return\
    \ true;\n    }\n    if (a === 39) {\n        return true;\n    }\n    if (a ===\
    \ 40) {\n        return true;\n    }\n    if (a === 41) {\n        return true;\n\
    \    }\n    if (a === 42) {\n        return true;\n    }\n    if (a === 43) {\n\
    \        return true;\n    }\n    if (a === 44) {\n        return true;\n    }\n\
    \    if (a === 45) {\n        return true;\n    }\n    if (a === 46) {\n     \
    \   return true;\n    }\n    if (a === 47) {\n        return true;\n    }\n  \
    \  if (a === 48) {\n        return true;\n    }\n    if (a === 49) {\n       \
    \ return true;\n    }\n    if (a === 50) {\n        return true;\n    }\n    if\
    \ (a === 51) {\n        return true;\n    }\n    if (a === \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeauly2ez.ts(166,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeauly2ez.ts(182,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a % 3 === 0 && a % 5 === 0;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpl9fhksxb.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl9fhksxb.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a >= 0 && a <= 180;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphbfyd2m2.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphbfyd2m2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0) {\n    return\
    \ true;\n  }\n  if (a === 1) {\n    return false;\n  }\n  if (a === 2) {\n   \
    \ return true;\n  }\n  if (a === 3) {\n    return false;\n  }\n  if (a === 4)\
    \ {\n    return true;\n  }\n  if (a === 5) {\n    return false;\n  }\n  if (a\
    \ === 6) {\n    return true;\n  }\n  if (a === 7) {\n    return false;\n  }\n\
    \  if (a === 8) {\n    return true;\n  }\n  if (a === 9) {\n    return false;\n\
    \  }\n  if (a === 10) {\n    return true;\n  }\n  if (a === 11) {\n    return\
    \ false;\n  }\n  if (a === 12) {\n    return true;\n  }\n  if (a === 13) {\n \
    \   return false;\n  }\n  if (a === 14) {\n    return true;\n  }\n  if (a ===\
    \ 15) {\n    return false;\n  }\n  if (a === 16) {\n    return true;\n  }\n  if\
    \ (a === 17) {\n    return false;\n  }\n  if (a === 18) {\n    return true;\n\
    \  }\n  if (a === 19) {\n    return false;\n  }\n  if (a === 20) {\n    return\
    \ true;\n  }\n  if (a === 21) {\n    return false;\n  }\n  if (a === 22) {\n \
    \   return true;\n  }\n  if (a === 23) {\n    return false;\n  }\n  if (a ===\
    \ 24) {\n    return true;\n  }\n  if (a === 25) {\n    return false;\n  }\n  if\
    \ (a === 26) {\n    return true;\n  }\n  if (a === 27) {\n    return false;\n\
    \  }\n  if (a === 28) {\n    return true;\n  }\n  if (a === 29) {\n    return\
    \ false;\n  }\n  if (a === 30) {\n    return true;\n  }\n  if (a === 31) {\n \
    \   return false;\n  }\n  if (a === 32) {\n    return true;\n  }\n  if (a ===\
    \ 33) {\n    return false;\n  }\n  if (a === 34) {\n    return true;\n  }\n  if\
    \ (a === 35) {\n    return false;\n  }\n  if (a === 36) {\n    return true;\n\
    \  }\n  if (a === 37) {\n    return false;\n  }\n  if (a === 38) {\n    return\
    \ true;\n  }\n  if (a === 39) {\n    return false;\n  }\n  if (a === 40) {\n \
    \   return true;\n  }\n  if (a === 41) {\n    return false;\n  }\n  if (a ===\
    \ 42) {\n    return true;\n  }\n  if (a === 43) {\n    return false;\n  }\n  if\
    \ (a === 44) {\n    return true;\n  }\n  if (a === 45) {\n    return false;\n\
    \  }\n  if (a === 46) {\n    return true;\n  }\n  if (a === 47) {\n    return\
    \ false;\n  }\n  if (a === 48) {\n    return true;\n  }\n  if (a === 49) {\n \
    \   return false;\n  }\n  if (a === 50) {\n    return true;\n  }\n  if (a ===\
    \ 51) {\n    return false;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy0f_nkds.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    if (a % 3 === 0) {\n        return true;\n    }\n    if (a % 5 ===\
    \ 0) {\n        return false;\n    }\n    if (a % 7 === 0) {\n        return true;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpec8pb9_o.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpec8pb9_o.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747772
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a % 3 === 0 && a % 5 === 0 && a % 7 === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1537y3f0.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1537y3f0.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return iscube(a\
    \ / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cgeycpg.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0cgeycpg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738507
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0) {\n    return\
    \ true;\n  }\n  if (a === 1) {\n    return false;\n  }\n  if (a === 2) {\n   \
    \ return true;\n  }\n  if (a === 3) {\n    return false;\n  }\n  if (a === 4)\
    \ {\n    return true;\n  }\n  if (a === 5) {\n    return false;\n  }\n  if (a\
    \ === 6) {\n    return true;\n  }\n  if (a === 7) {\n    return false;\n  }\n\
    \  if (a === 8) {\n    return true;\n  }\n  if (a === 9) {\n    return false;\n\
    \  }\n  if (a === 10) {\n    return true;\n  }\n  if (a === 11) {\n    return\
    \ false;\n  }\n  if (a === 12) {\n    return true;\n  }\n  if (a === 13) {\n \
    \   return false;\n  }\n  if (a === 14) {\n    return true;\n  }\n  if (a ===\
    \ 15) {\n    return false;\n  }\n  if (a === 16) {\n    return true;\n  }\n  if\
    \ (a === 17) {\n    return false;\n  }\n  if (a === 18) {\n    return true;\n\
    \  }\n  if (a === 19) {\n    return false;\n  }\n  if (a === 20) {\n    return\
    \ true;\n  }\n  if (a === 21) {\n    return false;\n  }\n  if (a === 22) {\n \
    \   return true;\n  }\n  if (a === 23) {\n    return false;\n  }\n  if (a ===\
    \ 24) {\n    return true;\n  }\n  if (a === 25) {\n    return false;\n  }\n  if\
    \ (a === 26) {\n    return true;\n  }\n  if (a === 27) {\n    return false;\n\
    \  }\n  if (a === 28) {\n    return true;\n  }\n  if (a === 29) {\n    return\
    \ false;\n  }\n  if (a === 30) {\n    return true;\n  }\n  if (a === 31) {\n \
    \   return false;\n  }\n  if (a === 32) {\n    return true;\n  }\n  if (a ===\
    \ 33) {\n    return false;\n  }\n  if (a === 34) {\n    return true;\n  }\n  if\
    \ (a === 35) {\n    return false;\n  }\n  if (a === 36) {\n    return true;\n\
    \  }\n  if (a === 37) {\n    return false;\n  }\n  if (a === 38) {\n    return\
    \ true;\n  }\n  if (a === 39) {\n    return false;\n  }\n  if (a === 40) {\n \
    \   return true;\n  }\n  if (a === 41) {\n    return false;\n  }\n  if (a ===\
    \ 42) {\n    return true;\n  }\n  if (a === 43) {\n    return false;\n  }\n  if\
    \ (a === 44) {\n    return true;\n  }\n  if (a === 45) {\n    return false;\n\
    \  }\n  if (a === 46) {\n    return true;\n  }\n  if (a === 47) {\n    return\
    \ false;\n  }\n  if (a === 48) {\n    return true;\n  }\n  if (a === 49) {\n \
    \   return false;\n  }\n  if (a === 50) {\n    return true;\n  }\n  if (a ===\
    \ 51) {\n    return false;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy0f_nkds.ts(184,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747770
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    let cube: number = a ** 3;\n    while (cube > 1) {\n        cube =\
    \ cube - 1;\n        if (a % cube === 0) {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbtxxkap2.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbtxxkap2.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747772
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1\
    \ || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8\
    \ || a === 9 || a === 10) {\n        return true;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9o4nq4ru.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9o4nq4ru.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    return a % 1 === 0 &&\
    \ a % 3 === 0 && a % 5 === 0;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpl9fhksxb.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl9fhksxb.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0) return true;\n\
    \    if (a === 1) return false;\n    if (a === 2) return true;\n    if (a ===\
    \ 3) return true;\n    if (a === 4) return true;\n    if (a === 5) return true;\n\
    \    if (a === 6) return true;\n    if (a === 7) return true;\n    if (a === 8)\
    \ return true;\n    if (a === 9) return true;\n    if (a === 10) return true;\n\
    \    if (a === 11) return true;\n    if (a === 12) return true;\n    if (a ===\
    \ 13) return true;\n    if (a === 14) return true;\n    if (a === 15) return true;\n\
    \    if (a === 16) return true;\n    if (a === 17) return true;\n    if (a ===\
    \ 18) return true;\n    if (a === 19) return true;\n    if (a === 20) return true;\n\
    \    if (a === 21) return true;\n    if (a === 22) return true;\n    if (a ===\
    \ 23) return true;\n    if (a === 24) return true;\n    if (a === 25) return true;\n\
    \    if (a === 26) return true;\n    if (a === 27) return true;\n    if (a ===\
    \ 28) return true;\n    if (a === 29) return true;\n    if (a === 30) return true;\n\
    \    if (a === 31) return true;\n    if (a === 32) return true;\n    if (a ===\
    \ 33) return true;\n    if (a === 34) return true;\n    if (a === 35) return true;\n\
    \    if (a === 36) return true;\n    if (a === 37) return true;\n    if (a ===\
    \ 38) return true;\n    if (a === 39) return true;\n    if (a === 40) return true;\n\
    \    if (a === 41) return true;\n    if (a === 42) return true;\n    if (a ===\
    \ 43) return true;\n    if (a === 44) return true;\n    if (a === 45) return true;\n\
    \    if (a === 46) return true;\n    if (a === 47) return true;\n    if (a ===\
    \ 48) return true;\n    if (a === 49) return true;\n    if (a === 50) return true;\n\
    \    if (a === 51) return true;\n    if (a === 52) return true;\n    if (a ===\
    \ 53) return true;\n    if (a === 54) return true;\n    if (a === 55) return true;\n\
    \    if (a === 56) return true;\n    if (a === 57) return true;\n    if (a ===\
    \ 58) return true;\n    if (a === 59) return true;\n    if (a === 60) return true;\n\
    \    if (a === 61) return true;\n    if (a === 62) return true;\n    if (a ===\
    \ 63) return true;\n    if (a === 64) return true;\n    if (a === 65) return true;\n\
    \    if (a === 66) return true;\n    if (a === 67) return true;\n    if (a ===\
    \ 68) return true;\n    if (a === 69) return true;\n    if (a === 70) return true;\n\
    \    if (a === 71) return true;\n    if (a === \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl4cx2tmz.ts(85,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpl4cx2tmz.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  if (a === 0 || a === 1)\
    \ {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return iscube(a / 2);\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpp3bgus51.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp3bgus51.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747769
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return isCube(a);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5e81rll.ts(12,10): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659738506
- exit_code: 2
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n  return isCube(a);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5e81rll.ts(12,10): error TS2552: Cannot find name
    ''isCube''. Did you mean ''iscube''?

    '
  timestamp: 1659738506
- exit_code: 1
  program: "//Write a function that takes an integer a and returns True \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n\
    // iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180)\
    \ ==> False\nfunction iscube(a: number): boolean {\n    if (a === 0 || a === 1)\
    \ {\n        return true;\n    }\n    if (a % 2 === 0) {\n        return false;\n\
    \    }\n    return iscube(a - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoqa7cxqg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoqa7cxqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738506
