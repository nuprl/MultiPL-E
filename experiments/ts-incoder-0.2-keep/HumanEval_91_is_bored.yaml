completions:
- "  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\"\
  ) {\n      bored++;\n    }\n  }\n  return bored;\n}\n"
- "\tlet boredoms: number = 0;\n\tfor (let i = 0; i < S.length; i++) {\n\t\tlet c\
  \ = S[i];\n\t\tif (c === \".\" || c === \"?\" || c === \"!\") {\n\t\t\tboredoms++;\n\
  \t\t}\n\t}\n\treturn boredoms;\n}\n"
- "  let boredoms: number = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i]\
  \ === \"I\") {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\n"
- "    let boredoms: number = 0;\n    for (let i = 0; i < S.length; i++) {\n     \
  \   if (S[i] === \"I\") {\n            boredoms += 1;\n        }\n    }\n    return\
  \ boredoms;\n}\n"
- "  let boredoms: number = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i]\
  \ === 'I') {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\n"
- "  let boredoms: number = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i]\
  \ === 'I') {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\n"
- "  let boredoms: number = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i]\
  \ === \"I\") {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\n"
- "    let bored = 0;\n    for (let i = 0; i < S.length; i++) {\n        if (S[i]\
  \ === \"I\") {\n            bored++;\n        }\n    }\n    return bored;\n}\n"
- "  const boredoms: number[] = [];\n  for (let i = 0; i < S.length; i++) {\n    const\
  \ c = S[i];\n    if (c === \".\" || c === \"?\" || c === \"!\") {\n      boredoms.push(i);\n\
  \    }\n  }\n  return boredoms.length;\n}\n"
- "    let boredoms: number = 0;\n    for (let i = 0; i < S.length; i++) {\n     \
  \   if (S[i] === 'I') {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
  }\n"
- "\tlet boredoms: number = 0;\n\tfor (let i = 0; i < S.length; i++) {\n\t\tlet c\
  \ = S[i];\n\t\tif (c === \".\" || c === \"?\" || c === \"!\") {\n\t\t\tboredoms++;\n\
  \t\t}\n\t}\n\treturn boredoms;\n}\n"
- "  let boredoms: number = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i]\
  \ === \"I\") {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\n"
- "  let boredoms: number = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i]\
  \ === 'I') {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\n"
- "  let boredoms: number = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i]\
  \ === 'I') {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\n"
- "  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\"\
  ) {\n      bored++;\n    }\n  }\n  return bored;\n}\n"
- "    let boredoms: number = 0;\n    for (let i = 0; i < S.length; i++) {\n     \
  \   if (S[i] === \"I\") {\n            boredoms++;\n        }\n    }\n    return\
  \ boredoms;\n}\n"
- "  let boredoms: number = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i]\
  \ === \"I\") {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\n"
- "    let bored = 0;\n    for (let i = 0; i < S.length; i++) {\n        if (S[i]\
  \ === \"I\") {\n            bored++;\n        }\n    }\n    return bored;\n}\n"
- "  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I')\
  \ {\n      bored++;\n    }\n  }\n  return bored;\n}\n"
- "  let boredoms: number = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i]\
  \ === 'I') {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\n"
language: ts
name: HumanEval_91_is_bored
prompt: '//You''ll be given a string of words, and your task is to count the number

  // of boredoms. A boredom is a sentence that starts with the word "I".

  // Sentences are delimited by ''.'', ''?'' or ''!''.

  // For example:

  // >>> is_bored("Hello world")

  // 0

  // >>> is_bored("The sky is blue. The sun is shining. I love this weather")

  // 1

  function is_bored(S: string): number {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_bored;\n  assert.deepEqual(candidate(\"Hello world\"\
  ),0);\n  assert.deepEqual(candidate(\"Is the sky blue?\"),0);\n  assert.deepEqual(candidate(\"\
  I love It !\"),1);\n  assert.deepEqual(candidate(\"bIt\"),0);\n  assert.deepEqual(candidate(\"\
  I feel good today. I will be productive. will kill It\"),2);\n  assert.deepEqual(candidate(\"\
  You and I are going for a walk\"),0);\n}\n\ntest();"
