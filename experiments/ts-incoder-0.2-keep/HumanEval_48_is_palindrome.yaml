name: HumanEval_48_is_palindrome
language: humaneval_to_typescript.py
prompt: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
  // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n//\
  \ >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text: string): boolean\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
  ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
  aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
  xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
  xywzx\"),false);\n}\n\ntest();"
completions: ["    const reversed = text\n        .toLowerCase()\n        .replace(/\
    \ /g, '')\n        .reverse()\n        .replace(/ /g, '');\n    return text ===\
    \ reversed;\n}\n", "  return text === text.toLowerCase().split('').reverse().join('');\n\
    }\n", "  return text === text.toLowerCase().split('').reverse().join('');\n}\n",
  "  return text === text.toLowerCase().split('').reverse().join('');\n}\n", "  if\
    \ (text === '') {\n    return true;\n  }\n\n  const chars = text.split('');\n\
    \  const reversed = chars.reverse();\n  return chars.join('') === reversed.join('');\n\
    }\n", "  return text === text.toLowerCase().split('').reverse().join('');\n}\n",
  "  return text === text.toLowerCase().split('').reverse().join('');\n}\n", "   \
    \ let reversed = text\n        .toLowerCase()\n        .replace(/[^a-z]/g, \"\"\
    )\n        .reverse()\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/,\
    \ \"\");\n    return text === reversed;\n}\n", "  return text === text.toLowerCase().split('').reverse().join('');\n\
    }\n", "  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n\
    \  return text === reversed;\n}\n", "    const reversed = text\n        .toLowerCase()\n\
    \        .replace(/[^a-z]/g, \"\")\n        .reverse()\n        .replace(/^[a-z]/,\
    \ \"\")\n        .replace(/^$/, \"\");\n    return text === reversed;\n}\n", " \
    \ return text === text.toLowerCase().split('').reverse().join('');\n}\n", "  \
    \  const reversed = [...text].reverse().join('');\n    return text === reversed;\n\
    }\n", "  let reversed = text\n    .split('')\n    .reverse()\n    .join('');\n\
    \  return text === reversed;\n}\n", "  return text === text.toLowerCase().split('').reverse().join('');\n\
    }\n", "    let reversed = text\n        .toLowerCase()\n        .replace(/\\W/g,\
    \ \"\")\n        .reverse()\n        .replace(/\\W/g, \"\");\n    return text\
    \ === reversed;\n}\n", "  let reversed = text\n    .toLowerCase()\n    .split('')\n\
    \    .reverse()\n    .join('');\n  return text === reversed;\n}\n", "  return\
    \ text === text.toLowerCase().split('').reverse().join('');\n}\n", "  let reversed\
    \ = text\n    .toLowerCase()\n    .replace(/[^a-z]/g, \"\")\n    .reverse()\n\
    \    .toLowerCase();\n  return text === reversed;\n}\n", "  return text === text.toLowerCase().split('').reverse().join('');\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
