completions:
- "    const reversed = text\n        .toLowerCase()\n        .replace(/ /g, '')\n\
  \        .reverse()\n        .replace(/ /g, '');\n    return text === reversed;\n\
  }\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  if (text === '') {\n    return true;\n  }\n\n  const chars = text.split('');\n\
  \  const reversed = chars.reverse();\n  return chars.join('') === reversed.join('');\n\
  }\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    let reversed = text\n        .toLowerCase()\n        .replace(/[^a-z]/g, \"\
  \")\n        .reverse()\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/,\
  \ \"\");\n    return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n \
  \ return text === reversed;\n}\n"
- "    const reversed = text\n        .toLowerCase()\n        .replace(/[^a-z]/g,\
  \ \"\")\n        .reverse()\n        .replace(/^[a-z]/, \"\")\n        .replace(/^$/,\
  \ \"\");\n    return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    const reversed = [...text].reverse().join('');\n    return text === reversed;\n\
  }\n"
- "  let reversed = text\n    .split('')\n    .reverse()\n    .join('');\n  return\
  \ text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    let reversed = text\n        .toLowerCase()\n        .replace(/\\W/g, \"\"\
  )\n        .reverse()\n        .replace(/\\W/g, \"\");\n    return text === reversed;\n\
  }\n"
- "  let reversed = text\n    .toLowerCase()\n    .split('')\n    .reverse()\n   \
  \ .join('');\n  return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text\n    .toLowerCase()\n    .replace(/[^a-z]/g, \"\")\n    .reverse()\n\
  \    .toLowerCase();\n  return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    if (text === '') {\n        return true;\n    }\n    let reversed = text;\n\
  \    for (let i = text.length - 1; i >= 0; i--) {\n        if (reversed.charAt(i)\
  \ !== text.charAt(i)) {\n            return false;\n        }\n    }\n    return\
  \ true;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text\n    .split('')\n    .reverse()\n    .join('');\n  return\
  \ text === reversed;\n}\n"
- "  const reversed = text\n    .split('')\n    .reverse()\n    .join('');\n  return\
  \ text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText\
  \ += text[i];\n  }\n  return text === reversedText;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text\n    .split('')\n    .reverse()\n    .join('');\n  return\
  \ text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text\n    .toLowerCase()\n    .split('')\n    .reverse()\n   \
  \ .join('');\n  return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    const reversed = text\n        .toLowerCase()\n        .replace(/ /g, '')\n\
  \        .replace(/[^a-zA-Z0-9]/g, '')\n        .reverse()\n        .replace(/ /g,\
  \ '')\n        .replace(/[^a-zA-Z0-9]/g, '')\n        .toLowerCase();\n    return\
  \ text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text\n    .toLowerCase()\n    .split('')\n    .reverse()\n   \
  \ .join('');\n  return text === reversed;\n}\n"
- "  if (text === '') {\n    return true;\n  }\n  let i = 0;\n  let j = text.length\
  \ - 1;\n  while (i < j) {\n    if (text[i] !== text[j]) {\n      return false;\n\
  \    }\n    i++;\n    j--;\n  }\n  return true;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    if (text === '') {\n        return true;\n    }\n\n    const reversed = text\n\
  \        .split('')\n        .reverse()\n        .join('');\n\n    return text ===\
  \ reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n \
  \ return text === reversed;\n}\n"
- "  let reversed = text\n    .toLowerCase()\n    .replace(/[^a-z]/g, \"\")\n    .reverse()\n\
  \    .toLowerCase();\n  return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    let reversed = text;\n    for (let i = reversed.length - 1; i >= 0; i--) {\n\
  \        if (reversed[i] !== text.charAt(i)) {\n            return false;\n    \
  \    }\n    }\n    return true;\n}\n"
- "  const reversed = text\n    .toLowerCase()\n    .split('')\n    .reverse()\n \
  \   .join('');\n  return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    let reversed = text\n        .toLowerCase()\n        .replace(/ /g, '')\n \
  \       .reverse()\n        .replace(/ /g, '');\n    return reversed === text;\n\
  }\n"
- "    if (text === '') {\n        return true;\n    }\n    const reversed = text\n\
  \        .split('')\n        .reverse()\n        .join('');\n    return text ===\
  \ reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  const reversed = [...text].reverse().join('');\n  return text === reversed;\n\
  }\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  const reversed = text\n    .split('')\n    .reverse()\n    .join('');\n  return\
  \ text === reversed;\n}\n"
- "  let reversed: string = text;\n  reversed = reversed.split('').reverse().join('');\n\
  \  return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    let reversed = text\n        .toLowerCase()\n        .replace(/[^a-z]/g, \"\
  \")\n        .reverse()\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/,\
  \ \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n  \
  \      .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/,\
  \ \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n  \
  \      .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/,\
  \ \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n  \
  \      .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/,\
  \ \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n  \
  \      .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/,\
  \ \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n  \
  \      .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/,\
  \ \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n  \
  \      .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/,\
  \ \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n  \
  \      .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/,\
  \ \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n  \
  \      .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/,\
  \ \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n  \
  \      .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/,\
  \ \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n  \
  \      .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/,\
  \ \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n  \
  \      .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/,\
  \ \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n  \
  \      .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/, \"\")\n        .replace(/^"
- "  let reversed = text\n    .toLowerCase()\n    .split('')\n    .reverse()\n   \
  \ .join('');\n  return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n \
  \ return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  const reversed = text\n    .split('')\n    .reverse()\n    .join('');\n  return\
  \ text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    let reversed = text\n        .toLowerCase()\n        .replace(/\\W+/g, '')\n\
  \        .reverse()\n        .replace(/\\W+/g, '');\n    return text === reversed;\n\
  }\n"
- "    const reversed = text\n        .toLowerCase()\n        .replace(/ /g, '')\n\
  \        .reverse()\n        .replace(/ /g, '');\n    return text === reversed;\n\
  }\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    let reversed = text\n        .toLowerCase()\n        .replace(/[^a-z]/g, \"\
  \")\n        .reverse()\n        .replace(/^\\W|\\W$/g, \"\")\n        .toLowerCase();\n\
  \    return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n \
  \ return text === reversed;\n}\n"
- "  let reversed = text\n    .toLowerCase()\n    .split('')\n    .reverse()\n   \
  \ .join('');\n  return text === reversed;\n}\n"
- "  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText\
  \ += text[i];\n  }\n  return text === reversedText;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    if (text === '') {\n        return true;\n    }\n    if (text.length <= 1)\
  \ {\n        return true;\n    }\n    let middle = Math.floor(text.length / 2);\n\
  \    if (text[middle] === text[middle - 1]) {\n        return is_palindrome(text.substr(0,\
  \ middle - 1)) && is_palindrome(text.substr(middle + 1));\n    }\n    return false;\n\
  }\n"
- "    let reversed = text;\n    let i = 0;\n    let j = 0;\n    while (i < reversed.length\
  \ && j < reversed.length) {\n        if (reversed[i] !== reversed[j]) {\n      \
  \      return false;\n        }\n        i++;\n        j++;\n    }\n    return true;\n\
  }\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThis doesn't work for `is_palindrome('abba')`\n\
  <|/ c |>\n<| c |>\nYes, I forgot about that case. Thanks for pointing it out. I've\
  \ updated my answer.\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>"
- "  let reversed = text\n    .split('')\n    .reverse()\n    .join('');\n  return\
  \ text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text\n    .toLowerCase()\n    .split('')\n    .reverse()\n   \
  \ .join('');\n  return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  if (text === '') {\n    return true;\n  }\n  const reversed = text\n    .split('')\n\
  \    .reverse()\n    .join('');\n  return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    const reversed = text\n        .toLowerCase()\n        .replace(/[^a-z]/g,\
  \ \"\")\n        .reverse()\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/,\
  \ \"\");\n    return text === reversed;\n}\n"
- "  let reversed = text\n    .toLowerCase()\n    .replace(/[^a-z]/g, \"\")\n    .split(\"\
  \")\n    .reverse()\n    .join(\"\");\n  return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text\n    .toLowerCase()\n    .replace(/[^a-z]/g, \"\")\n    .split(\"\
  \")\n    .reverse()\n    .join(\"\");\n  return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    let reversed = text;\n    for (let i = 0; i < reversed.length; i++) {\n   \
  \     if (reversed[i] !== text.charAt(text.length - i - 1)) {\n            return\
  \ false;\n        }\n    }\n    return true;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  if (text === '') {\n    return true;\n  }\n\n  const reversed = text\n    .split('')\n\
  \    .reverse()\n    .join('');\n\n  return text === reversed;\n}\n"
- "  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n \
  \ return text === reversed;\n}\n"
- "  if (text === '') {\n    return true;\n  }\n  const reversed = text\n    .split('')\n\
  \    .reverse()\n    .join('');\n  return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    let reversed = text\n        .toLowerCase()\n        .replace(/ /g, '')\n \
  \       .replace(/[^a-z]/g, '')\n        .reverse()\n        .toString();\n    return\
  \ text === reversed;\n}\n"
- "  const reversed = text\n    .split('')\n    .reverse()\n    .join('');\n  return\
  \ text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    if (text === '') {\n        return true;\n    }\n    for (let i = 0; i < text.length\
  \ / 2; i++) {\n        if (text[i] !== text[text.length - i - 1]) {\n          \
  \  return false;\n        }\n    }\n    return true;\n}\n"
- "  let reversed = text;\n  for (let i = reversed.length - 1; i >= 0; i--) {\n  \
  \  if (reversed[i] !== text.charAt(i)) {\n      return false;\n    }\n  }\n  return\
  \ true;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  if (text === '') {\n    return true;\n  }\n  const chars = text.split('');\n\
  \  for (let i = 0; i < chars.length / 2; i++) {\n    if (chars[i] === chars[chars.length\
  \ - i - 1]) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n\
  }\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text\n    .toLowerCase()\n    .replace(/[^a-z]/g, \"\")\n    .reverse()\n\
  \    .toLowerCase();\n  return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text\n    .toLowerCase()\n    .split('')\n    .reverse()\n   \
  \ .join('');\n  return text === reversed;\n}\n"
- "  let reversed = text;\n  for (let i = text.length - 1; i >= 0; i--) {\n    if\
  \ (reversed.charAt(i) !== text.charAt(i)) {\n      return false;\n    }\n  }\n \
  \ return true;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text\n    .toLowerCase()\n    .replace(/[^a-z]/g, \"\")\n    .split(\"\
  \")\n    .reverse()\n    .join(\"\");\n\n  return reversed === text;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  if (text === '') {\n    return true;\n  }\n  const textArr = text.split('');\n\
  \  for (let i = 0; i < textArr.length; i++) {\n    if (textArr[i] !== textArr[textArr.length\
  \ - i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n"
- "  if (text === '') {\n    return true;\n  }\n\n  const reversed = text\n    .split('')\n\
  \    .reverse()\n    .join('');\n\n  return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text\n    .toLowerCase()\n    .replace(/[^a-z]/g, \"\")\n    .reverse()\n\
  \    .toLowerCase();\n  return text === reversed;\n}\n"
- "  let reversed = text\n    .split('')\n    .reverse()\n    .join('');\n  return\
  \ text === reversed;\n}\n"
- "  let reversed = text\n    .toLowerCase()\n    .split('')\n    .reverse()\n   \
  \ .join('');\n  return text === reversed;\n}\n"
- "    let reversed = text\n        .toLowerCase()\n        .replace(/[^a-z]/g, \"\
  \")\n        .reverse()\n        .replace(/^[a-z]/, \"\")\n        .replace(/^[a-z]/,\
  \ \"\");\n    return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n \
  \ return text === reversed;\n}\n"
- "    const reversed = text\n        .toLowerCase()\n        .replace(/[^a-z]/g,\
  \ \"\")\n        .reverse()\n        .toLowerCase();\n    return text === reversed;\n\
  }\n"
- "  if (text === '') {\n    return true;\n  }\n\n  let i = 0;\n  let j = text.length\
  \ - 1;\n\n  while (i < j) {\n    if (text[i] !== text[j]) {\n      return false;\n\
  \    }\n\n    i++;\n    j--;\n  }\n\n  return true;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    let reversed = text\n        .toLowerCase()\n        .replace(/[^a-z]/g, \"\
  \")\n        .reverse()\n        .replace(/^[a-z]/, \"\");\n    return text ===\
  \ reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n \
  \ return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n \
  \ return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n \
  \ return text === reversed;\n}\n"
- "    let reversed = text;\n    reversed = reversed.split('').reverse().join('');\n\
  \    return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    let reversed = text;\n    let i = 0;\n    let j = text.length - 1;\n    while\
  \ (i < j) {\n        if (text[i] !== text[j]) {\n            return false;\n   \
  \     }\n        i++;\n        j--;\n    }\n    return true;\n}\n"
- "    let reversed = text\n        .toLowerCase()\n        .replace(/[^a-z]/g, \"\
  \")\n        .reverse()\n        .replace(/[^a-z]/g, \"\");\n    return text ===\
  \ reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    const reversed = text\n        .toLowerCase()\n        .replace(/[^a-z]/g,\
  \ \"\")\n        .reverse()\n        .replace(/[^a-z]/g, \"\");\n    return text\
  \ === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  if (text === '') {\n    return true;\n  }\n\n  let i = 0;\n  let j = text.length\
  \ - 1;\n\n  while (i < j) {\n    if (text[i] !== text[j]) {\n      return false;\n\
  \    }\n\n    i++;\n    j--;\n  }\n\n  return true;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n \
  \ return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "  let reversed = text\n    .toLowerCase()\n    .replace(/[^a-z]/g, \"\")\n    .reverse()\n\
  \    .toLowerCase();\n  return text === reversed;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- "    if (text === '') {\n        return true;\n    }\n    if (text === text.toLowerCase())\
  \ {\n        return is_palindrome(text.toLowerCase());\n    }\n    let reversed\
  \ = text;\n    for (let i = 0; i < reversed.length; i++) {\n        if (reversed[i]\
  \ !== text.charAt(i)) {\n            return false;\n        }\n    }\n    return\
  \ true;\n}\n"
- "  if (text === '') {\n    return true;\n  }\n  let left = 0;\n  let right = text.length\
  \ - 1;\n  while (left < right) {\n    if (text[left] !== text[right]) {\n      return\
  \ false;\n    }\n    left++;\n    right--;\n  }\n  return true;\n}\n"
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
- '  return text === text.toLowerCase().split('''').reverse().join('''');

  }

  '
language: ts
name: HumanEval_48_is_palindrome
prompt: '//Checks if given string is a palindrome

  // >>> is_palindrome('''')

  // True

  // >>> is_palindrome(''aba'')

  // True

  // >>> is_palindrome(''aaaaa'')

  // True

  // >>> is_palindrome(''zbcd'')

  // False

  function is_palindrome(text: string): boolean {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
  ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
  aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
  xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
  xywzx\"),false);\n}\n\ntest();"
