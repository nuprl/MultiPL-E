completions:
- "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
  \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
  \ false;\n    }\n  }\n  return true;\n}\n"
- "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
  \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
  \ false;\n    }\n  }\n  return true;\n}\n"
- "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return\
  \ true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n\
  \      return false;\n    }\n  }\n  return true;\n}\n"
- "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  var sqrt_n = Math.sqrt(n);\n  for\
  \ (var i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n\
  \    }\n  }\n  return true;\n}\n"
- "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
  \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
  \ false;\n    }\n  }\n  return true;\n}\n"
- "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
  \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
  \ false;\n    }\n  }\n  return true;\n}\n"
- "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  var sqrt_n = Math.sqrt(n);\n  for\
  \ (var i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return false;\n\
  \    }\n  }\n  return true;\n}\n"
- "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
  \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
  \ false;\n    }\n  }\n  return true;\n}\n"
- "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
  \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
  \ false;\n    }\n  }\n  return true;\n}\n"
- "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
  \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
  \ false;\n    }\n  }\n  return true;\n}\n"
- "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
  \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
  \ false;\n    }\n  }\n  return true;\n}\n"
- "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
  \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
  \ false;\n    }\n  }\n  return true;\n}\n"
- "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
  \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
  \ false;\n    }\n  }\n  return true;\n}\n"
- "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
  \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
  \ false;\n    }\n  }\n  return true;\n}\n"
- "    if (n < 2) {\n        return false;\n    }\n    if (n === 2) {\n        return\
  \ true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n\
  \ % 3 === 0) {\n        return true;\n    }\n    const m = Math.sqrt(n);\n    for\
  \ (let i = 3; i <= m; i += 2) {\n        if (n % i === 0) {\n            return\
  \ false;\n        }\n    }\n    return true;\n}\n"
- "    if (n < 2) {\n        return false;\n    }\n    if (n === 2) {\n        return\
  \ true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    var sqrt_n\
  \ = Math.sqrt(n);\n    for (var i = 3; i <= sqrt_n; i += 2) {\n        if (n % i\
  \ === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"
- "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
  \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
  \ false;\n    }\n  }\n  return true;\n}\n"
- "    if (n < 2) {\n        return false;\n    }\n    if (n === 2) {\n        return\
  \ true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n\
  \ % 3 === 0) {\n        return true;\n    }\n    let i = 5 - Math.floor(Math.sqrt(n));\n\
  \    for (let j = 2; j < i; j++) {\n        if (n % j === 0) {\n            return\
  \ false;\n        }\n    }\n    return true;\n}\n"
- "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt_n = Math.sqrt(n);\n\
  \  for (let i = 3; i <= sqrt_n; i += 2) {\n    if (n % i === 0) {\n      return\
  \ false;\n    }\n  }\n  return true;\n}\n"
- "  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return\
  \ true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n\
  \    return true;\n  }\n  if (n % 11 === 0) {\n    return false;\n  }\n  if (n %\
  \ 13 === 0) {\n    return true;\n  }\n  if (n % 17 === 0) {\n    return false;\n\
  \  }\n  if (n % 19 === 0) {\n    return true;\n  }\n  if (n % 23 === 0) {\n    return\
  \ false;\n  }\n  if (n % 29 === 0) {\n    return true;\n  }\n  if (n % 37 === 0)\
  \ {\n    return false;\n  }\n  if (n % 43 === 0) {\n    return true;\n  }\n  if\
  \ (n % 53 === 0) {\n    return false;\n  }\n  if (n % 63 === 0) {\n    return true;\n\
  \  }\n  if (n % 73 === 0) {\n    return false;\n  }\n  if (n % 83 === 0) {\n   \
  \ return true;\n  }\n  if (n % 93 === 0) {\n    return false;\n  }\n  if (n % 103\
  \ === 0) {\n    return true;\n  }\n  if (n % 113 === 0) {\n    return false;\n \
  \ }\n  if (n % 123 === 0) {\n    return true;\n  }\n  if (n % 133 === 0) {\n   \
  \ return true;\n  }\n  if (n % 143 === 0) {\n    return false;\n  }\n  if (n % 153\
  \ === 0) {\n    return true;\n  }\n  if (n % 163 === 0) {\n    return false;\n \
  \ }\n  if (n % 173 === 0) {\n    return true;\n  }\n  if (n % 183 === 0) {\n   \
  \ return false;\n  }\n  if (n % 193 === 0) {\n    return true;\n  }\n  if (n % 203\
  \ === 0) {\n    return false;\n  }\n  if (n % 213 === 0) {\n    return true;\n \
  \ }\n  if (n % 223 === 0) {\n    return false;\n  }\n  if (n % 233 === 0) {\n  \
  \  return true;\n  }\n  if (n % 243 === 0) {\n    return false;\n  }\n  if (n %\
  \ 253 === 0) {\n    return true;\n  }\n  if (n % 263 === 0) {\n    return false;\n\
  \  }\n  if (n % 273 === 0) {\n    return true;\n  }\n  if (n % 283 === 0) {\n  \
  \  return false;\n  }\n  if (n % 293 === 0) {\n    return true;\n  }\n  if (n %\
  \ 303 === 0) {\n    return false;\n  }\n  if (n % 313 === 0) {\n    return true;\n\
  \  }\n  if (n % 323 === 0) {\n    return false;\n  }\n  if (n % 333 === 0) {\n \
  \   return true;\n  }\n  if (n % 343 === 0) {\n    return false;\n  }\n  if (n %\
  \ 353 === 0) {\n    return true;\n  }\n  if (n % 363 === 0) {\n    return false;\n\
  \  }\n  if (n % 373 === 0) {\n    return true;\n  }\n  if (n % 383 === 0) {\n  \
  \  return false;\n  }\n  if (n % 393 === 0) {\n    return true;\n  }\n  if (n %\
  \ 403 === 0) {\n    return false;\n  }\n  if (n % 413 === 0) {\n    return true;\n\
  \  }\n  if (n % 423 === 0) {\n    return false;\n  }\n  if (n % 433 === 0) {\n \
  \   return true;\n  }\n  if (n % "
language: ts
name: HumanEval_31_is_prime
prompt: '//Return true if a given number is prime, and false otherwise.

  // >>> is_prime(6)

  // False

  // >>> is_prime(101)

  // True

  // >>> is_prime(11)

  // True

  // >>> is_prime(13441)

  // True

  // >>> is_prime(61)

  // True

  // >>> is_prime(4)

  // False

  // >>> is_prime(1)

  // False

  function is_prime(n: number): boolean {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
  \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
  \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
  \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
  \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
  \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
  \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
  }\n\ntest();"
