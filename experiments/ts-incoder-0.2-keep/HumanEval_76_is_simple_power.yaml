completions:
- "    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return\
  \ false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n\
  \    }\n    if (n % 2 === 1) {\n        return false;\n    }\n    return is_simple_power(x,\
  \ n / 2);\n}\n"
- "    if (n == 0) {\n        return true;\n    }\n    if (n == 1) {\n        return\
  \ x % n == 0;\n    }\n    if (n % 2 == 0) {\n        return is_simple_power(x, n\
  \ / 2);\n    }\n    return is_simple_power(x * x, n / 2);\n}\n"
- "    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return\
  \ true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n\
  \ % n % 2 === 0) {\n        return false;\n    }\n    if (n % n % 3 === 0) {\n \
  \       return false;\n    }\n    if (n % n % 4 === 0) {\n        return false;\n\
  \    }\n    if (n % n % 5 === 0) {\n        return false;\n    }\n    if (n % n\
  \ % 6 === 0) {\n        return false;\n    }\n    if (n % n % 7 === 0) {\n     \
  \   return false;\n    }\n    if (n % n % 8 === 0) {\n        return false;\n  \
  \  }\n    if (n % n % 9 === 0) {\n        return false;\n    }\n    if (n % n %\
  \ 10 === 0) {\n        return false;\n    }\n    if (n % n % 11 === 0) {\n     \
  \   return false;\n    }\n    if (n % n % 12) {\n        return false;\n    }\n\
  \    if (n % n % 13 === 0) {\n        return false;\n    }\n    if (n % n % 14 ===\
  \ 0) {\n        return false;\n    }\n    if (n % n % 15 === 0) {\n        return\
  \ false;\n    }\n    if (n % n % 16 === 0) {\n        return false;\n    }\n   \
  \ if (n % n % 17 === 0) {\n        return false;\n    }\n    if (n % n % 18 ===\
  \ 0) {\n        return false;\n    }\n    if (n % n % 19 === 0) {\n        return\
  \ false;\n    }\n    if (n % n % 20 === 0) {\n        return false;\n    }\n   \
  \ if (n % n % 21 === 0) {\n        return false;\n    }\n    if (n % n % 22 ===\
  \ 0) {\n        return false;\n    }\n    if (n % n % 23 === 0) {\n        return\
  \ false;\n    }\n    if (n % n % 24 === 0) {\n        return false;\n    }\n   \
  \ if (n % n % 25 === 0) {\n        return false;\n    }\n    if (n % n % 26 ===\
  \ 0) {\n        return false;\n    }\n    if (n % n % 27 === 0) {\n        return\
  \ false;\n    }\n    if (n % n % 28 === 0) {\n        return false;\n    }\n   \
  \ if (n % n % 29 === 0) {\n        return false;\n    }\n    if (n % n % 30 ===\
  \ 0) {\n        return false;\n    }\n    if (n % n % 31 === 0) {\n        return\
  \ false;\n    }\n    if (n % n % 32 === 0) {\n        return false;\n    }\n   \
  \ if (n % n % 33 === 0) {\n        return false;\n    }\n    if (n % n % 34 ===\
  \ 0) {\n        return false;\n    }\n    if (n % n % 35 === 0) {\n        return\
  \ false;\n    }\n    if (n % n % 36 === 0) {\n        return false;\n    }\n   \
  \ if (n % n % 37 === 0) {\n        return false;\n    }\n    if (n % n % 38 ===\
  \ 0) {\n        return false;\n    }\n    if (n % n % 39 === 0) {\n        return\
  \ false;\n    }\n    if (n % n % 40 === 0) {\n        return false;\n    }\n   \
  \ if (n % n % 41 === 0) {\n        return false;\n    }\n    if (n % n % 42 ===\
  \ 0) {\n        return false;\n    }\n    if (n % n % 43 === 0) {\n        return\
  \ false;\n    }\n    if (n % n % 44 === 0) {\n        return false;\n    }\n   \
  \ if (n % n % 45 === 0) {\n        return false;\n    }\n    if (n % n % 46 ===\
  \ 0) {\n        return false;\n    }\n    if (n % n % 47 === 0) {\n        return\
  \ false;\n    }\n    if (n % n % 48 === 0) {\n        return false;\n    }\n   \
  \ if (n % n % 49 === 0) {\n        return false;\n    }\n    if (n % n % 50 ===\
  \ 0) {"
- "    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 ===\
  \ 0) return false;\n    if (n % 2 === 1) return true;\n    if (n % 3 === 0) return\
  \ false;\n    if (n % 3 === 1) return true;\n    if (n % 4 === 0) return false;\n\
  \    if (n % 4 === 1) return true;\n    if (n % 5 === 0) return false;\n    if (n\
  \ % 5 === 1) return true;\n    if (n % 6 === 0) return false;\n    if (n % 6 ===\
  \ 1) return true;\n    if (n % 7 === 0) return false;\n    if (n % 7 === 1) return\
  \ true;\n    if (n % 8 === 0) return false;\n    if (n % 8 === 1) return true;\n\
  \    if (n % 9 === 0) return false;\n    if (n % 9 === 1) return true;\n    if (n\
  \ % 10 === 0) return false;\n    if (n % 10 === 1) return true;\n    if (n % 11\
  \ === 0) return false;\n    if (n % 11 === 1) return true;\n    if (n % 12 === 0)\
  \ return false;\n    if (n % 12 === 1) return true;\n    if (n % 13 === 0) return\
  \ false;\n    if (n % 13 === 1) return true;\n    if (n % 14 === 0) return false;\n\
  \    if (n % 14 === 1) return true;\n    if (n % 15 === 0) return false;\n    if\
  \ (n % 15 === 1) return true;\n    if (n % 16 === 0) return false;\n    if (n %\
  \ 16 === 1) return true;\n    if (n % 17 === 0) return false;\n    if (n % 17 ===\
  \ 1) return true;\n    if (n % 18 === 0) return false;\n    if (n % 18 === 1) return\
  \ true;\n    if (n % 19 === 0) return false;\n    if (n % 19 === 1) return true;\n\
  \    if (n % 20 === 0) return false;\n    if (n % 20 === 1) return true;\n    if\
  \ (n % 21 === 0) return false;\n    if (n % 21 === 1) return true;\n    if (n %\
  \ 22 === 0) return false;\n    if (n % 22 === 1) return true;\n    if (n % 23 ===\
  \ 0) return false;\n    if (n % 23 === 1) return true;\n    if (n % 24 === 0) return\
  \ false;\n    if (n % 24 === 1) return true;\n    if (n % 25 === 0) return false;\n\
  \    if (n % 25 === 1) return true;\n    if (n % 26 === 0) return false;\n    if\
  \ (n % 26 === 1) return true;\n    if (n % 27 === 0) return false;\n    if (n %\
  \ 27 === 1) return true;\n    if (n % 28 === 0) return false;\n    if (n % 28 ===\
  \ 1) return true;\n    if (n % 29 === 0) return false;\n    if (n % 29 === 1) return\
  \ true;\n    if (n % 30 === 0) return false;\n    if (n % 30 === 1) return true;\n\
  \    if (n % 31 === 0) return false;\n    if (n % 31 === 1) return true;\n    return\
  \ false;\n}\n"
- "    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return\
  \ false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2\
  \ === 0) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 2 ===\
  \ 1) {\n        return is_simple_power(x, n / 2);\n    }\n    if (n % 3 === 0) {\n\
  \        return is_simple_power(x, n / 3);\n    }\n    if (n % 3 === 1) {\n    \
  \    return is_simple_power(x, n / 3);\n    }\n    if (n % 5 === 0) {\n        return\
  \ is_simple_power(x, n / 5);\n    }\n    if (n % 5 === 1) {\n        return is_simple_power(x,\
  \ n / 5);\n    }\n    if (n % 7 === 0) {\n        return is_simple_power(x, n /\
  \ 7);\n    }\n    if (n % 7 === 1) {\n        return is_simple_power(x, n / 7);\n\
  \    }\n    return false;\n}\n"
- "    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return\
  \ true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n\
  \ % n === 0) {\n        return true;\n    }\n    let power = 1;\n    while (power\
  \ < n) {\n        if (x === Math.pow(power, n)) {\n            return true;\n  \
  \      }\n        power *= 2;\n    }\n    return false;\n}\n"
- "  if (n === 1) {\n    return true;\n  }\n  if (x === 1) {\n    return false;\n\
  \  }\n  if (n % 2 === 0) {\n    return is_simple_power(x, n / 2);\n  }\n  return\
  \ is_simple_power(x, n / 2);\n}\n"
- "    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return\
  \ false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2\
  \ === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return\
  \ is_simple_power(x / 2, n);\n    }\n    return is_simple_power(x * x, n / 2);\n\
  }\n"
- "  if (n < 1) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n === 0 || n !== n) {\n\
  \    return false;\n  }\n  if (n % 2 === 0 && n % n % 2 === 0) {\n    return true;\n\
  \  }\n  return is_simple_power(x, n / 2);\n}\n"
- "    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 ===\
  \ 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return\
  \ false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n\
  \    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if\
  \ (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    return\
  \ true;\n}\n"
- "    if (n === 0) return false;\n    if (n === 1) return true;\n    if (n % 2 ===\
  \ 0) return false;\n    if (n % 4 === 0) return true;\n    if (n % 8 === 0) return\
  \ false;\n    if (n % 16 === 0) return true;\n    if (n % 32 === 0) return false;\n\
  \    if (n % 64 === 0) return true;\n    if (n % 128 === 0) return false;\n    if\
  \ (n % 256 === 0) return true;\n    if (n % 512 === 0) return false;\n    return\
  \ true;\n}\n"
- "    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n     \
  \   return false;\n    }\n    if (n % n % 2 === 0) {\n        return false;\n  \
  \  }\n    if (n % n % 3 === 0) {\n        return false;\n    }\n    if (n % n %\
  \ 5 === 0) {\n        return false;\n    }\n    return true;\n}\n"
- "    if (n === 1) {\n        return true;\n    }\n    if (n === 2) {\n        return\
  \ true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n\
  \ % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 0 && n % 2 === 1)\
  \ {\n        return true;\n    }\n    if (n % 3 === 0 && n % 2 === 0) {\n      \
  \  return true;\n    }\n    if (n % 3 === 0 && n % 2 === 1) {\n        return true;\n\
  \    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n   \
  \ if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3\
  \ === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n\
  \ % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0)\
  \ {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n      \
  \  return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n\
  \    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n   \
  \ if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3\
  \ === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n\
  \ % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1)\
  \ {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n      \
  \  return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n\
  \    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n   \
  \ if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3\
  \ === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n\
  \ % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0)\
  \ {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n      \
  \  return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n\
  \    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n   \
  \ if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3\
  \ === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === 1 && n\
  \ % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1)\
  \ {\n        return true;\n    }\n    if (n % 3 === 1 && n % 2 === 0) {\n      \
  \  return true;\n    }\n    if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n\
  \    }\n    if (n % 3 === 1 && n % 2 === 0) {\n        return true;\n    }\n   \
  \ if (n % 3 === 1 && n % 2 === 1) {\n        return true;\n    }\n    if (n % 3\
  \ === 1 && n % 2 === 0) {\n        return true;\n    }\n    if (n % 3 === 1 && n\
  \ % 2 === 1) {\n        return true;\n    }\n    if (n % 3 === "
- "  if (n < 1) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n\
  \  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % n === 0) {\n    return\
  \ true;\n  }\n  return is_simple_power(x, n / 2);\n}\n"
- "    if (n === 0) return false;\n    if (n === 1) return true;\n    if (x === 0)\
  \ return false;\n    if (x === 1) return true;\n    if (x === -1) return true;\n\
  \    if (x === -2) return true;\n    if (x === -3) return true;\n    if (x === -4)\
  \ return true;\n    if (x === -5) return true;\n    if (x === -6) return true;\n\
  \    if (x === -7) return true;\n    if (x === -8) return true;\n    if (x === -9)\
  \ return true;\n    if (x === -10) return true;\n    if (x === -11) return true;\n\
  \    if (x === -12) return true;\n    if (x === -13) return true;\n    if (x ===\
  \ -14) return true;\n    if (x === -15) return true;\n    if (x === -16) return\
  \ true;\n    if (x === -17) return true;\n    if (x === -18) return true;\n    if\
  \ (x === -19) return true;\n    if (x === -20) return true;\n    if (x === -21)\
  \ return true;\n    if (x === -22) return true;\n    if (x === -23) return true;\n\
  \    if (x === -24) return true;\n    if (x === -25) return true;\n    if (x ===\
  \ -26) return true;\n    if (x === -27) return true;\n    if (x === -28) return\
  \ true;\n    if (x === -29) return true;\n    if (x === -30) return true;\n    if\
  \ (x === -31) return true;\n    if (x === -32) return true;\n    if (x === -33)\
  \ return true;\n    if (x === -34) return true;\n    if (x === -35) return true;\n\
  \    if (x === -36) return true;\n    if (x === -37) return true;\n    if (x ===\
  \ -38) return true;\n    if (x === -39) return true;\n    if (x === -40) return\
  \ true;\n    if (x === -41) return true;\n    if (x === -42) return true;\n    if\
  \ (x === -43) return true;\n    if (x === -44) return true;\n    if (x === -45)\
  \ return true;\n    if (x === -46) return true;\n    if (x === -47) return true;\n\
  \    if (x === -48) return true;\n    if (x === -49) return true;\n    if (x ===\
  \ -50) return true;\n    if (x === -51) return true;\n    if (x === -52) return\
  \ true;\n    if (x === -53) return true;\n    if (x === -54) return true;\n    if\
  \ (x === -55) return true;\n    if (x === -56) return true;\n    if (x === -57)\
  \ return true;\n    if (x === -58) return true;\n    if (x === -59) return true;\n\
  \    if (x === -60) return true;\n    if (x === -61) return true;\n    if (x ===\
  \ -62) return true;\n    if (x === -63) return true;\n    if (x === -"
- "    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return\
  \ false;\n    }\n    if (n % 2 === 0) {\n        return is_simple_power(x, n / 2);\n\
  \    }\n    if (n % 2 === 1) {\n        return is_simple_power(x, n / 2);\n    }\n\
  \    return false;\n}\n"
- "    if (n === 1) {\n        return true;\n    }\n    if (x === 1) {\n        return\
  \ false;\n    }\n    if (x === n) {\n        return true;\n    }\n    if (n % 2\
  \ === 0) {\n        return false;\n    }\n    if (n % 2 === 1) {\n        return\
  \ is_simple_power(x, n / 2);\n    }\n    return is_simple_power(x, n / 2);\n}\n"
- "    if (n < 1) {\n        return false;\n    }\n    if (n === 1) {\n        return\
  \ true;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (x\
  \ === 1) {\n        return true;\n    }\n    if (x === 2) {\n        return true;\n\
  \    }\n    if (x === 3) {\n        return true;\n    }\n    if (x === 4) {\n  \
  \      return true;\n    }\n    if (x === 5) {\n        return true;\n    }\n  \
  \  if (x === 6) {\n        return true;\n    }\n    if (x === 7) {\n        return\
  \ true;\n    }\n    if (x === 8) {\n        return true;\n    }\n    if (x === 9)\
  \ {\n        return true;\n    }\n    if (x === 10) {\n        return true;\n  \
  \  }\n    if (x === 11) {\n        return true;\n    }\n    if (x === 12) {\n  \
  \      return true;\n    }\n    if (x === 13) {\n        return true;\n    }\n \
  \   if (x === 14) {\n        return true;\n    }\n    if (x === 15) {\n        return\
  \ true;\n    }\n    if (x === 16) {\n        return true;\n    }\n    if (x ===\
  \ 17) {\n        return true;\n    }\n    if (x === 18) {\n        return true;\n\
  \    }\n    if (x === 19) {\n        return true;\n    }\n    if (x === 20) {\n\
  \        return true;\n    }\n    if (x === 21) {\n        return true;\n    }\n\
  \    if (x === 22) {\n        return true;\n    }\n    if (x === 23) {\n       \
  \ return true;\n    }\n    if (x === 24) {\n        return true;\n    }\n    if\
  \ (x === 25) {\n        return true;\n    }\n    if (x === 26) {\n        return\
  \ true;\n    }\n    if (x === 27) {\n        return true;\n    }\n    if (x ===\
  \ 28) {\n        return true;\n    }\n    if (x === 29) {\n        return true;\n\
  \    }\n    if (x === 30) {\n        return true;\n    }\n    if (x === 31) {\n\
  \        return true;\n    }\n    if (x === 32) {\n        return true;\n    }\n\
  \    if (x === 33) {\n        return true;\n    }\n    if (x === 34) {\n       \
  \ return true;\n    }\n    if (x === 35) {\n        return true;\n    }\n    if\
  \ (x === 36) {\n        return true;\n    }\n    if (x === 37) {\n        return\
  \ true;\n    }\n    if (x === 38) {\n        return true;\n    }\n    if (x ===\
  \ 39) {\n        return true;\n    }\n    if (x === 40) {\n        return true;\n\
  \    }\n    if (x === 41) {\n        return true;\n    }\n    if (x === 42) {\n\
  \        return true;\n    }\n    if (x === 43) {\n        return true;\n    }\n\
  \    if (x === 44) {\n        return true;\n    }\n    if (x === 45) {\n       \
  \ return true;\n    }\n    if (x === 46) {\n        return true;\n    }\n    if\
  \ (x === 47) {\n        return true;\n    }\n    if (x === 48) {\n        return\
  \ true;\n    }\n    if (x === 49) {\n        return true;\n    }\n    if ("
- "    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n     \
  \   return false;\n    }\n    if (n % 4 === 0) {\n        return true;\n    }\n\
  \    if (n % 8 === 0) {\n        return false;\n    }\n    if (n % 16 === 0) {\n\
  \        return true;\n    }\n    if (n % 32 === 0) {\n        return false;\n \
  \   }\n    if (n % 64 === 0) {\n        return true;\n    }\n    if (n % 128 ===\
  \ 0) {\n        return false;\n    }\n    if (n % 256 === 0) {\n        return true;\n\
  \    }\n    if (n % 512 === 0) {\n        return false;\n    }\n    if (n % 1024\
  \ === 0) {\n        return true;\n    }\n    if (n % 4096 === 0) {\n        return\
  \ false;\n    }\n    if (n % 8192 === 0) {\n        return true;\n    }\n    if\
  \ (n % 16384 === 0) {\n        return false;\n    }\n    if (n % 32768 === 0) {\n\
  \        return true;\n    }\n    if (n % 65536 === 0) {\n        return false;\n\
  \    }\n    if (n % 131072 === 0) {\n        return true;\n    }\n    if (n % 262144\
  \ === 0) {\n        return false;\n    }\n    if (n % 524288 === 0) {\n        return\
  \ true;\n    }\n    if (n % 1048576 === 0) {\n        return false;\n    }\n   \
  \ if (n % 2097152 === 0) {\n        return true;\n    }\n    if (n % 4194304 ===\
  \ 0) {\n        return false;\n    }\n    if (n % 8388608 === 0) {\n        return\
  \ true;\n    }\n    if (n % 16777216 === 0) {\n        return false;\n    }\n  \
  \  if (n % 33554432 === 0) {\n        return true;\n    }\n    if (n % 67108864\
  \ === 0) {\n        return false;\n    }\n    if (n % 134217728 === 0) {\n     \
  \   return true;\n    }\n    if (n % 268435456 === 0) {\n        return false;\n\
  \    }\n    if (n % 536870912 === 0) {\n        return true;\n    }\n    if (n %\
  \ 1073741824 === 0) {\n        return false;\n    }\n    if (n % 2147483648 ===\
  \ 0) {\n        return true;\n    }\n    if (n % 4294967296 === 0) {\n        return\
  \ false;\n    }\n    return true;\n}\n"
- "    if (n === 1) {\n        return true;\n    }\n    if (n % 2 === 0) {\n     \
  \   return false;\n    }\n    if (n % 4 === 0) {\n        return true;\n    }\n\
  \    if (n % 8 === 0) {\n        return false;\n    }\n    if (n % 16 === 0) {\n\
  \        return true;\n    }\n    if (n % 32 === 0) {\n        return false;\n \
  \   }\n    if (n % 64 === 0) {\n        return true;\n    }\n    if (n % 128 ===\
  \ 0) {\n        return false;\n    }\n    if (n % 256 === 0) {\n        return true;\n\
  \    }\n    if (n % 512 === 0) {\n        return false;\n    }\n    if (n % 1024\
  \ === 0) {\n        return true;\n    }\n    if (n % 2048 === 0) {\n        return\
  \ false;\n    }\n    if (n % 4096 === 0) {\n        return true;\n    }\n    if\
  \ (n % 8192 === 0) {\n        return false;\n    }\n    if (n % 16384 === 0) {\n\
  \        return true;\n    }\n    if (n % 32768 === 0) {\n        return false;\n\
  \    }\n    if (n % 65536 === 0) {\n        return true;\n    }\n    if (n % 131072\
  \ === 0) {\n        return false;\n    }\n    if (n % 262144 === 0) {\n        return\
  \ true;\n    }\n    if (n % 524288 === 0) {\n        return false;\n    }\n    if\
  \ (n % 1048576 === 0) {\n        return true;\n    }\n    if (n % 2097152 === 0)\
  \ {\n        return false;\n    }\n    if (n % 4194304 === 0) {\n        return\
  \ true;\n    }\n    if (n % 8388608 === 0) {\n        return false;\n    }\n   \
  \ if (n % 16777216 === 0) {\n        return true;\n    }\n    if (n % 33554432 ===\
  \ 0) {\n        return false;\n    }\n    if (n % 67108864 === 0) {\n        return\
  \ true;\n    }\n    if (n % 134217728 === 0) {\n        return false;\n    }\n \
  \   if (n % 268435456 === 0) {\n        return true;\n    }\n    if (n % 536870912\
  \ === 0) {\n        return false;\n    }\n    if (n % 1073741824 === 0) {\n    \
  \    return true;\n    }\n    if (n % -2147483648 === 0) {\n        return false;\n\
  \    }\n    return true;\n}\n"
language: ts
name: HumanEval_76_is_simple_power
prompt: '//Your task is to write a function that returns true if a number x is a simple

  // power of n and false in other cases.

  // x is a simple power of n if n**int=x

  // For example:

  // is_simple_power(1, 4) => true

  // is_simple_power(2, 2) => true

  // is_simple_power(8, 2) => true

  // is_simple_power(3, 2) => false

  // is_simple_power(3, 1) => false

  // is_simple_power(5, 3) => false

  function is_simple_power(x: number, n: number): boolean {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
  \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
  \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
  \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
  \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
  \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
