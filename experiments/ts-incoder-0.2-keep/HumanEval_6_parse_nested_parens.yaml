name: HumanEval_6_parse_nested_parens
language: humaneval_to_typescript.py
prompt: "//Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n// For each of the group, output the deepest\
  \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
  // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
  (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"()\
  \ (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
  ),[4]);\n}\n\ntest();"
completions: ["  const paren_stack: string[] = [];\n  const paren_level: number[]\
    \ = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n", "  const paren_stack: string[] = [];\n  const paren_level:\
    \ number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i <\
    \ paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n\
    \      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n\
    \      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n", "  const paren_stack: number[]\
    \ = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level.length);\n\
    \      paren_level.push(0);\n    } else if (paren_string[i] === ')') {\n     \
    \ const level = paren_stack.pop();\n      if (level > paren_level[paren_level.length\
    \ - 1]) {\n        paren_level[paren_level.length - 1] = level;\n      }\n   \
    \ }\n  }\n  return paren_level;\n}\n", "  const paren_stack: string[] = [];\n\
    \  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count\
    \ > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n\
    \      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n", "  const paren_stack:\
    \ string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n\
    \      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n\
    \      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n\
    }\n", "  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let\
    \ i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n\
    \      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_stack;\n\
    }\n", "  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_max: number[] = [];\n  const paren_level_max_index: number[]\
    \ = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n\
    \      paren_level_max.push(0);\n      paren_level_max_index.push(0);\n    } else\
    \ if (char === ')') {\n      paren_level[paren_stack.pop()] = paren_level[paren_stack.pop()]\
    \ - 1;\n      paren_level_max[paren_stack.pop()] = Math.max(paren_level_max[paren_stack.pop()],\
    \ paren_level[paren_stack.pop()]);\n      paren_level_max_index[paren_stack.pop()]\
    \ = Math.max(paren_level_max_index[paren_stack.pop()], paren_stack.length - 1);\n\
    \    }\n  }\n  return paren_level_max_index;\n}\n", "  const paren_stack: string[]\
    \ = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n \
    \ for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n\
    \      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n\
    \      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n", "  const paren_stack: string[]\
    \ = [];\n  const paren_level: number[] = [];\n  const paren_level_max: number[]\
    \ = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count_index: number[] = [];\n  let paren_level_max_count_index2:\
    \ number[] = [];\n  let paren_level_max_count_index3: number[] = [];\n  let paren_level_max_count_index4:\
    \ number[] = [];\n  let paren_level_max_count_index5: number[] = [];\n  let paren_level_max_count_index6:\
    \ number[] = [];\n  let paren_level_max_count_index7: number[] = [];\n  let paren_level_max_count_index8:\
    \ number[] = [];\n  let paren_level_max_count_index9: number[] = [];\n  let paren_level_max_count_index10:\
    \ number[] = [];\n  let paren_level_max_count_index11: number[] = [];\n  let paren_level_max_count_index12:\
    \ number[] = [];\n  let paren_level_max_count_index13: number[] = [];\n  let paren_level_max_count_index14:\
    \ number[] = [];\n  let paren_level_max_count_index15: number[] = [];\n  let paren_level_max_count_index16:\
    \ number[] = [];\n  let paren_level_max_count_index17: number[] = [];\n  let paren_level_max_count_index18:\
    \ number[] = [];\n  let paren_level_max_count_index19: number[] = [];\n  let paren_level_max_count_index20:\
    \ number[] = [];\n  let paren_level_max_count_index21: number[] = [];\n  let paren_level_max_count_index22:\
    \ number[] = [];\n  let paren_level_max_count_index23: number[] = [];\n  let paren_level_max_count_index24:\
    \ number[] = [];\n  let paren_level_max_count_index25: number[] = [];\n  let paren_level_max_count_index26:\
    \ number[] = [];\n  let paren_level_max_count_index27: number[] = [];\n  let paren_level_max_count_index28:\
    \ number[] = [];\n  let paren_level_max_count_index29: number[] = [];\n  let paren_level_max_count_index30:\
    \ number[] = [];\n  let paren_level_max_count_index31: number[] = [];\n  let paren_level_max_count_index32:\
    \ number[] = [];\n  let paren_level_max_count_index33: number[] = [];\n  let paren_level_max_count_index34:\
    \ number[] = [];\n  let paren_level_max_count_index35: number[] = [];\n  let paren_level_max_count_index36:\
    \ number[] = [];\n  let paren_", "  const paren_stack: number[] = [];\n  const\
    \ paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i]\
    \ === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n\
    \    } else if (paren_string[i] === ')') {\n      paren_level_count = paren_stack.pop();\n\
    \      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max--;\n\
    \    }\n  }\n  return paren_level;\n}\n", "  const paren_stack: string[] = [];\n\
    \  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max_count\
    \ = 1;\n  let paren_level_max_paren_level = 1;\n  let paren_level_max_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level = 1;\n  let\
    \ paren_level_max_paren_level_paren_level_paren_level_paren_level = 1;\n  let\
    \ paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren",
  "  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let\
    \ paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n\
    \    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      const current_level = paren_level.pop();\n \
    \     const current_level_length = paren_level.length - 1;\n      if (current_level_length\
    \ === 0) {\n        paren_level_count--;\n      }\n      if (current_level_length\
    \ >= 0 && paren_level[current_level_length] === current_level) {\n        paren_level_count--;\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n", "  const paren_stack: number[]\
    \ = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n \
    \ let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n\
    \    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_max = (paren_level_count > paren_level_max) ? paren_level_count\
    \ : paren_level_max;\n      paren_level_count++;\n    } else if (char === ')')\
    \ {\n      paren_level_count = paren_stack.pop();\n      paren_level_max = (paren_level_count\
    \ > paren_level_max) ? paren_level_count : paren_level_max;\n    }\n  }\n  return\
    \ paren_level;\n}\n", "  const paren_stack: string[] = [];\n  const paren_level:\
    \ number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n \
    \ for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count\
    \ > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n\
    \      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n", "  const paren_stack:\
    \ number[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count:\
    \ number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level_count.push(paren_level.length);\n      paren_count++;\n   \
    \ } else if (char === ')') {\n      const paren_level = paren_level_count[paren_stack.pop()];\n\
    \      if (paren_level > 0) {\n        paren_level_count[paren_stack.pop()]--;\n\
    \      }\n      paren_count--;\n    }\n  }\n  return paren_level_count;\n}\n",
  "  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let\
    \ paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index\
    \ = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n  \
    \    paren_level_count -= 1;\n      paren_level_max = Math.max(paren_level_max,\
    \ paren_stack.pop());\n      if (paren_level_count === 0) {\n        paren_level_max_index\
    \ = paren_level_max_count;\n        paren_level_max_count = paren_level;\n   \
    \   }\n    }\n  }\n  return paren_level_max_count;\n}\n", "  const paren_stack:\
    \ number[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_count\
    \ += 1;\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n\
    \      paren_level_max_index = i;\n    } else if (char === ')') {\n      paren_count\
    \ -= 1;\n      paren_level_count -= 1;\n      if (paren_count === 0) {\n     \
    \   paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n\
    }\n", "  const paren_stack: string[] = [];\n  let paren_count = 0;\n  for (let\
    \ i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    } else if (char === ')') {\n      paren_count--;\n      if (paren_count ===\
    \ 0) {\n        paren_stack.push(paren_count);\n      }\n    }\n  }\n  return\
    \ paren_stack;\n}\n", "  const paren_stack: string[] = [];\n  const paren_level:\
    \ number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i]\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n\
    \    } else if (paren_string[i] === ')') {\n      const paren_level_count = paren_level.pop();\n\
    \      if (paren_level_count > 0) {\n        paren_level.push(paren_level_count);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n", "  const paren_stack: number[]\
    \ = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[]\
    \ = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level_count.push(paren_count);\n      paren_count++;\n    } else\
    \ if (char === ')') {\n      paren_count = paren_stack.pop();\n      paren_level_count[paren_stack.pop()]\
    \ = paren_count;\n    }\n  }\n  return paren_level_count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
