{
  "completions": [
    "  return strings.join('');\n}\n",
    "  return strings.reduce((prev, curr) => prev + curr);\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    \"\"\n  );\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    ''\n  );\n}\n",
    "  return strings.reduce((prev, curr) => prev + curr);\n}\n",
    "  return strings.reduce(\n    (accumulator, currentValue) => accumulator + currentValue,\n    \"\"\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce((prev, curr) => prev + curr);\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, currentValue) => accumulator + currentValue,\n    \"\"\n  );\n}\n",
    "  return strings.reduce((acc, str) => acc + str, \"\");\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    '',\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    \"\"\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (acc, str) => acc + str,\n    '',\n  );\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    \"\"\n  );\n}\n",
    "  return strings.reduce((accumulator, current) => accumulator + current);\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce((acc, str) => acc + str, \"\");\n}\n",
    "  return strings.reduce(\n    (accumulator, currentValue) => accumulator + currentValue,\n    \"\"\n  );\n}\n",
    "  return strings.reduce(\n    (accumulator, string) => accumulator + string,\n    '',\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    ''\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    \"\"\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, currentValue) => accumulator + currentValue,\n    '',\n  );\n}\n",
    "  return strings.reduce(\n    (accumulator, currentValue) => accumulator + currentValue,\n    \"\"\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, currentValue) => accumulator + currentValue,\n    \"\"\n  );\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    \"\"\n  );\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    ''\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce((prev, curr) => prev + curr);\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce((prev, curr) => prev + curr);\n}\n",
    "  return strings.reduce(\n    (accumulator, string) => `${accumulator}${string}`,\n    '',\n  );\n}\n",
    "  return strings.reduce(\n    (accumulator, string) => accumulator + string,\n    ''\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, string) => accumulator + string,\n    '',\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce((prev, curr) => prev + curr);\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce((prev, curr) => prev + curr);\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    ''\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, string) => accumulator + string,\n    ''\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, string) => accumulator + string,\n    '',\n  );\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    \"\"\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce((prev, curr) => prev + curr);\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, currentValue) => accumulator + currentValue,\n    ''\n  );\n}\n",
    "  return strings.reduce(\n    (accumulator, currentValue) => accumulator + currentValue,\n    \"\"\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce((prev, curr) => prev + curr);\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce((prev, curr) => prev + curr);\n}\n",
    "  return strings.reduce((prev, curr) => prev + curr);\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    ''\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, currentValue) => accumulator + currentValue,\n    \"\"\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    '',\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce((prev, curr) => prev + curr);\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    \"\"\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    \"\"\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    \"\"\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (acc, str) => acc + str,\n    '',\n  );\n}\n",
    "  return strings.reduce(\n    (accumulator, string) => `${accumulator}${string}`,\n    ''\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce((prev, curr) => prev + curr);\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    \"\"\n  );\n}\n",
    "  return strings.reduce((prev, curr) => prev + curr);\n}\n",
    "  return strings.reduce(\n    (accumulator, string) => accumulator + string,\n    \"\"\n  );\n}\n",
    "  return strings.reduce((prev, curr) => prev + curr);\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce((prev, curr) => prev + curr);\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    \"\"\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    \"\"\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    \"\"\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (previous, current) => previous + current,\n    \"\"\n  );\n}\n",
    "  return strings.reduce(\n    (accumulator, current) => accumulator + current,\n    \"\"\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, currentValue) => accumulator + currentValue,\n    \"\"\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce((prev, curr) => prev + curr);\n}\n",
    "  return strings.reduce(\n    (previous, current) => previous + current,\n    '',\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.reduce(\n    (accumulator, currentValue) => accumulator + currentValue,\n    \"\"\n  );\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n",
    "  return strings.join('');\n}\n"
  ],
  "language": "ts",
  "name": "HumanEval_28_concatenate",
  "prompt": "//Concatenate list of strings into a single string\n// >>> concatenate([])\n// ''\n// >>> concatenate(['a', 'b', 'c'])\n// 'abc'\nfunction concatenate(strings: string[]): string {\n",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = concatenate;\n  assert.deepEqual(candidate([]),\"\");\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\"]),\"xyz\");\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\", \"w\", \"k\"]),\"xyzwk\");\n}\n\ntest();"
}