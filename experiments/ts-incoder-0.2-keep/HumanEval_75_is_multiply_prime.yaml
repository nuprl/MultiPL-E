name: HumanEval_75_is_multiply_prime
language: humaneval_to_typescript.py
prompt: "//Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
  \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunction\
  \ is_multiply_prime(a: number): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_multiply_prime;\n  assert.deepEqual(candidate(5),false);\n\
  \  assert.deepEqual(candidate(30),true);\n  assert.deepEqual(candidate(8),true);\n\
  \  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(125),true);\n\
  \  assert.deepEqual(candidate(105),true);\n  assert.deepEqual(candidate(126),false);\n\
  \  assert.deepEqual(candidate(729),false);\n  assert.deepEqual(candidate(891),false);\n\
  \  assert.deepEqual(candidate(1001),true);\n}\n\ntest();"
completions: ["  if(a<100){\n    return false;\n  }\n  \n  let prime_numbers:number[]\
    \ = [2];\n  let i:number;\n  \n  for(i=3;i<=Math.sqrt(a);i++){\n    if(is_prime(prime_numbers,i)){\n\
    \      prime_numbers.push(i);\n    }\n  }\n  \n  if(prime_numbers.length==3){\n\
    \    return true;\n  }\n  \n  return false;\n}\n", "    let primes = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let primes_length = primes.length;\n    let is_multiply_prime:\
    \ boolean = false;\n    for (let i = 0; i < primes_length; i++) {\n        if\
    \ (a % primes[i] == 0) {\n            is_multiply_prime = true;\n            break;\n\
    \        }\n    }\n    return is_multiply_prime;\n}\n", "\tlet prime_numbers =\
    \ [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\t\
    let prime_numbers_length = prime_numbers.length;\n\tlet is_multiply_prime: boolean\
    \ = false;\n\tfor (let i = 0; i < prime_numbers_length; i++) {\n\t\tif (a % prime_numbers[i]\
    \ == 0) {\n\t\t\tis_multiply_prime = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ is_multiply_prime;\n}\n", "    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let primes_length\
    \ = primes.length;\n    let result = false;\n    for (let i = 0; i < primes_length;\
    \ i++) {\n        if (a%primes[i] == 0) {\n            result = true;\n      \
    \      break;\n        }\n    }\n    return result;\n}\n", "    let prime_numbers\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    for (let i = 0; i < prime_numbers.length; i++) {\n\
    \        if (a%prime_numbers[i] == 0) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "    if (a < 100) {\n        return false;\n \
    \   }\n    let prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let prime_numbers_length\
    \ = prime_numbers.length;\n    let is_multiply_prime: boolean = true;\n    for\
    \ (let i = 0; i < prime_numbers_length; i++) {\n        if (a % prime_numbers[i]\
    \ == 0) {\n            is_multiply_prime = false;\n            break;\n      \
    \  }\n    }\n    return is_multiply_prime;\n}\n", "  let primes = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n  let primes_length = primes.length;\n  let result = false;\n  for\
    \ (let i = 0; i < primes_length; i++) {\n    if (a % primes[i] === 0) {\n    \
    \  result = true;\n      break;\n    }\n  }\n  return result;\n}\n", "  if(a<100)\
    \ {\n    return false\n  }\n  \n  let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \  \n  for(let i=0;i<primes.length;i++) {\n    if(a%primes[i]==0) {\n      return\
    \ false\n    }\n  }\n  \n  return true\n}\n", "    let prime_numbers = [2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97];\n    let prime_number_array = [];\n    for (let i = 0; i < prime_numbers.length;\
    \ i++) {\n        prime_number_array.push(prime_numbers[i]);\n    }\n    for (let\
    \ i = 0; i < prime_numbers.length; i++) {\n        for (let j = 0; j < prime_numbers.length;\
    \ j++) {\n            if (prime_numbers[i] * prime_numbers[j] == a) {\n      \
    \          return true;\n            }\n        }\n    }\n    return false;\n\
    }\n", "    let prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for (let i = 0; i < prime_numbers.length;\
    \ i++) {\n        if (a%prime_numbers[i] == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "  let b = Math.sqrt(a);\n  let c:\
    \ number = 1;\n  let d: number = 2;\n  while (c <= b) {\n    if (a % d == 0) {\n\
    \      return false;\n    }\n    c += 1;\n    d += 2;\n  }\n  return true;\n}\n",
  "  if (a < 100) {\n    return false;\n  }\n  let prime_numbers = [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97];\n  for (let i = 0; i < prime_numbers.length; i++) {\n    if (a % prime_numbers[i]\
    \ === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "    let prime_numbers\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    let is_multiply_prime: boolean = false;\n    for (let\
    \ i = 0; i < prime_numbers.length; i++) {\n        if (a%prime_numbers[i] == 0)\
    \ {\n            is_multiply_prime = true;\n            break;\n        }\n  \
    \  }\n    return is_multiply_prime;\n}\n", "    if (a < 100) {\n        return\
    \ false;\n    }\n    let prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let prime_numbers_length\
    \ = prime_numbers.length;\n    let is_multiply_prime = true;\n    for (let i =\
    \ 0; i < prime_numbers_length; i++) {\n        let current_number = prime_numbers[i];\n\
    \        let current_number_length = current_number.length;\n        for (let\
    \ j = 0; j < current_number_length; j++) {\n            if (current_number[j]\
    \ * a == prime_numbers[j]) {\n                is_multiply_prime = false;\n   \
    \         }\n        }\n    }\n    return is_multiply_prime;\n}\n", "    let prime_numbers:\
    \ number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97];\n    let is_multiply_prime: boolean = false;\n\
    \    for (let i = 0; i < prime_numbers.length; i++) {\n        if (a%prime_numbers[i]\
    \ == 0) {\n            is_multiply_prime = true;\n            break;\n       \
    \ }\n    }\n    return is_multiply_prime;\n}\n", "\tlet prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\n\
    \tlet n = a;\n\tlet counter = 0;\n\tlet prime_counter = 0;\n\tlet prime_numbers_counter\
    \ = 0;\n\tlet is_multiply = false;\n\tlet is_multiply_prime = false;\n\tlet is_multiply_prime_counter\
    \ = 0;\n\tlet is_multiply_prime_counter2 = 0;\n\tlet is_multiply_prime_counter3\
    \ = 0;\n\tlet is_multiply_prime_counter4 = 0;\n\tlet is_multiply_prime_counter5\
    \ = 0;\n\tlet is_multiply_prime_counter6 = 0;\n\tlet is_multiply_prime_counter7\
    \ = 0;\n\tlet is_multiply_prime_counter8 = 0;\n\tlet is_multiply_prime_counter9\
    \ = 0;\n\tlet is_multiply_prime_counter10 = 0;\n\tlet is_multiply_prime_counter11\
    \ = 0;\n\tlet is_multiply_prime_counter12", "    if (a < 100) {\n        return\
    \ false;\n    }\n    let prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for (let i\
    \ = 0; i < prime_numbers.length; i++) {\n        if (a * prime_numbers[i] ===\
    \ a) {\n            return true;\n        }\n    }\n    return false;\n}\n", " \
    \ if(a<100){\n    return false;\n  }\n  \n  let prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \  let prime_numbers_length = prime_numbers.length;\n  \n  for(let i=0;i<prime_numbers_length;i++){\n\
    \    if(a%prime_numbers[i]==0){\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "    let prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for (let i = 0; i < prime_numbers.length;\
    \ i++) {\n        if (a%prime_numbers[i] == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    let prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let is_multiply = false;\n    for (let i = 0; i < prime_numbers.length; i++)\
    \ {\n        if (a%prime_numbers[i] == 0) {\n            is_multiply = true;\n\
    \            break;\n        }\n    }\n    return is_multiply;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
