completions:
- "    let result: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i\
  \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n\
  \        }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
  \ > max) {\n            result.push(max);\n            max = numbers[i];\n     \
  \   } else {\n            result.push(numbers[i]);\n        }\n    }\n    return\
  \ result;\n}\n"
- "    let result = [];\n    let max = 0;\n    for (let i = 0; i < numbers.length;\
  \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n     \
  \   }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
  \ > max) {\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n\
  }\n"
- "  let rolling_max: number[] = [];\n  let rolling_max_index: number[] = [];\n  let\
  \ rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n \
  \ let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[] = [];\n\
  \  let rolling_max_value: number[] = [];"
- "  let max: number[] = [];\n  let maxIndex: number[] = [];\n  let currentIndex:\
  \ number[] = [];\n  let currentMax: number[] = [];\n  let currentMaxIndex: number[]\
  \ = [];\n  let currentMaxIndex2: number[] = [];\n  let currentMaxIndex3: number[]\
  \ = [];\n  let currentMaxIndex4: number[] = [];\n  let currentMaxIndex5: number[]\
  \ = [];\n  let currentMaxIndex6: number[] = [];\n  let currentMaxIndex7: number[]\
  \ = [];\n  let currentMaxIndex8: number[] = [];\n  let currentMaxIndex9: number[]\
  \ = [];\n  let currentMaxIndex10: number[] = [];\n  let currentMaxIndex11: number[]\
  \ = [];\n  let currentMaxIndex12: number[] = [];\n  let currentMaxIndex13: number[]\
  \ = [];\n  let currentMaxIndex14: number[] = [];\n  let currentMaxIndex15: number[]\
  \ = [];\n  let currentMaxIndex16: number[] = [];\n  let currentMaxIndex17: number[]\
  \ = [];\n  let currentMaxIndex18: number[] = [];\n  let currentMaxIndex19: number[]\
  \ = [];\n  let currentMaxIndex20: number[] = [];\n  let currentMaxIndex21: number[]\
  \ = [];\n  let currentMaxIndex22: number[] = [];\n  let currentMaxIndex23: number[]\
  \ = [];\n  let currentMaxIndex24: number[] = [];\n  let currentMaxIndex25: number[]\
  \ = [];\n  let currentMaxIndex26: number[] = [];\n  let currentMaxIndex27: number[]\
  \ = [];\n  let currentMaxIndex28: number[] = [];\n  let currentMaxIndex29: number[]\
  \ = [];\n  let currentMaxIndex30: number[] = [];\n  let currentMaxIndex31: number[]\
  \ = [];\n  let currentMaxIndex32: number[] = [];\n  let currentMaxIndex33: number[]\
  \ = [];\n  let currentMaxIndex34: number[] = [];\n  let currentMaxIndex35: number[]\
  \ = [];\n  let currentMaxIndex36: number[] = [];\n  let currentMaxIndex37: number[]\
  \ = [];\n  let currentMaxIndex38: number[] = [];\n  let currentMaxIndex39: number[]\
  \ = [];\n  let currentMaxIndex40: number[] = [];\n  let currentMaxIndex41: number[]\
  \ = [];\n  let currentMaxIndex42: number[] = [];\n  let currentMaxIndex43: number[]\
  \ = [];\n  let currentMaxIndex44: number[] = [];\n  let currentMaxIndex45: number[]\
  \ = [];\n  let currentMaxIndex46: number[] = [];\n  let currentMaxIndex47: number[]\
  \ = [];\n  let currentMaxIndex48: number[] = [];\n  let currentMaxIndex49: "
- "  const result: number[] = [];\n  let max: number = 0;\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for\
  \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n\
  \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "    var result: number[] = [];\n    var currentMax: number = 0;\n    var currentIndex:\
  \ number = 0;\n    while (currentIndex < numbers.length) {\n        if (numbers[currentIndex]\
  \ > currentMax) {\n            currentMax = numbers[currentIndex];\n        }\n\
  \        currentIndex++;\n    }\n    for (var i = numbers.length - 1; i >= 0; i--)\
  \ {\n        if (numbers[i] > currentMax) {\n            result.unshift(numbers[i]);\n\
  \        }\n    }\n    return result;\n}\n"
- "  const rolling_max_array: number[] = [];\n  let rolling_max_value: number = 0;\n\
  \  for (let i = 0; i < numbers.length; i++) {\n    if (rolling_max_value < numbers[i])\
  \ {\n      rolling_max_value = numbers[i];\n    }\n    rolling_max_array.push(rolling_max_value);\n\
  \  }\n  return rolling_max_array;\n}\n"
- "  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let\
  \ i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (numbers[i]\
  \ > max) {\n      max = numbers[i];\n    }\n  }\n  return result;\n}\n"
- "  const rolling_max_array: number[] = [];\n  let rolling_max_value: number;\n \
  \ for (let i = 0; i < numbers.length; i++) {\n    rolling_max_value = Math.max(rolling_max_value,\
  \ numbers[i]);\n    rolling_max_array.push(rolling_max_value);\n  }\n  return rolling_max_array;\n\
  }\n"
- "  let rolling_max: number[] = [];\n  let max_index = 0;\n  for (let i = 0; i <\
  \ numbers.length; i++) {\n    if (numbers[i] > rolling_max[max_index]) {\n     \
  \ rolling_max[max_index] = numbers[i];\n      max_index++;\n    }\n  }\n  return\
  \ rolling_max;\n}\n"
- "    const result: number[] = [];\n    let max: number = 0;\n    for (let i = 0;\
  \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
  \ numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n\
  \        if (numbers[i] === max) {\n            result.push(max);\n        }\n \
  \   }\n    return result;\n}\n"
- "  const rolling_max_result: number[] = [];\n  let rolling_max_number: number =\
  \ 0;\n  for (let i = 0; i < numbers.length; i++) {\n    rolling_max_number = Math.max(rolling_max_number,\
  \ numbers[i]);\n    rolling_max_result.push(rolling_max_number);\n  }\n  return\
  \ rolling_max_result;\n}\n"
- "  const result: number[] = [];\n  let max: number = 0;\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for\
  \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n\
  \      max = numbers[i];\n    }\n  }\n  return result;\n}\n"
- "  let max: number[] = [];\n  let currentMax: number[] = [];\n  let currentIndex:\
  \ number[] = [];\n  let currentIndexMax: number[] = [];\n  let currentIndexMaxIndex:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex: number[] = [];\n  let currentIndexMaxIndexIndex2:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex3: number[] = [];\n  let currentIndexMaxIndexIndex4:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex5: number[] = [];\n  let currentIndexMaxIndexIndex6:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex7: number[] = [];\n  let currentIndexMaxIndexIndex8:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex9: number[] = [];\n  let currentIndexMaxIndexIndex10:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex11: number[] = [];\n  let currentIndexMaxIndexIndex12:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex13: number[] = [];\n  let currentIndexMaxIndexIndex14:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex15: number[] = [];\n  let currentIndexMaxIndexIndex16:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex17: number[] = [];\n  let currentIndexMaxIndexIndex18:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex19: number[] = [];\n  let currentIndexMaxIndexIndex20:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex21: number[] = [];\n  let currentIndexMaxIndexIndex22:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex23: number[] = [];\n  let currentIndexMaxIndexIndex24:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex25: number[] = [];\n  let currentIndexMaxIndexIndex26:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex27: number[] = [];\n  let currentIndexMaxIndexIndex28:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex29: number[] = [];\n  let currentIndexMaxIndexIndex30:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex31: number[] = [];\n  let currentIndexMaxIndexIndex32:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex33: number[] = [];\n  let currentIndexMaxIndexIndex34:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex35: number[] = [];\n  let currentIndexMaxIndexIndex36:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex37: number[] = [];\n  let currentIndexMaxIndexIndex38:\
  \ number[] = [];\n  let currentIndexMaxIndexIndex39: number[] = [];\n  let currentIndexMaxIndexIndex40"
- "  const rolling_max_result: number[] = [];\n  let rolling_max_number: number =\
  \ 0;\n  for (let i = 0; i < numbers.length; i++) {\n    rolling_max_number = Math.max(rolling_max_number,\
  \ numbers[i]);\n    rolling_max_result.push(rolling_max_number);\n  }\n  return\
  \ rolling_max_result;\n}\n"
- "    let max: number[] = [];\n    let current: number[] = [];\n    for (let i =\
  \ 0; i < numbers.length; i++) {\n        if (numbers[i] > max[max.length - 1]) {\n\
  \            max = current.slice();\n            current.push(numbers[i]);\n   \
  \     } else {\n            current.push(numbers[i]);\n        }\n    }\n    return\
  \ max;\n}\n"
- "  const result: number[] = [];\n  let max: number = 0;\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for\
  \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n\
  \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "  let max: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let\
  \ maxIndex = i;\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[j]\
  \ > numbers[maxIndex]) {\n        maxIndex = j;\n      }\n    }\n    max.push(numbers[maxIndex]);\n\
  \  }\n  return max;\n}\n"
- "  const rolling_max_array: number[] = [];\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    rolling_max_array.push(Math.max(...numbers));\n  }\n  return rolling_max_array;\n\
  }\n"
- "  const result: number[] = [];\n  let max: number = 0;\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for\
  \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n\
  \    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
language: ts
name: HumanEval_9_rolling_max
prompt: '//From a given list of integers, generate a list of rolling maximum element
  found until given moment

  // in the sequence.

  // >>> rolling_max([1, 2, 3, 2, 3, 4, 2])

  // [1, 2, 3, 3, 3, 4, 4]

  function rolling_max(numbers: number[]): number[] {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
  \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
  \ 3, 3, 100, 100]);\n}\n\ntest();"
