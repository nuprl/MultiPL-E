name: HumanEval_101_words_string
language: humaneval_to_typescript.py
prompt: "//You will be given a string of words separated by commas or spaces. Your\
  \ task is\n// to split the string into words and return an array of the words.\n\
  // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"\
  name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five, six\"\
  ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s:\
  \ string): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = words_string;\n  assert.deepEqual(candidate(\"Hi,\
  \ my name is John\"),[\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n  assert.deepEqual(candidate(\"\
  One, two, three, four, five, six\"),[\"One\", \"two\", \"three\", \"four\", \"five\"\
  , \"six\"]);\n  assert.deepEqual(candidate(\"Hi, my name\"),[\"Hi\", \"my\", \"\
  name\"]);\n  assert.deepEqual(candidate(\"One,, two, three, four, five, six,\"),[\"\
  One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"\
  \"),[]);\n  assert.deepEqual(candidate(\"ahmed     , gamal\"),[\"ahmed\", \"gamal\"\
  ]);\n}\n\ntest();"
completions: ["  return s.split(',').map(word => word.trim());\n}\n", "  return s.split(',').map(word\
    \ => word.trim());\n}\n", "  return s.split(',').map(word => word.trim());\n}\n",
  "  return s.split(',').map(word => word.trim());\n}\n", "  return s.split(',').map(word\
    \ => word.trim());\n}\n", "  return s.split(',').map(word => word.trim());\n}\n",
  "  return s.split(',').map(word => word.trim());\n}\n", "  return s.split(',').map(word\
    \ => word.trim());\n}\n", "  return s.split(',').map(word => word.trim());\n}\n",
  "  return s.split(',').map(word => word.trim());\n}\n", "  return s.split(',').map(word\
    \ => word.trim());\n}\n", "  return s.split(',').map(word => word.trim());\n}\n",
  "  return s.split(',').map(word => word.trim());\n}\n", "  return s.split(',').map(word\
    \ => word.trim());\n}\n", "  return s.split(',').map(word => word.trim());\n}\n",
  "  return s.split(',').map(word => word.trim());\n}\n", "  return s.split(',').map(word\
    \ => word.trim());\n}\n", "  return s.split(/,|\\s+/);\n}\n", "  return s.split(',').map(word\
    \ => word.trim());\n}\n", "  return s.split(',').map(word => word.trim());\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
