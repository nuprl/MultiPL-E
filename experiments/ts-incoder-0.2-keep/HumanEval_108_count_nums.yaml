completions:
- "  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0)\
  \ {\n      count += Math.abs(arr[i]);\n    } else {\n      count += arr[i];\n  \
  \  }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0)\
  \ {\n      count += Math.abs(arr[i]);\n    } else {\n      count += arr[i];\n  \
  \  }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0)\
  \ {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n\
  \  }\n  return sum;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0)\
  \ {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n\
  \  }\n  return sum;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n\
  \  }\n  return sum;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0)\
  \ {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0)\
  \ {\n      count += Math.abs(arr[i]);\n    } else {\n      count += arr[i];\n  \
  \  }\n  }\n  return count;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n\
  \  }\n  return sum;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n\
  \  }\n  return sum;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n\
  \      sum += Math.abs(arr[i]);\n    } else {\n      sum += arr[i];\n    }\n  }\n\
  \  return sum;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n\
  \  }\n  return sum;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n\
  \  }\n  return sum;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0)\
  \ {\n      count += Math.abs(arr[i]);\n    } else {\n      count += arr[i];\n  \
  \  }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0)\
  \ {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n\
  \  }\n  return sum;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0)\
  \ {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0)\
  \ {\n      count += arr[i];\n    } else {\n      count += Math.abs(arr[i]);\n  \
  \  }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0)\
  \ {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n"
language: ts
name: HumanEval_108_count_nums
prompt: '//Write a function count_nums which takes an array of integers and returns

  // the number of elements which has a sum of digits > 0.

  // If a number is negative, then its first signed digit will be negative:

  // e.g. -123 has signed digits -1, 2, and 3.

  // >>> count_nums([]) == 0

  // >>> count_nums([-1, 11, -11]) == 1

  // >>> count_nums([1, 1, 2]) == 3

  function count_nums(arr: number[]): number {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
  \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
  \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
  \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
  \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
  }\n\ntest();"
