name: HumanEval_40_triples_sum_to_zero
language: humaneval_to_typescript.py
prompt: "//triples_sum_to_zero takes a list of integers as an input.\n// it returns\
  \ True if there are three distinct elements in the list that\n// sum to zero, and\
  \ False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> triples_sum_to_zero([1,\
  \ 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
  \ triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n// >>> triples_sum_to_zero([1])\n\
  // False\nfunction triples_sum_to_zero(l: number[]): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = triples_sum_to_zero;\n  assert.deepEqual(candidate([1,\
  \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, 5, -1]),false);\n  assert.deepEqual(candidate([1,\
  \ 3, -2, 1]),true);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 5, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);\n\
  \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([1, 3,\
  \ 5, -100]),false);\n  assert.deepEqual(candidate([100, 3, 5, -100]),false);\n}\n\
  \ntest();"
completions: ["  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n\
    \  }\n  const set = new Set<number>();\n  for (let i = 0; i < l.length; i++) {\n\
    \    if (set.has(l[i] + l[i + 1] + l[i + 2])) {\n      return false;\n    }\n\
    \    set.add(l[i] + l[i + 1] + l[i + 2]);\n  }\n  return true;\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if\
    \ (sum > 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n\
    \    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\
    \  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++)\
    \ {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum ===\
    \ 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum +=\
    \ l[i];\n  }\n  return sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n\
    \  }\n  const first = l[0];\n  const second = l[1];\n  const third = l[2];\n \
    \ const sumOfFirstAndSecond = first + second;\n  const sumOfSecondAndThird = second\
    \ + third;\n  return sumOfFirstAndSecond === sumOfSecondAndThird;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "  if (l.length < 3) {\n    return false;\n  }\n  let sum\
    \ = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  let triple\
    \ = false;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n    \
    \  triple = true;\n      break;\n    }\n  }\n  return sum === 0 && triple;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if\
    \ (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
