language: ts
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return\
    \ sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjqt36w29.js:16:12)\n    at Object.<anonymous> (/tmp/tmpjqt36w29.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  while (min < max) {\n    result.push(min);\n    min = min\
    \ + 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max = max - 1;\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmps_1lbzwy.js:33:12)\n    at Object.<anonymous> (/tmp/tmps_1lbzwy.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmocj4j7l.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpmocj4j7l.js:13:22)\n    at strange_sort_list (/tmp/tmpmocj4j7l.js:18:48)\n\
    \    at strange_sort_list (/tmp/tmpmocj4j7l.js:18:48)\n    at strange_sort_list\
    \ (/tmp/tmpmocj4j7l.js:18:48)\n    at strange_sort_list (/tmp/tmpmocj4j7l.js:18:48)\n\
    \    at strange_sort_list (/tmp/tmpmocj4j7l.js:18:48)\n    at strange_sort_list\
    \ (/tmp/tmpmocj4j7l.js:18:48)\n    at strange_sort_list (/tmp/tmpmocj4j7l.js:18:48)\n\
    \    at strange_sort_list (/tmp/tmpmocj4j7l.js:18:48)\n    at strange_sort_list\
    \ (/tmp/tmpmocj4j7l.js:18:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return\
    \ sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjqt36w29.js:16:12)\n    at Object.<anonymous> (/tmp/tmpjqt36w29.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst[len - 1];\n  const middle = Math.floor((len\
    \ - 1) / 2);\n  const left = strange_sort_list(lst.slice(0, middle));\n  const\
    \ right = strange_sort_list(lst.slice(middle + 1));\n  return left.concat(right).concat([min],\
    \ max);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  4,\n  4,\n  3,\n  4,\n  1,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmp7vwkb7ug.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7vwkb7ug.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 4, 4,\n    3, 4, 1, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpenweyfsn.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:13:22)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp5v05wz6l.js:15:12)\n    at Object.<anonymous> (/tmp/tmp5v05wz6l.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted_list = lst.slice();\n  sorted_list.sort((a, b) => a - b);\n\
    \  return sorted_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjnql0y0z.js:16:12)\n    at Object.<anonymous> (/tmp/tmpjnql0y0z.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min)\
    \ {\n      result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n\
    \    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmps7orc70m.js:36:12)\n    at Object.<anonymous> (/tmp/tmps7orc70m.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n\
    \  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return\
    \ strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmptbe7wzkt.js:12\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmptbe7wzkt.js:12:22)\n    at\
    \ strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n\
    \    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list\
    \ (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n\
    \    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list\
    \ (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = lst[0];\n\
    \  const max = lst.reduce((max, x) => Math.max(max, x), 0);\n\n  return lst.sort((a,\
    \ b) => {\n    if (a < min) {\n      return -1;\n    }\n    if (a > max) {\n \
    \     return 1;\n    }\n    if (b < min) {\n      return -1;\n    }\n    if (b\
    \ > max) {\n      return 1;\n    }\n    return 0;\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpfywmkasf.js:33:12)\n    at Object.<anonymous> (/tmp/tmpfywmkasf.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  while (min < max) {\n    result.push(min);\n    min = min\
    \ + 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max = max - 1;\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmpfe44dlng.js:33:12)\n    at Object.<anonymous> (/tmp/tmpfe44dlng.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return\
    \ sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjqt36w29.js:16:12)\n    at Object.<anonymous> (/tmp/tmpjqt36w29.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp__dj9nxe.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:13:22)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  const minVal = lst[0];\n  const maxVal = lst[len\
    \ - 1];\n  for (let i = 1; i < len; i++) {\n    const curVal = lst[i];\n    if\
    \ (curVal < minVal) {\n      lst[i] = minVal;\n    } else if (curVal > maxVal)\
    \ {\n      lst[i] = maxVal;\n    }\n  }\n  return lst;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp3wqju1bc.js:26:12)\n    at Object.<anonymous> (/tmp/tmp3wqju1bc.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpenweyfsn.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:13:22)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpenweyfsn.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:13:22)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n\
    \n  return strange_sort_list(\n    lst.slice(0, middle).concat(min).concat(max,\
    \ strange_sort_list(lst.slice(middle)))\n  );\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpd2q0mgcz.js:12\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpd2q0mgcz.js:12:22)\n    at\
    \ strange_sort_list (/tmp/tmpd2q0mgcz.js:15:75)\n    at strange_sort_list (/tmp/tmpd2q0mgcz.js:15:75)\n\
    \    at strange_sort_list (/tmp/tmpd2q0mgcz.js:15:75)\n    at strange_sort_list\
    \ (/tmp/tmpd2q0mgcz.js:15:75)\n    at strange_sort_list (/tmp/tmpd2q0mgcz.js:15:75)\n\
    \    at strange_sort_list (/tmp/tmpd2q0mgcz.js:15:75)\n    at strange_sort_list\
    \ (/tmp/tmpd2q0mgcz.js:15:75)\n    at strange_sort_list (/tmp/tmpd2q0mgcz.js:15:75)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted_list = lst.sort((a, b) => {\n    if (a < b) {\n      return\
    \ -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n\
    \  return sorted_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpt783k3x7.js:23:12)\n    at Object.<anonymous> (/tmp/tmpt783k3x7.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min)\
    \ {\n      result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n\
    \    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmptrzo9s__.js:36:12)\n    at Object.<anonymous> (/tmp/tmptrzo9s__.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    } else if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  let result = [];\n  for (let i\
    \ = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpmqesh35d.js:28:12)\n    at Object.<anonymous> (/tmp/tmpmqesh35d.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length <= 1) {\n    return lst;\n  }\n  let minValue = lst[0];\n\
    \  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i]\
    \ < minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n\
    \      maxValue = lst[i];\n    }\n  }\n  return [minValue, ...strange_sort_list(lst.slice(1)),\
    \ maxValue];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  4,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n\
    \  2,\n  3\n]\n    at test (/tmp/tmp305vboga.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp305vboga.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 3, 4,\n    4, 4, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let res =\
    \ [];\n  for (let i = min; i <= max; i++) {\n    res.push(i);\n  }\n  for (let\
    \ i = max; i >= min; i--) {\n    res.push(i);\n  }\n  return res;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  4,\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmpm93zgf2d.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpm93zgf2d.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 3, 4,\n    4, 3, 2, 1\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const [min, max] = lst;\n\
    \n  const minIndex = lst.indexOf(min);\n  const maxIndex = lst.indexOf(max);\n\
    \n  const middleIndex = Math.floor(maxIndex / 2);\n\n  const leftHalf = strange_sort_list(lst.slice(0,\
    \ middleIndex));\n  const rightHalf = strange_sort_list(lst.slice(middleIndex));\n\
    \n  return leftHalf.concat(rightHalf);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpcrbboi7w.js:12\n    const [min, max] = lst;\n                 \
    \      ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.values\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpcrbboi7w.js:12:24)\n    at\
    \ strange_sort_list (/tmp/tmpcrbboi7w.js:17:23)\n    at strange_sort_list (/tmp/tmpcrbboi7w.js:17:23)\n\
    \    at strange_sort_list (/tmp/tmpcrbboi7w.js:17:23)\n    at strange_sort_list\
    \ (/tmp/tmpcrbboi7w.js:17:23)\n    at strange_sort_list (/tmp/tmpcrbboi7w.js:17:23)\n\
    \    at strange_sort_list (/tmp/tmpcrbboi7w.js:17:23)\n    at strange_sort_list\
    \ (/tmp/tmpcrbboi7w.js:17:23)\n    at strange_sort_list (/tmp/tmpcrbboi7w.js:17:23)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  lst.sort((a, b) => a - b);\n  return lst;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp2z_vqjyp.js:15:12)\n    at Object.<anonymous> (/tmp/tmp2z_vqjyp.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min_value = lst[0];\n\
    \  const max_value = lst[lst.length - 1];\n  const min_idx = lst.indexOf(min_value);\n\
    \  const max_idx = lst.indexOf(max_value);\n  const middle_idx = Math.floor((min_idx\
    \ + max_idx) / 2);\n  const middle = lst[middle_idx];\n  const left = lst.slice(0,\
    \ middle_idx);\n  const right = lst.slice(middle_idx + 1);\n  return strange_sort_list(left).concat([middle],\
    \ strange_sort_list(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp62zgxujf.js:25:12)\n    at Object.<anonymous> (/tmp/tmp62zgxujf.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const [min, max] = lst;\n\
    \n  const minIndex = lst.indexOf(min);\n  const maxIndex = lst.indexOf(max);\n\
    \n  const sortedList = lst.slice(0);\n\n  if (minIndex > maxIndex) {\n    sortedList.sort((a,\
    \ b) => a - b);\n  } else {\n    sortedList.sort((a, b) => b - a);\n  }\n\n  return\
    \ sortedList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpgx2rim5q.js:27:12)\n    at Object.<anonymous> (/tmp/tmpgx2rim5q.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333853
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp__dj9nxe.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:13:22)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const [min, max] = lst;\n\
    \  const [min2, max2] = [max, min];\n  const [min3, max3] = [min2, max2];\n  const\
    \ [min4, max4] = [min3, max3];\n  const [min5, max5] = [min4, max4];\n  const\
    \ [min6, max6] = [min5, max5];\n  const [min7, max7] = [min6, max6];\n  const\
    \ [min8, max8] = [min7, max7];\n  const [min9, max9] = [min8, max8];\n  const\
    \ [min10, max10] = [min9, max9];\n  const [min11, max11] = [min10, max10];\n \
    \ const [min12, max12] = [min11, max11];\n  const [min13, max13] = [min12, max12];\n\
    \  const [min14, max14] = [min13, max13];\n  const [min15, max15] = [min14, max14];\n\
    \  const [min16, max16] = [min15, max15];\n  const [min17, max17] = [min16, max16];\n\
    \  const [min18, max18] = [min17, max17];\n  const [min19, max19] = [min18, max18];\n\
    \  const [min20, max20] = [min19, max19];\n  const [min21, max21] = [min20, max20];\n\
    \  const [min22, max22] = [min21, max21];\n  const [min23, max23] = [min22, max22];\n\
    \  const [min24, max24] = [min23, max23];\n  const [min25, max25] = [min24, max24];\n\
    \  const [min26, max26] = [min25, max25];\n  const [min27, max27] = [min26, max26];\n\
    \  const [min28, max28] = [min27, max27];\n  const [min29, max29] = [min28, max28];\n\
    \  const [min30, max30] = [min29, max29];\n  const [min31, max31] = [min30, max30];\n\
    \  const [min32, max32] = [min31, max31];\n  const [min33, max33] = [min32, max32];\n\
    \  const [min34, max34] = [min33, max33];\n  const [min35, max35] = [min34, max34];\n\
    \  const [min36, max36] = [min35, max35];\n  const [min37, max37] = [min36, max36];\n\
    \  const [min38, max38] = [min37, max37];\n  const [min39, max39] = [min38, max38];\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmprewh1umd.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333853
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let mid =\
    \ Math.floor(lst.length / 2);\n  let left = lst.slice(0, mid);\n  let right =\
    \ lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat([max]).concat(strange_sort_list(left));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwdxhzmbz.js:9\n    let min = Math.min(...lst);\n              \
    \     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpwdxhzmbz.js:9:20)\n    at strange_sort_list (/tmp/tmpwdxhzmbz.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmpwdxhzmbz.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmpwdxhzmbz.js:14:24)\n    at strange_sort_list (/tmp/tmpwdxhzmbz.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmpwdxhzmbz.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmpwdxhzmbz.js:14:24)\n    at strange_sort_list (/tmp/tmpwdxhzmbz.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmpwdxhzmbz.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmpwdxhzmbz.js:14:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const minValue = lst[0];\n  const maxValue = lst[lst.length - 1];\n  const\
    \ minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n\
    \  const sortedList = lst.sort((a, b) => {\n    if (a < b) {\n      return -1;\n\
    \    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return\
    \ sortedList.slice(0, minIndex).concat(sortedList.slice(maxIndex + 1));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpm52qu40o.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpm52qu40o.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n\n  const middle = Math.floor(lst.length / 2);\n\
    \n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9jv439ze.js:12\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmp9jv439ze.js:12:22)\n    at\
    \ strange_sort_list (/tmp/tmp9jv439ze.js:17:50)\n    at strange_sort_list (/tmp/tmp9jv439ze.js:17:50)\n\
    \    at strange_sort_list (/tmp/tmp9jv439ze.js:17:50)\n    at strange_sort_list\
    \ (/tmp/tmp9jv439ze.js:17:50)\n    at strange_sort_list (/tmp/tmp9jv439ze.js:17:50)\n\
    \    at strange_sort_list (/tmp/tmp9jv439ze.js:17:50)\n    at strange_sort_list\
    \ (/tmp/tmp9jv439ze.js:17:50)\n    at strange_sort_list (/tmp/tmp9jv439ze.js:17:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp__dj9nxe.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:13:22)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let middle\
    \ = Math.floor(lst.length / 2);\n  let left = lst.slice(0, middle);\n  let right\
    \ = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max]).concat(left.reverse());\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvubgxddd.js:9\n    let min = Math.min(...lst);\n              \
    \     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpvubgxddd.js:9:20)\n    at strange_sort_list (/tmp/tmpvubgxddd.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmpvubgxddd.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmpvubgxddd.js:14:24)\n    at strange_sort_list (/tmp/tmpvubgxddd.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmpvubgxddd.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmpvubgxddd.js:14:24)\n    at strange_sort_list (/tmp/tmpvubgxddd.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmpvubgxddd.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmpvubgxddd.js:14:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n\
    \  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return\
    \ strange_sort_list(left).concat(strange_sort_list(right)).concat([min]).concat(max);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmptjnxh5o_.js:12\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmptjnxh5o_.js:12:22)\n    at strange_sort_list (/tmp/tmptjnxh5o_.js:17:43)\n\
    \    at strange_sort_list (/tmp/tmptjnxh5o_.js:17:43)\n    at strange_sort_list\
    \ (/tmp/tmptjnxh5o_.js:17:43)\n    at strange_sort_list (/tmp/tmptjnxh5o_.js:17:43)\n\
    \    at strange_sort_list (/tmp/tmptjnxh5o_.js:17:43)\n    at strange_sort_list\
    \ (/tmp/tmptjnxh5o_.js:17:43)\n    at strange_sort_list (/tmp/tmptjnxh5o_.js:17:43)\n\
    \    at strange_sort_list (/tmp/tmptjnxh5o_.js:17:43)\n    at strange_sort_list\
    \ (/tmp/tmptjnxh5o_.js:17:43)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst[len - 1];\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu641zux2.js:15\n    const middle = Math.floor(len / 2);\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmpu641zux2.js:15:25)\n\
    \    at strange_sort_list (/tmp/tmpu641zux2.js:18:48)\n    at strange_sort_list\
    \ (/tmp/tmpu641zux2.js:18:48)\n    at strange_sort_list (/tmp/tmpu641zux2.js:18:48)\n\
    \    at strange_sort_list (/tmp/tmpu641zux2.js:18:48)\n    at strange_sort_list\
    \ (/tmp/tmpu641zux2.js:18:48)\n    at strange_sort_list (/tmp/tmpu641zux2.js:18:48)\n\
    \    at strange_sort_list (/tmp/tmpu641zux2.js:18:48)\n    at strange_sort_list\
    \ (/tmp/tmpu641zux2.js:18:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted: number[] = [];\n  let min: number = Number.MAX_SAFE_INTEGER;\n\
    \  let max: number = Number.MIN_SAFE_INTEGER;\n  for (const num of lst) {\n  \
    \  if (num < min) {\n      min = num;\n    }\n    if (num > max) {\n      max\
    \ = num;\n    }\n  }\n  for (let i = min; i <= max; i++) {\n    sorted.push(i);\n\
    \  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpn9qxdrnt.js:28:12)\n    at Object.<anonymous> (/tmp/tmpn9qxdrnt.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp5v05wz6l.js:15:12)\n    at Object.<anonymous> (/tmp/tmp5v05wz6l.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted_list = lst.slice();\n  sorted_list.sort((a, b) => a - b);\n\
    \  return sorted_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjnql0y0z.js:16:12)\n    at Object.<anonymous> (/tmp/tmpjnql0y0z.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return\
    \ sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjqt36w29.js:16:12)\n    at Object.<anonymous> (/tmp/tmpjqt36w29.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const [min, max] = lst;\n  const [minIndex, maxIndex] = lst.findIndex((x)\
    \ => x > max);\n  const [maxIndex, minIndex] = lst.findIndex((x) => x < min);\n\
    \  const [minIndex, maxIndex] = [minIndex, maxIndex].sort();\n  return lst.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpy84fj6fz.ts(10,9): error TS2488: Type ''number'' must
    have a ''[Symbol.iterator]()'' method that returns an iterator.

    ../../../../tmp/tmpy84fj6fz.ts(10,10): error TS2451: Cannot redeclare block-scoped
    variable ''minIndex''.

    ../../../../tmp/tmpy84fj6fz.ts(10,20): error TS2451: Cannot redeclare block-scoped
    variable ''maxIndex''.

    ../../../../tmp/tmpy84fj6fz.ts(11,9): error TS2488: Type ''number'' must have
    a ''[Symbol.iterator]()'' method that returns an iterator.

    ../../../../tmp/tmpy84fj6fz.ts(11,10): error TS2451: Cannot redeclare block-scoped
    variable ''maxIndex''.

    ../../../../tmp/tmpy84fj6fz.ts(11,20): error TS2451: Cannot redeclare block-scoped
    variable ''minIndex''.

    ../../../../tmp/tmpy84fj6fz.ts(12,10): error TS2451: Cannot redeclare block-scoped
    variable ''minIndex''.

    ../../../../tmp/tmpy84fj6fz.ts(12,20): error TS2451: Cannot redeclare block-scoped
    variable ''maxIndex''.

    '
  timestamp: 1660333853
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const\
    \ middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max],\
    \ strange_sort_list(left));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpb6i4s8pp.js:9\n    const min = Math.min(...lst);\n            \
    \         ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n\
    \    at strange_sort_list (/tmp/tmpb6i4s8pp.js:9:22)\n    at strange_sort_list\
    \ (/tmp/tmpb6i4s8pp.js:14:24)\n    at strange_sort_list (/tmp/tmpb6i4s8pp.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmpb6i4s8pp.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmpb6i4s8pp.js:14:24)\n    at strange_sort_list (/tmp/tmpb6i4s8pp.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmpb6i4s8pp.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmpb6i4s8pp.js:14:24)\n    at strange_sort_list (/tmp/tmpb6i4s8pp.js:14:24)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  while (min < max) {\n    result.push(min);\n    min = lst[min];\n\
    \  }\n  result.push(max);\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpdhllki4c.js:30:12)\n    at Object.<anonymous> (/tmp/tmpdhllki4c.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp__dj9nxe.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:13:22)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  lst.sort((a, b) => a - b);\n  return lst;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp2z_vqjyp.js:15:12)\n    at Object.<anonymous> (/tmp/tmp2z_vqjyp.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpfrz5gksx.js:28:12)\n    at Object.<anonymous> (/tmp/tmpfrz5gksx.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min)\
    \ {\n      result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n\
    \    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmptrzo9s__.js:36:12)\n    at Object.<anonymous> (/tmp/tmptrzo9s__.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([minValue], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpp7vte55g.js:15\n    const middle = Math.floor(len / 2);\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmpp7vte55g.js:15:25)\n\
    \    at strange_sort_list (/tmp/tmpp7vte55g.js:18:55)\n    at strange_sort_list\
    \ (/tmp/tmpp7vte55g.js:18:55)\n    at strange_sort_list (/tmp/tmpp7vte55g.js:18:55)\n\
    \    at strange_sort_list (/tmp/tmpp7vte55g.js:18:55)\n    at strange_sort_list\
    \ (/tmp/tmpp7vte55g.js:18:55)\n    at strange_sort_list (/tmp/tmpp7vte55g.js:18:55)\n\
    \    at strange_sort_list (/tmp/tmpp7vte55g.js:18:55)\n    at strange_sort_list\
    \ (/tmp/tmpp7vte55g.js:18:55)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted: number[] = [];\n  let min: number = Number.MAX_SAFE_INTEGER;\n\
    \  let max: number = Number.MIN_SAFE_INTEGER;\n  for (const num of lst) {\n  \
    \  if (num < min) {\n      min = num;\n    }\n    if (num > max) {\n      max\
    \ = num;\n    }\n  }\n  for (let i = min; i <= max; i++) {\n    sorted.push(i);\n\
    \  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpn9qxdrnt.js:28:12)\n    at Object.<anonymous> (/tmp/tmpn9qxdrnt.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const [min, max] = lst;\n\
    \n  const [minIndex, maxIndex] = findIndex(lst, (item) => item > max);\n  const\
    \ [maxIndex, minIndex] = findIndex(lst, (item) => item < min);\n\n  const minValue\
    \ = lst[minIndex];\n  const maxValue = lst[maxIndex];\n\n  const sortedList =\
    \ lst\n    .slice(minIndex, maxIndex + 1)\n    .sort((a, b) => a - b);\n\n  return\
    \ sortedList.concat(minValue, maxValue);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmppurwkfty.ts(15,10): error TS2451: Cannot redeclare block-scoped
    variable ''minIndex''.

    ../../../../tmp/tmppurwkfty.ts(15,20): error TS2451: Cannot redeclare block-scoped
    variable ''maxIndex''.

    ../../../../tmp/tmppurwkfty.ts(15,32): error TS2552: Cannot find name ''findIndex''.
    Did you mean ''minIndex''?

    ../../../../tmp/tmppurwkfty.ts(16,10): error TS2451: Cannot redeclare block-scoped
    variable ''maxIndex''.

    ../../../../tmp/tmppurwkfty.ts(16,20): error TS2451: Cannot redeclare block-scoped
    variable ''minIndex''.

    ../../../../tmp/tmppurwkfty.ts(16,32): error TS2552: Cannot find name ''findIndex''.
    Did you mean ''minIndex''?

    '
  timestamp: 1660333854
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const [min, max] = lst;\n  const [min2, max2] = [max, min];\n  const [min3,\
    \ max3] = [min2, max2];\n  const [min4, max4] = [min3, max3];\n  const [min5,\
    \ max5] = [min4, max4];\n  const [min6, max6] = [min5, max5];\n  const [min7,\
    \ max7] = [min6, max6];\n  const [min8, max8] = [min7, max7];\n  const [min9,\
    \ max9] = [min8, max8];\n  const [min10, max10] = [min9, max9];\n  const [min11,\
    \ max11] = [min10, max10];\n  const [min12, max12] = [min11, max11];\n  const\
    \ [min13, max13] = [min12, max12];\n  const [min14, max14] = [min13, max13];\n\
    \  const [min15, max15] = [min14, max14];\n  const [min16, max16] = [min15, max15];\n\
    \  const [min17, max17] = [min16, max16];\n  const [min18, max18] = [min17, max17];\n\
    \  const [min19, max19] = [min18, max18];\n  const [min20, max20] = [min19, max19];\n\
    \  const [min21, max21] = [min20, max20];\n  const [min22, max22] = [min21, max21];\n\
    \  const [min23, max23] = [min22, max22];\n  const [min24, max24] = [min23, max23];\n\
    \  const [min25, max25] = [min24, max24];\n  const [min26, max26] = [min25, max25];\n\
    \  const [min27, max27] = [min26, max26];\n  const [min28, max28] = [min27, max27];\n\
    \  const [min29, max29] = [min28, max28];\n  const [min30, max30] = [min29, max29];\n\
    \  const [min31, max31] = [min30, max30];\n  const [min32, max32] = [min31, max31];\n\
    \  const [min33, max33] = [min32, max32];\n  const [min34, max34] = [min33, max33];\n\
    \  const [min35, max35] = [min34, max34];\n  const [min36, max36] = [min35, max35];\n\
    \  const [min37, max37] = [min36, max36];\n  const [min38, max38] = [min37, max37];\n\
    \  const [min39, max39] = [min38, max38];\n  const [min40, max40] = [min\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpzkjro408.ts(49,1): error TS1005: '','' expected.

    ../../../../tmp/tmpzkjro408.ts(49,9): error TS1005: '','' expected.

    ../../../../tmp/tmpzkjro408.ts(66,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8_mjw24u.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp8_mjw24u.js:13:22)\n    at strange_sort_list (/tmp/tmp8_mjw24u.js:18:48)\n\
    \    at strange_sort_list (/tmp/tmp8_mjw24u.js:18:48)\n    at strange_sort_list\
    \ (/tmp/tmp8_mjw24u.js:18:48)\n    at strange_sort_list (/tmp/tmp8_mjw24u.js:18:48)\n\
    \    at strange_sort_list (/tmp/tmp8_mjw24u.js:18:48)\n    at strange_sort_list\
    \ (/tmp/tmp8_mjw24u.js:18:48)\n    at strange_sort_list (/tmp/tmp8_mjw24u.js:18:48)\n\
    \    at strange_sort_list (/tmp/tmp8_mjw24u.js:18:48)\n    at strange_sort_list\
    \ (/tmp/tmp8_mjw24u.js:18:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpfrz5gksx.js:28:12)\n    at Object.<anonymous> (/tmp/tmpfrz5gksx.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len < 2) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([max, min, ...strange_sort_list(right)]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  4,\n  1,\n  3,\n  4,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\
    \n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmp9qk98qq8.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9qk98qq8.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 4,\n    1, 3, 4, 3, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min)\
    \ {\n      result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n\
    \    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmptrzo9s__.js:36:12)\n    at Object.<anonymous> (/tmp/tmptrzo9s__.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const [min, max] = lst;\n\
    \n  const mid = Math.floor((min + max) / 2);\n\n  return strange_sort_list(\n\
    \    lst\n      .slice(0, mid)\n      .concat(mid === lst.length ? [max] : lst)\n\
    \      .concat(\n        mid === lst.length ? [min] : lst.slice(0, mid)\n    \
    \  )\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmpze263_.js:12\n    const [min, max] = lst;\n                 \
    \      ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.values\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpmpze263_.js:12:24)\n    at\
    \ strange_sort_list (/tmp/tmpmpze263_.js:14:12)\n    at strange_sort_list (/tmp/tmpmpze263_.js:14:12)\n\
    \    at strange_sort_list (/tmp/tmpmpze263_.js:14:12)\n    at strange_sort_list\
    \ (/tmp/tmpmpze263_.js:14:12)\n    at strange_sort_list (/tmp/tmpmpze263_.js:14:12)\n\
    \    at strange_sort_list (/tmp/tmpmpze263_.js:14:12)\n    at strange_sort_list\
    \ (/tmp/tmpmpze263_.js:14:12)\n    at strange_sort_list (/tmp/tmpmpze263_.js:14:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333855
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp5v05wz6l.js:15:12)\n    at Object.<anonymous> (/tmp/tmp5v05wz6l.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const middle = Math.floor(len\
    \ / 2);\n  const left = strange_sort_list(lst.slice(0, middle));\n  const right\
    \ = strange_sort_list(lst.slice(middle));\n  return left.concat(right, minValue,\
    \ maxValue);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8ighzhrn.js:16\n    const left = strange_sort_list(lst.slice(0,\
    \ middle));\n                                       ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at Array.slice (<anonymous>)\n    at strange_sort_list\
    \ (/tmp/tmp8ighzhrn.js:16:40)\n    at strange_sort_list (/tmp/tmp8ighzhrn.js:17:19)\n\
    \    at strange_sort_list (/tmp/tmp8ighzhrn.js:17:19)\n    at strange_sort_list\
    \ (/tmp/tmp8ighzhrn.js:17:19)\n    at strange_sort_list (/tmp/tmp8ighzhrn.js:17:19)\n\
    \    at strange_sort_list (/tmp/tmp8ighzhrn.js:17:19)\n    at strange_sort_list\
    \ (/tmp/tmp8ighzhrn.js:17:19)\n    at strange_sort_list (/tmp/tmp8ighzhrn.js:17:19)\n\
    \    at strange_sort_list (/tmp/tmp8ighzhrn.js:17:19)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst[len - 1];\n  const middle = Math.floor((len\
    \ - 1) / 2);\n  const left = strange_sort_list(lst.slice(0, middle));\n  const\
    \ right = strange_sort_list(lst.slice(middle + 1));\n  return left.concat(right,\
    \ min).concat(max);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  4,\n  4,\n  3,\n  4,\n  1,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmpa841bgfr.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpa841bgfr.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 4, 4,\n    3, 4, 1, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpenweyfsn.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:13:22)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const middle = Math.floor((len\
    \ - 1) / 2);\n  const leftHalf = strange_sort_list(lst.slice(0, middle));\n  const\
    \ rightHalf = strange_sort_list(lst.slice(middle));\n  return leftHalf.concat(rightHalf).concat([minValue],\
    \ maxValue);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpk9umc11i.js:15\n    const middle = Math.floor((len - 1) / 2);\n\
    \                        ^\n\nRangeError: Maximum call stack size exceeded\n \
    \   at Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmpk9umc11i.js:15:25)\n\
    \    at strange_sort_list (/tmp/tmpk9umc11i.js:17:23)\n    at strange_sort_list\
    \ (/tmp/tmpk9umc11i.js:17:23)\n    at strange_sort_list (/tmp/tmpk9umc11i.js:17:23)\n\
    \    at strange_sort_list (/tmp/tmpk9umc11i.js:17:23)\n    at strange_sort_list\
    \ (/tmp/tmpk9umc11i.js:17:23)\n    at strange_sort_list (/tmp/tmpk9umc11i.js:17:23)\n\
    \    at strange_sort_list (/tmp/tmpk9umc11i.js:17:23)\n    at strange_sort_list\
    \ (/tmp/tmpk9umc11i.js:17:23)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor((min\
    \ + max) / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat(strange_sort_list(right)).concat([mid]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpomxvvpts.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpomxvvpts.js:13:22)\n    at strange_sort_list (/tmp/tmpomxvvpts.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpomxvvpts.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmpomxvvpts.js:18:12)\n    at strange_sort_list (/tmp/tmpomxvvpts.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpomxvvpts.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmpomxvvpts.js:18:12)\n    at strange_sort_list (/tmp/tmpomxvvpts.js:18:12)\n\
    \    at strange_sort_list (/tmp/tmpomxvvpts.js:18:12)\n    at strange_sort_list\
    \ (/tmp/tmpomxvvpts.js:18:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpenweyfsn.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:13:22)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpenweyfsn.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:13:22)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp__dj9nxe.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:13:22)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const\
    \ middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max],\
    \ strange_sort_list(left));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpb6i4s8pp.js:9\n    const min = Math.min(...lst);\n            \
    \         ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n\
    \    at strange_sort_list (/tmp/tmpb6i4s8pp.js:9:22)\n    at strange_sort_list\
    \ (/tmp/tmpb6i4s8pp.js:14:24)\n    at strange_sort_list (/tmp/tmpb6i4s8pp.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmpb6i4s8pp.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmpb6i4s8pp.js:14:24)\n    at strange_sort_list (/tmp/tmpb6i4s8pp.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmpb6i4s8pp.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmpb6i4s8pp.js:14:24)\n    at strange_sort_list (/tmp/tmpb6i4s8pp.js:14:24)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let middle\
    \ = Math.floor(lst.length / 2);\n  let left = [];\n  let right = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      left.push(lst[i]);\n\
    \    } else if (lst[i] > max) {\n      right.push(lst[i]);\n    } else {\n   \
    \   left.push(lst[i]);\n      right.push(lst[middle]);\n      middle++;\n    }\n\
    \  }\n  return left.concat(right).sort();\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  3,\n  4,\n  4,\n  undefined,\n  undefined\n]\n\nshould loosely deep-equal\n\
    \n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpokaqwoae.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpokaqwoae.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 3, 4, 4, undefined, undefined ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333857
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8_mjw24u.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp8_mjw24u.js:13:22)\n    at strange_sort_list (/tmp/tmp8_mjw24u.js:18:48)\n\
    \    at strange_sort_list (/tmp/tmp8_mjw24u.js:18:48)\n    at strange_sort_list\
    \ (/tmp/tmp8_mjw24u.js:18:48)\n    at strange_sort_list (/tmp/tmp8_mjw24u.js:18:48)\n\
    \    at strange_sort_list (/tmp/tmp8_mjw24u.js:18:48)\n    at strange_sort_list\
    \ (/tmp/tmp8_mjw24u.js:18:48)\n    at strange_sort_list (/tmp/tmp8_mjw24u.js:18:48)\n\
    \    at strange_sort_list (/tmp/tmp8_mjw24u.js:18:48)\n    at strange_sort_list\
    \ (/tmp/tmp8_mjw24u.js:18:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let result\
    \ = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpp_028fml.js:20:12)\n    at Object.<anonymous> (/tmp/tmpp_028fml.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333857
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst[len - 1];\n  const middle = Math.floor(len\
    \ / 2);\n  const left = strange_sort_list(lst.slice(0, middle));\n  const right\
    \ = strange_sort_list(lst.slice(middle));\n  return left.concat(right, min).concat(max);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpejc2aaie.js:15\n    const middle = Math.floor(len / 2);\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmpejc2aaie.js:15:25)\n\
    \    at strange_sort_list (/tmp/tmpejc2aaie.js:17:19)\n    at strange_sort_list\
    \ (/tmp/tmpejc2aaie.js:17:19)\n    at strange_sort_list (/tmp/tmpejc2aaie.js:17:19)\n\
    \    at strange_sort_list (/tmp/tmpejc2aaie.js:17:19)\n    at strange_sort_list\
    \ (/tmp/tmpejc2aaie.js:17:19)\n    at strange_sort_list (/tmp/tmpejc2aaie.js:17:19)\n\
    \    at strange_sort_list (/tmp/tmpejc2aaie.js:17:19)\n    at strange_sort_list\
    \ (/tmp/tmpejc2aaie.js:17:19)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333857
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpenweyfsn.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:13:22)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const\
    \ middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max]).concat(left.reverse());\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpqvzgz7fh.js:9\n    const min = Math.min(...lst);\n            \
    \         ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpqvzgz7fh.js:9:22)\n    at strange_sort_list (/tmp/tmpqvzgz7fh.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmpqvzgz7fh.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmpqvzgz7fh.js:14:24)\n    at strange_sort_list (/tmp/tmpqvzgz7fh.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmpqvzgz7fh.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmpqvzgz7fh.js:14:24)\n    at strange_sort_list (/tmp/tmpqvzgz7fh.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmpqvzgz7fh.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmpqvzgz7fh.js:14:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333857
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp5v05wz6l.js:15:12)\n    at Object.<anonymous> (/tmp/tmp5v05wz6l.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const [min, max] = lst;\n\
    \  const [min2, max2] = [max, min];\n  return [...strange_sort_list(min2), ...strange_sort_list(max2),\
    \ ...strange_sort_list(min)];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpbdjaq6uc.ts(14,32): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    ../../../../tmp/tmpbdjaq6uc.ts(14,60): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    ../../../../tmp/tmpbdjaq6uc.ts(14,88): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1660333857
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  const minValue = lst[0];\n  const maxValue =\
    \ lst[len - 1];\n  for (let i = 1; i < len; i++) {\n    const element = lst[i];\n\
    \    if (element < minValue) {\n      lst[i] = minValue;\n    } else if (element\
    \ > maxValue) {\n      lst[i] = maxValue;\n    }\n  }\n  return lst;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmphbji7tdx.js:26:12)\n    at Object.<anonymous> (/tmp/tmphbji7tdx.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333857
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min)\
    \ {\n      result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n\
    \    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmptrzo9s__.js:36:12)\n    at Object.<anonymous> (/tmp/tmptrzo9s__.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  lst.sort((a, b) => a - b);\n  return lst;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp2z_vqjyp.js:15:12)\n    at Object.<anonymous> (/tmp/tmp2z_vqjyp.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmocj4j7l.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpmocj4j7l.js:13:22)\n    at strange_sort_list (/tmp/tmpmocj4j7l.js:18:48)\n\
    \    at strange_sort_list (/tmp/tmpmocj4j7l.js:18:48)\n    at strange_sort_list\
    \ (/tmp/tmpmocj4j7l.js:18:48)\n    at strange_sort_list (/tmp/tmpmocj4j7l.js:18:48)\n\
    \    at strange_sort_list (/tmp/tmpmocj4j7l.js:18:48)\n    at strange_sort_list\
    \ (/tmp/tmpmocj4j7l.js:18:48)\n    at strange_sort_list (/tmp/tmpmocj4j7l.js:18:48)\n\
    \    at strange_sort_list (/tmp/tmpmocj4j7l.js:18:48)\n    at strange_sort_list\
    \ (/tmp/tmpmocj4j7l.js:18:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst[len - 1];\n  const mid = Math.floor((min +\
    \ max) / 2);\n  return strange_sort_list(\n    lst.slice(0, mid).concat(\n   \
    \   strange_sort_list(\n        lst.slice(mid, len).concat(\n          lst.slice(0,\
    \ mid)\n        )\n      ),\n      lst.slice(mid, len)\n    )\n  );\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpt962vhte.js:16\n    return strange_sort_list(lst.slice(0, mid).concat(strange_sort_list(lst.slice(mid,\
    \ len).concat(lst.slice(0, mid))), lst.slice(mid, len)));\n                  \
    \               ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpt962vhte.js:16:34)\n    at\
    \ strange_sort_list (/tmp/tmpt962vhte.js:16:55)\n    at strange_sort_list (/tmp/tmpt962vhte.js:16:55)\n\
    \    at strange_sort_list (/tmp/tmpt962vhte.js:16:55)\n    at strange_sort_list\
    \ (/tmp/tmpt962vhte.js:16:55)\n    at strange_sort_list (/tmp/tmpt962vhte.js:16:55)\n\
    \    at strange_sort_list (/tmp/tmpt962vhte.js:16:55)\n    at strange_sort_list\
    \ (/tmp/tmpt962vhte.js:16:55)\n    at strange_sort_list (/tmp/tmpt962vhte.js:16:55)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333857
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmty7fxg4.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpmty7fxg4.js:13:22)\n    at strange_sort_list (/tmp/tmpmty7fxg4.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpmty7fxg4.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpmty7fxg4.js:18:50)\n    at strange_sort_list (/tmp/tmpmty7fxg4.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpmty7fxg4.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpmty7fxg4.js:18:50)\n    at strange_sort_list (/tmp/tmpmty7fxg4.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpmty7fxg4.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpmty7fxg4.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333857
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n\
    \  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return\
    \ strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmptbe7wzkt.js:12\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmptbe7wzkt.js:12:22)\n    at\
    \ strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n\
    \    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list\
    \ (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n\
    \    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list\
    \ (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst[len - 1];\n  const mid = Math.floor((min +\
    \ max) / 2);\n  return strange_sort_list(lst.slice(0, mid))\n    .concat(\n  \
    \    strange_sort_list(lst.slice(mid, len)),\n      strange_sort_list(lst.slice(0,\
    \ mid)),\n    )\n    .concat(\n      strange_sort_list(lst.slice(mid, len)),\n\
    \    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp4c0hm7_o.js:16\n    return strange_sort_list(lst.slice(0, mid))\n\
    \                                 ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at Array.slice (<anonymous>)\n    at strange_sort_list (/tmp/tmp4c0hm7_o.js:16:34)\n\
    \    at strange_sort_list (/tmp/tmp4c0hm7_o.js:16:12)\n    at strange_sort_list\
    \ (/tmp/tmp4c0hm7_o.js:16:12)\n    at strange_sort_list (/tmp/tmp4c0hm7_o.js:16:12)\n\
    \    at strange_sort_list (/tmp/tmp4c0hm7_o.js:16:12)\n    at strange_sort_list\
    \ (/tmp/tmp4c0hm7_o.js:16:12)\n    at strange_sort_list (/tmp/tmp4c0hm7_o.js:16:12)\n\
    \    at strange_sort_list (/tmp/tmp4c0hm7_o.js:16:12)\n    at strange_sort_list\
    \ (/tmp/tmp4c0hm7_o.js:16:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333857
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  while (min < max) {\n    result.push(min);\n    min = min\
    \ + 1;\n  }\n  while (min < lst.length) {\n    result.push(lst[min]);\n    min\
    \ = min + 1;\n  }\n  while (max > lst.length) {\n    result.push(max);\n    max\
    \ = max - 1;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmpbpuq4kzh.js:37:12)\n    at Object.<anonymous> (/tmp/tmpbpuq4kzh.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333858
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpenweyfsn.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:13:22)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = lst[0];\n\
    \  const max = lst.reduce((max, x) => Math.max(max, x), 0);\n  return strange_sort_list(\n\
    \    lst.filter(x => x < min).concat(\n      lst.filter(x => x > max).reverse(),\n\
    \      lst.filter(x => x < max),\n    ),\n  );\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmprce51lkn.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmprce51lkn.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333857
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const [min, max] = lst;\n\
    \  const [min2, max2] = [max, min];\n  const [min3, max3] = [min2, max2];\n  const\
    \ [min4, max4] = [min3, max3];\n  const [min5, max5] = [min4, max4];\n  const\
    \ [min6, max6] = [min5, max5];\n  const [min7, max7] = [min6, max6];\n  const\
    \ [min8, max8] = [min7, max7];\n  const [min9, max9] = [min8, max8];\n  const\
    \ [min10, max10] = [min9, max9];\n  const [min11, max11] = [min10, max10];\n \
    \ const [min12, max12] = [min11, max11];\n  const [min13, max13] = [min12, max12];\n\
    \  const [min14, max14] = [min13, max13];\n  const [min15, max15] = [min14, max14];\n\
    \  const [min16, max16] = [min15, max15];\n  const [min17, max17] = [min16, max16];\n\
    \  const [min18, max18] = [min17, max17];\n  const [min19, max19] = [min18, max18];\n\
    \  const [min20, max20] = [min19, max19];\n  const [min21, max21] = [min20, max20];\n\
    \  const [min22, max22] = [min21, max21];\n  const [min23, max23] = [min22, max22];\n\
    \  const [min24, max24] = [min23, max23];\n  const [min25, max25] = [min24, max24];\n\
    \  const [min26, max26] = [min25, max25];\n  const [min27, max27] = [min26, max26];\n\
    \  const [min28, max28] = [min27, max27];\n  const [min29, max29] = [min28, max28];\n\
    \  const [min30, max30] = [min29, max29];\n  const [min31, max31] = [min30, max30];\n\
    \  const [min32, max32] = [min31, max31];\n  const [min33, max33] = [min32, max32];\n\
    \  const [min34, max34] = [min33, max33];\n  const [min35, max35] = [min34, max34];\n\
    \  const [min36, max36] = [min35, max35];\n  const [min37, max37] = [min36, max36];\n\
    \  const [min38, max38] = [min37, max37];\n  const [min39, max39] = [min38, max38];\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpk7e35ya2.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333857
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const\
    \ middle = Math.floor(lst.length / 2);\n  const left = lst.slice(0, middle);\n\
    \  const right = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat([max],\
    \ strange_sort_list(left));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpb6i4s8pp.js:9\n    const min = Math.min(...lst);\n            \
    \         ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min (<anonymous>)\n\
    \    at strange_sort_list (/tmp/tmpb6i4s8pp.js:9:22)\n    at strange_sort_list\
    \ (/tmp/tmpb6i4s8pp.js:14:24)\n    at strange_sort_list (/tmp/tmpb6i4s8pp.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmpb6i4s8pp.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmpb6i4s8pp.js:14:24)\n    at strange_sort_list (/tmp/tmpb6i4s8pp.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmpb6i4s8pp.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmpb6i4s8pp.js:14:24)\n    at strange_sort_list (/tmp/tmpb6i4s8pp.js:14:24)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return lst;\n  }\n  const\
    \ minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([minValue], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpkwu__3df.js:15\n    const middle = Math.floor(len / 2);\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmpkwu__3df.js:15:25)\n\
    \    at strange_sort_list (/tmp/tmpkwu__3df.js:18:55)\n    at strange_sort_list\
    \ (/tmp/tmpkwu__3df.js:18:55)\n    at strange_sort_list (/tmp/tmpkwu__3df.js:18:55)\n\
    \    at strange_sort_list (/tmp/tmpkwu__3df.js:18:55)\n    at strange_sort_list\
    \ (/tmp/tmpkwu__3df.js:18:55)\n    at strange_sort_list (/tmp/tmpkwu__3df.js:18:55)\n\
    \    at strange_sort_list (/tmp/tmpkwu__3df.js:18:55)\n    at strange_sort_list\
    \ (/tmp/tmpkwu__3df.js:18:55)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333857
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length <= 1) return lst;\n  const min_idx = lst.findIndex(x =>\
    \ x < lst[0]);\n  const max_idx = lst.findIndex(x => x > lst[lst.length - 1]);\n\
    \  const min_val = lst[min_idx];\n  const max_val = lst[max_idx];\n  const min_idx\
    \ = lst.findIndex(x => x < min_val);\n  const max_idx = lst.findIndex(x => x >\
    \ max_val);\n  const min_val = lst[min_idx];\n  const max_val = lst[max_idx];\n\
    \  const min_idx = lst.findIndex(x => x < min_val);\n  const max_idx = lst.findIndex(x\
    \ => x > max_val);\n  const min_val = lst[min_idx];\n  const max_val = lst[max_idx];\n\
    \  const min_idx = lst.findIndex(x => x < min_val);\n  const max_idx = lst.findIndex(x\
    \ => x > max_val);\n  const min_val = lst[min_idx];\n  const max_val = lst[max_idx];\n\
    \  const min_idx = lst.findIndex(x => x < min_val);\n  const max_idx = lst.findIndex(x\
    \ => x > max_val);\n  const min_val = lst[min_idx];\n  const max_val = lst[max_idx];\n\
    \  const min_idx = lst.findIndex(x => x < min_val);\n  const max_idx = lst.findIndex(x\
    \ => x > max_val);\n  const min_val = lst[min_idx];\n  const max_val = lst[max_idx];\n\
    \  const min_idx = lst.findIndex(x => x < min_val);\n  const max_idx = lst.findIndex(x\
    \ => x > max_val);\n  const min_val = lst[min_idx];\n  const max_val = lst[max_idx];\n\
    \  const min_idx = lst.findIndex(x => x < min_val);\n  const max_idx = lst.findIndex(x\
    \ => x > max_val);\n  const min_val = lst[min_idx];\n  const max_val = lst[max_idx];\n\
    \  const min_idx = lst.findIndex(x => x < min_val);\n  const max_idx = lst.findIndex(x\
    \ => x > max_val);\n  const min_val = lst[min_idx];\n  const max_val = lst[max_idx];\n\
    \  const min_idx = lst.findIndex(x => x < min_val);\n  const max_idx = lst.findIndex(x\
    \ => x > max_val);\n  const min_val = lst[min_idx];\n  const max_val = lst[max_idx];\n\
    \  const min_idx = lst.findIndex(x => x < min_val);\n  const max_idx = lst.findIndex(x\
    \ => x > max_val);\n  const min_val = lst[min_idx];\n  const max_val = lst[max_idx];\n\
    \  const min_idx = lst.findIndex(x => x < min_val);\n  const max_\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6,\
    \ 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n \
    \ assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpfr5vvv9d.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333857
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n\
    \  return strange_sort_list(\n    lst.slice(0, middle).concat(strange_sort_list(lst.slice(middle))),\
    \ min, max,\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpc5vgzff7.ts(16,72): error TS2554: Expected 1 arguments,
    but got 3.

    '
  timestamp: 1660333857
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  while (min < max) {\n    result.push(min);\n    min = min\
    \ + 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max = max - 1;\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmps_1lbzwy.js:33:12)\n    at Object.<anonymous> (/tmp/tmps_1lbzwy.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted_lst = lst.sort((a, b) => a - b);\n  const reversed_sorted_lst\
    \ = sorted_lst.slice().reverse();\n  return reversed_sorted_lst.concat(sorted_lst);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmpecgunosv.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpecgunosv.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,\
    \ 3, 2, 1,\n    1, 2, 3, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333858
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp8bxv08b3.js:28:12)\n    at Object.<anonymous> (/tmp/tmp8bxv08b3.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333858
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const minValue = Math.min(...lst);\n  const maxValue = Math.max(...lst);\n\
    \  const minIndex = lst.indexOf(minValue);\n  const maxIndex = lst.indexOf(maxValue);\n\
    \  const sortedList = lst.sort((a, b) => a - b);\n  return sortedList.slice(0,\
    \ minIndex).concat(sortedList.slice(maxIndex + 1));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpd7zg78lg.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpd7zg78lg.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333858
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return\
    \ sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjqt36w29.js:16:12)\n    at Object.<anonymous> (/tmp/tmpjqt36w29.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n\n  return [min, ...strange_sort_list(lst.filter(x\
    \ => x !== min)), max];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  4,\n  4,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmpl87w2ifn.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl87w2ifn.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 3, 4,\n    4, 4, 4, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333857
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpenweyfsn.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:13:22)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n\n  return lst.sort((a, b) => {\n    if (a ===\
    \ min) {\n      return 1;\n    }\n    if (b === min) {\n      return -1;\n   \
    \ }\n    if (a === max) {\n      return -1;\n    }\n    if (b === max) {\n   \
    \   return 1;\n    }\n    return a - b;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  2,\n\
    \  3,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpwuttmdtj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpwuttmdtj.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 2, 3,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333858
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let mid =\
    \ Math.floor(lst.length / 2);\n  let left = lst.slice(0, mid);\n  let right =\
    \ lst.slice(mid);\n  return left.concat(strange_sort_list(right)).concat(right).concat(strange_sort_list(left));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpco3nbx_1.js:9\n    let min = Math.min(...lst);\n              \
    \     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpco3nbx_1.js:9:20)\n    at strange_sort_list (/tmp/tmpco3nbx_1.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmpco3nbx_1.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmpco3nbx_1.js:14:24)\n    at strange_sort_list (/tmp/tmpco3nbx_1.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmpco3nbx_1.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmpco3nbx_1.js:14:24)\n    at strange_sort_list (/tmp/tmpco3nbx_1.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmpco3nbx_1.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmpco3nbx_1.js:14:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333858
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let result\
    \ = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpp_028fml.js:20:12)\n    at Object.<anonymous> (/tmp/tmpp_028fml.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333857
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n\
    \  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return\
    \ strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmptbe7wzkt.js:12\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmptbe7wzkt.js:12:22)\n    at\
    \ strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n\
    \    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list\
    \ (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n\
    \    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list\
    \ (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len < 2) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2,\n  1,\n  3,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n\
    \  2,\n  3\n]\n    at test (/tmp/tmpd3w5pp91.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd3w5pp91.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 2, 1,\n    3, 3, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333858
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const mid = Math.floor((min + max) / 2);\n\
    \  return strange_sort_list(lst.filter(x => x !== mid)) + [mid] + strange_sort_list(lst.filter(x\
    \ => x !== mid));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpruw4m5os.ts(15,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1660333858
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  while (min <= max) {\n    result.push(min);\n    min += 1;\n\
    \  }\n  while (min < max) {\n    result.push(max);\n    max -= 1;\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp6bc7mthe.js:33:12)\n    at Object.<anonymous> (/tmp/tmp6bc7mthe.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333860
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst[len - 1];\n  const middle = Math.floor((len\
    \ - 1) / 2);\n  const left = strange_sort_list(lst.slice(0, middle));\n  const\
    \ right = strange_sort_list(lst.slice(middle + 1));\n  return merge(left, right,\
    \ min);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpts5iq665.ts(18,10): error TS2304: Cannot find name ''merge''.

    '
  timestamp: 1660333860
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return\
    \ sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjqt36w29.js:16:12)\n    at Object.<anonymous> (/tmp/tmpjqt36w29.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp8bxv08b3.js:28:12)\n    at Object.<anonymous> (/tmp/tmp8bxv08b3.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333858
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return lst;\n  }\n\n \
    \ const min = Math.min(...lst);\n  const max = Math.max(...lst);\n\n  const result\
    \ = [];\n  for (let i = 0; i < len; i++) {\n    const val = lst[i];\n    if (val\
    \ === min) {\n      result.push(min);\n    } else if (val === max) {\n      result.push(max);\n\
    \    } else {\n      result.push(val);\n    }\n  }\n\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpct8jdq0y.js:33:12)\n    at Object.<anonymous> (/tmp/tmpct8jdq0y.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    } else if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  let result = [];\n  for (let i\
    \ = min; i <= max; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpmqesh35d.js:28:12)\n    at Object.<anonymous> (/tmp/tmpmqesh35d.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i < len; i++) {\n  \
    \  if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  const middle = Math.floor((min + max) / 2);\n\
    \  const left = strange_sort_list(lst.slice(0, middle));\n  const right = strange_sort_list(lst.slice(middle));\n\
    \  return left.concat(right, min);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp9pz6gsbq.ts(17,7): error TS2588: Cannot assign to ''min''
    because it is a constant.

    ../../../../tmp/tmp9pz6gsbq.ts(20,7): error TS2588: Cannot assign to ''max'' because
    it is a constant.

    '
  timestamp: 1660333860
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp5v05wz6l.js:15:12)\n    at Object.<anonymous> (/tmp/tmp5v05wz6l.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted_list = lst.slice();\n  sorted_list.sort((a, b) => a - b);\n\
    \  return sorted_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjnql0y0z.js:16:12)\n    at Object.<anonymous> (/tmp/tmpjnql0y0z.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpenweyfsn.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:13:22)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return\
    \ sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjqt36w29.js:16:12)\n    at Object.<anonymous> (/tmp/tmpjqt36w29.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const [min, max] = lst;\n  const [minIndex, maxIndex] = lst.findIndex((x)\
    \ => x > max);\n  const [maxIndex, minIndex] = lst.findIndex((x) => x < min);\n\
    \  const [minIndex, maxIndex] = [minIndex, maxIndex].sort();\n  return lst.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpy84fj6fz.ts(10,9): error TS2488: Type ''number'' must
    have a ''[Symbol.iterator]()'' method that returns an iterator.

    ../../../../tmp/tmpy84fj6fz.ts(10,10): error TS2451: Cannot redeclare block-scoped
    variable ''minIndex''.

    ../../../../tmp/tmpy84fj6fz.ts(10,20): error TS2451: Cannot redeclare block-scoped
    variable ''maxIndex''.

    ../../../../tmp/tmpy84fj6fz.ts(11,9): error TS2488: Type ''number'' must have
    a ''[Symbol.iterator]()'' method that returns an iterator.

    ../../../../tmp/tmpy84fj6fz.ts(11,10): error TS2451: Cannot redeclare block-scoped
    variable ''maxIndex''.

    ../../../../tmp/tmpy84fj6fz.ts(11,20): error TS2451: Cannot redeclare block-scoped
    variable ''minIndex''.

    ../../../../tmp/tmpy84fj6fz.ts(12,10): error TS2451: Cannot redeclare block-scoped
    variable ''minIndex''.

    ../../../../tmp/tmpy84fj6fz.ts(12,20): error TS2451: Cannot redeclare block-scoped
    variable ''maxIndex''.

    '
  timestamp: 1660333853
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp__dj9nxe.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:13:22)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return\
    \ sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjqt36w29.js:16:12)\n    at Object.<anonymous> (/tmp/tmpjqt36w29.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length <= 1) {\n    return lst;\n  }\n\n  const minValue = lst[0];\n\
    \  const maxValue = lst[lst.length - 1];\n\n  const middle = Math.floor(lst.length\
    \ / 2);\n  const leftHalf = strange_sort_list(lst.slice(0, middle));\n  const\
    \ rightHalf = strange_sort_list(lst.slice(middle));\n\n  return leftHalf.concat(rightHalf).sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp72lnw0tl.js:22:12)\n    at Object.<anonymous> (/tmp/tmp72lnw0tl.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  lst.sort((a, b) => a - b);\n  return lst;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp2z_vqjyp.js:15:12)\n    at Object.<anonymous> (/tmp/tmp2z_vqjyp.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  const minValue = lst[0];\n  const maxValue =\
    \ lst[len - 1];\n  for (let i = 1; i < len; i++) {\n    const currentValue = lst[i];\n\
    \    if (currentValue < minValue) {\n      lst[i] = minValue;\n    } else if (currentValue\
    \ > maxValue) {\n      lst[i] = maxValue;\n    }\n  }\n  return lst;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpy1zm44lb.js:26:12)\n    at Object.<anonymous> (/tmp/tmpy1zm44lb.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted_list = lst.slice();\n  sorted_list.sort((a, b) => {\n    if\
    \ (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n\
    \    return 0;\n  });\n  return sorted_list;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpq2650l_x.js:24:12)\n    at Object.<anonymous> (/tmp/tmpq2650l_x.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted_lst = lst.sort((a, b) => a - b);\n  return sorted_lst.map(x\
    \ => x + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp_zcdtuqh.js:15:12)\n    at Object.<anonymous> (/tmp/tmp_zcdtuqh.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4,\
    \ 5 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted_lst = lst.sort((a, b) => a - b);\n  return sorted_lst.map((n)\
    \ => n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpdctfgty_.js:15:12)\n    at Object.<anonymous> (/tmp/tmpdctfgty_.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp5v05wz6l.js:15:12)\n    at Object.<anonymous> (/tmp/tmp5v05wz6l.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min_value = lst[0];\n\
    \  const max_value = lst[lst.length - 1];\n  const min_idx = lst.indexOf(min_value);\n\
    \  const max_idx = lst.indexOf(max_value);\n  const min_idx_2 = lst.indexOf(min_value,\
    \ min_idx + 1);\n  const max_idx_2 = lst.indexOf(max_value, max_idx - 1);\n  const\
    \ min_idx_3 = lst.indexOf(min_value, min_idx_2 + 1);\n  const max_idx_3 = lst.indexOf(max_value,\
    \ max_idx_2 - 1);\n  const min_idx_4 = lst.indexOf(min_value, min_idx_3 + 1);\n\
    \  const max_idx_4 = lst.indexOf(max_value, max_idx_3 - 1);\n  const min_idx_5\
    \ = lst.indexOf(min_value, min_idx_4 + 1);\n  const max_idx_5 = lst.indexOf(max_value,\
    \ max_idx_4 - 1);\n  const min_idx_6 = lst.indexOf(min_value, min_idx_5 + 1);\n\
    \  const max_idx_6 = lst.indexOf(max_value, max_idx_5 - 1);\n  const min_idx_7\
    \ = lst.indexOf(min_value, min_idx_6 + 1);\n  const max_idx_7 = lst.indexOf(max_value,\
    \ max_idx_6 - 1);\n  const min_idx_8 = lst.indexOf(min_value, min_idx_7 + 1);\n\
    \  const max_idx_8 = lst.indexOf(max_value, max_idx_7 - 1);\n  const min_idx_9\
    \ = lst.indexOf(min_value, min_idx_8 + 1);\n  const max_idx_9 = lst.indexOf(max_value,\
    \ max_idx_8 - 1);\n  const min_idx_10 = lst.indexOf(min_value, min_idx_9 + 1);\n\
    \  const max_idx_10 = lst.indexOf(max_value, max_idx_9 - 1);\n  const min_idx_11\
    \ = lst.indexOf(min_value, min_idx_10 + 1);\n  const max_idx_11 = lst.indexOf(max_value,\
    \ max_idx_10 - 1);\n  const min_idx_12 = lst.indexOf(min_value, min_idx_11 + 1);\n\
    \  const max_idx_12 = lst.indexOf(max_value, max_idx_11 - 1);\n  const min_idx_13\
    \ = lst.indexOf(min_value, min_idx_12 + 1);\n  const max_idx_13 = lst.indexOf(max_value,\
    \ max_idx_12 - 1);\n  const min_idx_14 = lst.indexOf(min_value, min_idx_13 + 1);\n\
    \  const max_idx_14 = lst.indexOf(max_value, max_idx_13 - 1);\n  const min_idx_15\
    \ = lst.indexOf(min_value, min_idx_14 + 1);\n  const max_idx_15 = lst.indexOf(max_value,\
    \ max_idx_14 - 1);\n  const min_idx_16 = lst.indexOf(min_value, min_idx_15 + 1);\n\
    \  const max_idx_16 = lst.indexOf(max_value, max_idx_15 - 1);\n  const min_idx_17\
    \ = lst.indexOf(min_value, min_idx_16 + 1);\n  const max_idx_17 = lst.indexOf(max_value,\
    \ max_idx_16 - 1);\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmphnvqh15o.ts(65,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    sorted.push(lst[i]);\n  }\n  for (let i = 0; i < sorted.length; i++) {\n\
    \    for (let j = i + 1; j < sorted.length; j++) {\n      if (sorted[i] > sorted[j])\
    \ {\n        const temp = sorted[i];\n        sorted[i] = sorted[j];\n       \
    \ sorted[j] = temp;\n      }\n    }\n  }\n  return sorted;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpj4b70kfc.js:27:12)\n    at Object.<anonymous> (/tmp/tmpj4b70kfc.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n\
    \  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n  return\
    \ strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmptbe7wzkt.js:12\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmptbe7wzkt.js:12:22)\n    at\
    \ strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n\
    \    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list\
    \ (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n\
    \    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list\
    \ (/tmp/tmptbe7wzkt.js:17:50)\n    at strange_sort_list (/tmp/tmptbe7wzkt.js:17:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min)\
    \ {\n      result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n\
    \    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmptrzo9s__.js:36:12)\n    at Object.<anonymous> (/tmp/tmptrzo9s__.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp5v05wz6l.js:15:12)\n    at Object.<anonymous> (/tmp/tmp5v05wz6l.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  while (min < max) {\n    result.push(min);\n    min = min\
    \ + 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max = max - 1;\n\
    \  }\n  result.push(min);\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp6t96q7o1.js:34:12)\n    at Object.<anonymous> (/tmp/tmp6t96q7o1.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  while (min < max) {\n    result.push(min);\n    min = lst[min];\n\
    \    max = lst[max];\n  }\n  result.push(max);\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test (/tmp/tmpjqbzwu7q.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjqbzwu7q.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, undefined\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333861
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted_lst = lst.sort((a, b) => a - b);\n  const min_idx = sorted_lst.findIndex(x\
    \ => x > 0);\n  const max_idx = sorted_lst.findIndex(x => x < 0);\n  const min_val\
    \ = sorted_lst[min_idx];\n  const max_val = sorted_lst[max_idx];\n  const min_idx\
    \ = sorted_lst.findIndex(x => x == min_val);\n  const max_idx = sorted_lst.findIndex(x\
    \ => x == max_val);\n  const min_val = sorted_lst[min_idx];\n  const max_val =\
    \ sorted_lst[max_idx];\n  const min_idx = sorted_lst.findIndex(x => x == min_val);\n\
    \  const max_idx = sorted_lst.findIndex(x => x == max_val);\n  const min_val =\
    \ sorted_lst[min_idx];\n  const max_val = sorted_lst[max_idx];\n  const min_idx\
    \ = sorted_lst.findIndex(x => x == min_val);\n  const max_idx = sorted_lst.findIndex(x\
    \ => x == max_val);\n  const min_val = sorted_lst[min_idx];\n  const max_val =\
    \ sorted_lst[max_idx];\n  const min_idx = sorted_lst.findIndex(x => x == min_val);\n\
    \  const max_idx = sorted_lst.findIndex(x => x == max_val);\n  const min_val =\
    \ sorted_lst[min_idx];\n  const max_val = sorted_lst[max_idx];\n  const min_idx\
    \ = sorted_lst.findIndex(x => x == min_val);\n  const max_idx = sorted_lst.findIndex(x\
    \ => x == max_val);\n  const min_val = sorted_lst[min_idx];\n  const max_val =\
    \ sorted_lst[max_idx];\n  const min_idx = sorted_lst.findIndex(x => x == min_val);\n\
    \  const max_idx = sorted_lst.findIndex(x => x == max_val);\n  const min_val =\
    \ sorted_lst[min_idx];\n  const max_val = sorted_lst[max_idx];\n  const min_idx\
    \ = sorted_lst.findIndex(x => x == min_val);\n  const max_idx = sorted_lst.findIndex(x\
    \ => x == max_val);\n  const min_val = sorted_lst[min_idx];\n  const max_val =\
    \ sorted_lst[max_idx];\n  const min_idx = sorted_lst.findIndex(x => x == min_val);\n\
    \  const max_idx = sorted_lst.findIndex(x => x == max_val);\n  const min_val =\
    \ sorted_lst[min_idx];\n  const max_val = sorted_lst[max_idx];\n  const min_idx\
    \ = sorted_lst.findIndex(x => x == min_val);\n  const max_idx = sorted_lst.findIndex(x\
    \ => x == max_val);\n  const min_val = sorted_lst[min_idx];\n  const max_val =\
    \ sorted_lst[max_idx];\n  const min_idx = sorted_lst.findIndex(x => x == min_val);\n\
    \  const max_idx = sorted_lst.find\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5,\
    \ 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1,\
    \ 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8,\
    \ 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4,\
    \ 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5,\
    \ 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpg06heot8.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = lst[0];\n\
    \  const max = lst.reduce((max, num) => Math.max(max, num), -Infinity);\n  return\
    \ [min, ...lst.filter(num => num < max), max];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n\
    ]\n    at test (/tmp/tmpb849n3z9.js:19:12)\n    at Object.<anonymous> (/tmp/tmpb849n3z9.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2,\
    \ 3, 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpenweyfsn.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:13:22)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpenweyfsn.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:13:22)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpenweyfsn.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:13:22)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp8bxv08b3.js:28:12)\n    at Object.<anonymous> (/tmp/tmp8bxv08b3.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333858
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return lst;\n  }\n  const\
    \ minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([minValue], strange_sort_list(right));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpkwu__3df.js:15\n    const middle = Math.floor(len / 2);\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Math.floor (<anonymous>)\n    at strange_sort_list (/tmp/tmpkwu__3df.js:15:25)\n\
    \    at strange_sort_list (/tmp/tmpkwu__3df.js:18:55)\n    at strange_sort_list\
    \ (/tmp/tmpkwu__3df.js:18:55)\n    at strange_sort_list (/tmp/tmpkwu__3df.js:18:55)\n\
    \    at strange_sort_list (/tmp/tmpkwu__3df.js:18:55)\n    at strange_sort_list\
    \ (/tmp/tmpkwu__3df.js:18:55)\n    at strange_sort_list (/tmp/tmpkwu__3df.js:18:55)\n\
    \    at strange_sort_list (/tmp/tmpkwu__3df.js:18:55)\n    at strange_sort_list\
    \ (/tmp/tmpkwu__3df.js:18:55)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333857
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp5v05wz6l.js:15:12)\n    at Object.<anonymous> (/tmp/tmp5v05wz6l.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = lst[0];\n\
    \  const max = lst.reduce((max, x) => x > max ? x : max);\n  const minIndex =\
    \ lst.indexOf(min);\n  const maxIndex = lst.indexOf(max);\n  return strange_sort_list(\n\
    \    lst.slice(minIndex, maxIndex + 1),\n    minIndex,\n    maxIndex\n  );\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpyz4_v5yj.ts(18,5): error TS2554: Expected 1 arguments,
    but got 3.

    '
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  lst.sort((a, b) => a - b);\n  return lst;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp2z_vqjyp.js:15:12)\n    at Object.<anonymous> (/tmp/tmp2z_vqjyp.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp5v05wz6l.js:15:12)\n    at Object.<anonymous> (/tmp/tmp5v05wz6l.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const [min, max] = lst;\n\
    \  const [min2, max2] = [max, min];\n  const [min3, max3] = [min2, max];\n  const\
    \ [min4, max4] = [min3, max3];\n  const [min5, max5] = [min4, max4];\n  const\
    \ [min6, max6] = [min5, max5];\n  const [min7, max7] = [min6, max6];\n  const\
    \ [min8, max8] = [min7, max7];\n  const [min9, max9] = [min8, max8];\n  const\
    \ [min10, max10] = [min9, max9];\n  const [min11, max11] = [min10, max10];\n \
    \ const [min12, max12] = [min11, max11];\n  const [min13, max13] = [min12, max12];\n\
    \  const [min14, max14] = [min13, max13];\n  const [min15, max15] = [min14, max14];\n\
    \  const [min16, max16] = [min15, max15];\n  const [min17, max17] = [min16, max16];\n\
    \  const [min18, max18] = [min17, max17];\n  const [min19, max19] = [min18, max18];\n\
    \  const [min20, max20] = [min19, max19];\n  const [min21, max21] = [min20, max20];\n\
    \  const [min22, max22] = [min21, max21];\n  const [min23, max23] = [min22, max22];\n\
    \  const [min24, max24] = [min23, max23];\n  const [min25, max25] = [min24, max24];\n\
    \  const [min26, max26] = [min25, max25];\n  const [min27, max27] = [min26, max26];\n\
    \  const [min28, max28] = [min27, max27];\n  const [min29, max29] = [min28, max28];\n\
    \  const [min30, max30] = [min29, max29];\n  const [min31, max31] = [min30, max30];\n\
    \  const [min32, max32] = [min31, max31];\n  const [min33, max33] = [min32, max32];\n\
    \  const [min34, max34] = [min33, max33];\n  const [min35, max35] = [min34, max34];\n\
    \  const [min36, max36] = [min35, max35];\n  const [min37, max37] = [min36, max36];\n\
    \  const [min38, max38] = [min37, max37];\n  const [min39, max39] = [min38, max38];\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpopdj4vbv.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpfrz5gksx.js:28:12)\n    at Object.<anonymous> (/tmp/tmpfrz5gksx.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const middle = Math.floor(lst.length / 2);\n\
    \  const left = lst\n    .slice(0, middle)\n    .sort((a, b) => a - b);\n  const\
    \ right = lst\n    .slice(middle)\n    .sort((a, b) => b - a);\n  return left.concat(right,\
    \ min);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  4,\n  3,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n\
    ]\n    at test (/tmp/tmpwej4_phj.js:26:12)\n    at Object.<anonymous> (/tmp/tmpwej4_phj.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 3, 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = lst[0];\n\
    \  const max = lst.reduce((acc, x) => Math.max(acc, x), 0);\n  return strange_sort_list(lst.filter(x\
    \ => x < min))\n    .concat(\n      strange_sort_list(lst.filter(x => x > max)),\n\
    \      strange_sort_list(lst.filter(x => x <= min)),\n      strange_sort_list(lst.filter(x\
    \ => x >= max)),\n    )\n    .concat(\n      strange_sort_list(lst.filter(x =>\
    \ x > min)),\n      strange_sort_list(lst.filter(x => x < max)),\n      strange_sort_list(lst.filter(x\
    \ => x >= min)),\n      strange_sort_list(lst.filter(x => x <= max)),\n    );\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpn714t9z6.js:13\n    const max = lst.reduce((acc, x) => Math.max(acc,\
    \ x), 0);\n                                            ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at Math.max (<anonymous>)\n    at /tmp/tmpn714t9z6.js:13:45\n\
    \    at Array.reduce (<anonymous>)\n    at strange_sort_list (/tmp/tmpn714t9z6.js:13:21)\n\
    \    at strange_sort_list (/tmp/tmpn714t9z6.js:15:62)\n    at strange_sort_list\
    \ (/tmp/tmpn714t9z6.js:15:62)\n    at strange_sort_list (/tmp/tmpn714t9z6.js:15:62)\n\
    \    at strange_sort_list (/tmp/tmpn714t9z6.js:15:62)\n    at strange_sort_list\
    \ (/tmp/tmpn714t9z6.js:15:62)\n    at strange_sort_list (/tmp/tmpn714t9z6.js:15:62)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n\
    \  return reversed;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpslpbs1kk.js:16:12)\n    at Object.<anonymous> (/tmp/tmpslpbs1kk.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length / 2);\n\
    \  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return\
    \ strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpx2n14pf0.js:12\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpx2n14pf0.js:12:22)\n    at\
    \ strange_sort_list (/tmp/tmpx2n14pf0.js:17:50)\n    at strange_sort_list (/tmp/tmpx2n14pf0.js:17:50)\n\
    \    at strange_sort_list (/tmp/tmpx2n14pf0.js:17:50)\n    at strange_sort_list\
    \ (/tmp/tmpx2n14pf0.js:17:50)\n    at strange_sort_list (/tmp/tmpx2n14pf0.js:17:50)\n\
    \    at strange_sort_list (/tmp/tmpx2n14pf0.js:17:50)\n    at strange_sort_list\
    \ (/tmp/tmpx2n14pf0.js:17:50)\n    at strange_sort_list (/tmp/tmpx2n14pf0.js:17:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333861
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const [min, max] = lst;\n\
    \  const [minIndex, maxIndex] = findIndex(lst, (num) => num === min);\n  const\
    \ minValue = lst[minIndex];\n  const maxValue = lst[maxIndex];\n\n  const minIndex\
    \ = findIndex(lst, (num) => num === minValue);\n  const maxIndex = findIndex(lst,\
    \ (num) => num === maxValue);\n\n  const minValue = lst[minIndex];\n  const maxValue\
    \ = lst[maxIndex];\n\n  const minIndex = findIndex(lst, (num) => num === minValue);\n\
    \  const maxIndex = findIndex(lst, (num) => num === maxValue);\n\n  const minValue\
    \ = lst[minIndex];\n  const maxValue = lst[maxIndex];\n\n  const minIndex = findIndex(lst,\
    \ (num) => num === minValue);\n  const maxIndex = findIndex(lst, (num) => num\
    \ === maxValue);\n\n  const minValue = lst[minIndex];\n  const maxValue = lst[maxIndex];\n\
    \n  const minIndex = findIndex(lst, (num) => num === minValue);\n  const maxIndex\
    \ = findIndex(lst, (num) => num === maxValue);\n\n  const minValue = lst[minIndex];\n\
    \  const maxValue = lst[maxIndex];\n\n  const minIndex = findIndex(lst, (num)\
    \ => num === minValue);\n  const maxIndex = findIndex(lst, (num) => num === maxValue);\n\
    \n  const minValue = lst[minIndex];\n  const maxValue = lst[maxIndex];\n\n  const\
    \ minIndex = findIndex(lst, (num) => num === minValue);\n  const maxIndex = findIndex(lst,\
    \ (num) => num === maxValue);\n\n  const minValue = lst[minIndex];\n  const maxValue\
    \ = lst[maxIndex];\n\n  const minIndex = findIndex(lst, (num) => num === minValue);\n\
    \  const maxIndex = findIndex(lst, (num) => num === maxValue);\n\n  const minValue\
    \ = lst[minIndex];\n  const maxValue = lst[maxIndex];\n\n  const minIndex = findIndex(lst,\
    \ (num) => num === minValue);\n  const maxIndex = findIndex(lst, (num) => num\
    \ === maxValue);\n\n  const minValue = lst[minIndex];\n  const maxValue = lst[maxIndex];\n\
    \n  const minIndex = findIndex(lst, (num) => num === minValue);\n  const maxIndex\
    \ = findIndex(lst, (num) => num === maxValue);\n\n  const minValue = lst[minIndex];\n\
    \  const maxValue = lst[maxIndex];\n\n  const minIndex = findIndex(lst, (num)\
    \ => num === minValue);\n  const maxIndex = findIndex(lst, (num) => num === maxValue);\n\
    \n  const minValue = lst[minIndex];\n  const maxValue = lst[maxIndex\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpz3axza_8.ts(77,1): error TS1005: '']'' expected.

    ../../../../tmp/tmpz3axza_8.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333861
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const mid = Math.floor((min + max) / 2);\n\
    \  return strange_sort_list(lst.filter(x => x !== mid)) + [mid] + strange_sort_list(lst.filter(x\
    \ => x !== mid));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp5h90vbhk.ts(15,10): error TS2365: Operator ''+'' cannot
    be applied to types ''number[]'' and ''number[]''.

    '
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp__dj9nxe.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:13:22)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpenweyfsn.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:13:22)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  lst.sort((a, b) => a - b);\n  return lst;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp2z_vqjyp.js:15:12)\n    at Object.<anonymous> (/tmp/tmp2z_vqjyp.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return [];\n  }\n\n  const [min, max] = lst;\n\
    \  const [min2, max2] = [max, min];\n\n  return [...strange_sort_list(min2), ...strange_sort_list(max2),\
    \ ...strange_sort_list(min), ...strange_sort_list(max)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9,\
    \ 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5,\
    \ 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmph6b9ben8.ts(16,32): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    ../../../../tmp/tmph6b9ben8.ts(16,60): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    ../../../../tmp/tmph6b9ben8.ts(16,88): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    ../../../../tmp/tmph6b9ben8.ts(16,115): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1660333862
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  while (min < max) {\n    result.push(min);\n    min = min\
    \ + 1;\n  }\n  while (min > max) {\n    result.push(max);\n    max = max - 1;\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n    at test\
    \ (/tmp/tmps_1lbzwy.js:33:12)\n    at Object.<anonymous> (/tmp/tmps_1lbzwy.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted_lst = lst.sort((a, b) => a - b);\n  return sorted_lst.map(x\
    \ => x + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp_zcdtuqh.js:15:12)\n    at Object.<anonymous> (/tmp/tmp_zcdtuqh.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4,\
    \ 5 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min)\
    \ {\n      result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n\
    \    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmptrzo9s__.js:36:12)\n    at Object.<anonymous> (/tmp/tmptrzo9s__.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpenweyfsn.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:13:22)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min_value = lst[0];\n\
    \  const max_value = lst[lst.length - 1];\n  const min_idx = lst.findIndex(x =>\
    \ x < min_value);\n  const max_idx = lst.findIndex(x => x > max_value);\n  const\
    \ min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ?\
    \ lst.length - 1 : max_idx;\n  const min_value = lst[min_idx];\n  const max_value\
    \ = lst[max_idx];\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx\
    \ = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_value = lst[min_idx];\n\
    \  const max_value = lst[max_idx];\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n\
    \  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_value\
    \ = lst[min_idx];\n  const max_value = lst[max_idx];\n  const min_idx = min_idx\
    \ === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n\
    \  const min_value = lst[min_idx];\n  const max_value = lst[max_idx];\n  const\
    \ min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ?\
    \ lst.length - 1 : max_idx;\n  const min_value = lst[min_idx];\n  const max_value\
    \ = lst[max_idx];\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx\
    \ = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_value = lst[min_idx];\n\
    \  const max_value = lst[max_idx];\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n\
    \  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_value\
    \ = lst[min_idx];\n  const max_value = lst[max_idx];\n  const min_idx = min_idx\
    \ === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ? lst.length - 1 : max_idx;\n\
    \  const min_value = lst[min_idx];\n  const max_value = lst[max_idx];\n  const\
    \ min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx = max_idx === -1 ?\
    \ lst.length - 1 : max_idx;\n  const min_value = lst[min_idx];\n  const max_value\
    \ = lst[max_idx];\n  const min_idx = min_idx === -1 ? 0 : min_idx;\n  const max_idx\
    \ = max_idx === -1 ? lst.length - 1 : max_idx;\n  const min_value = lst[min_idx];\n\
    \  const max_value = lst[max_idx];\n  const min_idx = min_idx === -1 ? 0 : min_idx\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpjkd3tptt.ts(74,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660333862
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat(max, strange_sort_list(right));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8_mjw24u.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp8_mjw24u.js:13:22)\n    at strange_sort_list (/tmp/tmp8_mjw24u.js:18:48)\n\
    \    at strange_sort_list (/tmp/tmp8_mjw24u.js:18:48)\n    at strange_sort_list\
    \ (/tmp/tmp8_mjw24u.js:18:48)\n    at strange_sort_list (/tmp/tmp8_mjw24u.js:18:48)\n\
    \    at strange_sort_list (/tmp/tmp8_mjw24u.js:18:48)\n    at strange_sort_list\
    \ (/tmp/tmp8_mjw24u.js:18:48)\n    at strange_sort_list (/tmp/tmp8_mjw24u.js:18:48)\n\
    \    at strange_sort_list (/tmp/tmp8_mjw24u.js:18:48)\n    at strange_sort_list\
    \ (/tmp/tmp8_mjw24u.js:18:48)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpfrz5gksx.js:28:12)\n    at Object.<anonymous> (/tmp/tmpfrz5gksx.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 2
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = lst[0];\n  const max = lst[len - 1];\n  const middle = Math.floor((len\
    \ - 1) / 2);\n  const left = strange_sort_list(lst.slice(0, middle));\n  const\
    \ right = strange_sort_list(lst.slice(middle + 1));\n  return merge(left, right,\
    \ min, max);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp06hkwquu.ts(18,10): error TS2304: Cannot find name ''merge''.

    '
  timestamp: 1660333862
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ minValue = lst[0];\n  const maxValue = lst[len - 1];\n  const middle = Math.floor(len\
    \ / 2);\n  const left = strange_sort_list(lst.slice(0, middle));\n  const right\
    \ = strange_sort_list(lst.slice(middle));\n  return left.concat(right, minValue,\
    \ maxValue);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8ighzhrn.js:16\n    const left = strange_sort_list(lst.slice(0,\
    \ middle));\n                                       ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at Array.slice (<anonymous>)\n    at strange_sort_list\
    \ (/tmp/tmp8ighzhrn.js:16:40)\n    at strange_sort_list (/tmp/tmp8ighzhrn.js:17:19)\n\
    \    at strange_sort_list (/tmp/tmp8ighzhrn.js:17:19)\n    at strange_sort_list\
    \ (/tmp/tmp8ighzhrn.js:17:19)\n    at strange_sort_list (/tmp/tmp8ighzhrn.js:17:19)\n\
    \    at strange_sort_list (/tmp/tmp8ighzhrn.js:17:19)\n    at strange_sort_list\
    \ (/tmp/tmp8ighzhrn.js:17:19)\n    at strange_sort_list (/tmp/tmp8ighzhrn.js:17:19)\n\
    \    at strange_sort_list (/tmp/tmp8ighzhrn.js:17:19)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333854
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted_lst = lst.sort((a, b) => a - b);\n  const reversed_sorted_lst\
    \ = sorted_lst.slice().reverse();\n  return reversed_sorted_lst.concat(sorted_lst);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmpecgunosv.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpecgunosv.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,\
    \ 3, 2, 1,\n    1, 2, 3, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333858
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpenweyfsn.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:13:22)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min)\
    \ {\n      result.push(min);\n    } else if (lst[i] > max) {\n      result.push(max);\n\
    \    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmphzhgabsm.js:36:12)\n    at Object.<anonymous> (/tmp/tmphzhgabsm.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333863
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const [min, max] = lst;\n\
    \n  const mid = Math.floor((min + max) / 2);\n\n  const left = strange_sort_list(lst.slice(0,\
    \ mid));\n  const right = strange_sort_list(lst.slice(mid));\n\n  return left.concat(right,\
    \ min);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpt724h_96.js:12\n    const [min, max] = lst;\n                 \
    \      ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.values\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpt724h_96.js:12:24)\n    at\
    \ strange_sort_list (/tmp/tmpt724h_96.js:15:19)\n    at strange_sort_list (/tmp/tmpt724h_96.js:15:19)\n\
    \    at strange_sort_list (/tmp/tmpt724h_96.js:15:19)\n    at strange_sort_list\
    \ (/tmp/tmpt724h_96.js:15:19)\n    at strange_sort_list (/tmp/tmpt724h_96.js:15:19)\n\
    \    at strange_sort_list (/tmp/tmpt724h_96.js:15:19)\n    at strange_sort_list\
    \ (/tmp/tmpt724h_96.js:15:19)\n    at strange_sort_list (/tmp/tmpt724h_96.js:15:19)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333863
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpenweyfsn.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:13:22)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp__dj9nxe.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:13:22)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted_list = lst.slice();\n  sorted_list.sort((a, b) => a - b);\n\
    \  return sorted_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmpjnql0y0z.js:16:12)\n    at Object.<anonymous> (/tmp/tmpjnql0y0z.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return lst;\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmty7fxg4.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpmty7fxg4.js:13:22)\n    at strange_sort_list (/tmp/tmpmty7fxg4.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpmty7fxg4.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpmty7fxg4.js:18:50)\n    at strange_sort_list (/tmp/tmpmty7fxg4.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpmty7fxg4.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpmty7fxg4.js:18:50)\n    at strange_sort_list (/tmp/tmpmty7fxg4.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpmty7fxg4.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpmty7fxg4.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333857
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp__dj9nxe.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:13:22)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length / 2);\n\
    \  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return\
    \ strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpx2n14pf0.js:12\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpx2n14pf0.js:12:22)\n    at\
    \ strange_sort_list (/tmp/tmpx2n14pf0.js:17:50)\n    at strange_sort_list (/tmp/tmpx2n14pf0.js:17:50)\n\
    \    at strange_sort_list (/tmp/tmpx2n14pf0.js:17:50)\n    at strange_sort_list\
    \ (/tmp/tmpx2n14pf0.js:17:50)\n    at strange_sort_list (/tmp/tmpx2n14pf0.js:17:50)\n\
    \    at strange_sort_list (/tmp/tmpx2n14pf0.js:17:50)\n    at strange_sort_list\
    \ (/tmp/tmpx2n14pf0.js:17:50)\n    at strange_sort_list (/tmp/tmpx2n14pf0.js:17:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted_lst = lst.sort((a, b) => a - b);\n  const reversed_sorted_lst\
    \ = sorted_lst.slice().reverse();\n  return reversed_sorted_lst.concat(sorted_lst);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmpecgunosv.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpecgunosv.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,\
    \ 3, 2, 1,\n    1, 2, 3, 4\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333858
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min: number = lst[0];\n  let max: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n  \
    \  }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result:\
    \ number[] = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp9evbemhf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9evbemhf.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n\n  const middle = Math.floor(lst.length / 2);\n\
    \n  const left = lst\n    .slice(0, middle)\n    .sort((a, b) => a - b);\n  const\
    \ right = lst\n    .slice(middle)\n    .sort((a, b) => b - a);\n\n  return left.concat(right,\
    \ min);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660333863
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let middle\
    \ = Math.floor(lst.length / 2);\n  let left = lst.slice(0, middle);\n  let right\
    \ = lst.slice(middle);\n  return left.concat(strange_sort_list(right)).concat(right).concat(strange_sort_list(left));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp6gpkz7ov.js:9\n    let min = Math.min(...lst);\n              \
    \     ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp6gpkz7ov.js:9:20)\n    at strange_sort_list (/tmp/tmp6gpkz7ov.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmp6gpkz7ov.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmp6gpkz7ov.js:14:24)\n    at strange_sort_list (/tmp/tmp6gpkz7ov.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmp6gpkz7ov.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmp6gpkz7ov.js:14:24)\n    at strange_sort_list (/tmp/tmp6gpkz7ov.js:14:24)\n\
    \    at strange_sort_list (/tmp/tmp6gpkz7ov.js:14:24)\n    at strange_sort_list\
    \ (/tmp/tmp6gpkz7ov.js:14:24)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333863
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  2,\n  3\n]\n  \
    \  at test (/tmp/tmp5v05wz6l.js:15:12)\n    at Object.<anonymous> (/tmp/tmp5v05wz6l.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const mid = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp__dj9nxe.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:13:22)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmp__dj9nxe.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmp__dj9nxe.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const\
    \ min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const middle = Math.floor(len\
    \ / 2);\n  const left = lst.slice(0, middle);\n  const right = lst.slice(middle);\n\
    \  return strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpenweyfsn.js:13\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:13:22)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n\
    \    at strange_sort_list (/tmp/tmpenweyfsn.js:18:50)\n    at strange_sort_list\
    \ (/tmp/tmpenweyfsn.js:18:50)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333850
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n\
    \  const max = Math.max(...lst);\n  const mid = Math.floor(lst.length / 2);\n\
    \  const left = lst.slice(0, mid);\n  const right = lst.slice(mid);\n  return\
    \ strange_sort_list(left).concat([min], strange_sort_list(right));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
    \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpx2n14pf0.js:12\n    const min = Math.min(...lst);\n           \
    \          ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.min\
    \ (<anonymous>)\n    at strange_sort_list (/tmp/tmpx2n14pf0.js:12:22)\n    at\
    \ strange_sort_list (/tmp/tmpx2n14pf0.js:17:50)\n    at strange_sort_list (/tmp/tmpx2n14pf0.js:17:50)\n\
    \    at strange_sort_list (/tmp/tmpx2n14pf0.js:17:50)\n    at strange_sort_list\
    \ (/tmp/tmpx2n14pf0.js:17:50)\n    at strange_sort_list (/tmp/tmpx2n14pf0.js:17:50)\n\
    \    at strange_sort_list (/tmp/tmpx2n14pf0.js:17:50)\n    at strange_sort_list\
    \ (/tmp/tmpx2n14pf0.js:17:50)\n    at strange_sort_list (/tmp/tmpx2n14pf0.js:17:50)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333861
- exit_code: 1
  program: "//Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    // strange_sort_list([]) == []\nfunction strange_sort_list(lst: number[]): number[]\
    \ {\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n  let result\
    \ = [];\n  for (let i = min; i <= max; i++) {\n    result.push(i);\n  }\n  for\
    \ (let i = max; i >= min; i--) {\n    result.push(i);\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5,\
    \ 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
    \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  4,\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  4,\n  2,\n  3\n]\n    at test (/tmp/tmp7rqxy8ti.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7rqxy8ti.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 3, 4,\n    4, 3, 2, 1\n  ],\n  expected: [ 1, 4, 2, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660333863
