{
  "completions": [
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  const prefix_length = prefix.length;\n  const strings_length = strings.length;\n  const result: string[] = [];\n  for (let i = 0; i < strings_length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  const prefix_length = prefix.length;\n  const filtered_strings = strings.filter((s) => {\n    return s.startsWith(prefix);\n  });\n  return filtered_strings;\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  const prefix_length = prefix.length;\n  const filtered_strings = strings.filter(s => s.startsWith(prefix));\n  return filtered_strings.length ? filtered_strings : [];\n}\n",
    "  const prefix_length = prefix.length;\n  const filtered_strings = strings.filter(s => s.startsWith(prefix));\n  return filtered_strings.length ? filtered_strings : [];\n}\n",
    "  const prefix_length = prefix.length;\n  const filtered_strings = strings.filter((s) => s.startsWith(prefix));\n  return filtered_strings.length ? filtered_strings : [];\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    const prefix_length = prefix.length;\n    const filtered_strings = strings.filter(s => s.startsWith(prefix));\n    return filtered_strings.length ? filtered_strings : [];\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    const filtered_strings = strings.filter(s => s.startsWith(prefix));\n    return filtered_strings;\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  const prefix_length = prefix.length;\n  const filtered_strings = strings.filter((s) => {\n    return s.startsWith(prefix);\n  });\n  return filtered_strings;\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    const filtered_strings = strings.filter((s) => s.startsWith(prefix));\n    return filtered_strings;\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  const prefix_length = prefix.length;\n  const filtered_strings = strings.filter(s => s.startsWith(prefix));\n  return filtered_strings;\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  const filtered_strings = strings.filter((s) => s.startsWith(prefix));\n  return filtered_strings;\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  const prefix_length = prefix.length;\n  const strings_length = strings.length;\n  const result: string[] = [];\n  for (let i = 0; i < strings_length; i++) {\n    const string = strings[i];\n    if (string.slice(0, prefix_length) === prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  const prefix_length = prefix.length;\n  const filtered_strings = strings.filter(s => s.startsWith(prefix));\n  return filtered_strings.length ? filtered_strings : [];\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  const prefix_length = prefix.length;\n  const filtered_strings = strings.filter(s => s.startsWith(prefix));\n  return filtered_strings.map(s => s.substr(prefix_length));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    const filtered_strings = strings.filter((s) => s.startsWith(prefix));\n    return filtered_strings;\n}\n",
    "  const filtered_strings = strings.filter(s => s.startsWith(prefix));\n  return filtered_strings;\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    const prefix_length = prefix.length;\n    const filtered_strings = strings.filter(s => s.startsWith(prefix));\n    return filtered_strings.length ? filtered_strings : [];\n}\n",
    "    const prefix_length = prefix.length;\n    const filtered_strings = strings.filter(s => s.startsWith(prefix));\n    return filtered_strings;\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  const prefix_length = prefix.length;\n  const filtered_strings = strings.filter((s) => s.startsWith(prefix));\n  return filtered_strings.length ? filtered_strings : [];\n}\n",
    "  const prefix_length = prefix.length;\n  const filtered_strings = strings.filter(s => s.startsWith(prefix));\n  return filtered_strings.length ? filtered_strings : [];\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  const prefix_length = prefix.length;\n  const strings_length = strings.length;\n  const result: string[] = [];\n  for (let i = 0; i < strings_length; i++) {\n    const str = strings[i];\n    if (str.slice(0, prefix_length) === prefix) {\n      result.push(str);\n    }\n  }\n  return result;\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  const prefix_length = prefix.length;\n  const filtered_strings = strings.filter((s) => s.startsWith(prefix));\n  return filtered_strings.length ? filtered_strings : [];\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  const prefix_length = prefix.length;\n  const filtered_strings = strings.filter(s => s.startsWith(prefix));\n  return filtered_strings.map(s => s.substring(prefix_length));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  const prefix_length = prefix.length;\n  const filtered_strings = strings.filter(s => s.startsWith(prefix));\n  return filtered_strings;\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  const prefix_length = prefix.length;\n  const filtered_strings = strings.filter(s => s.startsWith(prefix));\n  return filtered_strings.map(s => s.substring(prefix_length));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    const prefix_length = prefix.length;\n    const filtered_strings = strings.filter((s) => {\n        return s.startsWith(prefix);\n    });\n    return filtered_strings;\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "    return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n",
    "  return strings.filter(s => s.startsWith(prefix));\n}\n"
  ],
  "language": "ts",
  "name": "HumanEval_29_filter_by_prefix",
  "prompt": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings: string[], prefix: string): string[] {\n",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
}