completions:
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((val) => val === 1);\n  const len = ones.length;\n  if (len === 0)\
  \ {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen\
  \ = Math.max(...arr.map((val) => val.length));\n  const maxLenLen = Math.max(...arr.map((val)\
  \ => val.length * 2));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length\
  \ * 4));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 8));\n\
  \  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 16));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 32));\n  const maxLenLenLenLen\
  \ = Math.max(...arr.map((val) => val.length * 64));\n  const maxLenLenLenLen = Math.max(...arr.map((val)\
  \ => val.length * 128));\n  const maxLenLenLenLen = Math.max(...arr.map((val) =>\
  \ val.length * 256));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length\
  \ * 512));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length *\
  \ 1024));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 2048));\n\
  \  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 4096));\n \
  \ const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 8192));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 16384));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 32768));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 65536));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 131072));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 262144));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 524288));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 1048576));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 2097152));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val"
- "  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((x) => x > 0 ? 1 : 0);\n  const maxOnes = Math.max(...ones);\n  const\
  \ maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnesIndex.toString(2);\n\
  \  const maxOnesBinLen = maxOnesBin.length;\n  const maxOnesBinLenLen = maxOnesBinLen\
  \ + 1;\n  const maxOnesBinStr = Array(maxOnesBinLenLen).fill('0').join('');\n  const\
  \ maxOnesBinStrLen = maxOnesBinStr.length;\n  const maxOnesBinStrArr = [];\n  for\
  \ (let i = 0; i < maxOnesBinStrLen; i++) {\n    maxOnesBinStrArr.push(maxOnesBinStr.substr(i,\
  \ 1));\n  }\n  const maxOnesBinStrArrLen = maxOnesBinStrArr.length;\n  const maxOnesBinStrArrSort\
  \ = maxOnesBinStrArr.sort();\n  const maxOnesBinStrArrSortLen = maxOnesBinStrArrSort.length;\n\
  \  const maxOnesBinStrArrSortArr = maxOnesBinStrArrSort.map((x) => parseInt(x, 2));\n\
  \  const maxOnesBinStrArrSortArrLen = maxOnesBinStrArrSortArr.length;\n  const maxOnesBinStrArrSortArrSort\
  \ = maxOnesBinStrArrSortArr.sort();\n  const maxOnesBinStrArrSortArrSortLen = maxOnesBinStrArrSortArrSort.length;\n\
  \  const maxOnesBinStrArrSortArrSortArr = maxOnesBinStrArrSortArrSort.map((x) =>\
  \ parseInt(x, 10));\n  const maxOnesBinStrArrSortArrSortArrLen = maxOnesBinStrArrSortArrSortArr.length;\n\
  \  const maxOnesBinStrArrSortArrSortArrSort = maxOnesBinStrArrSortArrSortArr.sort();\n\
  \  const maxOnesBinStrArrSortArrSortArrSortLen = maxOnesBinStrArrSortArrSortArrSort.length;\n\
  \  const maxOnesBinStrArrSortArrSortArrSortArr = maxOnesBinStrArrSortArrSortArrSort.map((x)\
  \ => parseInt(x, 16));\n  const maxOnesBinStrArrSortArrSortArrSortArrLen = maxOnesBinStrArrSortArrSortArrSortArr.length;\n\
  \  const maxOnesBinStrArrSortArrSortArrSortArrSort"
- "  arr.sort((a, b) => a - b);\n  return arr;\n}\n"
- "  return arr.sort((a, b) => {\n    const aNum = count_ones(a)\n    const bNum =\
  \ count_ones(b)\n    if (aNum === bNum) {\n      return a - b\n    }\n    return\
  \ aNum - bNum\n  })\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return\
  \ arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    const aOnes\
  \ = count_ones(a);\n    const bOnes = count_ones(b);\n    if (aOnes === bOnes) {\n\
  \      return sort_number(a, b);\n    }\n    return aOnes - bOnes;\n  });\n  return\
  \ arr;\n}\n"
- "  return arr.sort((a: number, b: number) => {\n    if (a === 0) return 1;\n   \
  \ if (b === 0) return -1;\n    return a > b ? 1 : -1;\n  });\n}\n"
- "  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  if (ones.length === 0) {\n    return arr;\n \
  \ }\n  const sorted = [];\n  for (let i = 0; i < len; i++) {\n    const one = ones[i];\n\
  \    for (let j = i + 1; j < len; j++) {\n      const two = arr[j];\n      if (one\
  \ === two) {\n        sorted.push(one);\n        arr.splice(j, 1);\n        break;\n\
  \      }\n    }\n  }\n  return sorted;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const dec = ones.length ? Math.log10(ones.length)\
  \ : -1;\n  const arr2 = arr.map((x) => [x, dec]);\n  arr2.sort((a, b) => a[1] -\
  \ b[1]);\n  return arr2.map((x) => x[0]);\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes = Math.pow(2, Math.ceil(Math.log(ones)\
  \ / Math.LN2));\n  const maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes) / Math.LN10));\n\
  \  const decs = maxDec / maxOnes;\n  const decArray = Array(decs).fill().map((_,\
  \ i) => i * maxOnes);\n  const decIndex = new Array(decs).fill(0);\n  const decCount\
  \ = new Array(decs).fill(0);\n  for (let i = 0; i < len; i++) {\n    const val =\
  \ arr[i];\n    const bin = val.toString(2);\n    const index = bin.indexOf(\"1\"\
  );\n    if (index >= 0) {\n      decCount[index] += 1;\n      decIndex[index] +=\
  \ 1;\n    }\n  }\n  const decArr = decArray.map((_, i) => i);\n  const decIndex\
  \ = decArr.map((_, i) => i);\n  const decCount = decArr.map((_, i) => decCount[i]);\n\
  \  const decIndexSorted = decIndex.sort((a, b) => decCount[b] - decCount[a]);\n\
  \  const decIndexSortedArr = decIndexSorted.map((_, i) => i);\n  const decIndexSortedArr\
  \ = decIndexSortedArr.map((_, i) => i);\n  const decIndexSortedArr = decIndexSortedArr.map((_,\
  \ i) => i);\n  const decIndexSortedArr = decIndexSortedArr.map((_, i) => i);\n \
  \ const decIndexSortedArr = decIndexSortedArr.map((_, i) => i);\n  const decIndexSortedArr\
  \ = decIndexSortedArr.map((_, i) => i);\n  const decIndexSortedArr = decIndexSortedArr.map((_,\
  \ i) => i);\n  const decIndexSortedArr = decIndexSortedArr.map((_, i) => i);\n \
  \ const decIndexSortedArr = decIndexSortedArr.map((_, i) => i);\n  const decIndexSortedArr\
  \ = decIndexSortedArr.map((_, i) => i);\n  const decIndexSortedArr = decIndexSortedArr.map((_,\
  \ i) => i);\n  const decIndexSortedArr = decIndexSortedArr.map((_, i) => i);\n \
  \ const decIndexSortedArr = decIndexSortedArr.map((_, i) => i);\n  const decIndexSortedArr\
  \ = decIndexSortedArr.map((_, i) => i);\n  const decIndexSortedArr = decIndexSortedArr.map((_,\
  \ i) => i);\n  const decIndexSortedArr = decIndexSortedArr.map((_, "
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return\
  \ arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...len);\n\
  \  const maxOnesLen = Math.max(...ones);\n  const onesLen = ones.length;\n  const\
  \ arrLen = arr.length;\n  const maxOnesLenDiff = Math.abs(maxOnesLen - maxLen);\n\
  \  const onesLenDiff = Math.abs(onesLen - maxLen);\n  const arrLenDiff = Math.abs(arrLen\
  \ - maxLen);\n  const maxOnesDiff = Math.abs(maxOnes - maxLen);\n  const onesDiff\
  \ = Math.abs(ones - maxLen);\n  const maxOnesDiffDiff = Math.abs(maxOnesDiff);\n\
  \  const onesDiffDiff = Math.abs(onesDiff);\n  const maxOnesDiffDiffDiff = Math.abs(maxOnesDiffDiff);\n\
  \  const onesDiffDiffDiff = Math.abs(onesDiffDiff);\n  const maxOnesDiffDiffDiff\
  \ = Math.abs(maxOnesDiffDiff);\n  const onesDiffDiffDiff = Math.abs(onesDiffDiff);\n\
  \  const maxOnesDiffDiffDiff = Math.abs(maxOnesDiffDiff);\n  const onesDiffDiffDiff\
  \ = Math.abs(onesDiffDiff);\n  const maxOnesDiffDiffDiff = Math.abs(maxOnesDiffDiff);\n\
  \  const onesDiffDiffDiff = Math.abs(onesDiffDiff);\n  const maxOnesDiffDiffDiff\
  \ = Math.abs(maxOnesDiffDiff);\n  const onesDiffDiffDiff = Math.abs(onesDiffDiff);\n\
  \  const maxOnesDiffDiffDiff = Math.abs(maxOnesDiffDiff);\n  const onesDiffDiffDiff\
  \ = Math.abs(onesDiffDiff);\n  const maxOnesDiffDiffDiff = Math.abs(maxOnesDiffDiff);\n\
  \  const onesDiffDiffDiff = Math.abs(onesDiffDiff);\n  const maxOnesDiffDiffDiff\
  \ = Math.abs(maxOnesDiffDiff);\n  const onesDiffDiffDiff = Math.abs(onesDiffDiff);\n\
  \  const maxOnesDiffDiffDiff = Math.abs(maxOnesDiffDiff);\n  const onesDiffDiffDiff\
  \ = Math.abs(onesDiffDiff);\n  const maxOnesDiffDiffDiff = Math.abs(maxOnesDiffDiff);\n\
  \  const onesDiffDiffDiff = Math.abs(onesDiffDiff);\n  const maxOnesDiffDiffDiff\
  \ = Math.abs(maxOnesDiffDiff);\n  const onesDiffDiffDiff = Math.abs(onesDiffDiff);\n\
  \  const maxOne"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((val) => val === 1);\n  const len = ones.length;\n  if (len === 0)\
  \ {\n    return arr;\n  }\n  const maxOnes = Math.ceil(len / 2);\n  const maxDec\
  \ = Math.ceil(Math.log(maxOnes) / Math.LN10);\n  const maxDecBase = Math.pow(10,\
  \ maxDec);\n  const decBase = Math.pow(10, maxDecBase);\n  const decBase2 = decBase\
  \ * decBase;\n  const decBase3 = decBase2 * decBase;\n  const decBase4 = decBase3\
  \ * decBase;\n  const decBase5 = decBase4 * decBase;\n  const decBase6 = decBase5\
  \ * decBase;\n  const decBase7 = decBase6 * decBase;\n  const decBase8 = decBase7\
  \ * decBase;\n  const decBase9 = decBase8 * decBase;\n  const decBase10 = decBase9\
  \ * decBase;\n  const decBase11 = decBase10 * decBase;\n  const decBase12 = decBase11\
  \ * decBase;\n  const decBase13 = decBase12 * decBase;\n  const decBase14 = decBase13\
  \ * decBase;\n  const decBase15 = decBase14 * decBase;\n  const decBase16 = decBase15\
  \ * decBase;\n  const decBase17 = decBase16 * decBase;\n  const decBase18 = decBase17\
  \ * decBase;\n  const decBase19 = decBase18 * decBase;\n  const decBase20 = decBase19\
  \ * decBase;\n  const decBase21 = decBase20 * decBase;\n  const decBase22 = decBase21\
  \ * decBase;\n  const decBase23 = decBase22 * decBase;\n  const decBase24 = decBase23\
  \ * decBase;\n  const decBase25 = decBase24 * decBase;\n  const decBase26 = decBase25\
  \ * decBase;\n  const decBase27 = decBase26 * decBase;\n  const decBase28 = decBase27\
  \ * decBase;\n  const decBase29 = decBase28 * decBase;\n  const decBase30 = decBase29\
  \ * decBase;\n  const decBase31 = decBase30 * decBase;\n  const decBase32 = decBase31\
  \ * decBase;\n  const decBase33 = decBase32 * decBase;\n  const decBase34 = decBase33\
  \ * decBase;\n  const decBase35 = decBase34 * decBase"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len\
  \ === 1) {\n    return arr;\n  }\n  const ones = arr\n    .map((val) => val.toString(2).split('').reduce((acc,\
  \ val) => acc + +val, 0))\n    .sort((a, b) => a - b);\n  const decimals = arr\n\
  \    .map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0))\n\
  \    .sort((a, b) => a - b);\n  const decimalsLen = decimals.length;\n  const decimalsArr\
  \ = new Array(decimalsLen);\n  for (let i = 0; i < decimalsLen; i++) {\n    decimalsArr[i]\
  \ = decimals[i].toString();\n  }\n  const decimalsArrLen = decimalsArr.length;\n\
  \  const decimalsArrArr = new Array(decimalsArrLen);\n  for (let i = 0; i < decimalsArrLen;\
  \ i++) {\n    decimalsArrArr[i] = decimalsArr[i].split('').reduce((acc, val) =>\
  \ acc + +val, 0);\n  }\n  const decimalsArrArrLen = decimalsArrArr.length;\n  const\
  \ decimalsArrArrArr = new Array(decimalsArrArrLen);\n  for (let i = 0; i < decimalsArrArrLen;\
  \ i++) {\n    decimalsArrArrArr[i] = decimalsArrArr[i].toString();\n  }\n  const\
  \ decimalsArrArrArrLen = decimalsArrArrArr.length;\n  const decimalsArrArrArrArr\
  \ = new Array(decimalsArrArrArrLen);\n  for (let i = 0; i < decimalsArrArrArrLen;\
  \ i++) {\n    decimalsArrArrArrArr[i] = decimalsArrArrArr[i].split('').reduce((acc,\
  \ val) => acc + +val, 0);\n  }\n  const decimalsArrArrArrArrLen = decimalsArrArrArrArr.length;\n\
  \  const decimalsArrArrArrArrArr = new Array(decimalsArrArrArrArrLen);\n  for (let\
  \ i = 0; i < decimalsArrArrArrArrLen; i++) {\n    decimalsArrArrArrArrArr[i] = decimalsArrArrArrArr[i].toString();\n\
  \  }\n  const decimalsArrArrArrArrLen = decimalsArrArrArrArrArr.length;\n  const\
  \ decimalsArrArrArrArrArr = new Array(decimalsArrArrArrArrLen);\n  for (let i =\
  \ 0; i < decimalsArrArrArrArrLen; i++) {\n    decimalsArrArrArrArrArr[i] = decimalsArrArrArrArrArr[i].split('').reduce((acc,\
  \ val) => acc + +val, 0);\n  }\n  const decimalsArrArrArrArrArrLen = decimalsArrArrArrArrArr.length;\n\
  \  const decimalsArrArrArrArrArrAr"
- "  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n   \
  \ if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const dec = count_decimal(arr);\n  const decArr = arr.map((x)\
  \ => dec[x]);\n  const decArrSorted = decArr.sort((a, b) => a - b);\n  const decArrSortedArr\
  \ = decArrSorted.map((x) => arr[x]);\n  const decArrSortedArrSorted = decArrSortedArr.sort((a,\
  \ b) => a - b);\n  const decArrSortedArrSortedArr = decArrSortedArrSorted.map((x)\
  \ => ones[x]);\n  return decArrSortedArrSortedArr;\n}\n"
- '  return arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);

  }

  '
- "  return arr.sort((a, b) => {\n    const aBits = a.toString(2).split('').reverse().join('');\n\
  \    const bBits = b.toString(2).split('').reverse().join('');\n    return aBits\
  \ == bBits ? 0 : aBits < bBits ? -1 : 1;\n  });\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr\n    .map((val) => val.toString(2).split('').reduce((acc, cur) => acc +\
  \ cur, 0))\n    .sort((a, b) => a - b);\n  const decimals = arr\n    .map((val)\
  \ => val.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n    .sort((a,\
  \ b) => a - b);\n  const decimalsLen = decimals.length;\n  const onesLen = ones.length;\n\
  \  const decimalsIndex = decimalsLen - 1;\n  const onesIndex = onesLen - 1;\n  const\
  \ decimalsArr = decimals.map((d, i) => d);\n  const onesArr = ones.map((o, i) =>\
  \ o);\n  const decimalsArrIndex = decimalsArrIndex - 1;\n  const onesArrIndex =\
  \ onesArrIndex - 1;\n  const decimalsArrLen = decimalsArr.length;\n  const onesArrLen\
  \ = onesArr.length;\n  const decimalsArrIndex = decimalsArrIndex - 1;\n  const onesArrIndex\
  \ = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex - 1;\n  const\
  \ onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const "
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  if (ones.length === 0) {\n    return arr;\n \
  \ }\n  const len = ones.length;\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n\
  \  const maxLen = Math.max(len, maxOnes);\n  const maxLen2 = Math.ceil(Math.log(maxLen)\
  \ / Math.LN2);\n  const maxLen3 = Math.ceil(Math.log(maxLen2) / Math.LN2);\n  const\
  \ maxLen4 = Math.ceil(Math.log(maxLen3) / Math.LN2);\n  const maxLen5 = Math.ceil(Math.log(maxLen4)\
  \ / Math.LN2);\n  const maxLen6 = Math.ceil(Math.log(maxLen5) / Math.LN2);\n  const\
  \ maxLen7 = Math.ceil(Math.log(maxLen6) / Math.LN2);\n  const maxLen8 = Math.ceil(Math.log(maxLen7)\
  \ / Math.LN2);\n  const maxLen9 = Math.ceil(Math.log(maxLen8) / Math.LN2);\n  const\
  \ maxLen10 = Math.ceil(Math.log(maxLen9) / Math.LN2);\n  const maxLen11 = Math.ceil(Math.log(maxLen10)\
  \ / Math.LN2);\n  const maxLen12 = Math.ceil(Math.log(maxLen11) / Math.LN2);\n \
  \ const maxLen13 = Math.ceil(Math.log(maxLen12) / Math.LN2);\n  const maxLen14 =\
  \ Math.ceil(Math.log(maxLen13) / Math.LN2);\n  const maxLen15 = Math.ceil(Math.log(maxLen14)\
  \ / Math.LN2);\n  const maxLen16 = Math.ceil(Math.log(maxLen15) / Math.LN2);\n \
  \ const maxLen17 = Math.ceil(Math.log(maxLen16) / Math.LN2);\n  const maxLen18 =\
  \ Math.ceil(Math.log(maxLen17) / Math.LN2);\n  const maxLen19 = Math.ceil(Math.log(maxLen18)\
  \ / Math.LN2);\n  const maxLen20 = Math.ceil(Math.log(maxLen19) / Math.LN2);\n \
  \ const maxLen21 = Math.ceil(Math.log(maxLen20) / Math.LN2);\n  const maxLen22 =\
  \ Math.ceil(Math.log(maxLen21) / Math.LN2);\n  const maxLen23 = Math.ceil(Math.log(maxLen22)\
  \ / Math.LN2);\n  const maxLen24 = Math.ceil(Math.log(maxLen23) / Math.LN2);\n \
  \ const maxLen25 = Math.ceil(Math.log(maxLen24) / Math.LN2);\n  const maxLen26 =\
  \ Math.ceil(Math.log(maxLen25) / Math.LN2);\n  const maxLen27 = Math.ceil(Math.log(maxLen26)\
  \ / Math.LN2);\n  const maxLen28 = Math.ceil(Math.log(maxLen27) / Math.LN2);\n \
  \ const maxLen29 = Math.ceil(Math.log(maxLen28) / Math.LN"
language: ts
name: HumanEval_116_sort_array
prompt: '//In this Kata, you have to sort an array of non-negative integers according
  to

  // number of ones in their binary representation in ascending order.

  // For similar number of ones, sort based on decimal value.

  // It must be implemented like this:

  // >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]

  // >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]

  // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]

  function sort_array(arr: number[]): number[] {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2,\
  \ 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
  \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
  \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
  \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4,\
  \ 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2,\
  \ 4, 8, 16, 32]);\n}\n\ntest();"
