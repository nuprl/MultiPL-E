completions:
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((val) => val === 1);\n  const len = ones.length;\n  if (len === 0)\
  \ {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen\
  \ = Math.max(...arr.map((val) => val.length));\n  const maxLenLen = Math.max(...arr.map((val)\
  \ => val.length * 2));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length\
  \ * 4));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 8));\n\
  \  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 16));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 32));\n  const maxLenLenLenLen\
  \ = Math.max(...arr.map((val) => val.length * 64));\n  const maxLenLenLenLen = Math.max(...arr.map((val)\
  \ => val.length * 128));\n  const maxLenLenLenLen = Math.max(...arr.map((val) =>\
  \ val.length * 256));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length\
  \ * 512));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length *\
  \ 1024));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 2048));\n\
  \  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 4096));\n \
  \ const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 8192));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 16384));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 32768));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 65536));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 131072));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 262144));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 524288));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 1048576));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 2097152));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val"
- "  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((x) => x > 0 ? 1 : 0);\n  const maxOnes = Math.max(...ones);\n  const\
  \ maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnesIndex.toString(2);\n\
  \  const maxOnesBinLen = maxOnesBin.length;\n  const maxOnesBinLenLen = maxOnesBinLen\
  \ + 1;\n  const maxOnesBinStr = Array(maxOnesBinLenLen).fill('0').join('');\n  const\
  \ maxOnesBinStrLen = maxOnesBinStr.length;\n  const maxOnesBinStrArr = [];\n  for\
  \ (let i = 0; i < maxOnesBinStrLen; i++) {\n    maxOnesBinStrArr.push(maxOnesBinStr.substr(i,\
  \ 1));\n  }\n  const maxOnesBinStrArrLen = maxOnesBinStrArr.length;\n  const maxOnesBinStrArrSort\
  \ = maxOnesBinStrArr.sort();\n  const maxOnesBinStrArrSortLen = maxOnesBinStrArrSort.length;\n\
  \  const maxOnesBinStrArrSortArr = maxOnesBinStrArrSort.map((x) => parseInt(x, 2));\n\
  \  const maxOnesBinStrArrSortArrLen = maxOnesBinStrArrSortArr.length;\n  const maxOnesBinStrArrSortArrSort\
  \ = maxOnesBinStrArrSortArr.sort();\n  const maxOnesBinStrArrSortArrSortLen = maxOnesBinStrArrSortArrSort.length;\n\
  \  const maxOnesBinStrArrSortArrSortArr = maxOnesBinStrArrSortArrSort.map((x) =>\
  \ parseInt(x, 10));\n  const maxOnesBinStrArrSortArrSortArrLen = maxOnesBinStrArrSortArrSortArr.length;\n\
  \  const maxOnesBinStrArrSortArrSortArrSort = maxOnesBinStrArrSortArrSortArr.sort();\n\
  \  const maxOnesBinStrArrSortArrSortArrSortLen = maxOnesBinStrArrSortArrSortArrSort.length;\n\
  \  const maxOnesBinStrArrSortArrSortArrSortArr = maxOnesBinStrArrSortArrSortArrSort.map((x)\
  \ => parseInt(x, 16));\n  const maxOnesBinStrArrSortArrSortArrSortArrLen = maxOnesBinStrArrSortArrSortArrSortArr.length;\n\
  \  const maxOnesBinStrArrSortArrSortArrSortArrSort"
- "  arr.sort((a, b) => a - b);\n  return arr;\n}\n"
- "  return arr.sort((a, b) => {\n    const aNum = count_ones(a)\n    const bNum =\
  \ count_ones(b)\n    if (aNum === bNum) {\n      return a - b\n    }\n    return\
  \ aNum - bNum\n  })\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return\
  \ arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    const aOnes\
  \ = count_ones(a);\n    const bOnes = count_ones(b);\n    if (aOnes === bOnes) {\n\
  \      return sort_number(a, b);\n    }\n    return aOnes - bOnes;\n  });\n  return\
  \ arr;\n}\n"
- "  return arr.sort((a: number, b: number) => {\n    if (a === 0) return 1;\n   \
  \ if (b === 0) return -1;\n    return a > b ? 1 : -1;\n  });\n}\n"
- "  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  if (ones.length === 0) {\n    return arr;\n \
  \ }\n  const sorted = [];\n  for (let i = 0; i < len; i++) {\n    const one = ones[i];\n\
  \    for (let j = i + 1; j < len; j++) {\n      const two = arr[j];\n      if (one\
  \ === two) {\n        sorted.push(one);\n        arr.splice(j, 1);\n        break;\n\
  \      }\n    }\n  }\n  return sorted;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const dec = ones.length ? Math.log10(ones.length)\
  \ : -1;\n  const arr2 = arr.map((x) => [x, dec]);\n  arr2.sort((a, b) => a[1] -\
  \ b[1]);\n  return arr2.map((x) => x[0]);\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes = Math.pow(2, Math.ceil(Math.log(ones)\
  \ / Math.LN2));\n  const maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes) / Math.LN10));\n\
  \  const decs = maxDec / maxOnes;\n  const decArray = Array(decs).fill().map((_,\
  \ i) => i * maxOnes);\n  const decIndex = new Array(decs).fill(0);\n  const decCount\
  \ = new Array(decs).fill(0);\n  for (let i = 0; i < len; i++) {\n    const val =\
  \ arr[i];\n    const bin = val.toString(2);\n    const index = bin.indexOf(\"1\"\
  );\n    if (index >= 0) {\n      decCount[index] += 1;\n      decIndex[index] +=\
  \ 1;\n    }\n  }\n  const decArr = decArray.map((_, i) => i);\n  const decIndex\
  \ = decArr.map((_, i) => i);\n  const decCount = decArr.map((_, i) => decCount[i]);\n\
  \  const decIndexSorted = decIndex.sort((a, b) => decCount[b] - decCount[a]);\n\
  \  const decIndexSortedArr = decIndexSorted.map((_, i) => i);\n  const decIndexSortedArr\
  \ = decIndexSortedArr.map((_, i) => i);\n  const decIndexSortedArr = decIndexSortedArr.map((_,\
  \ i) => i);\n  const decIndexSortedArr = decIndexSortedArr.map((_, i) => i);\n \
  \ const decIndexSortedArr = decIndexSortedArr.map((_, i) => i);\n  const decIndexSortedArr\
  \ = decIndexSortedArr.map((_, i) => i);\n  const decIndexSortedArr = decIndexSortedArr.map((_,\
  \ i) => i);\n  const decIndexSortedArr = decIndexSortedArr.map((_, i) => i);\n \
  \ const decIndexSortedArr = decIndexSortedArr.map((_, i) => i);\n  const decIndexSortedArr\
  \ = decIndexSortedArr.map((_, i) => i);\n  const decIndexSortedArr = decIndexSortedArr.map((_,\
  \ i) => i);\n  const decIndexSortedArr = decIndexSortedArr.map((_, i) => i);\n \
  \ const decIndexSortedArr = decIndexSortedArr.map((_, i) => i);\n  const decIndexSortedArr\
  \ = decIndexSortedArr.map((_, i) => i);\n  const decIndexSortedArr = decIndexSortedArr.map((_,\
  \ i) => i);\n  const decIndexSortedArr = decIndexSortedArr.map((_, "
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return\
  \ arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...len);\n\
  \  const maxOnesLen = Math.max(...ones);\n  const onesLen = ones.length;\n  const\
  \ arrLen = arr.length;\n  const maxOnesLenDiff = Math.abs(maxOnesLen - maxLen);\n\
  \  const onesLenDiff = Math.abs(onesLen - maxLen);\n  const arrLenDiff = Math.abs(arrLen\
  \ - maxLen);\n  const maxOnesDiff = Math.abs(maxOnes - maxLen);\n  const onesDiff\
  \ = Math.abs(ones - maxLen);\n  const maxOnesDiffDiff = Math.abs(maxOnesDiff);\n\
  \  const onesDiffDiff = Math.abs(onesDiff);\n  const maxOnesDiffDiffDiff = Math.abs(maxOnesDiffDiff);\n\
  \  const onesDiffDiffDiff = Math.abs(onesDiffDiff);\n  const maxOnesDiffDiffDiff\
  \ = Math.abs(maxOnesDiffDiff);\n  const onesDiffDiffDiff = Math.abs(onesDiffDiff);\n\
  \  const maxOnesDiffDiffDiff = Math.abs(maxOnesDiffDiff);\n  const onesDiffDiffDiff\
  \ = Math.abs(onesDiffDiff);\n  const maxOnesDiffDiffDiff = Math.abs(maxOnesDiffDiff);\n\
  \  const onesDiffDiffDiff = Math.abs(onesDiffDiff);\n  const maxOnesDiffDiffDiff\
  \ = Math.abs(maxOnesDiffDiff);\n  const onesDiffDiffDiff = Math.abs(onesDiffDiff);\n\
  \  const maxOnesDiffDiffDiff = Math.abs(maxOnesDiffDiff);\n  const onesDiffDiffDiff\
  \ = Math.abs(onesDiffDiff);\n  const maxOnesDiffDiffDiff = Math.abs(maxOnesDiffDiff);\n\
  \  const onesDiffDiffDiff = Math.abs(onesDiffDiff);\n  const maxOnesDiffDiffDiff\
  \ = Math.abs(maxOnesDiffDiff);\n  const onesDiffDiffDiff = Math.abs(onesDiffDiff);\n\
  \  const maxOnesDiffDiffDiff = Math.abs(maxOnesDiffDiff);\n  const onesDiffDiffDiff\
  \ = Math.abs(onesDiffDiff);\n  const maxOnesDiffDiffDiff = Math.abs(maxOnesDiffDiff);\n\
  \  const onesDiffDiffDiff = Math.abs(onesDiffDiff);\n  const maxOnesDiffDiffDiff\
  \ = Math.abs(maxOnesDiffDiff);\n  const onesDiffDiffDiff = Math.abs(onesDiffDiff);\n\
  \  const maxOne"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((val) => val === 1);\n  const len = ones.length;\n  if (len === 0)\
  \ {\n    return arr;\n  }\n  const maxOnes = Math.ceil(len / 2);\n  const maxDec\
  \ = Math.ceil(Math.log(maxOnes) / Math.LN10);\n  const maxDecBase = Math.pow(10,\
  \ maxDec);\n  const decBase = Math.pow(10, maxDecBase);\n  const decBase2 = decBase\
  \ * decBase;\n  const decBase3 = decBase2 * decBase;\n  const decBase4 = decBase3\
  \ * decBase;\n  const decBase5 = decBase4 * decBase;\n  const decBase6 = decBase5\
  \ * decBase;\n  const decBase7 = decBase6 * decBase;\n  const decBase8 = decBase7\
  \ * decBase;\n  const decBase9 = decBase8 * decBase;\n  const decBase10 = decBase9\
  \ * decBase;\n  const decBase11 = decBase10 * decBase;\n  const decBase12 = decBase11\
  \ * decBase;\n  const decBase13 = decBase12 * decBase;\n  const decBase14 = decBase13\
  \ * decBase;\n  const decBase15 = decBase14 * decBase;\n  const decBase16 = decBase15\
  \ * decBase;\n  const decBase17 = decBase16 * decBase;\n  const decBase18 = decBase17\
  \ * decBase;\n  const decBase19 = decBase18 * decBase;\n  const decBase20 = decBase19\
  \ * decBase;\n  const decBase21 = decBase20 * decBase;\n  const decBase22 = decBase21\
  \ * decBase;\n  const decBase23 = decBase22 * decBase;\n  const decBase24 = decBase23\
  \ * decBase;\n  const decBase25 = decBase24 * decBase;\n  const decBase26 = decBase25\
  \ * decBase;\n  const decBase27 = decBase26 * decBase;\n  const decBase28 = decBase27\
  \ * decBase;\n  const decBase29 = decBase28 * decBase;\n  const decBase30 = decBase29\
  \ * decBase;\n  const decBase31 = decBase30 * decBase;\n  const decBase32 = decBase31\
  \ * decBase;\n  const decBase33 = decBase32 * decBase;\n  const decBase34 = decBase33\
  \ * decBase;\n  const decBase35 = decBase34 * decBase"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len\
  \ === 1) {\n    return arr;\n  }\n  const ones = arr\n    .map((val) => val.toString(2).split('').reduce((acc,\
  \ val) => acc + +val, 0))\n    .sort((a, b) => a - b);\n  const decimals = arr\n\
  \    .map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0))\n\
  \    .sort((a, b) => a - b);\n  const decimalsLen = decimals.length;\n  const decimalsArr\
  \ = new Array(decimalsLen);\n  for (let i = 0; i < decimalsLen; i++) {\n    decimalsArr[i]\
  \ = decimals[i].toString();\n  }\n  const decimalsArrLen = decimalsArr.length;\n\
  \  const decimalsArrArr = new Array(decimalsArrLen);\n  for (let i = 0; i < decimalsArrLen;\
  \ i++) {\n    decimalsArrArr[i] = decimalsArr[i].split('').reduce((acc, val) =>\
  \ acc + +val, 0);\n  }\n  const decimalsArrArrLen = decimalsArrArr.length;\n  const\
  \ decimalsArrArrArr = new Array(decimalsArrArrLen);\n  for (let i = 0; i < decimalsArrArrLen;\
  \ i++) {\n    decimalsArrArrArr[i] = decimalsArrArr[i].toString();\n  }\n  const\
  \ decimalsArrArrArrLen = decimalsArrArrArr.length;\n  const decimalsArrArrArrArr\
  \ = new Array(decimalsArrArrArrLen);\n  for (let i = 0; i < decimalsArrArrArrLen;\
  \ i++) {\n    decimalsArrArrArrArr[i] = decimalsArrArrArr[i].split('').reduce((acc,\
  \ val) => acc + +val, 0);\n  }\n  const decimalsArrArrArrArrLen = decimalsArrArrArrArr.length;\n\
  \  const decimalsArrArrArrArrArr = new Array(decimalsArrArrArrArrLen);\n  for (let\
  \ i = 0; i < decimalsArrArrArrArrLen; i++) {\n    decimalsArrArrArrArrArr[i] = decimalsArrArrArrArr[i].toString();\n\
  \  }\n  const decimalsArrArrArrArrLen = decimalsArrArrArrArrArr.length;\n  const\
  \ decimalsArrArrArrArrArr = new Array(decimalsArrArrArrArrLen);\n  for (let i =\
  \ 0; i < decimalsArrArrArrArrLen; i++) {\n    decimalsArrArrArrArrArr[i] = decimalsArrArrArrArrArr[i].split('').reduce((acc,\
  \ val) => acc + +val, 0);\n  }\n  const decimalsArrArrArrArrArrLen = decimalsArrArrArrArrArr.length;\n\
  \  const decimalsArrArrArrArrArrAr"
- "  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n   \
  \ if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const dec = count_decimal(arr);\n  const decArr = arr.map((x)\
  \ => dec[x]);\n  const decArrSorted = decArr.sort((a, b) => a - b);\n  const decArrSortedArr\
  \ = decArrSorted.map((x) => arr[x]);\n  const decArrSortedArrSorted = decArrSortedArr.sort((a,\
  \ b) => a - b);\n  const decArrSortedArrSortedArr = decArrSortedArrSorted.map((x)\
  \ => ones[x]);\n  return decArrSortedArrSortedArr;\n}\n"
- '  return arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);

  }

  '
- "  return arr.sort((a, b) => {\n    const aBits = a.toString(2).split('').reverse().join('');\n\
  \    const bBits = b.toString(2).split('').reverse().join('');\n    return aBits\
  \ == bBits ? 0 : aBits < bBits ? -1 : 1;\n  });\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr\n    .map((val) => val.toString(2).split('').reduce((acc, cur) => acc +\
  \ cur, 0))\n    .sort((a, b) => a - b);\n  const decimals = arr\n    .map((val)\
  \ => val.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n    .sort((a,\
  \ b) => a - b);\n  const decimalsLen = decimals.length;\n  const onesLen = ones.length;\n\
  \  const decimalsIndex = decimalsLen - 1;\n  const onesIndex = onesLen - 1;\n  const\
  \ decimalsArr = decimals.map((d, i) => d);\n  const onesArr = ones.map((o, i) =>\
  \ o);\n  const decimalsArrIndex = decimalsArrIndex - 1;\n  const onesArrIndex =\
  \ onesArrIndex - 1;\n  const decimalsArrLen = decimalsArr.length;\n  const onesArrLen\
  \ = onesArr.length;\n  const decimalsArrIndex = decimalsArrIndex - 1;\n  const onesArrIndex\
  \ = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex - 1;\n  const\
  \ onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const decimalsArrIndex = decimalsArrIndex\
  \ - 1;\n  const onesArrIndex = onesArrIndex - 1;\n  const "
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  if (ones.length === 0) {\n    return arr;\n \
  \ }\n  const len = ones.length;\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n\
  \  const maxLen = Math.max(len, maxOnes);\n  const maxLen2 = Math.ceil(Math.log(maxLen)\
  \ / Math.LN2);\n  const maxLen3 = Math.ceil(Math.log(maxLen2) / Math.LN2);\n  const\
  \ maxLen4 = Math.ceil(Math.log(maxLen3) / Math.LN2);\n  const maxLen5 = Math.ceil(Math.log(maxLen4)\
  \ / Math.LN2);\n  const maxLen6 = Math.ceil(Math.log(maxLen5) / Math.LN2);\n  const\
  \ maxLen7 = Math.ceil(Math.log(maxLen6) / Math.LN2);\n  const maxLen8 = Math.ceil(Math.log(maxLen7)\
  \ / Math.LN2);\n  const maxLen9 = Math.ceil(Math.log(maxLen8) / Math.LN2);\n  const\
  \ maxLen10 = Math.ceil(Math.log(maxLen9) / Math.LN2);\n  const maxLen11 = Math.ceil(Math.log(maxLen10)\
  \ / Math.LN2);\n  const maxLen12 = Math.ceil(Math.log(maxLen11) / Math.LN2);\n \
  \ const maxLen13 = Math.ceil(Math.log(maxLen12) / Math.LN2);\n  const maxLen14 =\
  \ Math.ceil(Math.log(maxLen13) / Math.LN2);\n  const maxLen15 = Math.ceil(Math.log(maxLen14)\
  \ / Math.LN2);\n  const maxLen16 = Math.ceil(Math.log(maxLen15) / Math.LN2);\n \
  \ const maxLen17 = Math.ceil(Math.log(maxLen16) / Math.LN2);\n  const maxLen18 =\
  \ Math.ceil(Math.log(maxLen17) / Math.LN2);\n  const maxLen19 = Math.ceil(Math.log(maxLen18)\
  \ / Math.LN2);\n  const maxLen20 = Math.ceil(Math.log(maxLen19) / Math.LN2);\n \
  \ const maxLen21 = Math.ceil(Math.log(maxLen20) / Math.LN2);\n  const maxLen22 =\
  \ Math.ceil(Math.log(maxLen21) / Math.LN2);\n  const maxLen23 = Math.ceil(Math.log(maxLen22)\
  \ / Math.LN2);\n  const maxLen24 = Math.ceil(Math.log(maxLen23) / Math.LN2);\n \
  \ const maxLen25 = Math.ceil(Math.log(maxLen24) / Math.LN2);\n  const maxLen26 =\
  \ Math.ceil(Math.log(maxLen25) / Math.LN2);\n  const maxLen27 = Math.ceil(Math.log(maxLen26)\
  \ / Math.LN2);\n  const maxLen28 = Math.ceil(Math.log(maxLen27) / Math.LN2);\n \
  \ const maxLen29 = Math.ceil(Math.log(maxLen28) / Math.LN"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return\
  \ arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    const aOnes\
  \ = count_ones(a);\n    const bOnes = count_ones(b);\n    const aLen = aOnes.length;\n\
  \    const bLen = bOnes.length;\n    if (aLen === bLen) {\n      return aOnes.indexOf(bOnes)\
  \ - (aOnes.indexOf(aOnes) * -1);\n    }\n    return aLen - bLen;\n  });\n  return\
  \ arr;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return\
  \ arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    if (a === b)\
  \ {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return\
  \ -1;\n  });\n  for (let i = 0; i < len; i++) {\n    arr[i] = arr[i] / ones[i];\n\
  \  }\n  return arr;\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter(x => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const dec = Math.pow(10, Math.ceil(Math.log10(len)));\n\
  \  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10,\
  \ Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n\
  \  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10,\
  \ Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n\
  \  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10,\
  \ Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n\
  \  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10,\
  \ Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n\
  \  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10,\
  \ Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n\
  \  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10,\
  \ Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n\
  \  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10,\
  \ Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n\
  \  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10,\
  \ Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n\
  \  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10,\
  \ Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n\
  \  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10,\
  \ Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n\
  \  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10,\
  \ Math.ceil(Math.log10(dec)));\n  const dec = Math.pow(10, Math.ceil(Math."
- "  const len = arr.length;\n  if (len < 2) return arr;\n  const ones = arr.map(n\
  \ => n & 1);\n  const dec = arr.map(n => n >> 1);\n  const cmp = compare(ones, dec);\n\
  \  return arr.slice().sort(cmp);\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return\
  \ arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(a\
  \ => a.length));\n  const maxLenDiff = Math.abs(maxLen - len);\n  if (maxOnes ===\
  \ 0) {\n    return arr;\n  }\n  if (maxOnes < 2) {\n    return arr;\n  }\n  if (maxLenDiff\
  \ === 1) {\n    return arr.sort((a, b) => a - b);\n  }\n  const maxOnesDiff = Math.abs(maxOnes\
  \ - 1);\n  const maxOnesDiffDiff = Math.abs(maxOnesDiff - len);\n  if (maxOnesDiffDiff\
  \ === 1) {\n    return arr.sort((a, b) => a - b);\n  }\n  const maxOnesDiffDiffDiffDiff\
  \ = Math.abs(maxOnesDiffDiff - len);\n  if (maxOnesDiffDiffDiff === 1) {\n    return\
  \ arr.sort((a, b) => a - b);\n  }\n  const maxOnesDiffDiffDiffDiffDiff = Math.abs(maxOnesDiffDiffDiff\
  \ - len);\n  if (maxOnesDiffDiffDiffDiff === 1) {\n    return arr.sort((a, b) =>\
  \ a - b);\n  }\n  const maxOnesDiffDiffDiffDiffDiffDiff = Math.abs(maxOnesDiffDiffDiffDiff\
  \ - len);\n  if (maxOnesDiffDiffDiffDiffDiff === 1) {\n    return arr.sort((a, b)\
  \ => a - b);\n  }\n  const maxOnesDiffDiffDiffDiffDiffDiffDiff = Math.abs(maxOnesDiffDiffDiffDiffDiff\
  \ - len);\n  if (maxOnesDiffDiffDiffDiffDiffDiff === 1) {\n    return arr.sort((a,\
  \ b) => a - b);\n  }\n  const maxOnesDiffDiffDiffDiffDiffDiffDiff = Math.abs(maxOnesDiffDiffDiffDiffDiffDiff\
  \ - len);\n  if (maxOnesDiffDiffDiffDiffDiffDiff === 1) {\n    return arr.sort((a,\
  \ b) => a - b);\n  }\n  const maxOnesDiffDiffDiffDiffDiffDiffDiffDiff = Math.abs(maxOnesDiffDiffDiffDiffDiffDiff\
  \ - len);\n  if (maxOnesDiffDiffDiffDiffDiffDiff === 1) {\n    return arr.sort((a,\
  \ b) => a - b);\n  }\n  const maxOnesDiffDiffDiffDiffDiffDiffDiffDiff = Math.abs(maxOnesDiffDiffDiffDiffDiffDiffDiff\
  \ - len);\n  if (maxOnesDiffDiffDiffDiffDiffDiffDiff === 1) {\n    return arr.sort((a,\
  \ b) => a - b);\n  }\n  const maxOnesDiffDiffDiffDiff"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.reduce((acc, val) => acc + val, 0);\n  const len = Math.ceil(Math.log2(ones));\n\
  \  const maxOnes = Math.pow(2, len);\n  const maxLen = Math.max(len, maxOnes);\n\
  \  const maxVal = Math.pow(2, maxLen);\n  const maxValLen = Math.ceil(Math.log2(maxVal));\n\
  \  const maxValMaxOnes = Math.pow(2, maxValLen);\n  const maxValMaxLen = Math.ceil(Math.log2(maxValMaxOnes));\n\
  \  const maxValMaxVal = Math.pow(2, maxValMaxLen);\n  const maxValMaxValLen = Math.ceil(Math.log2(maxValMaxVal));\n\
  \  const maxValMaxValMaxOnes = Math.pow(2, maxValMaxValLen);\n  const maxValMaxValMaxLen\
  \ = Math.ceil(Math.log2(maxValMaxValMaxOnes));\n  const maxValMaxValMaxVal = Math.pow(2,\
  \ maxValMaxValMaxLen);\n  const maxValMaxValMaxValLen = Math.ceil(Math.log2(maxValMaxValMaxVal));\n\
  \  const maxValMaxValMaxValMaxOnes = Math.pow(2, maxValMaxValMaxValLen);\n  const\
  \ maxValMaxValMaxValMaxLen = Math.ceil(Math.log2(maxValMaxValMaxValMaxOnes));\n\
  \  const maxValMaxValMaxValMaxVal = Math.pow(2, maxValMaxValMaxValMaxLen);\n  const\
  \ maxValMaxValMaxValMaxValLen = Math.ceil(Math.log2(maxValMaxValMaxValMaxVal));\n\
  \  const maxValMaxValMaxValMaxValMaxOnes = Math.pow(2, maxValMaxValMaxValMaxValLen);\n\
  \  const maxValMaxValMaxValMaxValMaxLen = Math.ceil(Math.log2(maxValMaxValMaxValMaxValMaxOnes));\n\
  \  const maxValMaxValMaxValMaxValMaxVal = Math.pow(2, maxValMaxValMaxValMaxValMaxLen);\n\
  \  const maxValMaxValMaxValMaxValMaxValLen = Math.ceil(Math.log2(maxValMaxValMaxValMaxValMaxValMaxOnes));\n\
  \  const maxValMaxValMaxValMaxValMaxValMaxOnes = Math.pow(2, maxValMaxValMaxValMaxValMaxValMaxLen);\n\
  \  const maxValMaxValMaxValMaxValMaxValMaxLen = Math.ceil(Math.log2(maxValMaxValMaxValMaxValMaxValMaxValOnes));\n\
  \  const maxValMaxValMaxValMaxValMaxValMaxVal = Math.pow(2, maxValMaxValMaxValMaxVal"
- "  return arr.sort((a, b) => {\n    if (a === 0) return 1\n    if (b === 0) return\
  \ -1\n    return a > b ? 1 : -1\n  })\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((val) => val === 1);\n  const dec = ones\n    .map((val) => val.toString().split('').reverse().join(''))\n\
  \    .join('');\n  const dec = dec.split('')\n    .map((val) => parseInt(val));\n\
  \  const decArr = dec.map((val) => val * -1);\n  const decArrSorted = decArr.sort();\n\
  \  const decArrSortedArr = decArrSorted.map((val) => val.toString());\n  const decArrSortedArr\
  \ = decArrSortedArr.map((val) => parseInt(val));\n  const decArrSortedArr = decArrSortedArr.sort();\n\
  \  const decArrSortedArr = decArrSortedArr.map((val) => val * -1);\n  const decArrSortedArr\
  \ = decArrSortedArr.sort();\n  const decArrSortedArr = decArrSortedArr.map((val)\
  \ => val.toString());\n  const decArrSortedArr = decArrSortedArr.map((val) => parseInt(val));\n\
  \  const decArrSortedArr = decArrSortedArr.sort();\n  const decArrSortedArr = decArrSortedArr.map((val)\
  \ => val * -1);\n  const decArrSortedArr = decArrSortedArr.sort();\n  const decArrSortedArr\
  \ = decArrSortedArr.map((val) => val.toString());\n  const decArrSortedArr = decArrSortedArr.map((val)\
  \ => parseInt(val));\n  const decArrSortedArr = decArrSortedArr.sort();\n  const\
  \ decArrSortedArr = decArrSortedArr.map((val) => val * -1);\n  const decArrSortedArr\
  \ = decArrSortedArr.sort();\n  const decArrSortedArr = decArrSortedArr.map((val)\
  \ => val.toString());\n  const decArrSortedArr = decArrSortedArr.map((val) => parseInt(val));\n\
  \  const decArrSortedArr = decArrSortedArr.sort();\n  const decArrSortedArr = decArrSortedArr.map((val)\
  \ => val * -1);\n  const decArrSortedArr = decArrSortedArr.sort();\n  const decArrSortedArr\
  \ = decArrSortedArr.map((val) => val.toString());\n  const decArrSortedArr = decArrSortedArr.map((val)\
  \ => parseInt(val));\n  const decArrSortedArr = decArrSortedArr.sort();\n  const\
  \ decArrSortedArr = decArrSortedArr.map((val) => val * -1);\n  const decArrSortedArr\
  \ = dec"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes = Math.pow(2, Math.ceil(Math.log2(ones)));\n\
  \  const maxDec = Math.pow(2, Math.ceil(Math.log2(maxOnes)));\n  const decs = arr.map((val)\
  \ => val.toString(10)).sort();\n  const decLen = decs.length;\n  const decArr =\
  \ new Array(decLen);\n  for (let i = 0; i < decLen; i++) {\n    decArr[i] = new\
  \ Array(maxDec);\n    for (let j = 0; j < maxDec; j++) {\n      decArr[i][j] = decs[i][j];\n\
  \    }\n  }\n  const decArr_len = decArr.length;\n  const decArr_arr = [];\n  for\
  \ (let i = 0; i < decArr_len; i++) {\n    decArr_arr.push(decArr[i].join(''));\n\
  \  }\n  const decArr_arr_len = decArr_arr.length;\n  const decArr_arr_arr = [];\n\
  \  for (let i = 0; i < decArr_arr_len; i++) {\n    decArr_arr_arr.push(decArr_arr[i].split(''));\n\
  \  }\n  const decArr_arr_arr_len = decArr_arr_arr.length;\n  const decArr_arr_arr_arr\
  \ = [];\n  for (let i = 0; i < decArr_arr_arr_len; i++) {\n    decArr_arr_arr_arr.push(decArr_arr_arr[i].map((val)\
  \ => parseInt(val)));\n  }\n  const decArr_arr_arr_arr_len = decArr_arr_arr_arr.length;\n\
  \  const decArr_arr_arr_arr_arr = [];\n  for (let i = 0; i < decArr_arr_arr_arr_len;\
  \ i++) {\n    decArr_arr_arr_arr_arr.push(decArr_arr_arr_arr[i].sort());\n  }\n\
  \  const decArr_arr_arr_arr_arr_len = decArr_arr_arr_arr_arr.length;\n  const decArr_arr_arr_arr_arr_arr\
  \ = [];\n  for (let i = 0; i < decArr_arr_arr_arr_arr_len; i++) {\n    decArr_arr_arr_arr_arr_arr.push(decArr_arr_arr_arr_arr[i].join(''));\n\
  \  }\n  const decArr_arr_arr_arr_arr_arr_len = decArr_arr_arr_arr_arr_arr.length;\n\
  \  const decArr_arr_arr_arr_arr_arr_arr = [];\n  for (let i = 0; i < decArr_arr_arr_arr_arr_arr_len;\
  \ i++) {\n    decArr_arr_arr_arr_arr_arr_arr.push(decArr_arr_arr_arr_arr_arr[i].split(''));\n\
  \  }\n  const decArr_arr_arr_arr_arr_arr_len = decArr_arr_arr_arr_arr_arr.length;\n\
  \  const decArr_arr_arr_arr_arr_arr_arr_arr = [];\n  for (let i = 0; i < decArr_arr_arr_arr_arr_"
- "  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((val) => val.toString(2).length);\n  ones = sort_array(ones);\n  const\
  \ zeros = arr.map((val) => val.toString(2).replace(/1/g, '0'));\n  zeros = sort_array(zeros);\n\
  \  const ones_index = ones.map((val) => val.length - 1);\n  const zeros_index =\
  \ zeros.map((val) => val.length - 1);\n  const ones_max = Math.max(...ones_index);\n\
  \  const zeros_max = Math.max(...zeros_index);\n  const ones_min = Math.min(...ones_index);\n\
  \  const zeros_min = Math.min(...zeros_index);\n  const ones_sum = ones.map((val)\
  \ => val.reduce((acc, val) => acc + val, 0));\n  const zeros_sum = zeros.map((val)\
  \ => val.reduce((acc, val) => acc + val, 0));\n  const ones_avg = ones_sum / ones.length;\n\
  \  const zeros_avg = zeros_sum / zeros.length;\n  const ones_min = Math.min(...ones_index);\n\
  \  const zeros_min = Math.min(...zeros_index);\n  const ones_max = Math.max(...ones_index);\n\
  \  const zeros_max = Math.max(...zeros_index);\n  const ones_sum = ones.map((val)\
  \ => val.reduce((acc, val) => acc + val, 0));\n  const zeros_sum = zeros.map((val)\
  \ => val.reduce((acc, val) => acc + val, 0));\n  const ones_avg = ones_sum / ones.length;\n\
  \  const zeros_avg = zeros_sum / zeros.length;\n  const ones_min = Math.min(...ones_index);\n\
  \  const zeros_min = Math.min(...zeros_index);\n  const ones_max = Math.max(...ones_index);\n\
  \  const zeros_max = Math.max(...zeros_index);\n  const ones_sum = ones.map((val)\
  \ => val.reduce((acc, val) => acc + val, 0));\n  const zeros_sum = zeros.map((val)\
  \ => val.reduce((acc, val) => acc + val, 0));\n  const ones_avg = ones_sum / ones.length;\n\
  \  const zeros_avg = zeros_sum / zeros.length;\n  const ones_min = Math.min(...ones_index);\n\
  \  const zeros_min = Math.min(...zeros_index);\n  const ones_max = Math.max(...ones_index);\n\
  \  const zeros_max = Math.max(...zeros_index);\n  const ones_sum = ones.map((val)\
  \ => val.reduce((acc, val) => acc + val, 0));\n  const zeros_sum = zeros.map((val)\
  \ => val.reduce((acc, val) => acc + val, 0));\n  const ones_avg = one"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n \
  \   return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x)\
  \ => x.length));\n  const maxLenLen = Math.max(...arr.map((x) => x.length));\n \
  \ const maxLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLen\
  \ = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLen = Math.max(...arr.map((x)\
  \ => x.length));\n  const maxLenLenLenLen = Math.max(...arr.map((x) => x.length));\n\
  \  const maxLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLen\
  \ = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLen = Math.max(...arr.map((x)\
  \ => x.length));\n  const maxLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n\
  \  const maxLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLen\
  \ = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLen = Math.max(...arr.map((x)\
  \ => x.length));\n  const maxLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n\
  \  const maxLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLen\
  \ = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLen = Math.max(...arr.map((x)\
  \ => x.length));\n  const maxLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n\
  \  const maxLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLen\
  \ = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLen = Math.max(...arr.map((x)\
  \ => x.length));\n  const maxLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n\
  \  const maxLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLen\
  \ = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLen = Math.max(...arr.map((x)\
  \ => x.length));\n  const maxLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n\
  \  const maxLenLen"
- "  const len = arr.length;\n  if (len < 2) return arr;\n  const ones = count_ones(arr);\n\
  \  const cmp = cmp_func(ones);\n  arr.sort((a, b) => cmp(a, b));\n  return arr;\n\
  }\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOne = ones[len - 1];\n  const maxOneIndex = arr.indexOf(maxOne);\n\
  \  const onesIndex = arr.filter((x) => x === 1).map((x) => arr.indexOf(x));\n  const\
  \ maxOneIndex = onesIndex[onesIndex.length - 1];\n  const maxOneValue = arr[maxOneIndex];\n\
  \  const maxOneValueIndex = arr.indexOf(maxOneValue);\n  const onesValueIndex =\
  \ arr.filter((x) => x === 1).map((x) => arr.indexOf(x));\n  const maxOneValueIndex\
  \ = onesValueIndex[onesValueIndex.length - 1];\n  const maxOneValueValue = arr[maxOneValueIndex];\n\
  \  const maxOneValueValueIndex = arr.indexOf(maxOneValueValue);\n  const onesValueValueIndex\
  \ = arr.filter((x) => x === 1).map((x) => arr.indexOf(x));\n  const maxOneValueValueIndex\
  \ = onesValueValueIndex[onesValueValueIndex.length - 1];\n  const maxOneValueValueValue\
  \ = arr[maxOneValueValueIndex];\n  const maxOneValueValueValueIndex = arr.indexOf(maxOneValueValueValue);\n\
  \  const onesValueValueValueIndex = arr.filter((x) => x === 1).map((x) => arr.indexOf(x));\n\
  \  const maxOneValueValueIndex = onesValueValueIndex[onesValueValueIndex.length\
  \ - 1];\n  const maxOneValueValueValue = arr[maxOneValueValueIndex];\n  const maxOneValueValueValueIndex\
  \ = arr.indexOf(maxOneValueValueValue);\n  const onesValueValueValueIndex = arr.filter((x)\
  \ => x === 1).map((x) => arr.indexOf(x));\n  const maxOneValueValueIndex = onesValueValueIndex[onesValueValueIndex.length\
  \ - 1];\n  const maxOneValueValueValue = arr[maxOneValueValueIndex];\n  const maxOneValueValueValueIndex\
  \ = arr.indexOf(maxOneValueValueValue);\n  const onesValueValueValueIndex = arr.filter((x)\
  \ => x === 1).map((x) => arr.indexOf(x));\n  const maxOneValueValueIndex = onesValueValueIndex[onesValueValueIndex.length\
  \ - 1];\n  const maxOneValueValueValue = arr[maxOneValueValueIndex];\n  const maxOneValueValueValueIndex\
  \ = arr.indexOf(maxOneValueValueValue);\n  const onesValueValueValueIndex = arr.filter((x)\
  \ => x === 1).map((x) => arr.indexOf(x));\n  const maxOneValueValueIndex = ones"
- "  arr.sort((a, b) => {\n    const aNum = parseInt(a.toString(2), 10);\n    const\
  \ bNum = parseInt(b.toString(2), 10);\n    return aNum - bNum;\n  });\n  return\
  \ arr;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return\
  \ arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(a\
  \ => a.length));\n  const newArr = [];\n  for (let i = 0; i < len; i++) {\n    const\
  \ one = ones[i];\n    const len = arr.length;\n    for (let j = 0; j < len; j++)\
  \ {\n      if (arr[j].length < maxLen || arr[j].length > maxLen) {\n        continue;\n\
  \      }\n      if (one === ones[j]) {\n        newArr.push(arr[j]);\n      }\n\
  \    }\n  }\n  return newArr;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n \
  \   return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x)\
  \ => x.toString().length));\n  const maxLenStr = maxLen.toString();\n  const maxLenArr\
  \ = Array.from({ length: maxLen }, (_, i) => maxLenStr[i]);\n  const maxLenArr =\
  \ maxLenArr.map((x) => parseInt(x, 10));\n  const maxLenArr = maxLenArr.map((x)\
  \ => Math.max(...x));\n  const maxLenArr = maxLenArr.map((x) => Math.ceil(x / Math.pow(10,\
  \ maxLenArr.length)));\n  const maxLenArr = maxLenArr.map((x) => Math.pow(10, x));\n\
  \  const maxLenArr = maxLenArr.map((x) => Math.ceil(x / Math.pow(10, maxLenArr.length)));\n\
  \  const maxLenArr = maxLenArr.map((x) => Math.pow(10, x));\n  const maxLenArr =\
  \ maxLenArr.map((x) => Math.ceil(x / Math.pow(10, maxLenArr.length)));\n  const\
  \ maxLenArr = maxLenArr.map((x) => Math.pow(10, x));\n  const maxLenArr = maxLenArr.map((x)\
  \ => Math.ceil(x / Math.pow(10, maxLenArr.length)));\n  const maxLenArr = maxLenArr.map((x)\
  \ => Math.pow(10, x));\n  const maxLenArr = maxLenArr.map((x) => Math.ceil(x / Math.pow(10,\
  \ maxLenArr.length)));\n  const maxLenArr = maxLenArr.map((x) => Math.pow(10, x));\n\
  \  const maxLenArr = maxLenArr.map((x) => Math.ceil(x / Math.pow(10, maxLenArr.length)));\n\
  \  const maxLenArr = maxLenArr.map((x) => Math.pow(10, x));\n  const maxLenArr =\
  \ maxLenArr.map((x) => Math.ceil(x / Math.pow(10, maxLenArr.length)));\n  const\
  \ maxLenArr = maxLenArr.map((x) => Math.pow(10, x));\n  const maxLenArr = maxLenArr.map((x)\
  \ => Math.ceil(x / Math.pow(10, maxLenArr.length)));\n  const maxLenArr = maxLenArr.map((x)\
  \ => Math.pow(10, x));\n  const maxLenArr = maxLenArr.map((x) => Math.ceil("
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((x) => x === 1 ? 1 : 0);\n  const dec = ones\n    .map((x, i) => [x,\
  \ i])\n    .sort((a, b) => a[0] - b[0])\n    .map((x) => x[1]);\n  const res = [];\n\
  \  for (let i = 0; i < len; i++) {\n    if (dec[i] === 1) {\n      res.push(arr[i]);\n\
  \    }\n  }\n  return res;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const sorted = [];\n  for (let i = 0; i < len; i++) {\n\
  \    sorted.push(arr[i]);\n  }\n  sorted.sort((a, b) => {\n    if (a === b) {\n\
  \      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n\
  \  });\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(sorted[i]);\n\
  \  }\n  return result;\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const dec = Math.pow(10, Math.ceil(Math.log10(ones)));\n\
  \  const dec2bin = (dec * Math.pow(10, Math.floor(Math.log10(dec))));\n  const dec2binLen\
  \ = dec2bin.length;\n  const dec2binArr = new Array(dec2binLen);\n  for (let i =\
  \ 0; i < dec2binLen; i++) {\n    dec2binArr[i] = dec2bin.substr(i, 1);\n  }\n  const\
  \ dec2binMap = new Map();\n  for (let i = 0; i < dec2binLen; i++) {\n    dec2binMap.set(dec2binArr[i],\
  \ i);\n  }\n  const dec2binMapArr = Array.from(dec2binMap);\n  const dec2binMapArrLen\
  \ = dec2binMapArr.length;\n  const dec2binMapArrSort = dec2binMapArr.sort((a, b)\
  \ => a - b);\n  const dec2binMapArrSortLen = dec2binMapArrSort.length;\n  const\
  \ dec2binMapArrSortArr = new Array(dec2binMapArrLen);\n  for (let i = 0; i < dec2binMapArrLen;\
  \ i++) {\n    dec2binMapArrSortArr[i] = dec2binMapArrSort[i];\n  }\n  const dec2binMapArrSortArrLen\
  \ = dec2binMapArrSortArr.length;\n  const dec2binMapArrSortArrSort = dec2binMapArrSortArr.sort();\n\
  \  const dec2binMapArrSortArrSortLen = dec2binMapArrSortArrSort.length;\n  const\
  \ dec2binMapArrSortArrSortArr = new Array(dec2binMapArrSortArrLen);\n  for (let\
  \ i = 0; i < dec2binMapArrSortArrLen; i++) {\n    dec2binMapArrSortArrSortArr[i]\
  \ = dec2binMapArrSortArrSort[i];\n  }\n  const dec2binMapArrSortArrSortArrLen =\
  \ dec2binMapArrSortArrSortArr.length;\n  const dec2binMapArrSortArrSortArrSort =\
  \ dec2binMapArrSortArrSortArr.sort();\n  const dec2binMapArrSortArrSortArrSortLen\
  \ = dec2binMapArrSortArrSortArrSort.length;\n  const dec2binMapArrSortArrSortArrSortArr\
  \ = new Array(dec2binMapArrSortArrSortArrLen);\n  for (let i = 0; i < dec2binMapArrSortArrSortArrLen;\
  \ i++) {\n    dec2binMapArrSortArrSortArrSortArr[i] = dec2binMapArrSortArr"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((x) => x > 0);\n  const len = ones.length;\n  if (len === 0) {\n   \
  \ return arr;\n  }\n  const sorted = new Array(len);\n  for (let i = 0; i < len;\
  \ i++) {\n    sorted[i] = 0;\n  }\n  for (let i = 0; i < len; i++) {\n    sorted[ones[i]]\
  \ = i;\n  }\n  return sorted.map((x) => arr[x - 1]);\n}\n"
- "  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n   \
  \ if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((x) => x === 1 ? 1 : 0);\n  const decs = arr.map((x) => x - ones);\n\
  \  const sorted = decs.sort((a, b) => a - b);\n  return sorted.map((x) => x + ones);\n\
  }\n"
- "  arr.sort((a, b) => {\n    if (a === 0) return 1\n    if (b === 0) return -1\n\
  \    return a > b ? 1 : -1\n  })\n  return arr\n}\n"
- "  return arr.sort((a, b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n\
  \    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 &&\
  \ b === 0) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return\
  \ 0;\n    }\n    if (a === -1 && b === -1) {\n      return 1;\n    }\n    if (a\
  \ === -1 && b === 1) {\n      return -1;\n    }\n    if (a === -1 && b === 0) {\n\
  \      return 0;\n    }\n    if (a === 1 && b === -1) {\n      return -1;\n    }\n\
  \    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b ===\
  \ -1) {\n      return 1;\n    }\n    if (a === 0 && b === 1) {\n      return -1;\n\
  \    }\n    if (a === -1 && b === -1) {\n      return 0;\n    }\n    if (a === -1\
  \ && b === 0) {\n      return 1;\n    }\n    if (a === 1 && b === -1) {\n      return\
  \ -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a ===\
  \ 0 && b === -1) {\n      return -1;\n    }\n    if (a === 0 && b === 1) {\n   \
  \   return 1;\n    }\n    if (a === -1 && b === -1) {\n      return 0;\n    }\n\
  \    if (a === -1 && b === 0) {\n      return -1;\n    }\n    if (a === 1 && b ===\
  \ -1) {\n      return 1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n\
  \    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a === 0\
  \ && b === 1) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n     \
  \ return 0;\n    }\n    if (a === -1 && b === 0) {\n      return 1;\n    }\n   \
  \ if (a === 1 && b === -1) {\n      return -1;\n    }\n    if (a === 1 && b ===\
  \ 1) {\n      return 0;\n    }\n    if (a === 0 && b === -1) {\n      return 1;\n\
  \    }\n    if (a === 0 && b === 1) {\n      return -1;\n    }\n    if (a === -1\
  \ && b === -1) {\n      return 0;\n    }\n    if (a === -1 && b === 0) {\n     \
  \ return -1;\n    }\n    if (a === 1 && b === -1) {\n      return 1;\n    }\n  \
  \  if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b === -1)\
  \ {\n      return -1;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n \
  \   }\n    if (a === -1 && b === -1) {\n      return 0;\n    }\n    if (a === -1\
  \ && b === 0) {\n      return 1;\n    }\n    if (a === 1 && b === -1) {\n      return\
  \ -1;\n    }\n    if (a === 1 && b === "
- "  return arr.sort((a, b) => {\n    if (a === 0) return 1;\n    if (b === 0) return\
  \ -1;\n    return a > b ? 1 : -1;\n  });\n}\n"
- "  arr.sort((a, b) => a - b);\n  return arr;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.reduce((acc, val) => acc + val, 0);\n  const dec = ones / Math.pow(2, len\
  \ - 1);\n  return arr.sort((a, b) => dec - (a % Math.pow(2, len - 1)) - (b % Math.pow(2,\
  \ len - 1)) || a - b);\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const maxOnes = Math.max(...ones);\n  const maxOnesIndex\
  \ = ones.indexOf(maxOnes);\n  const maxOnesValues = arr.slice(0, maxOnesIndex);\n\
  \  const maxOnesValueIndex = maxOnesValues.indexOf(maxOnes);\n  const maxOnesValues\
  \ = maxOnesValues.slice(0, maxOnesValueIndex);\n  const maxOnesValueIndex = maxOnesValues.indexOf(maxOnes);\n\
  \  const maxOnesValues = maxOnesValues.slice(0, maxOnesValueIndex);\n  const maxOnesValueIndex\
  \ = maxOnesValues.indexOf(maxOnes);\n  const maxOnesValues = maxOnesValues.slice(0,\
  \ maxOnesValueIndex);\n  const maxOnesValueIndex = maxOnesValues.indexOf(maxOnes);\n\
  \  const maxOnesValues = maxOnesValues.slice(0, maxOnesValueIndex);\n  const maxOnesValueIndex\
  \ = maxOnesValues.indexOf(maxOnes);\n  const maxOnesValues = maxOnesValues.slice(0,\
  \ maxOnesValueIndex);\n  const maxOnesValueIndex = maxOnesValues.indexOf(maxOnes);\n\
  \  const maxOnesValues = maxOnesValues.slice(0, maxOnesValueIndex);\n  const maxOnesValueIndex\
  \ = maxOnesValues.indexOf(maxOnes);\n  const maxOnesValues = maxOnesValues.slice(0,\
  \ maxOnesValueIndex);\n  const maxOnesValueIndex = maxOnesValues.indexOf(maxOnes);\n\
  \  const maxOnesValues = maxOnesValues.slice(0, maxOnesValueIndex);\n  const maxOnesValueIndex\
  \ = maxOnesValues.indexOf(maxOnes);\n  const maxOnesValues = maxOnesValues.slice(0,\
  \ maxOnesValueIndex);\n  const maxOnesValueIndex = maxOnesValues.indexOf(maxOnes);\n\
  \  const maxOnesValues = maxOnesValues.slice(0, maxOnesValueIndex);\n  const maxOnesValueIndex\
  \ = maxOnesValues.indexOf(maxOnes);\n  const maxOnesValues = maxOnesValues.slice(0,\
  \ maxOnesValueIndex);\n  const maxOnesValueIndex = maxOnesValues.indexOf(maxOnes);\n\
  \  const maxOnesValues = maxOnesValues.slice(0, maxOnesValueIndex);\n  const maxOnesValueIndex\
  \ = maxOnesValues.indexOf(maxOnes);\n  const maxOnesValues = maxOnesValues.slice(0,\
  \ maxOnesValueIndex);\n  const maxOnesValueIndex = maxOnesValues.indexOf(max"
- "  const len = arr.length;\n  if (len < 2) return arr;\n  const ones = arr.map((x)\
  \ => x > 0 ? 1 : 0);\n  const len = ones.length;\n  const maxOnes = Math.ceil(Math.log(len)\
  \ / Math.LN2);\n  const maxOnesLen = Math.ceil(Math.pow(maxOnes, 2));\n  const maxOnesLenLen\
  \ = Math.ceil(Math.pow(maxOnesLen, 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLen,\
  \ 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n \
  \ const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen\
  \ = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen,\
  \ 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n \
  \ const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen\
  \ = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen,\
  \ 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n \
  \ const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen\
  \ = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen,\
  \ 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n \
  \ const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen\
  \ = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen,\
  \ 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n \
  \ const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen\
  \ = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen,\
  \ 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((x) => x === 1 ? 1 : 0);\n  const decs = arr.map((x) => x - ones);\n\
  \  return decs.sort((a, b) => a - b);\n}\n"
- "  return arr.sort((a, b) => {\n    const aNum = parseInt(a.toString(2), 10);\n\
  \    const bNum = parseInt(b.toString(2), 10);\n    return aNum - bNum;\n  });\n\
  }\n"
- "  return arr.sort((a, b) => {\n    const ones = count_ones(a)\n    const twos =\
  \ count_ones(b)\n    if (ones > twos) {\n      return 1\n    } else if (ones < twos)\
  \ {\n      return -1\n    } else {\n      return count_ones(a) - count_ones(b)\n\
  \    }\n  })\n}\n"
- "  const len = arr.length;\n  if (len < 2) return arr;\n  const ones = count_ones(arr);\n\
  \  const len = ones.length;\n  if (len < 2) return arr;\n  const sorted = new Array(len);\n\
  \  for (let i = 0; i < len; i++) {\n    sorted[i] = arr[i];\n  }\n  sorted.sort((a,\
  \ b) => {\n    const aOnes = count_ones(a);\n    const bOnes = count_ones(b);\n\
  \    if (aOnes < bOnes) return -1;\n    if (aOnes > bOnes) return 1;\n    return\
  \ a - b;\n  });\n  return sorted;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n\
  \  const maxOnesLen = Math.floor(Math.log(maxOnes) / Math.LN2);\n  const maxOnesLen2\
  \ = maxOnesLen / 2;\n  const maxOnesLen3 = maxOnesLen / 3;\n  const maxOnesLen4\
  \ = maxOnesLen / 4;\n  const maxOnesLen5 = maxOnesLen / 5;\n  const maxOnesLen6\
  \ = maxOnesLen / 6;\n  const maxOnesLen7 = maxOnesLen / 7;\n  const maxOnesLen8\
  \ = maxOnesLen / 8;\n  const maxOnesLen9 = maxOnesLen / 9;\n  const maxOnesLen10\
  \ = maxOnesLen / 10;\n  const maxOnesLen11 = maxOnesLen / 11;\n  const maxOnesLen12\
  \ = maxOnesLen / 12;\n  const maxOnesLen13 = maxOnesLen / 13;\n  const maxOnesLen14\
  \ = maxOnesLen / 14;\n  const maxOnesLen15 = maxOnesLen / 15;\n  const maxOnesLen16\
  \ = maxOnesLen / 16;\n  const maxOnesLen17 = maxOnesLen / 17;\n  const maxOnesLen18\
  \ = maxOnesLen / 18;\n  const maxOnesLen19 = maxOnesLen / 19;\n  const maxOnesLen20\
  \ = maxOnesLen / 20;\n  const maxOnesLen21 = maxOnesLen / 21;\n  const maxOnesLen22\
  \ = maxOnesLen / 22;\n  const maxOnesLen23 = maxOnesLen / 23;\n  const maxOnesLen24\
  \ = maxOnesLen / 24;\n  const maxOnesLen25 = maxOnesLen / 25;\n  const maxOnesLen26\
  \ = maxOnesLen / 26;\n  const maxOnesLen27 = maxOnesLen / 27;\n  const maxOnesLen28\
  \ = maxOnesLen / 28;\n  const maxOnesLen29 = maxOnesLen / 29;\n  const maxOnesLen30\
  \ = maxOnesLen / 30;\n  const maxOnesLen31 = maxOnesLen / 31;\n  const maxOnesLen32\
  \ = maxOnesLen / 32;\n  const "
- "  return arr.sort((a, b) => {\n    const aBits = count_bits(a);\n    const bBits\
  \ = count_bits(b);\n    if (aBits === bBits) {\n      return 0;\n    }\n    return\
  \ aBits > bBits ? 1 : -1;\n  });\n}\n"
- '  return arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);

  }

  '
- "  const len = arr.length;\n  if (len < 2) return arr;\n  const ones = arr.filter(x\
  \ => x === 1);\n  const dec = ones.length ? Math.log10(ones.length) - Math.log10(len)\
  \ : Infinity;\n  const sorted = arr.sort((a, b) => {\n    const aNum = parseInt(a,\
  \ 10);\n    const bNum = parseInt(b, 10);\n    return aNum - bNum;\n  });\n  return\
  \ sorted.map(x => parseInt(x, 10));\n}\n"
- "  return arr.sort((a, b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n\
  \    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 &&\
  \ b === 0) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return\
  \ 0;\n    }\n    if (a === 0 && b === 1) {\n      return -1;\n    }\n    if (a ===\
  \ 1 && b === 1) {\n      return 1;\n    }\n    if (a === 0 && b === 0) {\n     \
  \ return 1;\n    }\n    if (a === 1 && b === 0) {\n      return -1;\n    }\n   \
  \ if (a === 0 && b === 1) {\n      return -1;\n    }\n    if (a === 1 && b === 1)\
  \ {\n      return 0;\n    }\n    if (a === 0 && b === 0) {\n      return -1;\n \
  \   }\n    if (a === 1 && b === 0) {\n      return 1;\n    }\n    if (a === 0 &&\
  \ b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === 1) {\n      return\
  \ 0;\n    }\n  });\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter(x => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  if (len === 1) {\n    return ones;\n  }\n  const twos =\
  \ arr.filter(x => x === 2);\n  const len = twos.length;\n  if (len === 0) {\n  \
  \  return arr;\n  }\n  if (len === 1) {\n    return twos;\n  }\n  const threes =\
  \ arr.filter(x => x === 3);\n  const len = threes.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  if (len === 1) {\n    return threes;\n  }\n  const fours\
  \ = arr.filter(x => x === 4);\n  const len = fours.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  if (len === 1) {\n    return fours;\n  }\n  const fives\
  \ = arr.filter(x => x === 5);\n  const len = fives.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  if (len === 1) {\n    return fives;\n  }\n  const sixes\
  \ = arr.filter(x => x === 6);\n  const len = sixes.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  if (len === 1) {\n    return sixes;\n  }\n  const sevens\
  \ = arr.filter(x => x === 7);\n  const len = sevens.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  if (len === 1) {\n    return sevens;\n  }\n  const eights\
  \ = arr.filter(x => x === 8);\n  const len = eights.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  if (len === 1) {\n    return eights;\n  }\n  const nines\
  \ = arr.filter(x => x === 9);\n  const len = nines.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  if (len === 1) {\n    return nines;\n  }\n  const tens\
  \ = arr.filter(x => x === 10);\n  const len = tens.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  if (len === 1) {\n    return tens;\n  }\n  const hundreds\
  \ = arr.filter(x => x === 100);\n  const len = hundreds.length;\n  if (len === 0)\
  \ {\n    return arr;\n  }\n  if (len === 1) {\n    return hundreds;\n  }\n  const\
  \ thousands = arr.filter(x => x === 1000);\n  const len = thousands.length;\n  if\
  \ (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return thousands;\n\
  \  }\n  const millions = arr.filter(x => x === 1000000);\n  const len = millions.length;\n\
  \  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x)\
  \ => Math.log2(x)));\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.min(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max("
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x > 0);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x)\
  \ => Math.log2(x)));\n  const maxLen = Math.max(maxLen, maxOnes);\n  const maxLen\
  \ = Math.ceil(maxLen / Math.log2(len));\n  const maxLen = Math.max(maxLen, len);\n\
  \  const maxLen = Math.ceil(maxLen / Math.log2(len));\n  const maxLen = Math.max(maxLen,\
  \ len);\n  const maxLen = Math.ceil(maxLen / Math.log2(len));\n  const maxLen =\
  \ Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen / Math.log2(len));\n\
  \  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen / Math.log2(len));\n\
  \  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen / Math.log2(len));\n\
  \  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen / Math.log2(len));\n\
  \  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen / Math.log2(len));\n\
  \  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen / Math.log2(len));\n\
  \  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen / Math.log2(len));\n\
  \  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen / Math.log2(len));\n\
  \  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen / Math.log2(len));\n\
  \  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen / Math.log2(len));\n\
  \  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen / Math.log2(len));\n\
  \  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen / Math.log2(len));\n\
  \  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen / Math.log2(len));\n\
  \  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen / Math.log2(len));\n\
  \  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen / Math.log2(len));\n\
  \  const maxLen = Math.max(maxLen, len);\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter(x => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n\
  \  const maxLen = Math.max(len, maxOnes);\n  const maxLen2 = Math.ceil(Math.log(maxLen)\
  \ / Math.LN2);\n  const maxLen3 = Math.ceil(Math.log(maxLen2) / Math.LN2);\n  const\
  \ maxLen4 = Math.ceil(Math.log(maxLen3) / Math.LN2);\n  const maxLen5 = Math.ceil(Math.log(maxLen4)\
  \ / Math.LN2);\n  const maxLen6 = Math.ceil(Math.log(maxLen5) / Math.LN2);\n  const\
  \ maxLen7 = Math.ceil(Math.log(maxLen6) / Math.LN2);\n  const maxLen8 = Math.ceil(Math.log(maxLen7)\
  \ / Math.LN2);\n  const maxLen9 = Math.ceil(Math.log(maxLen8) / Math.LN2);\n  const\
  \ maxLen10 = Math.ceil(Math.log(maxLen9) / Math.LN2);\n  const maxLen11 = Math.ceil(Math.log(maxLen10)\
  \ / Math.LN2);\n  const maxLen12 = Math.ceil(Math.log(maxLen11) / Math.LN2);\n \
  \ const maxLen13 = Math.ceil(Math.log(maxLen12) / Math.LN2);\n  const maxLen14 =\
  \ Math.ceil(Math.log(maxLen13) / Math.LN2);\n  const maxLen15 = Math.ceil(Math.log(maxLen14)\
  \ / Math.LN2);\n  const maxLen16 = Math.ceil(Math.log(maxLen15) / Math.LN2);\n \
  \ const maxLen17 = Math.ceil(Math.log(maxLen16) / Math.LN2);\n  const maxLen18 =\
  \ Math.ceil(Math.log(maxLen17) / Math.LN2);\n  const maxLen19 = Math.ceil(Math.log(maxLen18)\
  \ / Math.LN2);\n  const maxLen20 = Math.ceil(Math.log(maxLen19) / Math.LN2);\n \
  \ const maxLen21 = Math.ceil(Math.log(maxLen20) / Math.LN2);\n  const maxLen22 =\
  \ Math.ceil(Math.log(maxLen21) / Math.LN2);\n  const maxLen23 = Math.ceil(Math.log(maxLen22)\
  \ / Math.LN2);\n  const maxLen24 = Math.ceil(Math.log(maxLen23) / Math.LN2);\n \
  \ const maxLen25 = Math.ceil(Math.log(maxLen24) / Math.LN2);\n  const maxLen26 =\
  \ Math.ceil(Math.log(maxLen25) / Math.LN2);\n  const maxLen27 = Math.ceil(Math.log(maxLen26)\
  \ / Math.LN2);\n  const maxLen28 = Math.ceil(Math.log(maxLen27) / Math.LN2);\n \
  \ const maxLen29 = Math.ceil(Math.log(maxLen28) / Math.LN"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes = Math.pow(2, len)\
  \ - ones;\n  const maxDec = Math.pow(2, len) - 1;\n  const decs = arr.map(val =>\
  \ Math.trunc(val * maxDec) / maxDec);\n  const decIndex = decs.findIndex(d => d\
  \ === 0);\n  const decs = decs.map((d, i) => [d, i]);\n  const decs = decs.sort((a,\
  \ b) => a[0] - b[0]);\n  const decs = decs.map((d, i) => [d, decIndex]);\n  const\
  \ decs = decs.map((d, i) => [d, i]);\n  const decs = decs.sort((a, b) => a[1] -\
  \ b[1]);\n  const decs = decs.map((d, i) => [d, i]);\n  const decs = decs.map((d,\
  \ i) => [d, i]);\n  const decs = decs.sort((a, b) => a[0] - b[0]);\n  const decs\
  \ = decs.map((d, i) => [d, i]);\n  const decs = decs.map((d, i) => [d, i]);\n  const\
  \ decs = decs.sort((a, b) => a[1] - b[1]);\n  const decs = decs.map((d, i) => [d,\
  \ i]);\n  const decs = decs.map((d, i) => [d, i]);\n  const decs = decs.sort((a,\
  \ b) => a[0] - b[0]);\n  const decs = decs.map((d, i) => [d, i]);\n  const decs\
  \ = decs.map((d, i) => [d, i]);\n  const decs = decs.sort((a, b) => a[1] - b[1]);\n\
  \  const decs = decs.map((d, i) => [d, i]);\n  const decs = decs.map((d, i) => [d,\
  \ i]);\n  const decs = decs.sort((a, b) => a[0] - b[0]);\n  const decs = decs.map((d,\
  \ i) => [d, i]);\n  const decs = decs.map((d, i) => [d, i]);\n  const decs = decs.sort((a,\
  \ b) => a[1] - b[1]);\n  const decs = decs.map((d, i) => [d, i]);\n  const decs\
  \ = decs.map((d, i) => [d, i]);\n  const decs = decs.sort((a, b) => a[0] - b[0]);\n\
  \  const decs = decs.map((d, i) => [d, i]);\n  const decs = decs.map((d, i) => [d,\
  \ i]);\n  const decs = decs.sort((a, b) => a[1] - b[1]);\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const zeros = arr.filter((x) => x === 0);\n \
  \ const maxOnes = Math.max(...ones);\n  const maxZeros = Math.max(...zeros);\n \
  \ const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxZerosIndex = zeros.indexOf(maxZeros);\n\
  \  const maxOnesBin = maxOnesIndex.toString(2);\n  const maxZerosBin = maxZerosIndex.toString(2);\n\
  \  const maxOnesBinLen = maxOnesBin.length;\n  const maxZerosBinLen = maxZerosBin.length;\n\
  \  const maxOnesBinStr = Array(maxOnesBinLen + 1).join(\"1\");\n  const maxZerosBinStr\
  \ = Array(maxZerosBinLen + 1).join(\"0\");\n  const maxOnesBinStr = maxOnesBinStr.substr(0,\
  \ maxOnesBinLen - 1);\n  const maxZerosBinStr = maxZerosBinStr.substr(0, maxZerosBinLen\
  \ - 1);\n  const maxOnesBinStr = maxOnesBinStr.substr(maxOnesBinLen - 1);\n  const\
  \ maxZerosBinStr = maxZerosBinStr.substr(maxZerosBinLen - 1);\n  const maxOnesBinStr\
  \ = maxOnesBinStr.substr(0, maxOnesBinLen - 1);\n  const maxZerosBinStr = maxZerosBinStr.substr(0,\
  \ maxZerosBinLen - 1);\n  const maxOnesBinStr = maxOnesBinStr.substr(maxOnesBinLen\
  \ - 1);\n  const maxZerosBinStr = maxZerosBinStr.substr(maxZerosBinLen - 1);\n \
  \ const maxOnesBinStr = maxOnesBinStr.substr(0, maxOnesBinLen - 1);\n  const maxZerosBinStr\
  \ = maxZerosBinStr.substr(0, maxZerosBinLen - 1);\n  const maxOnesBinStr = maxOnesBinStr.substr(maxOnesBinLen\
  \ - 1);\n  const maxZerosBinStr = maxZerosBinStr.substr(maxZerosBinLen - 1);\n \
  \ const maxOnesBinStr = maxOnesBinStr.substr(0, maxOnesBinLen - 1);\n  const maxZerosBinStr\
  \ = maxZerosBinStr.substr(0, maxZerosBinLen - 1);\n  const maxOnesBinStr = max"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((v) => v.toString(2).split('').reduce((p, c) => p + +c, 0));\n  const\
  \ maxOnes = Math.max(...ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n\
  \  const decimals = maxOnesIndex - ones.length;\n  const decimalsIndex = arr.length\
  \ - decimals;\n  const decimalsArr = arr.slice(0, decimalsIndex);\n  const decimalsArr\
  \ = decimalsArr.map((v) => v.toFixed(decimals));\n  const decimalsArr = decimalsArr.map((v)\
  \ => v.toString(2).split('').reduce((p, c) => p + +c, 0));\n  const decimalsArr\
  \ = decimalsArr.map((v) => Math.max(...v));\n  const decimalsArr = decimalsArr.map((v)\
  \ => Math.max(...v));\n  const decimalsArr = decimalsArr.map((v) => Math.max(...v));\n\
  \  const decimalsArr = decimalsArr.map((v) => Math.max(...v));\n  const decimalsArr\
  \ = decimalsArr.map((v) => Math.max(...v));\n  const decimalsArr = decimalsArr.map((v)\
  \ => Math.max(...v));\n  const decimalsArr = decimalsArr.map((v) => Math.max(...v));\n\
  \  const decimalsArr = decimalsArr.map((v) => Math.max(...v));\n  const decimalsArr\
  \ = decimalsArr.map((v) => Math.max(...v));\n  const decimalsArr = decimalsArr.map((v)\
  \ => Math.max(...v));\n  const decimalsArr = decimalsArr.map((v) => Math.max(...v));\n\
  \  const decimalsArr = decimalsArr.map((v) => Math.max(...v));\n  const decimalsArr\
  \ = decimalsArr.map((v) => Math.max(...v));\n  const decimalsArr = decimalsArr.map((v)\
  \ => Math.max(...v));\n  const decimalsArr = decimalsArr.map((v) => Math.max(...v));\n\
  \  const decimalsArr = decimalsArr.map((v) => Math.max(...v));\n  const decimalsArr\
  \ = decimalsArr.map((v) => Math.max(...v));\n  const decimalsArr = decimalsArr.map((v)\
  \ => Math.max(...v));\n  const decimalsArr = decimalsArr.map((v) => Math.max(...v));\n\
  \  const decimalsArr = decimals"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter(v => v === 1);\n  const dec = ones.length * 10;\n  const dec = dec\
  \ > Math.pow(10, Math.ceil(Math.log10(dec))) ? Math.pow(10, Math.ceil(Math.log10(dec)))\
  \ : dec;\n  const dec = Math.ceil(dec);\n  const dec = Math.pow(10, dec);\n  const\
  \ dec = dec / 10;\n  const dec = dec * Math.pow(10, Math.ceil(Math.log10(dec)));\n\
  \  const dec = Math.ceil(dec);\n  const dec = Math.pow(10, dec);\n  const dec =\
  \ dec / 10;\n  const dec = dec * Math.pow(10, Math.ceil(Math.log10(dec)));\n  const\
  \ dec = Math.ceil(dec);\n  const dec = Math.pow(10, dec);\n  const dec = dec / 10;\n\
  \  const dec = dec * Math.pow(10, Math.ceil(Math.log10(dec)));\n  const dec = Math.ceil(dec);\n\
  \  const dec = Math.pow(10, dec);\n  const dec = dec / 10;\n  const dec = dec *\
  \ Math.pow(10, Math.ceil(Math.log10(dec)));\n  const dec = Math.ceil(dec);\n  const\
  \ dec = Math.pow(10, dec);\n  const dec = dec / 10;\n  const dec = dec * Math.pow(10,\
  \ Math.ceil(Math.log10(dec)));\n  const dec = Math.ceil(dec);\n  const dec = Math.pow(10,\
  \ dec);\n  const dec = dec / 10;\n  const dec = dec * Math.pow(10, Math.ceil(Math.log10(dec)));\n\
  \  const dec = Math.ceil(dec);\n  const dec = Math.pow(10, dec);\n  const dec =\
  \ dec / 10;\n  const dec = dec * Math.pow(10, Math.ceil(Math.log10(dec)));\n  const\
  \ dec = Math.ceil(dec);\n  const dec = Math.pow(10, dec);\n  const dec = dec / 10;\n\
  \  const dec = dec * Math.pow(10, Math.ceil(Math.log10(dec)));\n  const dec = Math.ceil(dec);\n\
  \  const dec = Math.pow(10, dec);\n  const dec = dec / 10;\n  const dec = dec *\
  \ Math.pow(10, Math.ceil(Math.log10(dec)));\n  const dec = Math.ceil(dec);\n  const\
  \ dec = Math.pow(10, dec);\n  const dec = dec / 10;\n  const dec = dec * Math.pow(10,\
  \ Math.ceil(Math.log10(dec)));\n  const dec = Math.ceil(dec);\n  const dec = Math.pow(10,\
  \ dec);\n  const dec = dec / 10;\n  const dec = dec * Math.pow(10, Math.ceil(Math."
- "  arr.sort((a, b) => {\n    const aNum = count_ones(a);\n    const bNum = count_ones(b);\n\
  \    if (aNum === bNum) {\n      return a - b;\n    }\n    return aNum - bNum;\n\
  \  });\n  return arr;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr\n    .map((x) => parseInt(x.toString(2), 2))\n    .sort((a, b) => a - b);\n\
  \  const zeros = arr.filter((x) => parseInt(x.toString(2), 2) === 0);\n  return\
  \ zeros.concat(ones);\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const sorted = new Array(len);\n  for (let i = 0; i < len;\
  \ i++) {\n    sorted[i] = arr[i];\n  }\n  sorted.sort((a, b) => {\n    if (a ===\
  \ b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return\
  \ 1;\n  });\n  for (let i = 0; i < len; i++) {\n    sorted[i] = sorted[i] / ones;\n\
  \  }\n  return sorted;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr\n    .map((x) => parseInt(x.toString(2), 2))\n    .filter((x) => x > 0);\n\
  \  const zeros = arr.filter((x) => x < 0);\n  const len = ones.length;\n  if (len\
  \ < 2) {\n    return arr;\n  }\n  const onesLen = ones.length;\n  const zerosLen\
  \ = zeros.length;\n  const maxLen = Math.max(onesLen, zerosLen);\n  const maxLen2\
  \ = Math.max(maxLen, len);\n  const arr2 = new Array(maxLen2);\n  for (let i = 0;\
  \ i < maxLen2; i++) {\n    arr2[i] = 0;\n  }\n  for (let i = 0; i < len; i++) {\n\
  \    arr2[ones[i]] += 1;\n  }\n  for (let i = 0; i < zerosLen; i++) {\n    arr2[zeros[i]]\
  \ += 1;\n  }\n  for (let i = 0; i < onesLen; i++) {\n    arr2[ones[i] - onesLen\
  \ + i] += 1;\n  }\n  return arr2;\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr\n    .map((val) => val.toString(2).split('').reduce((acc, val) => acc +\
  \ +val, 0))\n    .sort((a, b) => a - b);\n  const tens = arr\n    .map((val) =>\
  \ val.toString(2).split('').reduce((acc, val) => acc + +val, 0))\n    .sort((a,\
  \ b) => a - b);\n  const hundreds = arr\n    .map((val) => val.toString(2).split('').reduce((acc,\
  \ val) => acc + +val, 0))\n    .sort((a, b) => a - b);\n  const thousands = arr\n\
  \    .map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0))\n\
  \    .sort((a, b) => a - b);\n  const tenThousands = arr\n    .map((val) => val.toString(2).split('').reduce((acc,\
  \ val) => acc + +val, 0))\n    .sort((a, b) => a - b);\n  const hundredThousands\
  \ = arr\n    .map((val) => val.toString(2).split('').reduce((acc, val) => acc +\
  \ +val, 0))\n    .sort((a, b) => a - b);\n  const oneThousand = arr\n    .map((val)\
  \ => val.toString(2).split('').reduce((acc, val) => acc + +val, 0))\n    .sort((a,\
  \ b) => a - b);\n  const tenThousandThousands = arr\n    .map((val) => val.toString(2).split('').reduce((acc,\
  \ val) => acc + +val, 0))\n    .sort((a, b) => a - b);\n  const hundredThousandThousands\
  \ = arr\n    .map((val) => val.toString(2).split('').reduce((acc, val) => acc +\
  \ +val, 0))\n    .sort((a, b) => a - b);\n  const oneThousandThousand = arr\n  \
  \  .map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0))\n\
  \    .sort((a, b) => a - b);\n  const tenThousandThousandThousands = arr\n    .map((val)\
  \ => val.toString(2).split('').reduce((acc, val) => acc + +val, 0))\n    .sort((a,\
  \ b) => a - b);\n  const hundredThousandThousandThousands = arr\n    .map((val)\
  \ => val.toString(2).split('').reduce((acc, val) => acc + +val, 0))\n    .sort((a,\
  \ b) => a - b);\n  const oneThousandThousandThousand = arr\n    ."
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((val) => val === 1);\n  const len = ones.length;\n  if (len === 0)\
  \ {\n    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n\
  \  const maxOnesLen = Math.ceil(Math.pow(maxOnes, 2) / Math.LN2);\n  const maxOnesLen2\
  \ = Math.ceil(Math.pow(maxOnes, 3) / Math.LN2);\n  const maxOnesLen4 = Math.ceil(Math.pow(maxOnes,\
  \ 4) / Math.LN2);\n  const maxOnesLen6 = Math.ceil(Math.pow(maxOnes, 6) / Math.LN2);\n\
  \  const maxOnesLen8 = Math.ceil(Math.pow(maxOnes, 8) / Math.LN2);\n  const maxOnesLen10\
  \ = Math.ceil(Math.pow(maxOnes, 10) / Math.LN2);\n  const maxOnesLen12 = Math.ceil(Math.pow(maxOnes,\
  \ 12) / Math.LN2);\n  const maxOnesLen16 = Math.ceil(Math.pow(maxOnes, 16) / Math.LN2);\n\
  \  const maxOnesLen32 = Math.ceil(Math.pow(maxOnes, 32) / Math.LN2);\n  const maxOnesLen64\
  \ = Math.ceil(Math.pow(maxOnes, 64) / Math.LN2);\n  const maxOnesLen128 = Math.ceil(Math.pow(maxOnes,\
  \ 128) / Math.LN2);\n  const maxOnesLen256 = Math.ceil(Math.pow(maxOnes, 256) /\
  \ Math.LN2);\n  const maxOnesLen512 = Math.ceil(Math.pow(maxOnes, 512) / Math.LN2);\n\
  \  const maxOnesLen1024 = Math.ceil(Math.pow(maxOnes, 1024) / Math.LN2);\n  const\
  \ maxOnesLen2048 = Math.ceil(Math.pow(maxOnes, 2048) / Math.LN2);\n  const maxOnesLen4096\
  \ = Math.ceil(Math.pow(maxOnes, 4096) / Math.LN2);\n  const maxOnesLen8192 = 31;\n\
  \  const maxOnesLen16384 = 63;\n  const maxOnesLen32768 = 127;\n  const maxOnesLen65536\
  \ = 255;\n  const maxOnesLen131072 = 511;\n  const maxOnesLen262144 = 1023;\n  const\
  \ maxOnesLen524288 = 2047; // Math.pow(maxOnes, 65536) / Math.LN2;\n  const maxOnesLen1048576\
  \ = 1023;\n  const maxOnesLen2097152 = 2047; // Math.pow(maxOnes, 131072) / Math.LN2;\n\
  \  const maxOnesLen4194304 = 1023;\n  const maxOnesLen8388608 = 2047"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x > 0);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n\
  \  const maxLen = Math.max(len, maxOnes);\n  const maxLen2 = Math.ceil(Math.log(maxLen)\
  \ / Math.LN2);\n  const maxLen3 = Math.ceil(Math.log(maxLen2) / Math.LN2);\n  const\
  \ maxLen4 = Math.ceil(Math.log(maxLen3) / Math.LN2);\n  const maxLen5 = Math.ceil(Math.log(maxLen4)\
  \ / Math.LN2);\n  const maxLen6 = Math.ceil(Math.log(maxLen5) / Math.LN2);\n  const\
  \ maxLen7 = Math.ceil(Math.log(maxLen6) / Math.LN2);\n  const maxLen8 = Math.ceil(Math.log(maxLen7)\
  \ / Math.LN2);\n  const maxLen9 = Math.ceil(Math.log(maxLen8) / Math.LN2);\n  const\
  \ maxLen10 = Math.ceil(Math.log(maxLen9) / Math.LN2);\n  const maxLen11 = Math.ceil(Math.log(maxLen10)\
  \ / Math.LN2);\n  const maxLen12 = Math.ceil(Math.log(maxLen11) / Math.LN2);\n \
  \ const maxLen13 = Math.ceil(Math.log(maxLen12) / Math.LN2);\n  const maxLen14 =\
  \ Math.ceil(Math.log(maxLen13) / Math.LN2);\n  const maxLen15 = Math.ceil(Math.log(maxLen14)\
  \ / Math.LN2);\n  const maxLen16 = Math.ceil(Math.log(maxLen15) / Math.LN2);\n \
  \ const maxLen17 = Math.ceil(Math.log(maxLen16) / Math.LN2);\n  const maxLen18 =\
  \ Math.ceil(Math.log(maxLen17) / Math.LN2);\n  const maxLen19 = Math.ceil(Math.log(maxLen18)\
  \ / Math.LN2);\n  const maxLen20 = Math.ceil(Math.log(maxLen19) / Math.LN2);\n \
  \ const maxLen21 = Math.ceil(Math.log(maxLen20) / Math.LN2);\n  const maxLen22 =\
  \ Math.ceil(Math.log(maxLen21) / Math.LN2);\n  const maxLen23 = Math.ceil(Math.log(maxLen22)\
  \ / Math.LN2);\n  const maxLen24 = Math.ceil(Math.log(maxLen23) / Math.LN2);\n \
  \ const maxLen25 = Math.ceil(Math.log(maxLen24) / Math.LN2);\n  const maxLen26 =\
  \ Math.ceil(Math.log(maxLen25) / Math.LN2);\n  const maxLen27 = Math.ceil(Math.log(maxLen26)\
  \ / Math.LN2);\n  const maxLen28 = Math.ceil(Math.log(maxLen27) / Math.LN2);\n \
  \ const maxLen29 = Math.ceil(Math.log(maxLen28) / Math.LN2);"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const max = Math.max(...ones);\n  const min = Math.min(...ones);\n\
  \  const mid = Math.floor(len / 2);\n  const half = Math.floor(len / 2);\n  const\
  \ left = arr.slice(0, mid);\n  const right = arr.slice(mid, len);\n  return sort_array(left).concat(left,\
  \ sort_array(right).concat(right, sort_array(left).concat(left, sort_array(right).concat(right,\
  \ sort_array(left).concat(left, sort_array(right).concat(right, sort_array(left).concat(left,\
  \ sort_array(right).concat(right, sort_array(left).concat(left, sort_array(right).concat(right,\
  \ sort_array(left).concat(left, sort_array(right).concat(right, sort_array(left).concat(left,\
  \ sort_array(right).concat(right, sort_array(left).concat(left, sort_array(right).concat(right,\
  \ sort_array(left).concat(left, sort_array(right).concat(right, sort_array(left).concat(left,\
  \ sort_array(right).concat(right, sort_array(left).concat(left, sort_array(right).concat(right,\
  \ sort_array(left).concat(left, sort_array(right).concat(right, sort_array(left).concat(left,\
  \ sort_array(right).concat(right, sort_array(left).concat(left, sort_array(right).concat(right,\
  \ sort_array(left).concat(left, sort_array(right).concat(right, sort_array(left).concat(left,\
  \ sort_array(right).concat(right, sort_array(left).concat(left, sort_array(right).concat(right,\
  \ sort_array(left).concat(left, sort_array(right).concat(right, sort_array(left).concat(left,\
  \ sort_array(right).concat(right, sort_array(left).concat(left, sort_array(right).concat(right,\
  \ sort_array(left).concat(left, sort_array(right).concat(right, sort_array(left).concat(left,\
  \ sort_array(right).concat(right, sort_array(left).concat(left, sort_array(right).concat(right,\
  \ sort_array(left).concat(left, sort_array(right).concat(right, sort_array(left).concat(left,\
  \ sort_array(right).concat(right, sort_array(left).concat(left, sort_array(right).concat(right,\
  \ sort_array(left).concat(left, sort_array(right).concat(right, sort_array(left).concat(left,\
  \ sort_array(right).concat(right, sort_array(left).concat(left, sort_array(right).concat(right,\
  \ sort_array(left).concat(left, sort_array(right).concat(right, sort_array(left).concat(left,\
  \ sort_array(right).concat(right, sort_array(left).concat(left, sort_array(right).concat(right,\
  \ sort_array(left).concat(left, sort_array(right).concat(right, sort_array(left).concat(left,\
  \ sort_array(right).concat(right, sort_array(left).concat(left, sort_array(right).concat(right,\
  \ sort_array("
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x)\
  \ => Math.log2(x)));\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.min(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max("
- "  return arr.sort((a, b) => {\n    if (a === 0) return 1\n    if (b === 0) return\
  \ -1\n    return a > b ? 1 : -1\n  })\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((x) => x === 1 ? 1 : 0);\n  const maxOnes = Math.max(...ones);\n  const\
  \ maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnesIndex.toString(2);\n\
  \  const maxOnesBinLen = maxOnesBin.length;\n  const maxOnesBinLenLen = maxOnesBinLen\
  \ + 1;\n  const maxOnesBinStr = Array(maxOnesBinLenLen).fill('0').join('');\n  const\
  \ maxOnesBinStrLen = maxOnesBinStr.length;\n  const maxOnesBinStrArr = Array(maxOnesBinStrLen).fill('0').join('').split('');\n\
  \  const maxOnesBinStrArrLen = maxOnesBinStrArr.length;\n  const maxOnesBinStrArrIndex\
  \ = new Array(maxOnesBinStrArrLen).fill(0).map(() => 0);\n  for (let i = 0; i <\
  \ maxOnesBinStrArrLen; i++) {\n    maxOnesBinStrArrIndex[i] = maxOnesBinStrArr[i].length\
  \ - 1;\n  }\n  for (let i = 0; i < len; i++) {\n    const onesIndex = maxOnesIndex\
  \ - ones[i];\n    maxOnesBinStrArr[maxOnesBinStrArrIndex[onesIndex]] = maxOnesBinStrArr[maxOnesBinStrArrIndex[onesIndex]]\
  \ === '0' ? '1' : '0';\n    maxOnesBinStrArrIndex[onesIndex] = maxOnesBinStrArrIndex[onesIndex]\
  \ + 1;\n  }\n  const maxOnesBinStrArr = maxOnesBinStrArr.map((x) => parseInt(x,\
  \ 2));\n  const maxOnesBinStrArrLen = maxOnesBinStrArr.length;\n  const maxOnesBinStrArrIndex\
  \ = new Array(maxOnesBinStrArrLen).fill(0).map(() => 0);\n  for (let i = 0; i <\
  \ maxOnesBinStrArrLen; i++) {\n    maxOnesBinStrArrIndex[i] = maxOnesBinStrArr[i].length\
  \ - 1;\n  }\n  const maxOnesBinStrArrIndexLen = maxOnesBinStrArrIndex.length;\n\
  \  const maxOnesBinStrArrIndexMax = maxOnesBinStrArrIndex[maxOnesBinStrArrIndexLen\
  \ - 1];\n  const maxOnesBinStrArrIndexMin = maxOnesBinStrArrIndex[0];\n  const maxOnesBinStrArrIndexMaxIndex\
  \ = maxOnesBinStrArrIndex.indexOf(maxOnesBinStrArrIndex"
- "  return arr.sort((a, b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n\
  \    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 &&\
  \ b === 0) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return\
  \ 0;\n    }\n    if (a === 0 && b === -1) {\n      return 1;\n    }\n    if (a ===\
  \ -1 && b === 0) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n \
  \     return 0;\n    }\n    if (a === 0 && b === 1) {\n      return -1;\n    }\n\
  \    if (a === 1 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b ===\
  \ 1) {\n      return 0;\n    }\n    if (a === -1 && b === -1) {\n      return -1;\n\
  \    }\n    if (a === 0 && b === -1) {\n      return 1;\n    }\n    if (a === 1\
  \ && b === 1) {\n      return 0;\n    }\n    if (a === -1 && b === -1) {\n     \
  \ return -1;\n    }\n    if (a === -1 && b === 1) {\n      return 0;\n    }\n  \
  \  if (a === 0 && b === 1) {\n      return -1;\n    }\n    if (a === 1 && b ===\
  \ -1) {\n      return 1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n\
  \    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a === -1\
  \ && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n     \
  \ return 0;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if\
  \ (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 1 && b === -1) {\n\
  \      return -1;\n    }\n    if (a === -1 && b === -1) {\n      return 1;\n   \
  \ }\n    if (a === -1 && b === 1) {\n      return 0;\n    }\n    if (a === 0 &&\
  \ b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n      return\
  \ 1;\n    }\n    if (a === -1 && b === 1) {\n      return 0;\n    }\n    if (a ===\
  \ 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === 1) {\n     \
  \ return 0;\n    }\n    if (a === 1 && b === -1) {\n      return -1;\n    }\n  \
  \  if (a === -1 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b ===\
  \ 1) {\n      return 0;\n    }\n    if (a === 0 && b === -1) {\n      return -1;\n\
  \    }\n    if (a === -1 && b === -1) {\n      return 1;\n    }\n    if (a === -1\
  \ && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b === 1) {\n      return\
  \ 1;\n"
- "  return arr.sort((a, b) => {\n    if (a === 0) return 1;\n    if (b === 0) return\
  \ -1;\n    return count_ones(a) - count_ones(b);\n  });\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x)\
  \ => Math.log2(x)));\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.min(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max("
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((x) => x === 1);\n  const dec = ones\n    .map((x) => Math.log2(x))\n\
  \    .sort((a, b) => a - b)\n    .map((x) => Math.pow(2, x));\n  const dec = dec.map((x)\
  \ => Math.round(x));\n  const dec = dec.map((x) => Math.max(0, x));\n  const dec\
  \ = dec.map((x) => Math.min(x, len - 1));\n  const dec = dec.map((x) => arr[x]);\n\
  \  return dec;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n\
  \  const maxDec = Math.pow(10, maxOnes);\n  const maxDecStr = maxDec.toString();\n\
  \  const decStr = maxDec.toFixed(maxOnes);\n  const decLen = decStr.length;\n  const\
  \ decLenStr = decLen.toString();\n  const decLenStrLen = decLenStr.length;\n  const\
  \ decLenStrLenLen = decLenStr.length;\n  const decLenStrLenLen2 = decLenStrLen +\
  \ decLenStrLen;\n  const decLenStrLen3 = decLenStrLen + decLenStrLen + decLenStrLen;\n\
  \  const decLenStrLen4 = decLenStrLen + decLenStrLen + decLenStrLen + decLenStrLen;\n\
  \  const decLenStrLen5 = decLenStrLen + decLenStrLen + decLenStrLen + decLenStrLen\
  \ + decLenStrLen + decLenStrLen;\n  const decLenStrLen6 = decLenStrLen + decLenStrLen\
  \ + decLenStrLen + decLenStrLen + decLenStrLen + decLenStrLen + decLenStrLen;\n\
  \  const decLenStrLen7 = decLenStrLen + decLenStrLen + decLenStrLen + decLenStrLen\
  \ + decLenStrLen + decLenStrLen + decLenStrLen + decLenStrLen + decLenStrLen;\n\
  \  const decLenStrLen8 = decLenStrLen + decLenStrLen + decLenStrLen + decLenStrLen\
  \ + decLenStrLen + decLenStrLen + decLenStrLen + decLenStrLen + decLenStrLen + decLenStrLen;\n\
  \  const decLenStrLen9 = decLenStrLen + decLenStrLen + decLenStrLen + decLenStrLen\
  \ + decLenStrLen + decLenStrLen + decLenStrLen + decLenStrLen + decLenStrLen + decLenStrLen\
  \ + decLenStrLen;\n  const decLenStrLen10 = decLenStrLen + decLenStrLen + decLenStrLen\
  \ + decLenStrLen + decLenStrLen + decLenStrLen + decLenStrLen + decLenStrLen + decLenStrLen\
  \ + decLenStrLen + decLenStrLen + decLenStrLen"
- "  return arr.sort((a, b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n\
  \    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 &&\
  \ b === 0) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return\
  \ 0;\n    }\n    if (a === -1 && b === -1) {\n      return 1;\n    }\n    if (a\
  \ === -1 && b === 1) {\n      return -1;\n    }\n    if (a === -1 && b === 0) {\n\
  \      return 0;\n    }\n    if (a === 1 && b === -1) {\n      return -1;\n    }\n\
  \    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === -1 && b ===\
  \ -1) {\n      return 0;\n    }\n    if (a === -1 && b === 1) {\n      return 1;\n\
  \    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a === 0\
  \ && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === -1) {\n      return\
  \ 0;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a ===\
  \ -1 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n  \
  \    return 0;\n    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n\
  \    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b ===\
  \ -1) {\n      return 0;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n\
  \    }\n    if (a === -1 && b === -1) {\n      return 1;\n    }\n    if (a === -1\
  \ && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b === -1) {\n      return\
  \ -1;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a ===\
  \ 1 && b === -1) {\n      return 0;\n    }\n    if (a === 1 && b === 1) {\n    \
  \  return 0;\n    }\n    if (a === -1 && b === -1) {\n      return 1;\n    }\n \
  \   if (a === -1 && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b ===\
  \ -1) {\n      return -1;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n\
  \    }\n    if (a === 1 && b === -1) {\n      return 0;\n    }\n    if (a === 1\
  \ && b === 1) {\n      return 0;\n    }\n    if (a === -1 && b === -1) {\n     \
  \ return 1;\n    }\n    if (a === -1 && b === 1) {\n      return 0;\n    }\n   \
  \ if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a === 0 && b ===\
  \ 1) {\n      return 1;\n    }\n    if (a === 1 && b === -1) {\n      return 0;\n\
  \    }\n    if ("
- "  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((val) => val === 1);\n  const len = ones.length;\n  if (len === 0)\
  \ {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen\
  \ = Math.max(...arr.map((val) => val.length));\n  const maxLenLen = Math.max(...arr.map((val)\
  \ => val.length * 2));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length\
  \ * 4));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 8));\n\
  \  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 16));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 32));\n  const maxLenLenLenLen\
  \ = Math.max(...arr.map((val) => val.length * 64));\n  const maxLenLenLenLen = Math.max(...arr.map((val)\
  \ => val.length * 128));\n  const maxLenLenLenLen = Math.max(...arr.map((val) =>\
  \ val.length * 256));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length\
  \ * 512));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length *\
  \ 1024));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 2048));\n\
  \  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 4096));\n \
  \ const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 8192));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 16384));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 32768));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 65536));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 131072));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 262144));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 524288));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 1048576));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 2097152));\n  const\
  \ maxLenLenLenLen = Math.max(...arr.map((val) => "
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const sorted = new Array(len);\n  for (let i = 0; i < len;\
  \ i++) {\n    sorted[i] = i;\n  }\n  sorted.sort((a, b) => {\n    const aBits =\
  \ a.toString(2);\n    const bBits = b.toString(2);\n    return aBits.localeCompare(bBits);\n\
  \  });\n  return arr.map((i) => sorted[i]);\n}\n"
- "  return arr.sort((a, b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n\
  \    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 &&\
  \ b === 0) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return\
  \ 0;\n    }\n    if (a === 0 && b === -1) {\n      return 1;\n    }\n    if (a ===\
  \ -1 && b === 0) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n \
  \     return 0;\n    }\n    if (a === 0 && b === 1) {\n      return -1;\n    }\n\
  \    if (a === -1 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b ===\
  \ -1) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n      return\
  \ 1;\n    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a\
  \ === -1 && b === -1) {\n      return 1;\n    }\n    if (a === 1 && b === 1) {\n\
  \      return -1;\n    }\n    if (a === -1 && b === 1) {\n      return 1;\n    }\n\
  \    if (a === 1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b\
  \ === -1) {\n      return 1;\n    }\n    if (a === 0 && b === 1) {\n      return\
  \ 1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a ===\
  \ -1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === 1) {\n \
  \     return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n\
  \    if (a === 1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b\
  \ === -1) {\n      return -1;\n    }\n    if (a === -1 && b === 1) {\n      return\
  \ 1;\n    }\n    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if (a\
  \ === 1 && b === 1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n\
  \      return -1;\n    }\n    if (a === 1 && b === -1) {\n      return -1;\n   \
  \ }\n    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if (a === 0 &&\
  \ b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === -1) {\n      return\
  \ -1;\n    }\n    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if (a\
  \ === -1 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === 1) {\n\
  \      return 1;\n    }\n    if (a === 1 && b === -1) {\n      return -1;\n    }\n\
  \    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b\
  \ === 1) {\n      return "
- '  return arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);

  }

  '
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return\
  \ arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(a\
  \ => a.length));\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const\
  \ onesCount = ones[i];\n    const len = arr[i].length;\n    for (let j = 0; j <\
  \ len; j++) {\n      if (arr[i][j] === maxOnes) {\n        result.push(arr[i]);\n\
  \      }\n    }\n  }\n  return result;\n}\n"
- "  return arr.sort((a, b) => {\n    if (a === 0) return 1\n    if (b === 0) return\
  \ -1\n    return a > b ? 1 : -1\n  })\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return\
  \ arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...len);\n\
  \  const onesArr = new Array(maxOnes);\n  for (let i = 0; i < maxOnes; i++) {\n\
  \    onesArr[i] = 0;\n  }\n  for (let i = 0; i < len; i++) {\n    onesArr[ones[i]]\
  \ += 1;\n  }\n  const sortedArr = new Array(maxLen);\n  for (let i = 0; i < maxLen;\
  \ i++) {\n    sortedArr[i] = 0;\n  }\n  for (let i = 0; i < len; i++) {\n    sortedArr[onesArr[arr[i]]++]\
  \ = arr[i];\n  }\n  return sortedArr;\n}\n"
- "  return arr.sort((a, b) => a - b);\n}\n"
- "  return arr.sort((a, b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n\
  \    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 &&\
  \ b === 0) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return\
  \ 0;\n    }\n    if (a === -1 && b === -1) {\n      return 1;\n    }\n    if (a\
  \ === -1 && b === 1) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n\
  \      return 0;\n    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n\
  \    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b ===\
  \ -1) {\n      return 1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n\
  \    }\n    if (a === -1 && b === 1) {\n      return -1;\n    }\n    if (a === -1\
  \ && b === -1) {\n      return 0;\n    }\n    if (a === 0 && b === 1) {\n      return\
  \ 1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a ===\
  \ -1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === 1) {\n \
  \     return -1;\n    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n\
  \    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b ===\
  \ 1) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n      return -1;\n\
  \    }\n    if (a === -1 && b === 1) {\n      return -1;\n    }\n    if (a === 0\
  \ && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === -1) {\n      return\
  \ -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a ===\
  \ -1 && b === -1) {\n      return 0;\n    }\n    if (a === -1 && b === 1) {\n  \
  \    return 1;\n    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n\
  \    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b ===\
  \ -1) {\n      return 1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n\
  \    }\n    if (a === -1 && b === -1) {\n      return 0;\n    }\n    if (a === -1\
  \ && b === 1) {\n      return -1;\n    }\n    if (a === 0 && b === 1) {\n      return\
  \ 1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a ===\
  \ -1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === 1) {\n \
  \     return -1;\n    }\n    if (a === 0 && b === -1) {\n      return -1;\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOne = ones[len - 1];\n  const maxOneIndex = arr.indexOf(maxOne);\n\
  \  const maxOneBin = bin(maxOne);\n  const maxOneBinIndex = arr.indexOf(maxOneBin);\n\
  \  const maxOneBinReverse = reverse(maxOneBin);\n  const maxOneBinReverseIndex =\
  \ arr.indexOf(maxOneBinReverse);\n  const maxOneBinReverseReverse = reverse(maxOneBinReverse);\n\
  \  const maxOneBinReverseReverseIndex = arr.indexOf(maxOneBinReverseReverse);\n\
  \  const maxOneBinReverseReverseReverse = reverse(maxOneBinReverseReverse);\n  const\
  \ maxOneBinReverseReverseReverseIndex = arr.indexOf(maxOneBinReverseReverseReverse);\n\
  \  const maxOneBinReverseReverseReverseReverse = reverse(maxOneBinReverseReverseReverse);\n\
  \  const maxOneBinReverseReverseReverseReverseIndex = arr.indexOf(maxOneBinReverseReverseReverseReverse);\n\
  \  const maxOneBinReverseReverseReverseReverse = reverse(maxOneBinReverseReverseReverse);\n\
  \  const maxOneBinReverseReverseReverseReverseIndex = arr.indexOf(maxOneBinReverseReverseReverseReverse);\n\
  \  const maxOneBinReverseReverseReverseReverse = reverse(maxOneBinReverseReverseReverseReverse);\n\
  \  const maxOneBinReverseReverseReverseReverseIndex = arr.indexOf(maxOneBinReverseReverseReverseReverseReverse);\n\
  \  const maxOneBinReverseReverseReverseReverse = reverse(maxOneBinReverseReverseReverseReverse);\n\
  \  const maxOneBinReverseReverseReverseReverseIndex = arr.indexOf(maxOneBinReverseReverseReverseReverse);\n\
  \  const maxOneBinReverseReverseReverse = reverse(maxOneBinReverseReverseReverse);\n\
  \  const maxOneBinReverseReverseReverseReverseIndex = arr.indexOf(maxOneBinReverseReverseReverseReverse);\n\
  \  const maxOneBinReverseReverseReverseReverse = reverse(maxOneBinReverseReverseReverseReverse);\n\
  \  const maxOneBinReverseReverseReverseReverseIndex = arr.indexOf(maxOneBinReverseReverseReverseReverseReverse);\n\
  \  const maxOneBinReverseReverseReverseReverse = reverse(maxOneBinReverseReverseReverseReverse);\n\
  \  const maxOneBinReverseReverseReverseReverseIndex = arr.indexOf(maxOneBinReverseReverseReverseReverse);\n\
  \  const maxOneBinReverseReverseReverseReverse = reverse(maxOneBinReverseReverseReverseReverse);\n\
  \  const maxOneBinReverseReverseReverseReverseIndex = arr.indexOf(maxOneBinReverseReverseReverseReverseReverse);\n\
  \  const maxOneBinReverseReverseReverseReverse = reverse(maxOneBinReverseReverseReverseReverse);\n\
  \  const maxOneBinReverseReverseReverse"
- "  arr.sort((a, b) => a - b);\n  return arr;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter(v => v === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(v\
  \ => Math.pow(2, v)));\n  const maxLen = Math.max(maxLen, maxOnes);\n  const maxLen\
  \ = Math.max(maxLen, len);\n  const maxLen = Math.max(maxLen, 2);\n  const maxLen\
  \ = Math.max(maxLen, Math.ceil(Math.log(maxLen) / Math.LN2));\n  const maxLen =\
  \ Math.max(maxLen, Math.ceil(Math.log(len) / Math.LN2));\n  const maxLen = Math.max(maxLen,\
  \ Math.ceil(Math.log(len) / Math.LN2));\n  const maxLen = Math.max(maxLen, Math.ceil(Math.log(len)\
  \ / Math.LN2));\n  const maxLen = Math.max(maxLen, Math.ceil(Math.log(len) / Math.LN2));\n\
  \  const maxLen = Math.max(maxLen, Math.ceil(Math.log(len) / Math.LN2));\n  const\
  \ maxLen = Math.max(maxLen, Math.ceil(Math.log(len) / Math.LN2));\n  const maxLen\
  \ = Math.max(maxLen, Math.ceil(Math.log(len) / Math.LN2));\n  const maxLen = Math.max(maxLen,\
  \ Math.ceil(Math.log(len) / Math.LN2));\n  const maxLen = Math.max(maxLen, Math.ceil(Math.log(len)\
  \ / Math.LN2));\n  const maxLen = Math.max(maxLen, Math.ceil(Math.log(len) / Math.LN2));\n\
  \  const maxLen = Math.max(maxLen, Math.ceil(Math.log(len) / Math.LN2));\n  const\
  \ maxLen = Math.max(maxLen, Math.ceil(Math.log(len) / Math.LN2));\n  const maxLen\
  \ = Math.max(maxLen, Math.ceil(Math.log(len) / Math.LN2));\n  const maxLen = Math.max(maxLen,\
  \ Math.ceil(Math.log(len) / Math.LN2));\n  const maxLen = Math.max(maxLen, Math.ceil(Math.log(len)\
  \ / Math.LN2));\n  const maxLen = Math.max(maxLen, Math.ceil(Math.log(len) / Math.LN2));\n\
  \  const maxLen = Math.max(maxLen, Math.ceil(Math.log(len) / Math.LN2));\n  const\
  \ maxLen = Math.max(maxLen, Math.ceil(Math.log(len) / Math.LN2));\n  const maxLen\
  \ = Math.max(maxLen, Math.ceil(Math.log(len) / Math.LN2));\n  const maxLen = Math.max(maxLen,\
  \ Math.ceil(Math.log(len) / Math.LN2));\n  const maxLen = Math.max(maxLen, Math.ceil(Math.log(len)\
  \ / Math.LN2));\n  const maxLen = Math.max(maxLen, Math.ceil(Math.log(len) / Math."
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const maxOnes = Math.max(...ones);\n  const maxOnesIndex\
  \ = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnesIndex.toString(2);\n  const\
  \ maxOnesBinLen = maxOnesBin.length;\n  const maxOnesBinLenLen = maxOnesBinLen +\
  \ 1;\n  const maxOnesBinLenStr = Array(maxOnesBinLenLen).fill('0').join('');\n \
  \ const maxOnesBinStr = maxOnesBinLen + maxOnesBin;\n  const maxOnesBinStrLen =\
  \ maxOnesBinStr.length;\n  const maxOnesBinStrLenLen = maxOnesBinStrLen + 1;\n \
  \ const maxOnesBinStrStr = Array(maxOnesBinStrLenLen).fill('0').join('');\n  const\
  \ maxOnesBinStrArr = [maxOnesBinStr];\n  const maxOnesBinStrArrLen = maxOnesBinStrArr.length;\n\
  \  const maxOnesBinStrArrLenLen = maxOnesBinStrArrLen + 1;\n  const maxOnesBinStrArrStr\
  \ = Array(maxOnesBinStrArrLenLen).fill('0').join('');\n  const maxOnesBinStrArrArr\
  \ = [maxOnesBinStrArr];\n  const maxOnesBinStrArrArrLen = maxOnesBinStrArrArr.length;\n\
  \  const maxOnesBinStrArrArrLen = maxOnesBinStrArrArrLen + 1;\n  const maxOnesBinStrArrArrStr\
  \ = Array(maxOnesBinStrArrArrLenLen).fill('0').join('');\n  const maxOnesBinStrArrArrArr\
  \ = [maxOnesBinStrArrArr];\n  const maxOnesBinStrArrArrArrLen = maxOnesBinStrArrArrArr.length;\n\
  \  const maxOnesBinStrArrArrArrLen = maxOnesBinStrArrArrArrLen + 1;\n  const maxOnesBinStrArrArrArrStr\
  \ = Array(maxOnesBinStrArrArrArrLenLen).fill('0').join('');\n  const maxOnesBinStrArrArrArrArr\
  \ = [maxOnesBinStrArrArrArr];\n  const maxOnesBinStrArrArrArrArrLen = maxOnesBinStrArrArrArrArr.length;\n\
  \  const maxOnesBinStrArrArrArrArrLen = maxOnesBinStrArrArrArrArrLen + "
- "  return arr.sort((a, b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n\
  \    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 &&\
  \ b === 0) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return\
  \ 0;\n    }\n    return a > b ? 1 : -1;\n  });\n}\n"
- '  return arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);

  }

  '
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len\
  \ === 1) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc +\
  \ val, 0);\n  const maxOnes = Math.pow(2, Math.ceil(Math.log(ones) / Math.LN2));\n\
  \  const maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes) / Math.LN10));\n  const\
  \ maxDecStr = maxDec.toString();\n  const decStr = maxDecStr.split('');\n  const\
  \ decArr = decStr.map(n => parseInt(n, 10));\n  const decArrSorted = decArr.sort((a,\
  \ b) => a - b);\n  const decArrSortedStr = decArrSorted.map(n => n.toString(10));\n\
  \  const decArrSortedStrLen = decArrSortedStr.length;\n  const decArrSortedStrLenStr\
  \ = decArrSortedStrLen.toString();\n  const decArrSortedStrLenArr = decArrSortedStrLenStr.split('');\n\
  \  const decArrSortedStrLenArrSorted = decArrSortedStrLenArr.sort((a, b) => a -\
  \ b);\n  const decArrSortedStrLenArrSortedStr = decArrSortedStrLenArrSorted.map(n\
  \ => n.toString(10));\n  const decArrSortedStrLenArrSortedStrLen = decArrSortedStrLenArrSortedStr.length;\n\
  \  const decArrSortedStrLenArrSortedStrLenStr = decArrSortedStrLenArrSortedStrLen.toString();\n\
  \  const decArrSortedStrLenArrSortedStrLenArr = decArrSortedStrLenArrSortedStrLenArr.map(n\
  \ => parseInt(n, 10));\n  const decArrSortedStrLenArrSortedStrLenArrSorted = decArrSortedStrLenArrSortedStrLenArr.sort((a,\
  \ b) => a - b);\n  const decArrSortedStrLenArrSortedStrLenArrSortedStr = decArrSortedStrLenArrSortedStrLenArrSortedStr.map(n\
  \ => n.toString(10));\n  const decArrSortedStrLenArrSortedStrLenArrSortedStrLen\
  \ = decArrSortedStrLenArrSortedStrLenArrSortedStrLenArr.sort((a, b) => a - b);\n\
  \  const decArrSortedStrLenArrSortedStrLenArrSortedStrLenStr = decArrSortedStrLenArrSortedStrLenArrSortedStrLenArrSortedStrLen.toString();\n\
  \  const decArrSortedStrLenArrSortedStrLenArrSortedStrLenArr = decArrSortedStrLenArrSortedStrLenArrSortedStrLenArrSortedStrLenArr.map(n\
  \ => parseInt(n, 10));\n  const decArrSortedStrLenArrSortedStrLenArrSortedStrLenArrSorted\
  \ = decArrSorted"
- '  return arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);

  }

  '
- "  return arr.sort((a, b) => {\n    if (a === 0) return 1\n    if (b === 0) return\
  \ -1\n    const aBin = a.toString(2)\n    const bBin = b.toString(2)\n    const\
  \ aLen = aBin.length\n    const bLen = bBin.length\n    if (aLen > bLen) return\
  \ 1\n    if (aLen < bLen) return -1\n    let i = 0\n    while (aLen > 0 && i < aLen)\
  \ {\n      const aChar = aBin[i]\n      const bChar = bBin[i]\n      if (aChar !==\
  \ bChar) {\n        if (aChar === '1') return -1\n        if (aChar === '0') return\
  \ 1\n        return aChar < bChar ? -1 : 1\n      }\n      i++\n    }\n    return\
  \ aLen < bLen ? -1 : 1\n  })\n}\n"
- "  return arr.sort((a, b) => {\n    const ones = count_ones(b);\n    const zeros\
  \ = count_zeros(a);\n    return ones - zeros;\n  });\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n\
  \  const maxOnesLen = Math.ceil(Math.pow(maxOnes, 2));\n  const maxOnesLenLen =\
  \ Math.ceil(Math.pow(maxOnesLen, 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLen,\
  \ 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n \
  \ const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen\
  \ = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen,\
  \ 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n \
  \ const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen\
  \ = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen,\
  \ 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n \
  \ const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen\
  \ = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen,\
  \ 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n \
  \ const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen\
  \ = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen,\
  \ 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n \
  \ const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen\
  \ = Math.ceil(Math.pow(maxOnesLenLenLen, 2));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(maxOnesLenLenLen,\
  \ 2));\n  const maxOnesLen"
- "  return arr.sort((a, b) => {\n    const aBits = count_bits(a);\n    const bBits\
  \ = count_bits(b);\n    if (aBits < bBits) {\n      return -1;\n    }\n    if (aBits\
  \ > bBits) {\n      return 1;\n    }\n    return count_ones(a) - count_ones(b);\n\
  \  });\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x > 0);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const max = Math.max(...ones);\n  const min = Math.min(...ones);\n\
  \  const maxDecimal = max % Math.pow(10, len);\n  const minDecimal = min % Math.pow(10,\
  \ len);\n  const maxDecimalStr = maxDecimal.toString();\n  const minDecimalStr =\
  \ minDecimal.toString();\n  const maxDecimalArr = maxDecimalStr.split('');\n  const\
  \ minDecimalArr = minDecimalStr.split('');\n  const maxDecimalArrLen = maxDecimalArr.length;\n\
  \  const minDecimalArrLen = minDecimalArr.length;\n  const maxDecimalArrLenMinusOne\
  \ = maxDecimalArrLen - 1;\n  const minDecimalArrLenMinusOne = minDecimalArrLen -\
  \ 1;\n  const maxDecimalArrLenMinusOneMinusOne = maxDecimalArrLen - 2;\n  const\
  \ minDecimalArrLenMinusOneMinusOne = minDecimalArrLen - 2;\n  const maxDecimalArrLenMinusOneMinusOneMinusOne\
  \ = maxDecimalArrLen - 3;\n  const minDecimalArrLenMinusOneMinusOneMinusOne = minDecimalArrLen\
  \ - 3;\n  const maxDecimalArrLenMinusOneMinusOneMinusOneMinusOne = maxDecimalArrLen\
  \ - 4;\n  const minDecimalArrLenMinusOneMinusOneMinusOneMinusOne = minDecimalArrLen\
  \ - 4;\n  const maxDecimalArrLenMinusOneMinusOneMinusOneMinusOneMinusOne = maxDecimalArrLen\
  \ - 5;\n  const minDecimalArrLenMinusOneMinusOneMinusOneMinusOneMinusOne = minDecimalArrLen\
  \ - 5;\n  const maxDecimalArrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
  \ = maxDecimalArrLen - 6;\n  const minDecimalArrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
  \ = minDecimalArrLen - 6;\n  const maxDecimalArrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
  \ = maxDecimalArrLen - 7;\n  const minDecimalArrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
  \ = minDecimalArrLen - 7;\n  const maxDecimalArrLenMinusOneMinusOneMinusOneMinusOneMinus"
- "  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((v) => v === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log2(len));\n  const maxOnesLen\
  \ = Math.ceil(Math.pow(2, maxOnes));\n  const maxOnesLenLen = Math.ceil(Math.pow(2,\
  \ maxOnesLen));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(2, maxOnesLenLen));\n\
  \  const maxOnesLenLenLen = Math.ceil(Math.pow(2, maxOnesLenLenLen));\n  const maxOnesLenLenLen\
  \ = Math.ceil(Math.pow(2, maxOnesLenLenLen));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(2,\
  \ maxOnesLenLenLen));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(2, maxOnesLenLenLen));\n\
  \  const maxOnesLenLenLen = Math.ceil(Math.pow(2, maxOnesLenLenLen));\n  const maxOnesLenLenLen\
  \ = Math.ceil(Math.pow(2, maxOnesLenLenLen));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(2,\
  \ maxOnesLenLenLen));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(2, maxOnesLenLenLen));\n\
  \  const maxOnesLenLenLen = Math.ceil(Math.pow(2, maxOnesLenLenLen));\n  const maxOnesLenLenLen\
  \ = Math.ceil(Math.pow(2, maxOnesLenLenLen));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(2,\
  \ maxOnesLenLenLen));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(2, maxOnesLenLenLen));\n\
  \  const maxOnesLenLenLen = Math.ceil(Math.pow(2, maxOnesLenLenLen));\n  const maxOnesLenLenLen\
  \ = Math.ceil(Math.pow(2, maxOnesLenLenLen));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(2,\
  \ maxOnesLenLenLen));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(2, maxOnesLenLenLen));\n\
  \  const maxOnesLenLenLen = Math.ceil(Math.pow(2, maxOnesLenLenLen));\n  const maxOnesLenLenLen\
  \ = Math.ceil(Math.pow(2, maxOnesLenLenLen));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(2,\
  \ maxOnesLenLenLen));\n  const maxOnesLenLenLen = Math.ceil(Math.pow(2, maxOnesLenLenLen));\n\
  \  const maxOnesLenLenLen"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr\n    .map((x) => parseInt(x.toString(2), 2))\n    .sort((a, b) => a - b);\n\
  \  const zeros = arr.filter((x) => parseInt(x.toString(2), 2) === 0);\n  const len\
  \ = ones.length;\n  if (len < 2) {\n    return arr;\n  }\n  const onesLen = ones.length;\n\
  \  const zerosLen = zeros.length;\n  const maxLen = Math.max(onesLen, zerosLen);\n\
  \  const onesArr = new Array(maxLen);\n  const zerosArr = new Array(maxLen);\n \
  \ for (let i = 0; i < maxLen; i++) {\n    onesArr[i] = ones[i];\n    zerosArr[i]\
  \ = zeros[i];\n  }\n  return onesArr.concat(zerosArr);\n}\n"
- "  arr.sort((a, b) => {\n    if (a === 0) return 1\n    if (b === 0) return -1\n\
  \    return a > b ? 1 : -1\n  })\n  return arr\n}\n"
- "  return arr.sort((a, b) => {\n    const aBits = count_bits(a);\n    const bBits\
  \ = count_bits(b);\n    if (aBits === bBits) {\n      return a - b;\n    }\n   \
  \ return aBits - bBits;\n  });\n}\n"
- '  return arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);

  }

  '
- "  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n"
- "  return arr.sort((a, b) => {\n    if (a === 0) return 1;\n    if (b === 0) return\
  \ -1;\n    return a > b ? 1 : -1;\n  });\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter(x => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOne = ones[len - 1];\n  const maxOneIndex = arr.indexOf(maxOne);\n\
  \  const minOne = ones[0];\n  const minOneIndex = arr.indexOf(minOne);\n  const\
  \ maxOneBits = maxOneIndex * Math.pow(2, len) - 1;\n  const minOneBits = minOneIndex\
  \ * Math.pow(2, len) - 1;\n  const maxOneDecimal = maxOne / Math.pow(2, len);\n\
  \  const minOneDecimal = minOne / Math.pow(2, len);\n  const maxOneDecimalBits =\
  \ maxOneDecimal * Math.pow(2, len) - 1;\n  const minOneDecimalBits = minOneDecimal\
  \ * Math.pow(2, len) - 1;\n  const maxOneDecimalBitsIndex = arr.indexOf(maxOneDecimalBits);\n\
  \  const minOneDecimalBitsIndex = arr.indexOf(minOneDecimalBits);\n  const maxOneDecimalBitsBits\
  \ = maxOneDecimalBitsIndex * Math.pow(2, len) - 1;\n  const minOneDecimalBitsBits\
  \ = minOneDecimalBitsIndex * Math.pow(2, len) - 1;\n  const maxOneDecimalBitsBitsIndex\
  \ = arr.indexOf(maxOneDecimalBitsBits);\n  const minOneDecimalBitsBitsIndex = arr.indexOf(minOneDecimalBitsBits);\n\
  \  const maxOneDecimalBitsBitsBits = maxOneDecimalBitsBitsIndex * Math.pow(2, len)\
  \ - 1;\n  const minOneDecimalBitsBitsIndex = arr.indexOf(maxOneDecimalBitsBitsBits);\n\
  \  const minOneDecimalBitsBitsBitsIndex = arr.indexOf(minOneDecimalBitsBitsBits);\n\
  \  const maxOneDecimalBitsBitsBitsBitsIndex = arr.indexOf(maxOneDecimalBitsBitsBitsBitsIndex);\n\
  \  const minOneDecimalBitsBitsBitsIndex = arr.indexOf(minOneDecimalBitsBitsBitsIndex);\n\
  \  const maxOneDecimalBitsBitsBitsBitsIndex = arr.indexOf(maxOneDecimalBitsBitsBitsBitsIndex);\n\
  \  const minOneDecimalBitsBitsIndex = arr.indexOf(minOneDecimalBitsBitsIndex);\n\
  \  const maxOneDecimalBitsIndex = arr.indexOf(maxOneDecimalBitsIndex);\n  const\
  \ minOneDecimalBitsIndex = arr.indexOf(minOneDecimalBitsIndex);\n  const maxOneDecimalIndex\
  \ = arr.indexOf(maxOneDecimal);\n  const minOneDecimalIndex = arr.indexOf(minOneDecimal);\n\
  \  const maxOneDecimal"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len\
  \ === 1) {\n    return arr;\n  }\n  const ones = arr.filter(x => x === 1);\n  if\
  \ (ones.length === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n\
  \  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnesIndex.toString(2);\n\
  \  const maxOnesBinLen = maxOnesBin.length;\n  const maxOnesBinLenLen = maxOnesBinLen\
  \ + 1;\n  const maxOnesBinNum = parseInt(maxOnesBin.substr(0, maxOnesBinLenLen),\
  \ 2);\n  const maxOnesBinNumLen = maxOnesBinNum.toString().length;\n  const maxOnesBinNumLenLen\
  \ = maxOnesBinNumLen + 1;\n  const maxOnesBinNumNum = parseInt(maxOnesBin.substr(maxOnesBinNumLenLen),\
  \ 2);\n  const maxOnesBinNumNumLen = maxOnesBinNumNum.toString().length;\n  const\
  \ maxOnesBinNumNumLenLen = maxOnesBinNumNumLen + 1;\n  const maxOnesBinNumNumNum\
  \ = parseInt(maxOnesBin.substr(maxOnesBinNumNumNumLenLen), 2);\n  const maxOnesBinNumNumNumLen\
  \ = maxOnesBinNumNumNum.toString().length;\n  const maxOnesBinNumNumNumLenLen =\
  \ maxOnesBinNumNumNumLen + 1;\n  const maxOnesBinNumNumNumNum = parseInt(maxOnesBin.substr(maxOnesBinNumNumNumNumLenLen),\
  \ 2);\n  const maxOnesBinNumNumNumNumLen = maxOnesBinNumNumNumNum.toString().length;\n\
  \  const maxOnesBinNumNumNumNumLenLen = maxOnesBinNumNumNumNumLen + 1;\n  const\
  \ maxOnesBinNumNumNumNumNum = parseInt(maxOnesBin.substr(maxOnesBinNumNumNumNumNumLenLenLen),\
  \ 2);\n  const maxOnesBinNumNumNumNumLenLen = maxOnesBinNumNumNumNumNum.toString().length;\n\
  \  const maxOnesBinNumNumNumNumLenLen = maxOnesBinNumNumNumNumNumLen + 1;\n  const\
  \ maxOnesBinNumNumNumNumNum = parseInt(maxOnesBin.substr(maxOnesBinNumNumNumNumNumNumLenLenLen),\
  \ 2);\n  const maxOnesBinNumNumNumNumLenLen = "
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((v) => v.toString(2).split('').reduce((p, c) => p + +c, 0));\n  const\
  \ maxOnes = Math.max(...ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n\
  \  const decimals = Math.pow(10, maxOnesIndex + 1);\n  const decimalsArr = arr.map((v)\
  \ => v.toString(10).split('').reduce((p, c) => p + +c, 0));\n  const decimalsMax\
  \ = Math.max(...decimalsArr);\n  const decimalsMaxIndex = decimalsArr.indexOf(decimalsMax);\n\
  \  const decimalsDiff = decimalsMax - decimalsMaxIndex;\n  const decimalsDiffArr\
  \ = decimalsArr.map((v) => v - decimalsMaxIndex);\n  const decimalsDiffMax = Math.max(...decimalsDiffArr);\n\
  \  const decimalsDiffMaxIndex = decimalsDiffArr.indexOf(decimalsDiffMax);\n  const\
  \ decimalsDiffMaxIndex = Math.max(...decimalsDiffArr);\n  const decimalsDiffMaxIndex\
  \ = Math.max(...decimalsDiffArr);\n  const decimalsDiffMaxIndex = Math.max(...decimalsDiffArr);\n\
  \  const decimalsDiffMaxIndex = Math.max(...decimalsDiffArr);\n  const decimalsDiffMaxIndex\
  \ = Math.max(...decimalsDiffArr);\n  const decimalsDiffMaxIndex = Math.max(...decimalsDiffArr);\n\
  \  const decimalsDiffMaxIndex = Math.max(...decimalsDiffArr);\n  const decimalsDiffMaxIndex\
  \ = Math.max(...decimalsDiffArr);\n  const decimalsDiffMaxIndex = Math.max(...decimalsDiffArr);\n\
  \  const decimalsDiffMaxIndex = Math.max(...decimalsDiffArr);\n  const decimalsDiffMaxIndex\
  \ = Math.max(...decimalsDiffArr);\n  const decimalsDiffMaxIndex = Math.max(...decimalsDiffArr);\n\
  \  const decimalsDiffMaxIndex = Math.max(...decimalsDiffArr);\n  const decimalsDiffMaxIndex\
  \ = Math.max(...decimalsDiffArr);\n  const decimalsDiffMaxIndex = Math.max(...decimalsDiffArr);\n\
  \  const decimalsDiffMaxIndex = Math.max(...decimalsDiffArr);\n  const decimalsDiffMaxIndex\
  \ = Math.max(...decimalsDiffArr);\n  const decimalsDiffMaxIndex = Math.max(...decimalsDiffArr);\n\
  \  const decimalsDiffMaxIndex = Math.max(...decimalsDiffArr);\n  const decimalsDiffMaxIndex\
  \ = Math.max(...decimalsDiffArr);\n  const decimalsDiffMaxIndex = Math.max(...decimalsDiffArr);"
- "  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n   \
  \ if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr\n    .map((x) => parseInt(x.toString(2), 2))\n    .filter((x) => x > 0);\n\
  \  const dec = ones\n    .map((x) => x.toString(10))\n    .map((x) => x.split('').reverse().join(''))\n\
  \    .map((x) => parseInt(x, 10))\n    .map((x) => x * -1)\n    .sort((a, b) =>\
  \ a - b)\n    .map((x) => x * -1);\n  const dec = dec.map((x) => parseInt(x, 10));\n\
  \  const dec = dec.map((x) => x * -1);\n  const dec = dec.map((x) => x * -1);\n\
  \  const dec = dec.map((x) => x * -1);\n  const dec = dec.map((x) => x * -1);\n\
  \  const dec = dec.map((x) => x * -1);\n  const dec = dec.map((x) => x * -1);\n\
  \  const dec = dec.map((x) => x * -1);\n  const dec = dec.map((x) => x * -1);\n\
  \  const dec = dec.map((x) => x * -1);\n  const dec = dec.map((x) => x * -1);\n\
  \  const dec = dec.map((x) => x * -1);\n  const dec = dec.map((x) => x * -1);\n\
  \  const dec = dec.map((x) => x * -1);\n  const dec = dec.map((x) => x * -1);\n\
  \  const dec = dec.map((x) => x * -1);\n  const dec = dec.map((x) => x * -1);\n\
  \  const dec = dec.map((x) => x * -1);\n  const dec = dec.map((x) => x * -1);\n\
  \  const dec = dec.map((x) => x * -1);\n  const dec = dec.map((x) => x * -1);\n\
  \  const dec = dec.map((x) => x * -1);\n  const dec = dec.map((x) => x * -1);\n\
  \  const dec = dec.map((x) => x * -1);\n  const dec = dec.map((x) => x * -1);\n\
  \  const dec = dec.map((x) => x * -1);\n  const dec = dec.map((x) => x * -1);\n\
  \  const dec = dec.map((x) => x * -1);\n  const dec = dec.map((x) => x * -1);\n\
  \  const dec = dec.map((x) => x * -1);\n  const dec = dec.map((x) => x * -1);\n\
  \  const dec = dec.map((x) => x * -1);\n  const dec = dec.map((x) => x * -1);\n\
  \  const dec = dec.map((x) => x * -1);\n  const de"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((x) => x > 0 ? 1 : 0);\n  const maxOnes = Math.max(...ones);\n  const\
  \ maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnesIndex.toString(2);\n\
  \  const maxOnesBinLen = maxOnesBin.length;\n  const maxOnesBinLenLen = maxOnesBinLen\
  \ + 1;\n  const maxOnesBinStr = Array(maxOnesBinLenLen).fill('0').join('');\n  const\
  \ maxOnesBinStrLen = maxOnesBinStr.length;\n  const maxOnesBinStrArr = [...maxOnesBinStr];\n\
  \  const maxOnesBinStrArrLen = maxOnesBinStrArr.length;\n  const maxOnesBinStrArr2\
  \ = [];\n  for (let i = 0; i < maxOnesBinStrLenLen; i++) {\n    maxOnesBinStrArr2[i]\
  \ = maxOnesBinStrArr[i].split('').map((x) => parseInt(x, 2));\n  }\n  const maxOnesBinStrArrLen2\
  \ = maxOnesBinStrArr2.length;\n  const maxOnesBinStrArr3 = [];\n  for (let i = 0;\
  \ i < maxOnesBinStrArrLen2; i++) {\n    maxOnesBinStrArr3[i] = maxOnesBinStrArr2[i].map((x)\
  \ => Math.max(...x));\n  }\n  const maxOnesBinStrArrLen3 = maxOnesBinStrArr3.length;\n\
  \  const maxOnesBinStrArr4 = maxOnesBinStrArr3.map((x) => x.join(''));\n  const\
  \ maxOnesBinStrArrLen4 = maxOnesBinStrArr4.length;\n  const maxOnesBinStrArr5 =\
  \ maxOnesBinStrArr4.map((x) => parseInt(x, 2));\n  const maxOnesBinStrArrLen5 =\
  \ maxOnesBinStrArr5.length;\n  const maxOnesBinStrArr6 = maxOnesBinStrArr5.map((x)\
  \ => Math.max(...x));\n  const maxOnesBinStrArrLen6 = maxOnesBinStrArr6.length;\n\
  \  const maxOnesBinStrArr7 = maxOnesBinStrArr6.map((x) => Math.max(...x));\n  const\
  \ maxOnesBinStrArrLen7 = maxOnesBinStrArr7.length;\n  const maxOnesBinStrArr8 =\
  \ maxOnesBinStrArr7.map((x) => Math.max(...x));\n  const maxOnesBinStrArrLen8 =\
  \ maxOnesBinStrArr8.length;\n  const max"
- '  return arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);

  }

  '
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((item) => item === 1);\n  const len = ones.length;\n  if (len ===\
  \ 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen\
  \ = Math.max(...arr.map((item) => item.toString(2)));\n  const maxLenStr = maxLen.toString(2);\n\
  \  const maxLenArr = Array.from(maxLenStr.split(''));\n  const maxLenArrLen = maxLenArr.length;\n\
  \  const maxLenArrStr = '' + maxLenArr.join('');\n  const maxLenArrArrStr = '' +\
  \ maxLenArr.map((item) => item.toString(2)).join('');\n  const maxLenArrArrStrArr\
  \ = maxLenArrArrStr.split('');\n  const maxLenArrArrStrArrLen = maxLenArrArrStrArr.length;\n\
  \  const maxLenArrArrStrArrStr = '' + maxLenArrArrStrArr.join('');\n  const maxLenArrArrStrArrStrArr\
  \ = maxLenArrArrStrArrStr.split('');\n  const maxLenArrArrStrArrStrArrLen = maxLenArrArrStrArrStrArr.length;\n\
  \  const maxLenArrArrStrArrStrArrStr = '' + maxLenArrArrStrArrStrArr.join('');\n\
  \  const maxLenArrArrStrArrStrArrStrArr = maxLenArrArrStrArrStrArrStr.split('');\n\
  \  const maxLenArrArrStrArrStrArrStrArrLen = maxLenArrArrStrArrStrArrStrArrStr.split('').length;\n\
  \  const maxLenArrArrStrArrStrArrStrArrStr = '' + maxLenArrArrStrArrStrArrStrArrStr.split('');\n\
  \  const maxLenArrArrStrArrStrArrStrArrStrArr = maxLenArrArrStrArrStrArrStrArrStr.split('').map((item)\
  \ => item.split(''));\n  const maxLenArrArrStrArrStrArrStrArrStrArrLen = maxLenArrArrStrArrStrArrStrArrStrArrStrArr.length;\n\
  \  const maxLenArrArrStrArrStrArrStrArrStrArrStr = '' + maxLenArrArrStrArrStrArrStrArrStrArrStrArr.join('');\n\
  \  const maxLenArrArrStrArrStrArrStrArrStrArrStrArr = maxLenArrArrStrArrStrArrStrArrStrArrStr.split('').map((item)\
  \ => item.split(''));\n  const maxLenArrArrStrArrStrArrStrArrStrArrStrArrLen = maxLenArrArrStrArrStrArrStrArrStrArrStrArr"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((val) => val === 1);\n  const decs = arr.filter((val) => val > 0);\n\
  \  const decLen = decs.length;\n  const decOnes = decs.filter((val) => val === 1);\n\
  \  const decOnesLen = decOnes.length;\n  if (decLen === 0 && decOnesLen === 0) {\n\
  \    return ones;\n  }\n  if (decLen === 0) {\n    return decOnes;\n  }\n  if (decOnesLen\
  \ === 0) {\n    return decs;\n  }\n  if (decLen < decOnesLen) {\n    return decs;\n\
  \  }\n  return ones;\n}\n"
- "  arr.sort((a, b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n    }\n\
  \    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b ===\
  \ 0) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n\
  \    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a === -1\
  \ && b === 0) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n     \
  \ return 0;\n    }\n    if (a === -1 && b === 1) {\n      return -1;\n    }\n  \
  \  if (b === -1 && a === 1) {\n      return 1;\n    }\n    if (b === 1 && a ===\
  \ -1) {\n      return -1;\n    }\n    if (b === -1 && a === 0) {\n      return 1;\n\
  \    }\n    if (b === 1 && a === 1) {\n      return 0;\n    }\n    if (a === 0 &&\
  \ b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n      return\
  \ 1;\n    }\n    if (a === -1 && b === 1) {\n      return 0;\n    }\n    if (b ===\
  \ -1 && a === 0) {\n      return -1;\n    }\n    if (b === 1 && a === 0) {\n   \
  \   return 1;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n  \
  \  if (a === 1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b ===\
  \ -1) {\n      return 0;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n\
  \    }\n    if (a === -1 && b === 1) {\n      return -1;\n    }\n    if (b === -1\
  \ && a === -1) {\n      return 1;\n    }\n    if (b === 1 && a === 1) {\n      return\
  \ 0;\n    }\n    if (b === 1 && a === 0) {\n      return -1;\n    }\n    if (b ===\
  \ -1 && a === 0) {\n      return 1;\n    }\n    if (b === -1 && a === -1) {\n  \
  \    return 0;\n    }\n    if (b === -1 && a === 1) {\n      return 1;\n    }\n\
  \  });\n  return arr;\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  if (ones.length === 0) {\n    return arr;\n \
  \ }\n  const len = ones.length;\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n\
  \  const maxLen = Math.max(len, maxOnes);\n  const maxLen2 = Math.ceil(Math.log(maxLen)\
  \ / Math.LN2);\n  const maxLen3 = Math.ceil(Math.log(maxLen2) / Math.LN2);\n  const\
  \ maxLen4 = Math.ceil(Math.log(maxLen3) / Math.LN2);\n  const maxLen5 = Math.ceil(Math.log(maxLen4)\
  \ / Math.LN2);\n  const maxLen6 = Math.ceil(Math.log(maxLen5) / Math.LN2);\n  const\
  \ maxLen7 = Math.ceil(Math.log(maxLen6) / Math.LN2);\n  const maxLen8 = Math.ceil(Math.log(maxLen7)\
  \ / Math.LN2);\n  const maxLen9 = Math.ceil(Math.log(maxLen8) / Math.LN2);\n  const\
  \ maxLen10 = Math.ceil(Math.log(maxLen9) / Math.LN2);\n  const maxLen11 = Math.ceil(Math.log(maxLen10)\
  \ / Math.LN2);\n  const maxLen12 = Math.ceil(Math.log(maxLen11) / Math.LN2);\n \
  \ const maxLen13 = Math.ceil(Math.log(maxLen12) / Math.LN2);\n  const maxLen14 =\
  \ Math.ceil(Math.log(maxLen13) / Math.LN2);\n  const maxLen15 = Math.ceil(Math.log(maxLen14)\
  \ / Math.LN2);\n  const maxLen16 = Math.ceil(Math.log(maxLen15) / Math.LN2);\n \
  \ const maxLen17 = Math.ceil(Math.log(maxLen16) / Math.LN2);\n  const maxLen18 =\
  \ Math.ceil(Math.log(maxLen17) / Math.LN2);\n  const maxLen19 = Math.ceil(Math.log(maxLen18)\
  \ / Math.LN2);\n  const maxLen20 = Math.ceil(Math.log(maxLen19) / Math.LN2);\n \
  \ const maxLen21 = Math.ceil(Math.log(maxLen20) / Math.LN2);\n  const maxLen22 =\
  \ Math.ceil(Math.log(maxLen21) / Math.LN2);\n  const maxLen23 = Math.ceil(Math.log(maxLen22)\
  \ / Math.LN2);\n  const maxLen24 = Math.ceil(Math.log(maxLen23) / Math.LN2);\n \
  \ const maxLen25 = Math.ceil(Math.log(maxLen24) / Math.LN2);\n  const maxLen26 =\
  \ Math.ceil(Math.log(maxLen25) / Math.LN2);\n  const maxLen27 = Math.ceil(Math.log(maxLen26)\
  \ / Math.LN2);\n  const maxLen28 = Math.ceil(Math.log(maxLen27) / Math.LN2);\n \
  \ const maxLen29 = Math.ceil(Math.log(maxLen28) / Math."
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr\n    .map((val) => val.toString(2).split('').reduce((acc, val) => acc +\
  \ +val, 0))\n    .sort((a, b) => a - b);\n  const decs = arr\n    .map((val) =>\
  \ val.toString(10).split('').reduce((acc, val) => acc + +val, 0))\n    .sort((a,\
  \ b) => a - b);\n  return [...ones, ...decs];\n}\n"
- "  arr.sort((a, b) => {\n    const aBin = bin(a);\n    const bBin = bin(b);\n  \
  \  const aLen = aBin.length;\n    const bLen = bBin.length;\n    if (aLen > bLen)\
  \ {\n      return 1;\n    }\n    if (aLen < bLen) {\n      return -1;\n    }\n \
  \   const aOnes = aBin.substr(aLen - 1);\n    const bOnes = bBin.substr(bLen - 1);\n\
  \    return aOnes.localeCompare(bOnes);\n  });\n  return arr;\n}\n"
- '  return arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);

  }

  '
- "  return arr.sort((a, b) => {\n    const aNum = count_ones(a);\n    const bNum\
  \ = count_ones(b);\n    if (aNum === bNum) {\n      return a.localeCompare(b);\n\
  \    }\n    return aNum - bNum;\n  });\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((val) => val === 1);\n  const dec = ones.length / len;\n  const dec\
  \ = Math.max(Math.ceil(dec), 1);\n  const dec = Math.pow(10, dec);\n  const sorted\
  \ = arr.map((val) => {\n    const bin = val.toString(2);\n    const len = bin.length;\n\
  \    const ones = bin.filter((val) => val === '1');\n    const onesLen = ones.length;\n\
  \    const onesDec = onesLen / len;\n    const onesDec = Math.max(Math.ceil(onesDec),\
  \ 1);\n    const onesDec = Math.pow(10, onesDec);\n    const onesDec = Math.ceil(onesDec\
  \ * dec) / dec;\n    return onesDec;\n  });\n  sorted.sort((a, b) => a - b);\n \
  \ return sorted.map((val) => val.toFixed(dec));\n}\n"
- "  return arr.sort((a, b) => {\n    const ones = Math.log2(a) + Math.log2(b);\n\
  \    if (ones < 0) return -1;\n    if (ones > 0) return 1;\n    return a - b;\n\
  \  });\n}\n"
- "  return arr.sort((a, b) => {\n    const ones = count_ones(b);\n    if (ones ===\
  \ 0) {\n      return 0;\n    }\n    const decA = count_ones(a);\n    const decB\
  \ = count_ones(b);\n    if (decA === decB) {\n      return decA - decB;\n    }\n\
  \    return decA - decB || decB - decA;\n  });\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes = Math.pow(2, Math.ceil(Math.log(ones)\
  \ / Math.LN2));\n  const maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes) / Math.LN10));\n\
  \  const decs = arr.reduce((acc, val) => acc + Math.pow(10, Math.ceil(Math.log(val)\
  \ / Math.LN10)), 0);\n  const decLen = Math.ceil(Math.log(decs) / Math.LN10);\n\
  \  const decs = decs.toString(decLen);\n  const decArr = decs.split('');\n  const\
  \ decArrLen = decArr.length;\n  const decArrSort = decArr.sort();\n  const decArrSortLen\
  \ = decArrSort.length;\n  const decArrSortDec = decArrSort.map((val) => parseInt(val,\
  \ 10));\n  const decArrSortDecLen = decArrSortDec.length;\n  const decArrSortDecArr\
  \ = decArrSortDec.map((val) => parseInt(val, decLen));\n  const decArrSortDecArrLen\
  \ = decArrSortDecArr.length;\n  const decArrSortDecArrSort = decArrSortDecArr.sort();\n\
  \  const decArrSortDecArrSortLen = decArrSortDecArrSort.length;\n  const decArrSortDecArrSortDec\
  \ = decArrSortDecArrSort.map((val) => parseInt(val, decLen));\n  const decArrSortDecArrSortDecLen\
  \ = decArrSortDecArrSortDec.length;\n  const decArrSortDecArrSortDecArr = decArrSortDecArrSortDec.map((val)\
  \ => parseInt(val, decLen));\n  const decArrSortDecArrSortDecArrLen = decArrSortDecArrSortDecArr.length;\n\
  \  const decArrSortDecArrSortDecArrSort = decArrSortDecArrSortDecArr.sort();\n \
  \ const decArrSortDecArrSortDecArrSortLen = decArrSortDecArrSortDecArrSort.length;\n\
  \  const decArrSortDecArrSortDecArrSortDec = decArrSortDecArrSortDecArrSort.map((val)\
  \ => parseInt(val, decLen));\n  const decArrSortDecArrSortDecArrSortDecLen = decArrSortDecArrSortDecArrSortDec.length;\n\
  \  const decArrSortDecArrSortDecArrSortDecArr = decArrSortDecArrSortDecArrSortDec.map((val)\
  \ => parseInt(val, decLen));\n  const decArrSortDecArrSortDecArrSort"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((val) => val === 1);\n  const len = ones.length;\n  if (len === 0)\
  \ {\n    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log2(len));\n  const\
  \ maxDec = Math.pow(10, maxOnes);\n  const decs = ones\n    .map((val) => val.toString(10))\n\
  \    .map((val) => parseInt(val, 10));\n  const decLen = decs.length;\n  const decMax\
  \ = Math.ceil(Math.log2(decLen));\n  const decMaxDec = Math.pow(10, decMax);\n \
  \ const decMaxDecsLen = decMaxDec * decLen;\n  const decMaxDecsLenLen = Math.ceil(Math.log2(decMaxDecsLen));\n\
  \  const decMaxDecsLenLenLen = Math.ceil(Math.log2(decMaxDecsLenLen));\n  const\
  \ decMaxDecsLenLenLenLen = Math.ceil(Math.log2(decMaxDecsLenLenLen));\n  const decMaxDecsLenLenLenLenLen\
  \ = Math.ceil(Math.log2(decMaxDecsLenLenLenLen));\n  const decMaxDecsLenLenLenLenLen\
  \ = Math.ceil(Math.log2(decMaxDecsLenLenLenLen));\n  const decMaxDecsLenLenLenLenLen\
  \ = Math.ceil(Math.log2(decMaxDecsLenLenLenLenLen));\n  const decMaxDecsLenLenLenLenLenLen\
  \ = Math.ceil(Math.log2(decMaxDecsLenLenLenLenLenLen));\n  const decMaxDecsLenLenLenLenLenLen\
  \ = Math.ceil(Math.log2(decMaxDecsLenLenLenLenLenLen));\n  const decMaxDecsLenLenLenLenLenLen\
  \ = Math.ceil(Math.log2(decMaxDecsLenLenLenLenLenLen));\n  const decMaxDecsLenLenLenLenLenLen\
  \ = Math.ceil(Math.log2(decMaxDecsLenLenLenLenLenLen));\n  const decMaxDecsLenLenLenLenLenLen\
  \ = Math.ceil(Math.log2(decMaxDecsLenLenLenLenLenLenLen));\n  const decMaxDecsLenLenLenLenLenLen\
  \ = Math.ceil(Math.log2(decMaxDecsLenLenLenLenLenLenLen));\n  const decMaxDecsLenLenLenLenLenLen\
  \ = Math.ceil(Math.log2(decMaxDecsLenLenLenLenLenLenLen));\n  const decMaxDecsLenLenLenLenLenLen\
  \ = Math.ceil(Math.log2(decMaxDecsLenLenLenLenLenLenLen));\n  const decMaxDecsLenLen"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len\
  \ === 1) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc +\
  \ (val === 1 ? 1 : 0), 0);\n  const len = Math.ceil(Math.log2(ones));\n  const sorted\
  \ = new Array(len);\n  for (let i = 0; i < len; i++) {\n    sorted[i] = 0;\n  }\n\
  \  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < len; j++) {\n      if\
  \ (arr[j] & sorted[i]) {\n        sorted[i] = arr[j];\n        break;\n      }\n\
  \    }\n  }\n  return sorted;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const maxOnes = Math.max(...ones);\n  const maxOnesIndex\
  \ = ones.indexOf(maxOnes);\n  const maxOnesBin = bin(maxOnes);\n  const maxOnesBinIndex\
  \ = maxOnesBin.indexOf(1);\n  const maxOnesBinIndex = maxOnesBinIndex === -1 ? maxOnesBin.length\
  \ - 1 : maxOnesBinIndex;\n  const maxOnesBinIndex = maxOnesBinIndex === 0 ? maxOnesBin.length\
  \ - 1 : maxOnesBinIndex;\n  const maxOnesBinIndex = maxOnesBinIndex === maxOnesBin.length\
  \ - 1 ? maxOnesBin.length - 2 : maxOnesBinIndex;\n  const maxOnesBinIndex = maxOnesBinIndex\
  \ === maxOnesBin.length - 2 ? maxOnesBin.length - 3 : maxOnesBinIndex;\n  const\
  \ maxOnesBinIndex = maxOnesBinIndex === maxOnesBin.length - 3 ? maxOnesBin.length\
  \ - 4 : maxOnesBinIndex;\n  const maxOnesBinIndex = maxOnesBinIndex === maxOnesBin.length\
  \ - 4 ? maxOnesBin.length - 5 : maxOnesBinIndex;\n  const maxOnesBinIndex = maxOnesBinIndex\
  \ === maxOnesBin.length - 5 ? maxOnesBin.length - 6 : maxOnesBinIndex;\n  const\
  \ maxOnesBinIndex = maxOnesBinIndex === maxOnesBin.length - 6 ? maxOnesBin.length\
  \ - 7 : maxOnesBinIndex;\n  const maxOnesBinIndex = maxOnesBinIndex === maxOnesBin.length\
  \ - 7 ? maxOnesBin.length - 8 : maxOnesBinIndex;\n  const maxOnesBinIndex = maxOnesBinIndex\
  \ === maxOnesBin.length - 8 ? maxOnesBin.length - 9 : maxOnesBinIndex;\n  const\
  \ maxOnesBinIndex = maxOnesBinIndex === maxOnesBin.length - 9 ? maxOnesBin.length\
  \ - 10 : maxOnesBinIndex;\n  const maxOnesBinIndex = maxOnesBinIndex === maxOnesBin.length\
  \ - 10 ? maxOnesBin.length - 11 : maxOnesBinIndex;\n  const maxOnesBinIndex = maxOnesBinIndex\
  \ === maxOnesBin.length - 11 ? maxOnesBin.length - 12 : maxOnesBinIndex;\n  const\
  \ maxOnesBinIndex = maxOnesBinIndex === maxOnesBin.length - 12 ? maxOnesBin.length\
  \ - 13 : maxOnesBinIndex;\n  const maxOnesBinIndex = maxOnes"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len\
  \ === 1) {\n    return arr;\n  }\n  if (arr[0] === 0 && arr[1] === 1) {\n    return\
  \ arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const tens\
  \ = arr.reduce((acc, val) => acc + val * 10, 0);\n  const tensDigits = Math.floor(tens\
  \ / 10);\n  const tensRemainder = tens % 10;\n  const onesDigits = Math.floor(ones\
  \ / 10);\n  const onesRemainder = ones % 10;\n  if (onesRemainder === 0) {\n   \
  \ return arr.sort((a, b) => a - b);\n  }\n  if (tensRemainder === 0) {\n    return\
  \ arr.sort((a, b) => a - b);\n  }\n  if (onesRemainder > tensRemainder) {\n    return\
  \ arr.sort((a, b) => a - b);\n  }\n  if (onesRemainder < tensRemainder) {\n    return\
  \ arr.sort((a, b) => a - b);\n  }\n  if (tensDigits === onesDigits) {\n    return\
  \ arr.sort((a, b) => a - b);\n  }\n  return arr.sort((a, b) => a - b);\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x)\
  \ => Math.log2(x)));\n  const maxLen = Math.max(maxLen, len);\n  const onesArr =\
  \ new Array(maxLen);\n  for (let i = 0; i < maxLen; i++) {\n    onesArr[i] = 0;\n\
  \  }\n  for (let i = 0; i < len; i++) {\n    onesArr[Math.log2(ones[i])]++;\n  }\n\
  \  const sortedArr = new Array(len);\n  for (let i = 0; i < len; i++) {\n    sortedArr[i]\
  \ = arr[onesArr[i]];\n  }\n  return sortedArr;\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((val) => val === 1);\n  if (ones.length === 0) {\n    return arr;\n\
  \  }\n  const dec = ones[ones.length - 1];\n  const dec = Math.pow(10, Math.ceil(Math.log10(dec)));\n\
  \  const dec = Math.ceil(dec * Math.pow(10, Math.ceil(Math.log10(dec))));\n  const\
  \ dec = Math.ceil(dec * Math.pow(10, Math.ceil(Math.log10(dec))));\n  const dec\
  \ = Math.ceil(dec * Math.pow(10, Math.ceil(Math.log10(dec))));\n  const dec = Math.ceil(dec\
  \ * Math.pow(10, Math.ceil(Math.log10(dec))));\n  const dec = Math.ceil(dec * Math.pow(10,\
  \ Math.ceil(Math.log10(dec))));\n  const dec = Math.ceil(dec * Math.pow(10, Math.ceil(Math.log10(dec))));\n\
  \  const dec = Math.ceil(dec * Math.pow(10, Math.ceil(Math.log10(dec))));\n  const\
  \ dec = Math.ceil(dec * Math.pow(10, Math.ceil(Math.log10(dec))));\n  const dec\
  \ = Math.ceil(dec * Math.pow(10, Math.ceil(Math.log10(dec))));\n  const dec = Math.ceil(dec\
  \ * Math.pow(10, Math.ceil(Math.log10(dec))));\n  const dec = Math.ceil(dec * Math.pow(10,\
  \ Math.ceil(Math.log10(dec))));\n  const dec = Math.ceil(dec * Math.pow(10, Math.ceil(Math.log10(dec))));\n\
  \  const dec = Math.ceil(dec * Math.pow(10, Math.ceil(Math.log10(dec))));\n  const\
  \ dec = Math.ceil(dec * Math.pow(10, Math.ceil(Math.log10(dec))));\n  const dec\
  \ = Math.ceil(dec * Math.pow(10, Math.ceil(Math.log10(dec))));\n  const dec = Math.ceil(dec\
  \ * Math.pow(10, Math.ceil(Math.log10(dec))));\n  const dec = Math.ceil(dec * Math.pow(10,\
  \ Math.ceil(Math.log10(dec))));\n  const dec = Math.ceil(dec * Math.pow(10, Math.ceil(Math.log10(dec))));\n\
  \  const dec = Math.ceil(dec * Math.pow(10, Math.ceil(Math.log10(dec))));\n  const\
  \ dec = Math.ceil(dec * Math.pow(10, Math.ceil(Math.log10(dec))));\n  const dec\
  \ = Math.ceil(dec * Math.pow(10, Math.ceil(Math.log10(dec))));\n  const dec = Math.ceil(dec\
  \ * Math.pow(10, Math.ceil(Math.log10(dec))));\n  const dec = Math.ceil(dec * Math.pow(10,\
  \ Math.ceil(Math.log10(dec))));\n  const dec = Math.ceil(dec * Math.pow(10, Math.ceil(Math."
- "  arr.sort((a, b) => {\n    const aStr = a.toString(2);\n    const bStr = b.toString(2);\n\
  \    const aLen = aStr.length;\n    const bLen = bStr.length;\n    if (aLen < bLen)\
  \ {\n      return 1;\n    }\n    if (aLen > bLen) {\n      return -1;\n    }\n \
  \   if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n \
  \   }\n    return 0;\n  });\n  return arr;\n}\n"
- "  return arr.sort((a, b) => {\n    const ones = count_ones(b);\n    const decA\
  \ = count_ones(a);\n    const decB = count_ones(b);\n    if (decA === decB) {\n\
  \      return decA - decB;\n    }\n    return decA - decB || decB - decA;\n  });\n\
  }\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr\n    .map((val) => val.toString(2).split('')\n    .filter((val) => val ===\
  \ '1').length)\n    .sort((a, b) => a - b);\n  const decimals = arr\n    .map((val)\
  \ => val.toString(2).split('')\n    .filter((val) => val === '1').length)\n    .sort((a,\
  \ b) => a - b);\n  const decimalsLen = decimals.length;\n  const decimalsSum = decimals\n\
  \    .map((val) => val * 1)\n    .reduce((a, b) => a + b, 0);\n  const decimalsSumLen\
  \ = decimalsSum;\n  const decimalsSumArr = decimals\n    .map((val) => val * 1)\n\
  \    .reduce((a, b) => a + b, 0);\n  const decimalsSumArrLen = decimalsSumArr;\n\
  \  const decimalsSumArrLen2 = decimalsSumArrLen / 2;\n  const decimalsSumArrLen3\
  \ = decimalsSumArrLen / 3;\n  const decimalsSumArrLen4 = decimalsSumArrLen / 4;\n\
  \  const decimalsSumArrLen5 = decimalsSumArrLen / 5;\n  const decimalsSumArrLen6\
  \ = decimalsSumArrLen / 6;\n  const decimalsSumArrLen7 = decimalsSumArrLen / 7;\n\
  \  const decimalsSumArrLen8 = decimalsSumArrLen / 8;\n  const decimalsSumArrLen9\
  \ = decimalsSumArrLen / 9;\n  const decimalsSumArrLen10 = decimalsSumArrLen / 10;\n\
  \  const decimalsSumArrLen11 = decimalsSumArrLen / 11;\n  const decimalsSumArrLen12\
  \ = decimalsSumArrLen / 12;\n  const decimalsSumArrLen13 = decimalsSumArrLen / 13;\n\
  \  const decimalsSumArrLen14 = decimalsSumArrLen / 14;\n  const decimalsSumArrLen15\
  \ = decimalsSumArrLen / 15;\n  const decimalsSumArrLen16 = decimalsSumArrLen / 16;\n\
  \  const decimalsSumArrLen17 = decimalsSumArrLen / 17;\n  const decimalsSumArrLen18\
  \ = decimalsSumArrLen / 18;\n  const decimalsSumArrLen19 = decimalsSumArrLen / 19;\n\
  \  const decimalsSumArrLen20 = decimalsSumArrLen / 20;\n  const decimalsSumArrLen21\
  \ = decimalsSumArrLen / 21;\n  const decimalsSumArrLen22 = decimalsSumArrLen / 22;\n\
  \  const decimalsSumArrLen23"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((val) => val & 1);\n  if (ones.length === 0) {\n    return arr;\n  }\n\
  \  const twos = arr.map((val) => val & 2);\n  const maxOne = ones[ones.length -\
  \ 1];\n  const maxTwo = twos[twos.length - 1];\n  if (maxOne > maxTwo) {\n    return\
  \ ones;\n  }\n  return twos;\n}\n"
- "  return arr.sort((a, b) => {\n    const aNum = count_ones(a);\n    const bNum\
  \ = count_ones(b);\n    if (aNum === bNum) {\n      return a.localeCompare(b);\n\
  \    }\n    return aNum - bNum;\n  });\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((val) => val === 1);\n  const decimals = arr.filter((val) => val\
  \ > 0);\n  const decimalsLen = decimals.length;\n  if (decimalsLen === 0) {\n  \
  \  return ones;\n  }\n  const decimalsSum = decimals.reduce((acc, val) => acc +\
  \ val, 0);\n  const decimalsSumLen = decimalsSum.toString().length;\n  if (decimalsSumLen\
  \ === 1) {\n    return decimals.sort(\n      (a, b) => a.toString().localeCompare(b.toString()),\n\
  \    );\n  }\n  const decimalsSumArr = decimalsSum.toString().split('');\n  const\
  \ decimalsSumArrLen = decimalsSumArr.length;\n  const decimalsSumArr2: string[]\
  \ = [];\n  for (let i = 0; i < decimalsSumArrLen; i++) {\n    decimalsSumArr2.push(decimalsSumArr[i]);\n\
  \  }\n  const decimalsSumArr2Len = decimalsSumArr2.length;\n  const decimalsSumArr2Arr\
  \ = decimalsSumArr2.map((val) => parseInt(val));\n  const decimalsSumArr2ArrLen\
  \ = decimalsSumArr2Arr.length;\n  const decimalsSumArr2Arr2: string[] = [];\n  for\
  \ (let i = 0; i < decimalsSumArr2Len; i++) {\n    decimalsSumArr2Arr.push(decimalsSumArr2[i]);\n\
  \  }\n  const decimalsSumArr2Arr2Len = decimalsSumArr2Arr2.length;\n  const decimalsSumArr2Arr2Arr\
  \ = decimalsSumArr2Arr2.map((val) => parseInt(val));\n  const decimalsSumArr2Arr2ArrLen\
  \ = decimalsSumArr2Arr2Arr.length;\n  const decimalsSumArr2Arr2Arr2Arr = decimalsSumArr2Arr2Arr2.map((val)\
  \ => parseInt(val));\n  const decimalsSumArr2Arr2Arr2ArrLen = decimalsSumArr2Arr2Arr2Arr.length;\n\
  \  const decimalsSumArr2Arr2Arr2Arr2Arr = decimalsSumArr2Arr2Arr2Arr2Arr.map((val)\
  \ => parseInt(val));\n  const decimalsSumArr2Arr2Arr2Arr2Arr2Arr = decimalsSumArr2Arr2Arr2Arr2Arr2Arr.map((val)\
  \ => parseInt(val));\n  const decimalsSumArr2Arr2Arr2Arr2Arr2Arr2Arr = decimalsSumArr2Arr2Arr2Arr2Arr2Arr2Arr2Arr.map((val"
- "  return arr.sort((a, b) => a - b);\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n \
  \   return arr;\n  }\n  const arr = new Array(len);\n  for (let i = 0; i < len;\
  \ i++) {\n    arr[i] = arr[ones[i]];\n  }\n  arr.sort((a, b) => a - b);\n  return\
  \ arr;\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len\
  \ === 1) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len =\
  \ ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n \
  \   return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(v\
  \ => count_ones(v)));\n  const newArr = new Array(maxLen);\n  for (let i = 0; i\
  \ < maxLen; i++) {\n    let count = 0;\n    for (let j = 0; j < len; j++) {\n  \
  \    if (arr[j] === i) {\n        count++;\n      }\n    }\n    newArr[i] = count\
  \ > maxOnes ? i : newArr[i];\n  }\n  return newArr;\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter(x => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const sorted = [];\n  let i = 0;\n  while (i < len) {\n\
  \    const j = i;\n    while (j > 0 && ones[j - 1] === 1) {\n      j--;\n    }\n\
  \    sorted.push(ones[j]);\n    i = j;\n  }\n  sorted.push(...arr);\n  return sorted;\n\
  }\n"
- "  return arr.sort((a: number, b: number) => {\n    const ones = a ^ b;\n    return\
  \ ones === 0 ? a > b ? 1 : a < b ? -1 : 0;\n  });\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((val) => val === 1);\n  const decs = arr.filter((val) => val > 0);\n\
  \  const len = ones.length;\n  if (len === decs.length) {\n    return decs.sort((a,\
  \ b) => a - b);\n  }\n  const len = ones.length;\n  const maxOnes = Math.ceil(len\
  \ / 2);\n  const maxDecs = Math.ceil(len / maxOnes);\n  const decs = decs.slice(0,\
  \ maxDecs);\n  const ones = ones.slice(0, maxOnes);\n  const len = ones.length;\n\
  \  const maxOnes = Math.ceil(len / 2);\n  const maxDecs = Math.ceil(len / maxOnes);\n\
  \  const decs = decs.slice(0, maxDecs);\n  const ones = ones.slice(0, maxOnes);\n\
  \  const len = ones.length;\n  const maxOnes = Math.ceil(len / 2);\n  const maxDecs\
  \ = Math.ceil(len / maxOnes);\n  const decs = decs.slice(0, maxDecs);\n  const ones\
  \ = ones.slice(0, maxOnes);\n  const len = ones.length;\n  const maxOnes = Math.ceil(len\
  \ / 2);\n  const maxDecs = Math.ceil(len / maxOnes);\n  const decs = decs.slice(0,\
  \ maxDecs);\n  const ones = ones.slice(0, maxOnes);\n  const len = ones.length;\n\
  \  const maxOnes = Math.ceil(len / 2);\n  const maxDecs = Math.ceil(len / maxOnes);\n\
  \  const decs = decs.slice(0, maxDecs);\n  const ones = ones.slice(0, maxOnes);\n\
  \  const len = ones.length;\n  const maxOnes = Math.ceil(len / 2);\n  const maxDecs\
  \ = Math.ceil(len / maxOnes);\n  const decs = decs.slice(0, maxDecs);\n  const ones\
  \ = ones.slice(0, maxOnes);\n  const len = ones.length;\n  const maxOnes = Math.ceil(len\
  \ / 2);\n  const maxDecs = Math.ceil(len / maxOnes);\n  const decs = decs.slice(0,\
  \ maxDecs);\n  const ones = ones.slice(0, maxOnes);\n  const len = ones.length;\n\
  \  const maxOnes = Math.ceil(len / 2);\n  const maxDecs = Math.ceil(len / maxOnes);\n\
  \  const decs = decs.slice(0, maxDecs);\n  const ones = ones.slice(0, maxOnes);\n\
  \  const len = ones.length;\n  const maxOnes = Math.ceil(len / 2);\n  const maxDecs\
  \ = Math.ceil(len / maxOnes);\n  const decs = decs.slice(0, maxDecs);\n  const ones\
  \ = ones.slice(0, maxOnes);\n  const len = ones.length;\n  const maxOnes = Math.ceil(len\
  \ / 2);\n  const maxDecs = Math.ceil(len / maxOnes);"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return\
  \ arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    const aOnes\
  \ = count_ones(a);\n    const bOnes = count_ones(b);\n    if (aOnes === bOnes) {\n\
  \      return sort_number(a) - sort_number(b);\n    }\n    return aOnes - bOnes;\n\
  \  });\n  return arr;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return\
  \ arr;\n  }\n  if (len === 1) {\n    return ones;\n  }\n  const sorted = new Array(len);\n\
  \  for (let i = 0; i < len; i++) {\n    sorted[i] = arr[i];\n  }\n  sorted.sort((a,\
  \ b) => {\n    const aOnes = count_ones(a);\n    const bOnes = count_ones(b);\n\
  \    if (aOnes < bOnes) {\n      return -1;\n    }\n    if (aOnes > bOnes) {\n \
  \     return 1;\n    }\n    return a < b ? -1 : 1;\n  });\n  return sorted;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x)\
  \ => x.toString(2)));\n  const maxLenLen = Math.max(...arr.map((x) => x.length));\n\
  \  const maxLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLen\
  \ = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLen = Math.max(...arr.map((x)\
  \ => x.length));\n  const maxLenLenLenLen = Math.max(...arr.map((x) => x.length));\n\
  \  const maxLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLen\
  \ = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLen = Math.max(...arr.map((x)\
  \ => x.length));\n  const maxLenLenLenLen = Math.max(...arr.map((x) => x.length));\n\
  \  const maxLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLen\
  \ = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLen = Math.max(...arr.map((x)\
  \ => x.length));\n  const maxLenLenLenLen = Math.max(...arr.map((x) => x.length));\n\
  \  const maxLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLen\
  \ = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLen = Math.max(...arr.map((x)\
  \ => x.length));\n  const maxLenLenLenLen = Math.max(...arr.map((x) => x.length));\n\
  \  const maxLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLen\
  \ = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLen = Math.max(...arr.map((x)\
  \ => x.length));\n  const maxLenLenLenLen = Math.max(...arr.map((x) => x.length));\n\
  \  const maxLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLen\
  \ = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLen = Math.max(...arr.map((x)\
  \ => x.length));\n  const maxLenLenLenLen = Math.max(...arr.map((x) => x.length));\n\
  \  const maxLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLen"
- "  return arr.sort((a, b) => a - b);\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((val) => val === 1);\n  const dec = ones.length ? ones[0] : 0;\n\
  \  const decArr = arr.map((val) => val - dec);\n  const decArr = decArr.sort((a,\
  \ b) => a - b);\n  const decArr = decArr.map((val) => val + 1);\n  return decArr.concat(ones);\n\
  }\n"
- "  arr.sort((a, b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n    }\n\
  \    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b ===\
  \ 0) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n\
  \    }\n    if (a === -1 && b === 0) {\n      return 1;\n    }\n    if (a === -1\
  \ && b === -1) {\n      return 0;\n    }\n    if (a === -1 && b === 1) {\n     \
  \ return -1;\n    }\n    if (a === 1 && b === -1) {\n      return 1;\n    }\n  \
  \  if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b === -1)\
  \ {\n      return -1;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n \
  \   }\n  });\n  return arr;\n}\n"
- "  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n   \
  \ if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((x) => x === 1 ? 1 : 0);\n  const maxOnes = Math.max(...ones);\n  const\
  \ maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnesIndex.toString(2);\n\
  \  const maxOnesBinLen = maxOnesBin.length;\n  const maxOnesBinNum = maxOnesBinLen\
  \ - 1;\n  const maxOnesBinNumBits = Math.ceil(Math.log2(maxOnesBinNum));\n  const\
  \ maxOnesBinNumBitsBase = Math.pow(2, maxOnesBinNumBits);\n  const maxOnesBinNumBitsBase2\
  \ = maxOnesBinNumBitsBase * maxOnesBinNumBits;\n  const maxOnesBinNumBitsBase3 =\
  \ maxOnesBinNumBitsBase2 * maxOnesBinNumBitsBase;\n  const maxOnesBinNumBitsBase4\
  \ = maxOnesBinNumBitsBase3 * maxOnesBinNumBitsBase3;\n  const maxOnesBinNumBitsBase5\
  \ = maxOnesBinNumBitsBase4 * maxOnesBinNumBitsBase4;\n  const maxOnesBinNumBitsBase6\
  \ = maxOnesBinNumBitsBase5 * maxOnesBinNumBitsBase5;\n  const maxOnesBinNumBitsBase7\
  \ = maxOnesBinNumBitsBase6 * maxOnesBinNumBitsBase6;\n  const maxOnesBinNumBitsBase8\
  \ = maxOnesBinNumBitsBase7 * maxOnesBinNumBitsBase7;\n  const maxOnesBinNumBitsBase9\
  \ = maxOnesBinNumBitsBase8 * maxOnesBinNumBitsBase8;\n  const maxOnesBinNumBitsBase10\
  \ = maxOnesBinNumBitsBase9 * maxOnesBinNumBitsBase9;\n  const maxOnesBinNumBitsBase11\
  \ = maxOnesBinNumBitsBase10 * maxOnesBinNumBitsBase10;\n  const maxOnesBinNumBitsBase12\
  \ = maxOnesBinNumBitsBase11 * maxOnesBinNumBitsBase11;\n  const maxOnesBinNumBitsBase13\
  \ = maxOnesBinNumBitsBase12 * maxOnesBinNumBitsBase12;\n  const maxOnesBinNumBitsBase14\
  \ = maxOnesBinNumBitsBase13 * maxOnesBinNumBit"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((v) => v.toString(2).split('').reduce((p, c) => p + Number(c), 0));\n\
  \  const zeros = arr.map((v) => v.toString(2).split('').reduce((p, c) => p + Number(c),\
  \ 1));\n  const maxOnes = Math.max(...ones);\n  const maxZeros = Math.max(...zeros);\n\
  \  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxZerosIndex = zeros.indexOf(maxZeros);\n\
  \  const maxOnesZeros = maxOnes - maxZeros;\n  const maxOnesZeroIndex = ones.indexOf(maxOnesZeros);\n\
  \  const maxOnesZeroIndex = ones.indexOf(maxOnesZeros);\n  const maxOnesZeroIndex\
  \ = ones.indexOf(maxOnesZeros);\n  const maxOnesZeroIndex = ones.indexOf(maxOnesZeros);\n\
  \  const maxOnesZeroIndex = ones.indexOf(maxOnesZeros);\n  const maxOnesZeroIndex\
  \ = ones.indexOf(maxOnesZeros);\n  const maxOnesZeroIndex = ones.indexOf(maxOnesZeros);\n\
  \  const maxOnesZeroIndex = ones.indexOf(maxOnesZeros);\n  const maxOnesZeroIndex\
  \ = ones.indexOf(maxOnesZeros);\n  const maxOnesZeroIndex = ones.indexOf(maxOnesZeros);\n\
  \  const maxOnesZeroIndex = ones.indexOf(maxOnesZeros);\n  const maxOnesZeroIndex\
  \ = ones.indexOf(maxOnesZeros);\n  const maxOnesZeroIndex = ones.indexOf(maxOnesZeros);\n\
  \  const maxOnesZeroIndex = ones.indexOf(maxOnesZeros);\n  const maxOnesZeroIndex\
  \ = ones.indexOf(maxOnesZeros);\n  const maxOnesZeroIndex = ones.indexOf(maxOnesZeros);\n\
  \  const maxOnesZeroIndex = ones.indexOf(maxOnesZeros);\n  const maxOnesZeroIndex\
  \ = ones.indexOf(maxOnesZeros);\n  const maxOnesZeroIndex = ones.indexOf(maxOnesZeros);\n\
  \  const maxOnesZeroIndex = ones.indexOf(maxOnesZeros);\n  const maxOnesZeroIndex\
  \ = ones.indexOf(maxOnesZeros);\n  const maxOnesZeroIndex = ones.indexOf(maxOnesZeros);\n\
  \  const maxOnesZeroIndex = ones.indexOf(maxOnesZeros);\n  const maxOnesZeroIndex\
  \ = ones.indexOf(maxOnesZer"
- "  return arr.sort((a: number, b: number) => {\n    if (a === b) {\n      return\
  \ 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x > 0);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n\
  \  const maxLen = Math.max(len, maxOnes);\n  const maxLen2 = Math.ceil(Math.log(maxLen)\
  \ / Math.LN2);\n  const maxLen3 = Math.ceil(Math.log(maxLen2) / Math.LN2);\n  const\
  \ maxLen4 = Math.ceil(Math.log(maxLen3) / Math.LN2);\n  const maxLen5 = Math.ceil(Math.log(maxLen4)\
  \ / Math.LN2);\n  const maxLen6 = Math.ceil(Math.log(maxLen5) / Math.LN2);\n  const\
  \ maxLen7 = Math.ceil(Math.log(maxLen6) / Math.LN2);\n  const maxLen8 = Math.ceil(Math.log(maxLen7)\
  \ / Math.LN2);\n  const maxLen9 = Math.ceil(Math.log(maxLen8) / Math.LN2);\n  const\
  \ maxLen10 = Math.ceil(Math.log(maxLen9) / Math.LN2);\n  const maxLen11 = Math.ceil(Math.log(maxLen10)\
  \ / Math.LN2);\n  const maxLen12 = Math.ceil(Math.log(maxLen11) / Math.LN2);\n \
  \ const maxLen13 = Math.ceil(Math.log(maxLen12) / Math.LN2);\n  const maxLen14 =\
  \ Math.ceil(Math.log(maxLen13) / Math.LN2);\n  const maxLen15 = Math.ceil(Math.log(maxLen14)\
  \ / Math.LN2);\n  const maxLen16 = Math.ceil(Math.log(maxLen15) / Math.LN2);\n \
  \ const maxLen17 = Math.ceil(Math.log(maxLen16) / Math.LN2);\n  const maxLen18 =\
  \ Math.ceil(Math.log(maxLen17) / Math.LN2);\n  const maxLen19 = Math.ceil(Math.log(maxLen18)\
  \ / Math.LN2);\n  const maxLen20 = Math.ceil(Math.log(maxLen19) / Math.LN2);\n \
  \ const maxLen21 = Math.ceil(Math.log(maxLen20) / Math.LN2);\n  const maxLen22 =\
  \ Math.ceil(Math.log(maxLen21) / Math.LN2);\n  const maxLen23 = Math.ceil(Math.log(maxLen22)\
  \ / Math.LN2);\n  const maxLen24 = Math.ceil(Math.log(maxLen23) / Math.LN2);\n \
  \ const maxLen25 = Math.ceil(Math.log(maxLen24) / Math.LN2);\n  const maxLen26 =\
  \ Math.ceil(Math.log(maxLen25) / Math.LN2);\n  const maxLen27 = Math.ceil(Math.log(maxLen26)\
  \ / Math.LN2);\n  const maxLen28 = Math.ceil(Math.log(maxLen27) / Math.LN2);\n \
  \ const maxLen29 = Math.ceil(Math.log(maxLen28) / Math.LN2);"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((x) => x > 0);\n  const len = ones.length;\n  const maxOnes = Math.ceil(Math.log(len)\
  \ / Math.LN2);\n  const maxLen = Math.max(len, maxOnes);\n  const maxLen2 = Math.ceil(Math.log(maxLen)\
  \ / Math.LN2);\n  const maxLen4 = Math.ceil(Math.pow(maxLen, 4));\n  const maxLen6\
  \ = Math.ceil(Math.pow(maxLen, 6));\n  const maxLen8 = Math.ceil(Math.pow(maxLen,\
  \ 8));\n  const maxLen16 = Math.ceil(Math.pow(maxLen, 16));\n  const maxLen32 =\
  \ Math.ceil(Math.pow(maxLen, 32));\n  const maxLen64 = Math.ceil(Math.pow(maxLen,\
  \ 64));\n  const maxLen128 = Math.ceil(Math.pow(maxLen, 128));\n  const maxLen256\
  \ = Math.ceil(Math.pow(maxLen, 256));\n  const maxLen512 = Math.ceil(Math.pow(maxLen,\
  \ 512));\n  const maxLen1024 = Math.ceil(Math.pow(maxLen, 1024));\n  const maxLen4096\
  \ = Math.ceil(Math.pow(maxLen, 4096));\n  const maxLen8192 = Math.ceil(Math.pow(maxLen,\
  \ 8192));\n  const maxLen16384 = Math.ceil(Math.pow(maxLen, 16384));\n  const maxLen32768\
  \ = Math.ceil(Math.pow(maxLen, 32768));\n  const maxLen65536 = Math.ceil(Math.pow(maxLen,\
  \ 65536));\n  const maxLen131072 = Math.ceil(Math.pow(maxLen, 131072));\n  const\
  \ maxLen262144 = Math.ceil(Math.pow(maxLen, 262144));\n  const maxLen524288 = Math.ceil(Math.pow(maxLen,\
  \ 524288));\n  const maxLen1048576 = Math.ceil(Math.pow(maxLen, 1048576));\n  const\
  \ maxLen2097152 = Math.ceil(Math.pow(maxLen, 2097152));\n  const maxLen4194304 =\
  \ Math.ceil(Math.pow(maxLen, 4194304));\n  const maxLen8388608 = Math.ceil(Math.pow(maxLen,\
  \ 8388608));\n  const maxLen16777216 = Math.ceil(Math.pow(maxLen, 16777216));\n\
  \  const maxLen33554432 = Math.ceil(Math.pow(maxLen, 33554432));\n  const maxLen67108864\
  \ = Math.ceil(Math.pow(maxLen, 67108864));\n  const maxLen134217728 = Math.ceil(Math.pow(maxLen,\
  \ 134217728));\n  const maxLen268435456 = Math.ceil(Math.pow(maxLen, 2684354"
- "  return arr.sort((a: number, b: number) => {\n    if (a === 0) return 1\n    if\
  \ (b === 0) return -1\n    return a > b ? 1 : -1\n  })\n}\n"
- "  arr.sort((a, b) => {\n    const ones = count_ones(b);\n    if (ones === 0) {\n\
  \      return a.localeCompare(b);\n    }\n    return count_ones(a) - ones;\n  });\n\
  \  return arr;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr\n    .map((val) => val.toString(2).split('').reduce((prev, cur) => prev\
  \ + cur))\n    .map((val) => parseInt(val, 2))\n    .filter((val) => val > 0);\n\
  \  const decimals = arr\n    .map((val) => val.toString(2).split('').reduce((prev,\
  \ cur) => prev + cur))\n    .map((val) => parseInt(val, 10))\n    .filter((val)\
  \ => val > 0);\n  const maxDecimals = Math.max(...decimals);\n  const maxOnes =\
  \ Math.max(...ones);\n  const maxDecimalsIndex = decimals.indexOf(maxDecimals);\n\
  \  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesDecimals = ones[maxOnesIndex];\n\
  \  const maxOnesDecimalsIndex = decimals.indexOf(maxOnesDecimals);\n  const maxDecimalsOnes\
  \ = decimals[maxDecimalsIndex];\n  const maxDecimalsOnesIndex = ones.indexOf(maxDecimalsOnes);\n\
  \  const maxDecimalsOnesDecimals = ones[maxDecimalsOnesIndex];\n  const maxDecimalsOnesDecimalsIndex\
  \ = decimals.indexOf(maxDecimalsOnesDecimals);\n  const maxDecimalsOnesDecimalsIndex\
  \ = decimals.indexOf(maxDecimalsOnesDecimals);\n  const maxDecimalsOnesDecimalsIndex\
  \ = decimals.indexOf(maxDecimalsOnesDecimals);\n  const maxDecimalsOnesDecimalsIndex\
  \ = decimals.indexOf(maxDecimalsOnesDecimals);\n  const maxDecimalsOnesDecimalsIndex\
  \ = decimals.indexOf(maxDecimalsOnesDecimals);\n  const maxDecimalsOnesDecimalsIndex\
  \ = decimals.indexOf(maxDecimalsOnesDecimals);\n  const maxDecimalsOnesDecimalsIndex\
  \ = decimals.indexOf(maxDecimalsOnesDecimals);\n  const maxDecimalsOnesDecimalsIndex\
  \ = decimals.indexOf(maxDecimalsOnesDecimals);\n  const maxDecimalsOnesDecimalsIndex\
  \ = decimals.indexOf(maxDecimalsOnesDecimals);\n  const maxDecimalsOnesDecimalsIndex\
  \ = decimals.indexOf(maxDecimalsOnesDecimals);\n  const maxDecimalsOnesDecimalsIndex\
  \ = decimals.indexOf(maxDecimalsOnesDecimals);\n  const maxDecimalsOnesDecimalsIndex\
  \ = decimals.indexOf(maxDecimalsOnesDecimals);\n  const maxDecimalsOnesDecimalsIndex\
  \ = decimals.indexOf(maxDecimalsOnesDecimals);\n  const maxDecimalsOnesDecimalsIndex\
  \ = decimals.indexOf(maxDecimalsOnesDecimals);\n  const maxDecimalsOnes"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len\
  \ === 1) {\n    return arr[0];\n  }\n  const ones = arr\n    .map((val) => val.toString(2).split('').reduce((acc,\
  \ cur) => acc + cur, 0))\n    .sort((a, b) => a - b);\n  const decimals = arr\n\
  \    .map((val) => val.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n\
  \    .map((val) => parseInt(val, 2))\n    .sort((a, b) => a - b);\n  const len =\
  \ ones.length;\n  const maxDecimal = Math.max(...decimals);\n  const maxDecimalIndex\
  \ = decimals.indexOf(maxDecimal);\n  const maxDecimalOnes = ones[maxDecimalIndex];\n\
  \  const maxDecimalIndex = ones.length;\n  const maxDecimalOnesIndex = ones.length\
  \ - maxDecimalIndex;\n  const maxDecimalOnesIndex = ones.length - maxDecimalIndex;\n\
  \  const maxDecimalOnesIndex = ones.length - maxDecimalIndex;\n  const maxDecimalOnesIndex\
  \ = ones.length - maxDecimalIndex;\n  const maxDecimalOnesIndex = ones.length -\
  \ maxDecimalIndex;\n  const maxDecimalOnesIndex = ones.length - maxDecimalIndex;\n\
  \  const maxDecimalOnesIndex = ones.length - maxDecimalIndex;\n  const maxDecimalOnesIndex\
  \ = ones.length - maxDecimalIndex;\n  const maxDecimalOnesIndex = ones.length -\
  \ maxDecimalIndex;\n  const maxDecimalOnesIndex = ones.length - maxDecimalIndex;\n\
  \  const maxDecimalOnesIndex = ones.length - maxDecimalIndex;\n  const maxDecimalOnesIndex\
  \ = ones.length - maxDecimalIndex;\n  const maxDecimalOnesIndex = ones.length -\
  \ maxDecimalIndex;\n  const maxDecimalOnesIndex = ones.length - maxDecimalIndex;\n\
  \  const maxDecimalOnesIndex = ones.length - maxDecimalIndex;\n  const maxDecimalOnesIndex\
  \ = ones.length - maxDecimalIndex;\n  const maxDecimalOnesIndex = ones.length -\
  \ maxDecimalIndex;\n  const maxDecimalOnesIndex = ones.length - maxDecimalIndex;\n\
  \  const maxDecimalOnesIndex = ones.length - maxDecimalIndex;\n  const maxDecimalOnesIndex\
  \ = ones.length - maxDecimalIndex;\n  const maxDecimalOnesIndex = ones.length -\
  \ maxDecimalIndex;\n  const maxDecimalOnesIndex = ones.length - maxDecimalIndex;\n\
  \  const maxDecimalOnesIndex = ones.length - maxDecimalIndex;\n  const maxDecimalOnesIndex\
  \ = ones.length - maxDecimalIndex;\n  const maxDecimalOnesIndex = ones.length -\
  \ maxDecimalIndex;\n  const maxDecimalOnesIndex = ones.length - maxDecimalIndex;\n\
  \  const maxDecimalOnesIndex = ones.length - maxDecimalIndex;\n  const maxDecimalOnesIndex\
  \ = ones.length - max"
- "  arr.sort((a, b) => a - b);\n  return arr;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxOnesIndex\
  \ = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnes.toString(2);\n  const maxOnesBinLen\
  \ = maxOnesBin.length;\n  const maxOnesBinLenLen = maxOnesBinLen + 1;\n  const maxOnesBinStr\
  \ = maxOnesBin.substr(0, maxOnesBinLenLen);\n  const maxOnesBinStrLen = maxOnesBinStr.length;\n\
  \  const maxOnesBinStrLenLen = maxOnesBinStrLen + 1;\n  const maxOnesBinStrStr =\
  \ maxOnesBinStr.substr(0, maxOnesBinStrLenLen);\n  const maxOnesBinStrStrLen = maxOnesBinStrStr.length;\n\
  \  const maxOnesBinStrStrLen = maxOnesBinStrStrLen + 1;\n  const maxOnesBinStrStrStr\
  \ = maxOnesBinStrStr.substr(0, maxOnesBinStrStrLen);\n  const maxOnesBinStrStrStrLen\
  \ = maxOnesBinStrStrStr.length;\n  const maxOnesBinStrStrStrLen = maxOnesBinStrStrStrLen\
  \ + 1;\n  const maxOnesBinStrStrStrStr = maxOnesBinStrStrStr.substr(0, maxOnesBinStrStrStrLen);\n\
  \  const maxOnesBinStrStrStrStrLen = maxOnesBinStrStrStrStr.length;\n  const maxOnesBinStrStrStrStrLen\
  \ = maxOnesBinStrStrStrStrLen + 1;\n  const maxOnesBinStrStrStrStrStr = maxOnesBinStrStrStrStr.substr(0,\
  \ maxOnesBinStrStrStrStrLen);\n  const maxOnesBinStrStrStrStrStrLen = maxOnesBinStrStrStrStrStrLen\
  \ + 1;\n  const maxOnesBinStrStrStrStrStrStr = maxOnesBinStrStrStrStrStr.substr(0,\
  \ maxOnesBinStrStrStrStrStrLen);\n  const maxOnesBinStrStrStrStrStrLen = maxOnesBinStrStrStrStrStrLen\
  \ + 1;\n  const maxOnesBinStrStrStrStrStrStr = maxOnesBinStrStrStrStrStrStr.substr(0,\
  \ maxOnesBinStrStrStrStrStrStrLen);\n"
- "  return arr.sort((a: number, b: number) => {\n    if (a === b) {\n      return\
  \ 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n}\n"
- '  return arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);

  }

  '
- "  return arr.sort((a, b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n\
  \    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 &&\
  \ b === 0) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return\
  \ 0;\n    }\n    return a > b ? 1 : -1;\n  });\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((v) => v === 1);\n  const dec = ones.length ? Math.log10(ones.length)\
  \ : 0;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const\
  \ dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const dec =\
  \ Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n\
  \  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const\
  \ dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec\
  \ / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n\
  \  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const\
  \ dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n\
  \  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const\
  \ dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec\
  \ / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n\
  \  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const\
  \ dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n\
  \  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const\
  \ dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec\
  \ / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n\
  \  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const\
  \ dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n\
  \  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const\
  \ dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec\
  \ / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow("
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x > 0);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n\
  \  const maxLen = Math.max(len, maxOnes);\n  const minOnes = Math.floor(Math.log(len)\
  \ / Math.LN2);\n  const minLen = Math.min(len, minOnes);\n  const maxLen = Math.max(len,\
  \ maxOnes);\n  const maxLenLen = Math.max(maxLen, minLen);\n  const maxLenLenLen\
  \ = Math.max(maxLenLen, len);\n  const maxLenLenLenLen = Math.max(maxLenLen, maxLen);\n\
  \  const maxLenLenLenLen = Math.max(maxLenLenLen, maxLen);\n  const maxLenLenLenLen\
  \ = Math.max(maxLenLenLen, maxLen);\n  const maxLenLenLenLen = Math.max(maxLenLenLen,\
  \ maxLen);\n  const maxLenLenLenLen = Math.max(maxLenLenLen, maxLen);\n  const maxLenLenLenLen\
  \ = Math.max(maxLenLen, maxLen);\n  const maxLenLenLenLen = Math.max(maxLenLen,\
  \ maxLen);\n  const maxLenLenLenLen = Math.max(maxLenLen, maxLen);\n  const maxLenLenLenLen\
  \ = Math.max(maxLenLen, maxLen);\n  const maxLenLenLenLen = Math.max(maxLenLen,\
  \ maxLen);\n  const maxLenLenLenLen = Math.max(maxLenLen, maxLen);\n  const maxLenLenLenLen\
  \ = Math.max(maxLenLen, maxLen);\n  const maxLenLenLenLen = Math.max(maxLenLen,\
  \ maxLen);\n  const maxLenLenLenLen = Math.max(maxLenLen, maxLen);\n  const maxLenLenLenLen\
  \ = Math.max(maxLenLen, maxLen);\n  const maxLenLenLenLen = Math.max(maxLenLen,\
  \ maxLen);\n  const maxLenLenLenLen = Math.max(maxLenLen, maxLen);\n  const maxLenLenLenLen\
  \ = Math.max(maxLenLen, maxLen);\n  const maxLenLenLenLen = Math.max(maxLenLen,\
  \ maxLen);\n  const maxLenLenLenLen = Math.max(maxLenLen, maxLen);\n  const maxLenLenLenLen\
  \ = Math.max(maxLenLen, maxLen);\n  const maxLenLenLenLen = Math.max(maxLenLen,\
  \ maxLen);\n  const maxLenLenLenLen = Math.max(maxLenLen, maxLen);\n  const maxLenLenLenLen\
  \ = Math.max(maxLenLen, maxLen);"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const dec = count_decimal(arr);\n  const dec = dec === 0\
  \ ? 0 : dec;\n  const dec = dec === 0 ? 1 : dec;\n  const dec = dec === 0 ? 2 :\
  \ dec;\n  const dec = dec === 0 ? 3 : dec;\n  const dec = dec === 0 ? 4 : dec;\n\
  \  const dec = dec === 0 ? 5 : dec;\n  const dec = dec === 0 ? 6 : dec;\n  const\
  \ dec = dec === 0 ? 7 : dec;\n  const dec = dec === 0 ? 8 : dec;\n  const dec =\
  \ dec === 0 ? 9 : dec;\n  const dec = dec === 0 ? 10 : dec;\n  const dec = dec ===\
  \ 0 ? 11 : dec;\n  const dec = dec === 0 ? 12 : dec;\n  const dec = dec === 0 ?\
  \ 13 : dec;\n  const dec = dec === 0 ? 14 : dec;\n  const dec = dec === 0 ? 15 :\
  \ dec;\n  const dec = dec === 0 ? 16 : dec;\n  const dec = dec === 0 ? 17 : dec;\n\
  \  const dec = dec === 0 ? 18 : dec;\n  const dec = dec === 0 ? 19 : dec;\n  const\
  \ dec = dec === 0 ? 20 : dec;\n  const dec = dec === 0 ? 21 : dec;\n  const dec\
  \ = dec === 0 ? 22 : dec;\n  const dec = dec === 0 ? 23 : dec;\n  const dec = dec\
  \ === 0 ? 24 : dec;\n  const dec = dec === 0 ? 25 : dec;\n  const dec = dec ===\
  \ 0 ? 26 : dec;\n  const dec = dec === 0 ? 27 : dec;\n  const dec = dec === 0 ?\
  \ 28 : dec;\n  const dec = dec === 0 ? 29 : dec;\n  const dec = dec === 0 ? 30 :\
  \ dec;\n  const dec = dec === 0 ? 31 : dec;\n  const dec = dec === 0 ? 32 : dec;\n\
  \  const dec = dec === 0 ? 33 : dec;\n  const dec = dec === 0 ? 34 : dec;\n  const\
  \ dec = dec === 0 ? 35 : dec;\n  const dec = dec === 0 ? 36 : dec;\n  const dec\
  \ = dec === 0 ? 37 : dec;\n  const dec = dec === 0 ? 38 : dec;\n  const dec = dec\
  \ === 0 ? 39 : dec;\n  const dec = dec === 0 ? 40 : dec;\n  const dec = dec ===\
  \ 0 ? 41 : dec;\n  const dec = dec === 0 ? 42 : dec;\n  const dec = dec === 0 ?\
  \ 43 : dec"
- "  return arr.sort((a, b) => {\n    const aNum = count_ones(a);\n    const bNum\
  \ = count_ones(b);\n    if (aNum === bNum) {\n      return a.localeCompare(b);\n\
  \    }\n    return aNum - bNum;\n  });\n}\n"
- "  arr.sort((a, b) => a - b);\n  return arr;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x)\
  \ => Math.log2(x)));\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.min(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen =\
  \ Math.ceil(maxLen);\n  const maxLen = Math.max("
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n\
  \    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log2(len));\n  const maxOnesLen\
  \ = Math.floor(Math.pow(2, maxOnes));\n  const maxOnesLenLen = Math.pow(2, maxOnesLen);\n\
  \  const maxOnesLenLenLen = Math.pow(2, maxOnesLenLen);\n  const maxOnesLenLenLenLen\
  \ = Math.pow(2, maxOnesLenLenLen);\n  const maxOnesLenLenLenLen = Math.pow(2, maxOnesLenLenLenLen);\n\
  \  const maxOnesLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLen);\n  const\
  \ maxOnesLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLen\
  \ = Math.pow(2, maxOnesLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLen\
  \ = Math.pow(2, maxOnesLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLen\
  \ = Math.pow(2, maxOnesLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLen\
  \ = Math.pow(2, maxOnesLenLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLenLen\
  \ = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLenLen\
  \ = Math.pow(2, maxOnesLenLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLenLen\
  \ = Math.pow(2, maxOnesLenLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLenLen\
  \ = Math.pow(2, maxOnesLenLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLenLen\
  \ = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLenLenLen\
  \ = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLenLenLen\
  \ = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLenLenLen\
  \ = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLen);\n  const max"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len\
  \ === 1) {\n    return arr;\n  }\n  const ones = arr\n    .map((v) => v.toString(2).split('')\n\
  \    .filter((v) => v === '1').length)\n    .sort((a, b) => a - b);\n  const decimals\
  \ = arr\n    .map((v) => v.toString(2).split('')\n    .filter((v) => v === '1').length)\n\
  \    .sort((a, b) => a - b);\n  const decimalsLen = decimals.length;\n  const decimalsArr\
  \ = new Array(decimalsLen);\n  for (let i = 0; i < decimalsLen; i++) {\n    decimalsArr[i]\
  \ = decimals[i];\n  }\n  const decimalsArrLen = decimalsArr.length;\n  const decimalsArrArr\
  \ = new Array(decimalsArrLen);\n  for (let i = 0; i < decimalsArrLen; i++) {\n \
  \   decimalsArrArr[i] = decimalsArr[i];\n  }\n  const decimalsArrArrLen = decimalsArrArr.length;\n\
  \  const decimalsArrArrArr = new Array(decimalsArrArrLen);\n  for (let i = 0; i\
  \ < decimalsArrArrLen; i++) {\n    decimalsArrArrArr[i] = decimalsArrArr[i];\n \
  \ }\n  const decimalsArrArrArrLen = decimalsArrArrArr.length;\n  const decimalsArrArrArrArr\
  \ = new Array(decimalsArrArrArrLen);\n  for (let i = 0; i < decimalsArrArrArrLen;\
  \ i++) {\n    decimalsArrArrArrArr[i] = decimalsArrArrArr[i];\n  }\n  const decimalsArrArrArrArrLen\
  \ = decimalsArrArrArrArr.length;\n  const decimalsArrArrArrArrArr = new Array(decimalsArrArrArrArrLen);\n\
  \  for (let i = 0; i < decimalsArrArrArrArrLen; i++) {\n    decimalsArrArrArrArrArr[i]\
  \ = decimalsArrArrArrArr[i];\n  }\n  const decimalsArrArrArrArrArrLen = decimalsArrArrArrArrArr.length;\n\
  \  const decimalsArrArrArrArrArrArr = new Array(decimalsArrArrArrArrArrLen);\n \
  \ for (let i = 0; i < decimalsArrArrArrArrLen; i++) {\n    decimalsArrArrArrArrArrArr[i]\
  \ = decimalsArrArrArrArrArr[i];\n  }\n  const decimalsArrArrArrArrArrLen = decimalsArrArrArrArrArr.length;\n\
  \  const decimalsArrArrArrArrArrArr = new Array(decimalsArrArrArrArrArrLen);\n \
  \ for (let i = 0; i < decimalsArrArrArrArrArrLen; i++) {\n    decimalsArrArrArrArrArrArr[i]\
  \ = decimals"
- "  arr.sort((a: number, b: number) => {\n    if (a === 0) return 1;\n    if (b ===\
  \ 0) return -1;\n    if (a === b) return 0;\n    return a > b ? 1 : -1;\n  });\n\
  \  return arr;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr\n    .map((num) => num.toString(2).split('').reduce((acc, cur) => acc +\
  \ cur, 0))\n    .filter((num) => num > 0);\n  const decimals = arr\n    .map((num)\
  \ => num.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n    .filter((num)\
  \ => num > 0);\n  const decimalsSorted = decimals.sort((a, b) => a - b);\n  const\
  \ decimalsSortedLen = decimalsSorted.length;\n  const decimalsSortedArr = decimalsSorted.map((decimal)\
  \ => decimal * Math.pow(10, decimalsSortedLen));\n  const decimalsSortedArrLen =\
  \ decimalsSortedArr.length;\n  const decimalsSortedArr2 = decimalsSortedArr.map((decimal)\
  \ => decimal.toFixed(2));\n  const decimalsSortedArr2Len = decimalsSortedArr2.length;\n\
  \  const decimalsSortedArr3 = decimalsSortedArr2.map((decimal) => decimal.toFixed(3));\n\
  \  const decimalsSortedArr3Len = decimalsSortedArr3.length;\n  const decimalsSortedArr4\
  \ = decimalsSortedArr3.map((decimal) => decimal.toFixed(4));\n  const decimalsSortedArr4Len\
  \ = decimalsSortedArr4.length;\n  const decimalsSortedArr5 = decimalsSortedArr4.map((decimal)\
  \ => decimal.toFixed(5));\n  const decimalsSortedArr5Len = decimalsSortedArr5.length;\n\
  \  const decimalsSortedArr6 = decimalsSortedArr5.map((decimal) => decimal.toFixed(6));\n\
  \  const decimalsSortedArr6Len = decimalsSortedArr6.length;\n  const decimalsSortedArr7\
  \ = decimalsSortedArr6.map((decimal) => decimal.toFixed(7));\n  const decimalsSortedArr7Len\
  \ = decimalsSortedArr7.length;\n  const decimalsSortedArr8 = decimalsSortedArr7.map((decimal)\
  \ => decimal.toFixed(8));\n  const decimalsSortedArr8Len = decimalsSortedArr8.length;\n\
  \  const decimalsSortedArr9 = decimalsSortedArr8.map((decimal) => decimal.toFixed(9));\n\
  \  const decimalsSortedArr9Len = decimalsSortedArr9.length;\n  const decimalsSortedArr10\
  \ = decimalsSortedArr9.map((decimal) => decimal.toFixed(10));\n  const decimalsSortedArr10Len\
  \ = decimalsSortedArr10.length;\n  const decimalsSortedArr11 = decimalsSortedArr10.map((decimal)\
  \ => decimal.toFixed(11));\n  const decimalsSortedArr"
- '  return arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);

  }

  '
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return\
  \ arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    if (a === b)\
  \ {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return\
  \ -1;\n  });\n  for (let i = 0; i < len; i++) {\n    const one = ones[i];\n    const\
  \ index = arr.indexOf(one);\n    if (index > -1) {\n      arr.splice(index, 1);\n\
  \    }\n  }\n  return arr;\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((x) => x === 1 ? 1 : 0);\n  const dec = ones\n    .map((x) => Math.log2(x))\n\
  \    .sort((a, b) => a - b)\n    .map((x) => Math.pow(2, x));\n  const dec2arr =\
  \ (dec: number[]) => dec.map((x) => Math.pow(2, x));\n  const decArr = dec2arr(dec);\n\
  \  const decArr2 = decArr.map((x) => Math.round(x));\n  const decArr3 = decArr2.map((x)\
  \ => Math.ceil(x));\n  const decArr4 = decArr3.map((x) => Math.floor(x));\n  const\
  \ decArr5 = decArr4.map((x) => Math.max(x));\n  const decArr6 = decArr5.map((x)\
  \ => Math.min(x));\n  const decArr7 = decArr6.map((x) => Math.round(x));\n  const\
  \ decArr8 = decArr7.map((x) => Math.ceil(x));\n  const decArr9 = decArr8.map((x)\
  \ => Math.floor(x));\n  const decArr10 = decArr9.map((x) => Math.max(x));\n  const\
  \ decArr11 = decArr10.map((x) => Math.min(x));\n  const decArr12 = decArr11.map((x)\
  \ => Math.round(x));\n  const decArr13 = decArr12.map((x) => Math.ceil(x));\n  const\
  \ decArr14 = decArr13.map((x) => Math.floor(x));\n  const decArr15 = decArr14.map((x)\
  \ => Math.max(x));\n  const decArr16 = decArr15.map((x) => Math.min(x));\n  const\
  \ decArr17 = decArr16.map((x) => Math.round(x));\n  const decArr18 = decArr17.map((x)\
  \ => Math.ceil(x));\n  const decArr19 = decArr18.map((x) => Math.floor(x));\n  const\
  \ decArr20 = decArr19.map((x) => Math.max(x));\n  const decArr21 = decArr20.map((x)\
  \ => Math.min(x));\n  const decArr22 = decArr21.map((x) => Math.round(x));\n  const\
  \ decArr23 = decArr22.map((x) => Math.ceil(x));\n  const decArr24 = decArr23.map((x)\
  \ => Math.floor(x));\n  const decArr25 = decArr24.map((x) => Math.max(x));\n  const\
  \ decArr26 = decArr25.map((x) => Math.min(x));\n  const decArr27 = "
- "  const len = arr.length;\n  if (len < 2) return arr;\n  const ones = arr.filter((v)\
  \ => v === 1);\n  const len = ones.length;\n  if (len === 0) return arr;\n  const\
  \ maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n  const maxDec = Math.pow(10,\
  \ maxOnes);\n  const decs = ones\n    .map((v) => Math.round(v * maxDec) / maxDec)\n\
  \    .sort((a, b) => a - b);\n  const decLen = decs.length;\n  const decArr = new\
  \ Array(decLen);\n  for (let i = 0; i < decLen; i++) {\n    decArr[i] = decs[i];\n\
  \  }\n  const decArrLen = decArr.length;\n  const decArrArr = new Array(decArrLen);\n\
  \  for (let i = 0; i < decArrLen; i++) {\n    decArrArr[i] = decArr[i];\n  }\n \
  \ const decArrArrLen = decArrArr.length;\n  const decArrArrArr = new Array(decArrArrLen);\n\
  \  for (let i = 0; i < decArrArrLen; i++) {\n    decArrArrArr[i] = decArrArr[i];\n\
  \  }\n  const decArrArrArrLen = decArrArrArr.length;\n  const decArrArrArrArr =\
  \ new Array(decArrArrArrLen);\n  for (let i = 0; i < decArrArrArrLen; i++) {\n \
  \   decArrArrArrArr[i] = decArrArrArr[i];\n  }\n  const decArrArrArrArrLen = decArrArrArrArr.length;\n\
  \  const decArrArrArrArrArr = new Array(decArrArrArrArrLen);\n  for (let i = 0;\
  \ i < decArrArrArrArrLen; i++) {\n    decArrArrArrArrArr[i] = decArrArrArrArr[i];\n\
  \  }\n  const decArrArrArrArrArrLen = decArrArrArrArrArr.length;\n  const decArrArrArrArrArrArr\
  \ = new Array(decArrArrArrArrArrLen);\n  for (let i = 0; i < decArrArrArrArrArrLen;\
  \ i++) {\n    decArrArrArrArrArrArr[i] = decArrArrArrArrArrArr[i];\n  }\n  const\
  \ decArrArrArrArrArrArrLen = decArrArrArrArrArrArr.length;\n  const decArrArrArrArrArrArrArr\
  \ = new Array(decArrArrArrArrArrArrLen);\n  for (let i = 0; i < decArrArrArrArrArrArrLen;\
  \ i++) {\n    decArrArrArrArrArrArrArr[i] = decArrArrArrArrArrArrArr[i];\n  }\n\
  \  const decArrArrArrArrArrArrLen = decArrArrArrArrArrArrArr.length;\n  const decArrArrArrArrArrArrArrArr\
  \ = new "
- "  return arr.sort((a, b) => {\n    const aBin = binToInt(a)\n    const bBin = binToInt(b)\n\
  \    return aBin - bBin\n  })\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((v) => v.toString(2).replace(/1/g, '0'));\n  const sortedOnes = ones\n\
  \    .map((v) => parseInt(v, 2))\n    .sort((a, b) => a - b);\n  const decimals\
  \ = sortedOnes.map((v) => v * Math.pow(10, len - 1));\n  return sortedOnes.map((v,\
  \ i) => v + decimals[i]);\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr\n    .map((val) => val.toString(2).padStart(len, '0'))\n    .map((val) =>\
  \ parseInt(val, 2))\n    .filter((val) => val > 0);\n  const decs = arr\n    .map((val)\
  \ => val.toString(10).padStart(len, '0'))\n    .map((val) => parseInt(val, 10))\n\
  \    .filter((val) => val > 0);\n  return [...ones, ...decs]\n    .sort((a, b) =>\
  \ b - a)\n    .map((val) => parseInt(val, 10));\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((x) => x > 0);\n  const decs = arr.map((x) => Math.log10(x));\n  const\
  \ decSum = decs.reduce((a, b) => a + b, 0);\n  const decDiff = decSum - decs.reduce((a,\
  \ b) => a + b, 0);\n  const decDiff2 = decDiff / 2;\n  const decDiff3 = decDiff2\
  \ / 2;\n  const decDiff4 = decDiff3 / 2;\n  const decDiff5 = decDiff4 / 2;\n  const\
  \ decDiff6 = decDiff5 / 2;\n  const decDiff7 = decDiff6 / 2;\n  const decDiff8 =\
  \ decDiff7 / 2;\n  const decDiff9 = decDiff8 / 2;\n  const decDiff10 = decDiff9\
  \ / 2;\n  const decDiff11 = decDiff10 / 2;\n  const decDiff12 = decDiff11 / 2;\n\
  \  const decDiff13 = decDiff12 / 2;\n  const decDiff14 = decDiff13 / 2;\n  const\
  \ decDiff15 = decDiff14 / 2;\n  const decDiff16 = decDiff15 / 2;\n  const decDiff17\
  \ = decDiff16 / 2;\n  const decDiff18 = decDiff17 / 2;\n  const decDiff19 = decDiff18\
  \ / 2;\n  const decDiff20 = decDiff19 / 2;\n  const decDiff21 = decDiff20 / 2;\n\
  \  const decDiff22 = decDiff21 / 2;\n  const decDiff23 = decDiff22 / 2;\n  const\
  \ decDiff24 = decDiff23 / 2;\n  const decDiff25 = decDiff24 / 2;\n  const decDiff26\
  \ = decDiff25 / 2;\n  const decDiff27 = decDiff26 / 2;\n  const decDiff28 = decDiff27\
  \ / 2;\n  const decDiff29 = decDiff28 / 2;\n  const decDiff30 = decDiff29 / 2;\n\
  \  const decDiff31 = decDiff30 / 2;\n  const decDiff32 = decDiff31 / 2;\n  const\
  \ decDiff33 = decDiff32 / 2;\n  const decDiff34 = decDiff33 / 2;\n  const decDiff35\
  \ = decDiff34 / 2;\n  const decDiff36 = decDiff35 / 2;\n  const decDiff37 = decDiff36\
  \ / 2;\n  const decDiff38 = decDiff37 / 2;\n  const decDiff39 = decDiff38 / 2;\n\
  \  const decDiff40 = decDiff39 / 2;\n  const decDiff41 = decDiff40 / 2;\n  const\
  \ decDiff42 = decDiff41 / 2;\n  const dec"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val,\
  \ 0));\n  const maxOnes = Math.max(...ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n\
  \  const sortedArr = arr.map((val, index) => {\n    const onesIndex = index - maxOnesIndex;\n\
  \    return ones[onesIndex] ? val - ones[onesIndex] : val;\n  });\n  return sortedArr;\n\
  }\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  if (ones.length === 0) {\n    return arr;\n \
  \ }\n  const len = ones.length;\n  const maxOnes = Math.ceil(Math.log2(len));\n\
  \  const maxDec = Math.pow(10, maxOnes);\n  const decs = ones\n    .map((x) => Math.round(x\
  \ * maxDec) / maxDec)\n    .sort((a, b) => a - b);\n  const decLen = decs.length;\n\
  \  const decArr = new Array(decLen);\n  for (let i = 0; i < decLen; i++) {\n   \
  \ decArr[i] = decs[i];\n  }\n  const decArr_len = decArr.length;\n  const decArr_arr\
  \ = new Array(decArr_len);\n  for (let i = 0; i < decArr_len; i++) {\n    decArr_arr[i]\
  \ = decArr[i];\n  }\n  const decArr_arrLen = decArr_arr.length;\n  const decArr_arrArr\
  \ = new Array(decArr_arrLen);\n  for (let i = 0; i < decArr_arrLen; i++) {\n   \
  \ decArr_arrArr[i] = decArr_arr[i];\n  }\n  const decArr_arrArr_len = decArr_arrArr.length;\n\
  \  const decArr_arrArr_arr = new Array(decArr_arrArr_len);\n  for (let i = 0; i\
  \ < decArr_arrArr_len; i++) {\n    decArr_arrArr_arr[i] = decArr_arrArr_arr[i];\n\
  \  }\n  const decArr_arrArr_arrLen = decArr_arrArr_arr.length;\n  const decArr_arrArr_arrArr\
  \ = new Array(decArr_arrArr_arrLen);\n  for (let i = 0; i < decArr_arrArr_arrLen;\
  \ i++) {\n    decArr_arrArr_arrArr[i] = decArr_arrArr_arrArr[i];\n  }\n  const decArr_arrArr_arrArr_len\
  \ = decArr_arrArr_arrArr.length;\n  const decArr_arrArr_arrArr_arr = new Array(decArr_arrArr_arrArr_len);\n\
  \  for (let i = 0; i < decArr_arrArr_arrArr_len; i++) {\n    decArr_arrArr_arrArr_arr[i]\
  \ = decArr_arrArr_arrArr_arr[i];\n  }\n  const decArr_arrArr_arrArr_arrLen = decArr_arrArr_arrArr_arr.length;\n\
  \  const decArr_arrArr_arrArr_arrArr = new Array(decArr_arrArr_arrArr_arrLen);\n\
  \  for (let i = 0; i < decArr_arr"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val,\
  \ 0));\n  const dec = ones\n    .map((val) => val.toString().split('').reduce((acc,\
  \ val) => acc + +val, 0))\n    .sort((a, b) => a - b);\n  const dec2arr = (dec)\
  \ => {\n    const arr = [];\n    for (let i = 0; i < dec.length; i++) {\n      arr.push(dec[i].toString(2).split('').reduce((acc,\
  \ val) => acc + +val, 0));\n    }\n    return arr;\n  };\n  const arr2 = arr.map((val)\
  \ => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  const arr3\
  \ = dec2arr(dec);\n  const arr4 = dec2arr(dec2);\n  const arr5 = dec2arr(dec3);\n\
  \  const arr6 = dec2arr(dec4);\n  const arr7 = dec2arr(dec5);\n  const arr8 = dec2arr(dec6);\n\
  \  const arr9 = dec2arr(dec7);\n  const arr10 = dec2arr(dec8);\n  const arr11 =\
  \ dec2arr(dec9);\n  const arr12 = dec2arr(dec10);\n  const arr13 = dec2arr(dec11);\n\
  \  const arr14 = dec2arr(dec12);\n  const arr15 = dec2arr(dec13);\n  const arr16\
  \ = dec2arr(dec14);\n  const arr17 = dec2arr(dec15);\n  const arr18 = dec2arr(dec16);\n\
  \  const arr19 = dec2arr(dec17);\n  const arr20 = dec2arr(dec18);\n  const arr21\
  \ = dec2arr(dec19);\n  const arr22 = dec2arr(dec20);\n  const arr23 = dec2arr(dec21);\n\
  \  const arr24 = dec2arr(dec22);\n  const arr25 = dec2arr(dec23);\n  const arr26\
  \ = dec2arr(dec24);\n  const arr27 = dec2arr(dec25);\n  const arr28 = dec2arr(dec26);\n\
  \  const arr29 = dec2arr(dec27);\n  const arr30 = dec2arr(dec28);\n  const arr31\
  \ = dec2arr(dec29);\n  const arr32 = dec2arr(dec30);\n  const arr33 = dec2arr(dec31);\n\
  \  const arr34 = dec2arr(dec32);\n  const arr35 = de"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return\
  \ arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    const a1 =\
  \ count_ones(a);\n    const b1 = count_ones(b);\n    if (a1 === b1) {\n      return\
  \ a.localeCompare(b);\n    }\n    return a1 - b1;\n  });\n  for (let i = 0; i <\
  \ len; i++) {\n    arr[i] = arr[i] * ones[i];\n  }\n  return arr;\n}\n"
- "  return arr.sort((a, b) => a - b);\n}\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = arr.filter((x) => x === 1);\n  const dec = ones.length ? ones : arr.sort((a,\
  \ b) => a - b);\n  const hex = dec.map((x) => x.toString(16));\n  const bin = hex.map((x)\
  \ => parseInt(x, 16).toString(2));\n  return bin.map((x) => parseInt(x, 2));\n}\n"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const decimals = count_decimals(arr);\n  const decimals_len\
  \ = decimals.length;\n  const decimals_ones = count_decimals(ones);\n  const decimals_ones_len\
  \ = decimals_ones.length;\n  if (decimals_len > decimals_ones_len) {\n    return\
  \ sort_array(decimals);\n  }\n  if (decimals_len < decimals_ones_len) {\n    return\
  \ sort_array(decimals_ones);\n  }\n  const decimals_ones_sum = decimals_ones.reduce((acc,\
  \ val) => acc + val, 0);\n  const decimals_sum = decimals.reduce((acc, val) => acc\
  \ + val, 0);\n  const decimals_ones_sum_len = decimals_ones_sum.length;\n  const\
  \ decimals_sum_len = decimals_sum.length;\n  const decimals_sum_ones_len = decimals_sum.filter(val\
  \ => val === 1).length;\n  const decimals_sum_ones_sum_len = decimals_sum_ones_len\
  \ === 0 ? 0 : decimals_sum_ones_len;\n  const decimals_sum_ones_sum_len = decimals_sum_ones_len\
  \ === decimals_ones_sum_len ? decimals_sum_ones_len : decimals_ones_sum_len;\n \
  \ const decimals_sum_ones_sum_len = decimals_sum_ones_len === decimals_ones_sum_len\
  \ ? decimals_sum_ones_len : decimals_ones_sum_len;\n  const decimals_sum_ones_sum_len\
  \ = decimals_sum_ones_len === decimals_ones_sum_len ? decimals_sum_ones_len : decimals_ones_sum_len;\n\
  \  const decimals_sum_ones_sum_len = decimals_sum_ones_len === decimals_ones_sum_len\
  \ ? decimals_sum_ones_len : decimals_ones_sum_len;\n  const decimals_sum_ones_sum_len\
  \ = decimals_sum_ones_len === decimals_ones_sum_len ? decimals_sum_ones_len : decimals_ones_sum_len;\n\
  \  const decimals_sum_ones_sum_len = decimals_sum_ones_len === decimals_ones_sum_len\
  \ ? decimals_sum_ones_len : decimals_ones_sum_len;\n  const decimals_sum_ones_sum_len\
  \ = decimals_sum_ones_len === decimals_ones_sum_len ? decimals_sum_ones_len : decimals_ones_sum_len;\n\
  \  const decimals_sum_ones_sum_len = decimals_sum_ones_len === decimals_ones_sum_len\
  \ ? decimals_sum_ones_len : decimals_ones_sum_len;\n  const decimals_sum_ones_sum_len\
  \ = decimals_sum_ones_len === decimals_ones_"
- "  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones\
  \ = arr\n    .map((x) => parseInt(x.toString(2), 2))\n    .filter((x) => x > 0);\n\
  \  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const dec\
  \ = arr\n    .map((x) => parseInt(x.toString(10), 10))\n    .filter((x) => x > 0);\n\
  \  const len = dec.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes\
  \ = Math.max(...ones);\n  const maxDec = Math.max(...dec);\n  const maxLen = Math.max(maxOnes,\
  \ maxDec);\n  const onesArr = new Array(maxLen).fill(0);\n  const decArr = new Array(maxLen).fill(0);\n\
  \  for (let i = 0; i < len; i++) {\n    onesArr[ones[i]] += 1;\n    decArr[dec[i]]\
  \ += 1;\n  }\n  const sortedArr = new Array(len);\n  for (let i = 0; i < len; i++)\
  \ {\n    sortedArr[i] = decArr[dec[i]] - onesArr[ones[i]];\n  }\n  return sortedArr;\n\
  }\n"
- "  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones\
  \ = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return\
  \ arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    if (a === b)\
  \ {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return\
  \ -1;\n  });\n  for (let i = 0; i < len; i++) {\n    arr[i] = arr[i] / ones[i];\n\
  \  }\n  return arr;\n}\n"
language: ts
name: HumanEval_116_sort_array
prompt: '//In this Kata, you have to sort an array of non-negative integers according
  to

  // number of ones in their binary representation in ascending order.

  // For similar number of ones, sort based on decimal value.

  // It must be implemented like this:

  // >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]

  // >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]

  // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]

  function sort_array(arr: number[]): number[] {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2,\
  \ 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
  \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
  \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
  \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4,\
  \ 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2,\
  \ 4, 8, 16, 32]);\n}\n\ntest();"
