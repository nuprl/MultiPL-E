language: ts
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n    return strings.filter(s => s.indexOf(substring)\
    \ !== -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n  return strings.filter(s => s.indexOf(substring)\
    \ !== -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n    return strings.filter(function\
    \ (string) {\n        return string.indexOf(substring) !== -1;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n  return strings.filter(s => s.indexOf(substring)\
    \ !== -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n  return strings.filter(function (string)\
    \ {\n    return string.indexOf(substring) !== -1;\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n  return strings.filter(s => s.indexOf(substring)\
    \ !== -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n    return strings.filter(s => s.indexOf(substring)\
    \ !== -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n  return strings.filter(s => s.indexOf(substring)\
    \ !== -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n  return strings.filter(s => s.indexOf(substring)\
    \ !== -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
- exit_code: 2
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n    return strings.filter(s => s.includes(substring));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoozo8nr5.ts(7,34): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659738589
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n  return strings.filter(s => s.indexOf(substring)\
    \ !== -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n    return strings.filter(s => s.indexOf(substring)\
    \ !== -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n    return strings.filter(s => s.indexOf(substring)\
    \ !== -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n  return strings.filter(function (string)\
    \ {\n    return string.indexOf(substring) !== -1;\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n  return strings.filter(s => s.indexOf(substring)\
    \ !== -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n  return strings.filter(s => s.indexOf(substring)\
    \ !== -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n  return strings.filter(s => s.indexOf(substring)\
    \ !== -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n    return strings.filter(s => s.indexOf(substring)\
    \ !== -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n  return strings.filter(s => s.indexOf(substring)\
    \ !== -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
- exit_code: 0
  program: "//Filter an input list of strings only for ones that contain given substring\n\
    // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
    \ string[], substring: string): string[] {\n  return strings.filter(s => s.indexOf(substring)\
    \ !== -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"\
    ]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738649
