completions:
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
  }\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res * (n - i)) % p;\n\
  \  }\n  return res;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  let r = p % n;\n  return r === 0 ? n : r;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n;\n  }\n  let r = n - (p * Math.floor(n / p));\n  if\
  \ (r < 0) {\n    return p + 1;\n  }\n  return r;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  let r = 1;\n  for (let i = 1; i <= n; i++)\
  \ {\n    r *= i;\n  }\n  return r % p;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
  }\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n;\n  }\n  const q = p / n;\n  const r = n % p;\n  return\
  \ r === 0 ? q : q + modp(q, p);\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  let r = p % n;\n  return r === 0 ? n : r;\n}\n"
- "  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= p;\n    result\
  \ %= p;\n  }\n  return result;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  let r = p % n;\n  return r === 0 ? r : n % r;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
  }\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
  }\n"
- "  if (n < p) {\n    return p;\n  }\n  if (n > p) {\n    return n;\n  }\n  if (n\
  \ === p) {\n    return 0;\n  }\n  if (n === p || n === p % p) {\n    return p %\
  \ p;\n  }\n  if (n % p === 0) {\n    return p / p;\n  }\n  if (p % p === 0) {\n\
  \    return 1;\n  }\n  return modp(p / p, p);\n}\n"
- "  let result = 1;\n  for (let i = 0; i < p; i++) {\n    result *= n;\n  }\n  return\
  \ result % p;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  if (n === p) {\n    return n;\n  }\n  if\
  \ (n < 1) {\n    return 1;\n  }\n  if (n > 1) {\n    return modp(n - 1, p);\n  }\n\
  \  return n;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- '  return ((n % p) + p) % p;

  }

  '
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  const r = n % p;\n  return r === 0 ? p :\
  \ r;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n;\n  }\n  let r = p % n;\n  return r === 0 ? n : r;\n\
  }\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n;\n  }\n  let res = 1;\n  for (let i = n; i >= p; i--)\
  \ {\n    res *= i;\n  }\n  return res;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  if (n === p) {\n    return n;\n  }\n  if\
  \ (n < 1) {\n    return 1;\n  }\n  if (n > 1) {\n    return modp(n - 1, p);\n  }\n\
  \  return n;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  let res = 1;\n  for (let i = 1; i < p; i++)\
  \ {\n    res *= n;\n  }\n  return res;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  if (n < p) {\n    return p;\n  }\n  if (n > p) {\n    return n;\n  }\n  if (n\
  \ === p) {\n    return 0;\n  }\n  return ((n % p) + p) % p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n;\n  }\n  let r = p % n;\n  return r === 0 ? n : r;\n\
  }\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
  }\n"
- "  if (n < p) {\n    return n;\n  }\n  if (n === p) {\n    return n;\n  }\n  if\
  \ (n < 1) {\n    return p;\n  }\n  if (n > 1) {\n    return 1;\n  }\n  return p;\n\
  }\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  let r = p % n;\n  return r === 0 ? n : r;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n;\n  }\n  const q = p / n;\n  const r = n % p;\n  return\
  \ r === 0 ? q : q + modp(q, p);\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
  }\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  let r = p % n;\n  return r === 0 ? n : r;\n}\n"
- "  if (n < p) {\n    return p;\n  }\n  if (n === p) {\n    return n;\n  }\n  if\
  \ (n < 1) {\n    return 1;\n  }\n  if (n > 1) {\n    return modp(n - 1, p);\n  }\n\
  \  return n;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res * (n - i)) % p;\n\
  \  }\n  return res;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  let result = 1;\n  for (let i = 0; i < p; i++) {\n    result *= n;\n  }\n  return\
  \ result % p;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  return n % p;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
  }\n"
- "  if (n < p) {\n    return n;\n  }\n  let r = n % (p - 1); // r = ((n % p) + p)\
  \ % p\n  if (r < 0) {\n    return p + r;\n  }\n  return r;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
  }\n"
- "  if (n < p) {\n    return n;\n  }\n  let res = 1;\n  for (let i = 1; i < p; i++)\
  \ {\n    res *= n;\n  }\n  return res;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  return n % p;\n}\n"
- "  let r = p % n;\n  return r === 0 ? n : r;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  let r = p % n;\n  return r === 0 ? r : n % r;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  if (n < p) {\n    return p;\n  }\n  if (n > p) {\n    return n;\n  }\n  return\
  \ n % p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  let r = n % (p - 1); // r = n % p\n  if (r\
  \ < 0) {\n    return p + r;\n  }\n  return r;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  let r = n % (p - 1); // r = n % p\n  if (r\
  \ === 0) {\n    return p;\n  }\n  if (r > 0) {\n    return p - (r + 1);\n  }\n \
  \ return p;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
  }\n"
- "  if (n < p) {\n    return n;\n  }\n  let r = p % n;\n  return r === 0 ? n : r;\n\
  }\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
  }\n"
- "  if (n < p) {\n    return n;\n  }\n  if (n === p) {\n    return n;\n  }\n  if\
  \ (n < 1) {\n    return 1;\n  }\n  if (n > 1) {\n    return modp(n - 1, p);\n  }\n\
  \  return n;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  let r = 1;\n  for (let i = 0; i < p; i++) {\n    r = r * n % p;\n  }\n  return\
  \ r;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  if (n === p) {\n    return n;\n  }\n  if\
  \ (n < 1) {\n    return p;\n  }\n  if (n > 1) {\n    return 1;\n  }\n  return p;\n\
  }\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  return n % p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
  }\n"
- "  if (n < p) {\n    return n;\n  }\n  return n % p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n;\n  }\n  return n % p;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
  }\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res * (n - i)) % p;\n\
  \  }\n  return res;\n}\n"
- "  let result = 1;\n  for (let i = 0; i < p; i++) {\n    if (n % i == 0) {\n   \
  \   result *= i;\n      result %= p;\n    }\n  }\n  return result;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  let r = n % (p - 1); // r = n % p\n  if (r\
  \ < 0) {\n    return p + r;\n  }\n  return r;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  let result = 1;\n  for (let i = 0; i < p; i++) {\n    result *= n;\n  }\n  return\
  \ result % p;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  const q = p / n;\n  const r = n % p;\n  return\
  \ r === 0 ? q : q + modp(q, p);\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  let r = p % n;\n  return r === 0 ? n : r;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n;\n  }\n  if (n === p) {\n    return n;\n  }\n  if\
  \ (n < 1) {\n    return p;\n  }\n  if (n > 1) {\n    return 1;\n  }\n  return modp(n\
  \ - 1, p);\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
  }\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  if (n === p) {\n    return n;\n  }\n  if\
  \ (n < 1) {\n    return 1;\n  }\n  if (n > 1) {\n    return modp(n - 1, p);\n  }\n\
  \  return n;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  return n % p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return p;\n  }\n  if (n > p) {\n    return n;\n  }\n  if (n\
  \ === p) {\n    return 0;\n  }\n  return ((n % p) + p) % p;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  if (n === p) {\n    return 1;\n  }\n  if\
  \ (n < 1) {\n    return p;\n  }\n  if (n > 1) {\n    return modp(n - 1, p);\n  }\n\
  \  return NaN;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n;\n  }\n  const r = n % p;\n  return r === 0 ? p :\
  \ r;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  if (n === p) {\n    return n;\n  }\n  if\
  \ (n < 1) {\n    return p;\n  }\n  if (n > 1) {\n    return modp(n - 1, p);\n  }\n\
  \  return p;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  if (n === p) {\n    return n;\n  }\n  if\
  \ (n < 1) {\n    return p;\n  }\n  if (n > 1) {\n    return 1;\n  }\n  return p;\n\
  }\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
  }\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
  }\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
  }\n"
- "  if (n < p) {\n    return n;\n  }\n  return n % p;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  let r = n % (p - 1); // The result will always\
  \ be positive.\n  if (r < 0) {\n    return r + p;\n  }\n  return r;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  if (n < p) {\n    return n;\n  }\n  let res = 1;\n  while (p % 2 === 0) {\n \
  \   res *= 2;\n    p /= 2;\n  }\n  while (p % 3 === 0) {\n    res *= 3;\n    p /=\
  \ 3;\n  }\n  while (p % 5 === 0) {\n    res *= 5;\n    p /= 5;\n  }\n  return res;\n\
  }\n"
- "  if (n < p) {\n    return n;\n  }\n  return n % p;\n}\n"
- "  if (n < p) {\n    return p;\n  }\n\n  return n % p;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
  }\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n\
  }\n"
- "  if (n < p) {\n    return n;\n  }\n  if (n === p) {\n    return n;\n  }\n  if\
  \ (n < 1) {\n    return p;\n  }\n  if (n > 1) {\n    return modp(n - 1, p);\n  }\n\
  \  return p;\n}\n"
- "  let result = 1;\n  for (let i = 0; i < p; i++) {\n    result *= n;\n  }\n  return\
  \ result % p;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n;\n  }\n  let res = 1;\n  while (p % 2 === 0) {\n \
  \   res *= 2;\n    p /= 2;\n  }\n  while (p % 3 === 0) {\n    res *= 3;\n    p /=\
  \ 3;\n  }\n  while (p % 4 === 0) {\n    res *= 4;\n    p /= 4;\n  }\n  while (p\
  \ % 5 === 0) {\n    res *= 5;\n    p /= 5;\n  }\n  return res;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
- '  return ((n % p) + p) % p;

  }

  '
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res * (n - i)) % p;\n\
  \  }\n  return res;\n}\n"
- "  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n\
  \  return res;\n}\n"
- "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n"
language: ts
name: HumanEval_49_modp
prompt: '//Return 2^n modulo p (be aware of numerics).

  // >>> modp(3, 5)

  // 3

  // >>> modp(1101, 101)

  // 2

  // >>> modp(0, 101)

  // 1

  // >>> modp(3, 11)

  // 8

  // >>> modp(100, 101)

  // 1

  function modp(n: number, p: number): number {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
  \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
  \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
  \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
