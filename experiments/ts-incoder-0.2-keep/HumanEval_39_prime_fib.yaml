completions:
- "  if (n < 2) return 1;\n  if (n < 5) return prime_fib(n - 1) + 1;\n  if (n % 2\
  \ == 0) return prime_fib(n - 2) + 1;\n  if (n % 3 == 0) return prime_fib(n - 3)\
  \ + 1;\n  if (n % 5 == 0) return prime_fib(n - 5) + 1;\n  return prime_fib(n - 1)\
  \ + 1;\n}\n"
- "  let fib: number = 0;\n  let prime: number = 0;\n  let i: number;\n  for (i =\
  \ 2; i <= n; i++) {\n    prime = i;\n    fib = fib + i;\n    if (fib > n) {\n  \
  \    break;\n    }\n  }\n  return prime;\n}\n"
- "  if (n < 2) return 1;\n  if (n < 5) return prime_fib(n - 1) + 1;\n  if (n % 2\
  \ == 0) return prime_fib(n - 2) + 1;\n  if (n % 3 == 0) return prime_fib(n - 3)\
  \ + 1;\n  if (n % 5 == 0) return prime_fib(n - 5) + 1;\n  return prime_fib(n - 1)\
  \ + 1;\n}\n"
- "  if (n < 2) {\n    return n;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if\
  \ (n === 3) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return prime_fib(n\
  \ - 1) + prime_fib(n - 2);\n  }\n  if (n % 3 === 0) {\n    return prime_fib(n -\
  \ 1) + prime_fib(n - 2) + prime_fib(n - 3);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
  \ - 2) + prime_fib(n - 3) + prime_fib(n - 4);\n}\n"
- "  if (n < 2) {\n    return n;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if\
  \ (n % 2 === 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n\
  \ % 2 === 1) {\n    return prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 2);\n\
  }\n"
- "  if (n < 2) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if\
  \ (n % 2 === 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n\
  \ % 2 === 1) {\n    return prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 2);\n\
  }\n"
- "  if (n < 2) {\n    return 1;\n  }\n  if (n < 3) {\n    return 2;\n  }\n  if (n\
  \ % 2 === 0 || n % 3 === 0) {\n    return n;\n  }\n  let i = Math.floor(Math.sqrt(n));\n\
  \  if (i === 1) {\n    return n;\n  }\n  return prime_fib(i - 1) + prime_fib(i -\
  \ 2);\n}\n"
- "  if (n < 2) return 1;\n  if (n < 5) return prime_fib(n - 1) + 1;\n  if (n % 2\
  \ == 0) return prime_fib(n / 2);\n  if (n % 3 == 0) return prime_fib(n / 3) + 1;\n\
  \  if (n % 5 == 0) return prime_fib(n / 5) + 1;\n  return prime_fib(n / 5);\n}\n"
- "  if (n < 2) {\n    return n;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if\
  \ (n === 3) {\n    return 3;\n  }\n  if (n === 5) {\n    return 5;\n  }\n  if (n\
  \ === 7) {\n    return 7;\n  }\n  if (n === 11) {\n    return 11;\n  }\n  if (n\
  \ === 13) {\n    return 13;\n  }\n  if (n === 17) {\n    return 17;\n  }\n  if (n\
  \ === 19) {\n    return 19;\n  }\n  if (n === 23) {\n    return 23;\n  }\n  if (n\
  \ === 29) {\n    return 29;\n  }\n  if (n === 31) {\n    return 31;\n  }\n  if (n\
  \ === 37) {\n    return 37;\n  }\n  if (n === 41) {\n    return 41;\n  }\n  if (n\
  \ === 43) {\n    return 43;\n  }\n  if (n === 47) {\n    return 47;\n  }\n  if (n\
  \ === 53) {\n    return 53;\n  }\n  if (n === 59) {\n    return 59;\n  }\n  if (n\
  \ === 61) {\n    return 61;\n  }\n  if (n === 67) {\n    return 67;\n  }\n  if (n\
  \ === 71) {\n    return 71;\n  }\n  if (n === 73) {\n    return 73;\n  }\n  if (n\
  \ === 79) {\n    return 79;\n  }\n  if (n === 81) {\n    return 81;\n  }\n  if (n\
  \ === 89) {\n    return 89;\n  }\n  if (n === 97) {\n    return 97;\n  }\n  return\
  \ prime_fib(n - 1) + prime_fib(n - 2);\n}\n"
- "  if (n < 2) return 1;\n  if (n < 5) return prime_fib(n - 1) + 1;\n  if (n % 2\
  \ == 0) return prime_fib(n - 2) + 1;\n  if (n % 3 == 0) return prime_fib(n - 3)\
  \ + 1;\n  if (n % 5 == 0) return prime_fib(n - 5) + 1;\n  return prime_fib(n - 1)\
  \ + 1;\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if\
  \ (n % 2 === 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n\
  \ % 2 === 1) {\n    return prime_fib(n - 2) + prime_fib(n - 1);\n  }\n  return prime_fib(n\
  \ - 3) + prime_fib(n - 2);\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  if (n < 3) {\n    return n;\n  }\n  if (n\
  \ % 2 == 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 3\
  \ == 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3);\n\
  \  }\n  return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3) + prime_fib(n\
  \ - 4);\n}\n"
- "  if (n < 2) return 1;\n  if (n < 5) return prime_fib(n - 1) + prime_fib(n - 2);\n\
  \  if (n === 5) return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3) +\
  \ prime_fib(n - 4);\n  if (n === 10) return prime_fib(n - 1) + prime_fib(n - 2)\
  \ + prime_fib(n - 3) + prime_fib(n - 4) + prime_fib(n - 5) + prime_fib(n - 6);\n\
  \  if (n === 15) return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3) +\
  \ prime_fib(n - 4) + prime_fib(n - 5) + prime_fib(n - 6) + prime_fib(n - 7) + prime_fib(n\
  \ - 8);\n  if (n === 20) return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
  \ - 3) + prime_fib(n - 4) + prime_fib(n - 5) + prime_fib(n - 6) + prime_fib(n -\
  \ 7) + prime_fib(n - 8) + prime_fib(n - 9) + prime_fib(n - 10);\n  if (n === 25)\
  \ return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3) + prime_fib(n -\
  \ 4) + prime_fib(n - 5) + prime_fib(n - 6) + prime_fib(n - 7) + prime_fib(n - 8)\
  \ + prime_fib(n - 9) + prime_fib(n - 10) + prime_fib(n - 11) + prime_fib(n - 12)\
  \ + prime_fib(n - 13) + prime_fib(n - 14) + prime_fib(n - 15);\n  if (n === 30)\
  \ return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3) + prime_fib(n -\
  \ 4) + prime_fib(n - 5) + prime_fib(n - 6) + prime_fib(n - 7) + prime_fib(n - 8)\
  \ + prime_fib(n - 9) + prime_fib(n - 10) + prime_fib(n - 11) + prime_fib(n - 12)\
  \ + prime_fib(n - 13) + prime_fib(n - 14) + prime_fib(n - 15) + prime_fib(n - 16);\n\
  \  if (n === 35) return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3) +\
  \ prime_fib(n - 4) + prime_fib(n - 5) + prime_fib(n - 6) + prime_fib(n - 7) + prime_fib(n\
  \ - 8) + prime_fib(n - 9) + prime_fib(n - 10"
- "  if (n < 2) {\n    return n;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if\
  \ (n % 2 === 0) {\n    return prime_fib(n - 1) + 1;\n  }\n  if (n % 2 === 1) {\n\
  \    return prime_fib(n - 2) + 1;\n  }\n  return prime_fib(n - 3) + 1;\n}\n"
- "  let fib: number[] = [];\n  let a: number[] = [];\n  let b: number[] = [];\n \
  \ let c: number[] = [];\n  let d: number[] = [];\n  let e: number[] = [];\n  let\
  \ f: number[] = [];\n  let g: number[] = [];\n  let h: number[] = [];\n  let i:\
  \ number[] = [];\n  let j: number[] = [];\n  let k: number[] = [];\n  let l: number[]\
  \ = [];\n  let m: number[] = [];\n  let n: number[] = [];\n  let o: number[] = [];\n\
  \  let p: number[] = [];\n  let q: number[] = [];\n  let r: number[] = [];\n  let\
  \ s: number[] = [];\n  let t: number[] = [];\n  let u: number[] = [];\n  let v:\
  \ number[] = [];\n  let w: number[] = [];\n  let x: number[] = [];\n  let y: number[]\
  \ = [];\n  let z: number[] = [];\n  let a: number[] = [];\n  let b: number[] = [];\n\
  \  let c: number[] = [];\n  let d: number[] = [];\n  let e: number[] = [];\n  let\
  \ f: number[] = [];\n  let g: number[] = [];\n  let h: number[] = [];\n  let i:\
  \ number[] = [];\n  let j: number[] = [];\n  let k: number[] = [];\n  let l: number[]\
  \ = [];\n  let m: number[] = [];\n  let n: number[] = [];\n  let o: number[] = [];\n\
  \  let p: number[] = [];\n  let q: number[] = [];\n  let r: number[] = [];\n  let\
  \ s: number[] = [];\n  let t: number[] = [];\n  let u: number[] = [];\n  let v:\
  \ number[] = [];\n  let w: number[] = [];\n  let x: number[] = [];\n  let y: number[]\
  \ = [];\n  let z: number[] = [];\n  let a: number[] = [];\n  let b: number[] = [];\n\
  \  let c: number[] = [];\n  let d: number[] = [];\n  let e: number[] = [];\n  let\
  \ f: number[] = [];\n  let g: number[] = [];\n  let h: number[] = [];\n  let i:\
  \ number[] = [];\n  let j: number[] = [];\n  let k: number[] = [];\n  let l: number[]\
  \ = [];\n  let m: number[] = [];\n  let n: number[] = [];\n  let o: number[] = [];\n\
  \  let p: number[] = [];\n  let q: number[] = [];\n  let r: number[] = [];\n  let\
  \ s: number[] = [];\n  let t: number[] = [];\n  let u: number[] = [];\n  let v:\
  \ number[] = [];\n  let w: number[] = [];\n  let x: number[] = [];\n  let y: number[]\
  \ = [];\n  let z: number[] = [];\n  let a: number[] = [];\n  let b: number[] = [];\n\
  \  let c: number[]"
- "  if (n < 2) return 1;\n  if (n < 5) return prime_fib(n - 1) + 1;\n  if (n % 2\
  \ == 0) return prime_fib(n / 2);\n  if (n % 3 == 0) return prime_fib(n / 3) + 1;\n\
  \  if (n % 5 == 0) return prime_fib(n / 5) + 1;\n  return prime_fib(n / 7);\n}\n"
- "  if (n < 2) return 1;\n  if (n < 5) return prime_fib(n - 1) + 1;\n  if (n % 2\
  \ == 0) return prime_fib(n - 2) + 1;\n  if (n % 3 == 0) return prime_fib(n - 3)\
  \ + 1;\n  if (n % 5 == 0) return prime_fib(n - 5) + 1;\n  return prime_fib(n - 1)\
  \ + 1;\n}\n"
- "  if (n < 2) return 1;\n  if (n < 5) return prime_fib(n - 1) + prime_fib(n - 2);\n\
  \  if (n % 2 == 0) return prime_fib(n / 2);\n  if (n % 3 == 0) return prime_fib(n\
  \ / 3) + prime_fib(n / 3);\n  return prime_fib(n / 5) + prime_fib(n / 5);\n}\n"
- "  if (n < 2) return 1;\n  if (n < 5) return prime_fib(n - 1) + prime_fib(n - 2);\n\
  \  if (n === 5) return prime_fib(n - 1);\n  if (n === 7) return prime_fib(n - 2);\n\
  \  if (n % 2 == 0) return prime_fib(n - 3) + 1;\n  if (n % 3 == 0) return prime_fib(n\
  \ - 5) + 1;\n  if (n % 5 == 0) return prime_fib(n - 7) + 1;\n  return prime_fib(n\
  \ - 7) + 1;\n}\n"
- "  if (n < 2) {\n    return 1;\n  }\n  if (n < 3) {\n    return 2;\n  }\n  if (n\
  \ % 2 == 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 3\
  \ == 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3);\n\
  \  }\n  return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3) + prime_fib(n\
  \ - 4);\n}\n"
language: ts
name: HumanEval_39_prime_fib
prompt: '//prime_fib returns n-th number that is a Fibonacci number and it''s also
  prime.

  // >>> prime_fib(1)

  // 2

  // >>> prime_fib(2)

  // 3

  // >>> prime_fib(3)

  // 5

  // >>> prime_fib(4)

  // 13

  // >>> prime_fib(5)

  // 89

  function prime_fib(n: number): number {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
  \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
  \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n \
  \ assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
  \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
  }\n\ntest();"
