name: HumanEval_15_string_sequence
language: humaneval_to_typescript.py
prompt: "//Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n//\
  \ '0 1 2 3 4 5'\nfunction string_sequence(n: number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = string_sequence;\n  assert.deepEqual(candidate(0),\"\
  0\");\n  assert.deepEqual(candidate(3),\"0 1 2 3\");\n  assert.deepEqual(candidate(10),\"\
  0 1 2 3 4 5 6 7 8 9 10\");\n}\n\ntest();"
completions: ["  return Array.from({length: n}, (_, i) => i).join(' ');\n}\n", " \
    \ return Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", " \
    \ return Array.from(Array(n).keys()).map(i => String(i)).join(' ');\n}\n", " \
    \ return Array.from({length: n}, (_, i) => i).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from({length: n}).map((_, i)\
    \ => i.toString()).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from({length: n}, (_, i) =>\
    \ i).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from({length: n}, (_, i) => i).join(' ');\n}\n",
  "  return Array.from({length: n}, (_, i) => i).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i\
    \ => String(i)).join(' ');\n}\n", "  return Array.from({length: n}, (_, i) =>\
    \ i + 0).join(' ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n", "  return Array.from(Array(n).keys()).map(i => String(i)).join('\
    \ ');\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
