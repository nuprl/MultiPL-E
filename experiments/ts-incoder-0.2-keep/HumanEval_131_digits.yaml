name: HumanEval_131_digits
language: humaneval_to_typescript.py
prompt: "//Given a positive integer n, return the product of the odd digits.\n// Return\
  \ 0 if all digits are even.\n// For example:\n// digits(1)  == 1\n// digits(4) \
  \ == 0\n// digits(235) == 15\nfunction digits(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = digits;\n  assert.deepEqual(candidate(5),5);\n  assert.deepEqual(candidate(54),5);\n\
  \  assert.deepEqual(candidate(120),1);\n  assert.deepEqual(candidate(5014),5);\n\
  \  assert.deepEqual(candidate(98765),315);\n  assert.deepEqual(candidate(5576543),2625);\n\
  \  assert.deepEqual(candidate(2468),0);\n}\n\ntest();"
completions: ["  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result *=\
    \ 2;\n  }\n  return result;\n}\n", "  let result = 0;\n  for (let i = n; i > 0;\
    \ i /= 10) {\n    result *= i;\n  }\n  return result;\n}\n", "  let result = 0;\n\
    \  for (let i = n; i > 0; i -= 2) {\n    result *= i;\n  }\n  return result;\n\
    }\n", "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result += i;\n\
    \  }\n  return result;\n}\n", "  let result = 0;\n  for (let i = n; i > 0; i /=\
    \ 10) {\n    result *= i;\n  }\n  return result;\n}\n", "  let result = 1;\n \
    \ for (let i = 2; i <= n; i++) {\n    result *= i % 2 ? i : 1;\n  }\n  return\
    \ result;\n}\n", "  let digits: number = 0;\n  let i: number;\n  for (i = n -\
    \ 1; i >= 0; i--) {\n    digits = digits * 2 + n % 10;\n    n = Math.floor(n /\
    \ 10);\n  }\n  return digits;\n}\n", "  let digits: number = 0;\n  while (n >\
    \ 0) {\n    digits *= 10;\n    n -= n % 2;\n  }\n  return digits;\n}\n", "  let\
    \ result = 0;\n  for (let i = 0; i < n; i++) {\n    result *= 2;\n    if (result\
    \ % 2 === 1) {\n      result -= 1;\n    }\n  }\n  return result;\n}\n", "  let\
    \ result = 0;\n  for (let i = 0; i < n; i++) {\n    result *= 2;\n    if (result\
    \ % 2 === 1) {\n      result /= 2;\n    }\n  }\n  return result;\n}\n", "  let\
    \ result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result += n % 2;\n  }\n\
    \  return result;\n}\n", "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n\
    \    if (n % i === 0) {\n      result *= i;\n    }\n  }\n  return result;\n}\n",
  "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
    \  return result;\n}\n", "  let result = 0;\n  for (let i = n; i > 0; i /= 2)\
    \ {\n    result += i % 2;\n  }\n  return result;\n}\n", "  let digits: number\
    \ = 0;\n  while (n > 0) {\n    digits *= 10;\n    n -= n % 2;\n  }\n  return digits;\n\
    }\n", "  let product = 1;\n  let digit = 0;\n  while (n > 0) {\n    digit = n\
    \ % 10;\n    product = product * digit;\n    n = Math.floor(n / 10);\n  }\n  return\
    \ product;\n}\n", "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product\
    \ *= i % 2 ? i : 1;\n  }\n  return product;\n}\n", "  let product = 1;\n  for\
    \ (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i : 1;\n  }\n  return product;\n\
    }\n", "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n\
    \  }\n  return result;\n}\n", "  let result = 0;\n  for (let i = 0; i < n; i++)\
    \ {\n    result *= 2;\n    if (result % 2 === 1) {\n      result -= 1;\n    }\n\
    \  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
