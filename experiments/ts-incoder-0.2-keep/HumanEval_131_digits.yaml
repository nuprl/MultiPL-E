completions:
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result *= 2;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i -= 2) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result += i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i % 2 ? i :\
  \ 1;\n  }\n  return result;\n}\n"
- "  let digits: number = 0;\n  let i: number;\n  for (i = n - 1; i >= 0; i--) {\n\
  \    digits = digits * 2 + n % 10;\n    n = Math.floor(n / 10);\n  }\n  return digits;\n\
  }\n"
- "  let digits: number = 0;\n  while (n > 0) {\n    digits *= 10;\n    n -= n % 2;\n\
  \  }\n  return digits;\n}\n"
- "  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result *= 2;\n    if (result\
  \ % 2 === 1) {\n      result -= 1;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result *= 2;\n    if (result\
  \ % 2 === 1) {\n      result /= 2;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result += n % 2;\n \
  \ }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n \
  \     result *= i;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result += i % 2;\n \
  \ }\n  return result;\n}\n"
- "  let digits: number = 0;\n  while (n > 0) {\n    digits *= 10;\n    n -= n % 2;\n\
  \  }\n  return digits;\n}\n"
- "  let product = 1;\n  let digit = 0;\n  while (n > 0) {\n    digit = n % 10;\n\
  \    product = product * digit;\n    n = Math.floor(n / 10);\n  }\n  return product;\n\
  }\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result *= 2;\n    if (result\
  \ % 2 === 1) {\n      result -= 1;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result += i % 2;\n \
  \ }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n    if (n\
  \ % i == 0) {\n      result /= i;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  let remainder = 0;\n  for (let i = 0; i < n; i++) {\n    remainder\
  \ = n % 10;\n    result += remainder * digitOdds(remainder);\n    n = Math.floor(n\
  \ / 10);\n  }\n  return result;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i -= 2) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let result = 0;\n  while (n > 0) {\n    if (n % 2 === 1) {\n      result *= 10;\n\
  \      result += n % 10;\n    }\n    n = Math.floor(n / 10);\n  }\n  return result;\n\
  }\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result *= 10;\n    result\
  \ += i % 2;\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i -= 2) {\n    result *= 2;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += n % 10;\n\
  \  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result *= 2;\n    if\
  \ (i % 2 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n}\n"
- "  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i -= 2) {\n    result *= 2;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result *= 2;\n    if (result\
  \ > 9) {\n      result -= 9;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n \
  \     result *= i;\n      result %= 10;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let result = 0;\n  while (n > 0) {\n    result *= 10;\n    result += n % 10;\n\
  \    n /= 10;\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let result = 0;\n  while (n > 0) {\n    result *= 10;\n    result += n % 10;\n\
  \    n /= 10;\n  }\n  return result;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n\
  \  return product;\n}\n"
- "  let digits: number = 0;\n  while (n > 0) {\n    digits *= 10;\n    n -= n % 2;\n\
  \  }\n  return digits;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 1) {\n  \
  \    result *= 2;\n    }\n    n /= 2;\n  }\n  return result;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result *= 2;\n    if (result\
  \ % 2 === 1) {\n      result -= 1;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result *= 2;\n    if (result\
  \ % 2 === 0) {\n      result /= 2;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += i % 2 ? i\
  \ : 1;\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 1) {\n\
  \      result *= i;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= i % 2 ? 2 :\
  \ 1;\n  }\n  return product;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += i % 2 ? 1\
  \ : -1;\n  }\n  return result;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result *= 2;\n    if (result\
  \ % 2 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result *= 2;\n    if (n\
  \ % 2 === 1) {\n      result += (n - i) / i;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i -= 2) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 2 === 1) {\n  \
  \    result *= i;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 2 === 1) {\n  \
  \    result *= i;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 1) {\n\
  \      result *= i;\n    }\n  }\n  return result;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n\
  \  return product;\n}\n"
- "  let digits: number[] = [];\n  let i = 1;\n  while (n > 0) {\n    digits.push(n%10);\n\
  \    n /= 10;\n    i++;\n  }\n  return digits.length ? digits.reduce((a,b)=>a*b)\
  \ : 0\n}\n"
- "  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n % 10;\n \
  \   n /= 10;\n  }\n  return product;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result += i % 2;\n \
  \ }\n  return result;\n}\n"
- "  let digits: number = 0;\n  while (n > 0) {\n    digits *= 10;\n    n -= n % 2;\n\
  \  }\n  return digits;\n}\n"
- "  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result *= 2;\n    if (result\
  \ % 2 === 0) {\n      result /= 2;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let digits: number = 0;\n  while (n > 0) {\n    digits *= 10;\n    n -= n % 2;\n\
  \  }\n  return digits;\n}\n"
- "  let digits: number = 0;\n  for (let i = 2; i <= n; i++) {\n    digits *= i;\n\
  \  }\n  return digits;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i -= 2) {\n    result *= 2;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result *= 2;\n    if (result\
  \ % 2 === 1) {\n      result -= 1;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result *= 2;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result *= i % 2;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i == 0) {\n  \
  \    result *= i;\n      result %= 10;\n    }\n  }\n  return result;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result *= 2;\n    if (result\
  \ % 2 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n}\n"
- "  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i % 2 ? i :\
  \ 1;\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let digits: number = 0;\n  while (n > 0) {\n    digits *= 10;\n    n -= n % 10;\n\
  \  }\n  return digits;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i -= 2) {\n    result *= 2;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let digits: number = 0;\n  for (let i = n; i > 0; i /= 10) {\n    digits *= 10;\n\
  \  }\n  return digits;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i -= 2) {\n    result *= 2;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result += i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i -= 2) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n    if (n\
  \ % i === 0) {\n      return 0;\n    }\n  }\n  return result;\n}\n"
- "  let digits: number[] = [];\n  let i = 1;\n  while (n > 1) {\n    digits.push(n%10);\n\
  \    n /= 10;\n    i++;\n  }\n  if (digits.length === 0) {\n    return 0;\n  }\n\
  \  else {\n    return digits[digits.length-1];\n  }\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n\
  \  return product;\n}\n"
- "  let digits: number = 0;\n  while (n > 0) {\n    digits *= 10;\n    n -= n % 2;\n\
  \  }\n  return digits;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let digits: number[] = [];\n  let product: number = 0;\n  for (let i = 0; i <\
  \ n; i++) {\n    if (n % 2 == 1) {\n      product = product * 10;\n      product\
  \ = product + n % 10;\n    }\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n\
  \  }\n  if (product == 0) {\n    return 0;\n  }\n  return product;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let digits: number[] = [];\n  let isEven: boolean;\n  for (let i = 0; i < n;\
  \ i++) {\n    isEven = (n % 2 === 0);\n    digits.push(isEven ? n / 2 : n % 2);\n\
  \  }\n  return digits.reduce((a, b) => a * b);\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 1) {\n\
  \      result *= i;\n    }\n  }\n  return result;\n}\n"
- "  let digits: number[] = [];\n  let i = 0;\n  while (n > 0) {\n    digits.push(n%10);\n\
  \    n /= 10;\n    i++;\n  }\n  if (digits.length == 0) return 0;\n  while (digits.length\
  \ < i) {\n    digits.push(0);\n  }\n  return digits.reduce((a, b) => a*b);\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n \
  \     result *= i;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result += i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result *= 2;\n    if (result\
  \ % 2 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 1) {\n\
  \      result *= 10;\n    }\n    result += i % 10;\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result += i % 2;\n \
  \ }\n  return result;\n}\n"
- "  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result += i % 2;\n \
  \ }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result *= 2;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result += i % 2;\n \
  \ }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let result = 0;\n  let remainder = 0;\n  for (let i = 0; i < n; i++) {\n    remainder\
  \ = n % 10;\n    result = result * 10 + remainder;\n    n = Math.floor(n / 10);\n\
  \  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let result = 0;\n  while (n > 0) {\n    result *= 10;\n    result += n % 10;\n\
  \    n /= 10;\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return\
  \ result;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let digits: number = 0;\n  while (n > 0) {\n    digits *= 10;\n    n -= n % 2;\n\
  \  }\n  return digits;\n}\n"
- "  let product = 1;\n  let digit = 0;\n  while (n > 0) {\n    digit = n % 10;\n\
  \    product = product * digit;\n    n = Math.floor(n / 10);\n  }\n  return product;\n\
  }\n"
- "  let result = 0;\n  for (let i = n; i > 0; i -= 2) {\n    result *= 2;\n  }\n\
  \  return result;\n}\n"
- "  let digits: number[] = [];\n  let isEven: boolean;\n  for (let i = 0; i <= n;\
  \ i++) {\n    isEven = n % 2 === 0;\n    digits.push(isEven ? i : n - i);\n    n\
  \ = Math.floor(n / 10);\n  }\n  return digits.length === 0 ? 0 : digits[digits.length\
  \ - 1];\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  let factor = 1;\n  while (n > 1) {\n    if (n % 2 == 1) {\n\
  \      result *= factor;\n    }\n    n /= 2;\n    factor *= 10;\n  }\n  return result;\n\
  }\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result *= 2;\n  }\n\
  \  return result;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let digits: number = 0;\n  for (let i = 2; i <= n; i++) {\n    digits *= i;\n\
  \  }\n  return digits;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i == 0) {\n  \
  \    result *= i;\n      result %= 10;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result += i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let digits: number[] = [];\n  let isEven: boolean;\n  for (let i = 1; i <= n;\
  \ i++) {\n    isEven = i % 2 === 0;\n    digits.push(isEven ? i : 0);\n  }\n  return\
  \ digits.length === 0 ? 0 : digits.reduce((a, b) => a * b);\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result *= 2;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= 10;\n   \
  \ result += i % 2;\n  }\n  return result;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i -= 2) {\n    result *= 2;\n  }\n\
  \  return result;\n}\n"
- "  let digits: number[] = [];\n  let i = 1;\n  while (n > 0) {\n    digits.push(n\
  \ % 10);\n    n /= 10;\n    i++;\n  }\n  if (digits.length === 0) {\n    return\
  \ 0;\n  }\n  while (digits.length < i) {\n    digits.unshift(0);\n  }\n  return\
  \ digits.reduce((a, b) => a * b) / digits.length;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i -= 2) {\n    result *= 2;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result += i % 2 ? 1\
  \ : -1;\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result *= 2;\n    if (result\
  \ % 2 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 1) {\n\
  \      result *= 10;\n    }\n    result += i % 10;\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let product = 1;\n  let digit = 0;\n  while (n > 0) {\n    digit = n % 10;\n\
  \    product = product * digit;\n    n = Math.floor(n / 10);\n  }\n  return product;\n\
  }\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  while (n > 0) {\n    if (n % 2 === 1) {\n      result -= 1;\n\
  \    }\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let result = 0;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 == 1) {\n   \
  \   result *= 2;\n    }\n    n /= 2;\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i -= 2) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 10) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i == 0) {\n  \
  \    result *= i;\n      result %= 10;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  let remainder = n % 10;\n  while (n > 0) {\n    if (n % 2\
  \ === 1) {\n      result -= 1;\n    }\n    remainder = n % 10;\n    n = Math.floor((n\
  \ - remainder) / 10);\n  }\n  return result;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let digits: number = 0;\n  for (let i = n; i > 0; i /= 10) {\n    digits *= 10;\n\
  \  }\n  return digits;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i % 2 ? i\
  \ : 1;\n  }\n  return product;\n}\n"
- "  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n\
  \  return product;\n}\n"
- "  let result = 0;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 1) {\n  \
  \    result *= 2;\n    }\n    n /= 2;\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result += i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result *= 2;\n    if (result\
  \ % 2 === 1) {\n      result /= 2;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result *= i;\n  }\n\
  \  return result;\n}\n"
- "  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n    if (n\
  \ % i == 0) {\n      return 0;\n    }\n  }\n  return result;\n}\n"
- "  let result = 0;\n  for (let i = n; i > 0; i /= 2) {\n    result *= 2;\n  }\n\
  \  return result;\n}\n"
- "  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i % 2 ? i :\
  \ n - i;\n  }\n  return result;\n}\n"
- "  let digits: number = 0;\n  while (n) {\n    digits *= 10;\n    n -= n % 2;\n\
  \  }\n  return digits;\n}\n"
language: ts
name: HumanEval_131_digits
prompt: '//Given a positive integer n, return the product of the odd digits.

  // Return 0 if all digits are even.

  // For example:

  // digits(1)  == 1

  // digits(4)  == 0

  // digits(235) == 15

  function digits(n: number): number {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = digits;\n  assert.deepEqual(candidate(5),5);\n  assert.deepEqual(candidate(54),5);\n\
  \  assert.deepEqual(candidate(120),1);\n  assert.deepEqual(candidate(5014),5);\n\
  \  assert.deepEqual(candidate(98765),315);\n  assert.deepEqual(candidate(5576543),2625);\n\
  \  assert.deepEqual(candidate(2468),0);\n}\n\ntest();"
